train:
  name: multi
  path: ${model_path}
  cmd: pwd; export MAIN_ROOT=`realpath ${PWD}/../../../`; export PATH=${MAIN_ROOT}:${MAIN_ROOT}/utils:${PATH}; export LC_ALL=C; export PYTHONDONTWRITEBYTECODE=; export PYTHONIOENCODING=UTF-8; export PYTHONPATH=${MAIN_ROOT}:${PYTHONPATH}; export BIN_DIR=${MAIN_ROOT}/paddlespeech/s2t/exps/${model_bin}/bin; bash path.sh; bash ${MAIN_ROOT}/utils/parse_options.sh; bash ./local/data.sh; ckpt=$(basename ${conf_path} | awk -F'.' '{print $1}'); bash ./local/train.sh ${conf_path} ${ckpt}

eval:
  name: avg
  path: ${model_path}
  cmd:  pwd; export MAIN_ROOT=`realpath ${PWD}/../../../`; export PATH=${MAIN_ROOT}:${MAIN_ROOT}/utils:${PATH}; export LC_ALL=C; export PYTHONDONTWRITEBYTECODE=; export PYTHONIOENCODING=UTF-8; export PYTHONPATH=${MAIN_ROOT}:${PYTHONPATH}; export BIN_DIR=${MAIN_ROOT}/paddlespeech/s2t/exps/${model_bin}/bin; avg_num=1; avg.sh best exp/${ckpt}/checkpoints ${avg_num}

infer: skipped

export:
  name: export
  path: ${model_path}
  cmd:  pwd; export MAIN_ROOT=`realpath ${PWD}/../../../`; export PATH=${MAIN_ROOT}:${MAIN_ROOT}/utils:${PATH}; export LC_ALL=C; export PYTHONDONTWRITEBYTECODE=; export PYTHONIOENCODING=UTF-8; export PYTHONPATH=${MAIN_ROOT}:${PYTHONPATH}; export BIN_DIR=${MAIN_ROOT}/paddlespeech/s2t/exps/${model_bin}/bin; ckpt=$(basename ${conf_path} | awk -F'.' '{print $1}'); avg_num=1; avg_ckpt=avg_${avg_num}; ./local/export.sh ${conf_path} exp/${ckpt}/checkpoints/${avg_ckpt} exp/${ckpt}/checkpoints/${avg_ckpt}.jit

predict:
  name: test
  path: ${model_path}
  cmd: pwd; export MAIN_ROOT=`realpath ${PWD}/../../../`; export PATH=${MAIN_ROOT}:${MAIN_ROOT}/utils:${PATH}; export LC_ALL=C; export PYTHONDONTWRITEBYTECODE=; export PYTHONIOENCODING=UTF-8; export PYTHONPATH=${MAIN_ROOT}:${PYTHONPATH}; export BIN_DIR=${MAIN_ROOT}/paddlespeech/s2t/exps/${model_bin}/bin; decode_conf_path=conf/tuning/decode.yaml; ckpt=$(basename ${conf_path} | awk -F'.' '{print $1}'); avg_num=1; avg_ckpt=avg_${avg_num}; ./local/test.sh ${conf_path} ${decode_conf_path} exp/${ckpt}/checkpoints/${avg_ckpt}
