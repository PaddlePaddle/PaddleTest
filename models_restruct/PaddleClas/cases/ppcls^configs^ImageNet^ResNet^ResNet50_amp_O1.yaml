case:
  linux:
    base: ./base/ImageNet_base.yaml
    train:
      -
        name: single
        cmd: python tools/train.py -c ${rd_yaml_path}
        params:
          - -o Global.epochs=10
          - -o Global.save_interval=10
          - -o Global.eval_interval=10
          - -o Global.seed=1234
          - -o DataLoader.Train.loader.num_workers=1
          - -o Optimizer.lr.name=Cosine
          - -o DataLoader.Train.sampler.shuffle=False
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="
      -
        name: multi
        cmd: python -m paddle.distributed.launch tools/train.py -c ${rd_yaml_path}
        params:
          - -o Global.epochs=20
          - -o Global.save_interval=20
          - -o Global.eval_interval=20
          - -o Global.seed=1234
          - -o DataLoader.Train.loader.num_workers=1
          - -o Optimizer.lr.name=Cosine
          - -o DataLoader.Train.sampler.shuffle=False
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="
    eval:
      -
        name: trained
        cmd: python -m paddle.distributed.launch tools/eval.py -c ${rd_yaml_path}
        params:
          - -o Global.pretrained_model=${eval_trained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="
      -
        name: pretrained
        cmd: python -m paddle.distributed.launch tools/eval.py -c ${rd_yaml_path}
        params:
          - -o Global.pretrained_model=${eval_pretrained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="
    infer:
      -
        name: trained
        cmd: python tools/infer.py -c ${rd_yaml_path}
        params:
          - -o Global.pretrained_model=${eval_trained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          class_ids:
            base: "[22, 22, 22, 22, 22]"
            threshold: 0
            evaluation: "="
      -
        name: pretrained
        cmd: python tools/infer.py -c ${rd_yaml_path}
        params:
          - -o Global.pretrained_model=${eval_pretrained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          class_ids:
            base: "[8, 7, 86, 82, 476]"
            threshold: 0
            evaluation: "="
    export:
      -
        name: trained
        cmd: python tools/export_model.py -c ${rd_yaml_path}
        params:
          - -o Global.pretrained_model=${eval_trained_model}
          - -o Global.save_inference_dir=${export_trained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
      -
        name: pretrained
        cmd: python tools/export_model.py -c ${rd_yaml_path}
        params:
          - -o Global.pretrained_model=${eval_pretrained_model}
          - -o Global.save_inference_dir=${export_pretrained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
    predict:
      -
        name: trained
        cmd: python python/predict_cls.py
        params:
          - -c configs/inference_cls.yaml
          - -o Global.infer_imgs="./images"
          - -o Global.inference_model_dir=${predict_trained_model}
          - -o Global.use_gpu=${set_cuda_flag}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          class_ids:
            base: "[11, 11, 11, 11]"
            threshold: 0
            evaluation: "="
      -
        name: pretrained
        cmd: python python/predict_cls.py
        params:
          - -c configs/inference_cls.yaml
          - -o Global.infer_imgs="./images"
          - -o Global.inference_model_dir=${predict_pretrained_model}
          - -o Global.use_gpu=${set_cuda_flag}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          class_ids:
            base: "[443, 84, 808, 511]"
            threshold: 0
            evaluation: "="

  linux_convergence:
    base: ./base/ImageNet_base.yaml
    train:
      -
        name: single_convergence
        cmd: python tools/train.py -c ${rd_yaml_path}
        params:
          - -o Global.epochs=3
          - -o DataLoader.Train.dataset.image_root=big_dataset/ILSVRC2012
          - -o DataLoader.Train.dataset.cls_label_path=big_dataset/ILSVRC2012/train_list.txt
          - -o DataLoader.Eval.dataset.image_root=big_dataset/ILSVRC2012
          - -o DataLoader.Eval.dataset.cls_label_path=big_dataset/ILSVRC2012/val_list.txt
          - -o Global.save_interval=3
          - -o Global.eval_interval=3
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="
      -
        name: multi_convergence
        cmd: python -m paddle.distributed.launch tools/train.py -c ${rd_yaml_path}
        params:
          - -o Global.epochs=5
          - -o DataLoader.Train.dataset.image_root=big_dataset/ILSVRC2012
          - -o DataLoader.Train.dataset.cls_label_path=big_dataset/ILSVRC2012/train_list.txt
          - -o DataLoader.Eval.dataset.image_root=big_dataset/ILSVRC2012
          - -o DataLoader.Eval.dataset.cls_label_path=big_dataset/ILSVRC2012/val_list.txt
          - -o Global.save_interval=5
          - -o Global.eval_interval=5
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="
      -
        name: multi_static_convergence
        cmd: python -m paddle.distributed.launch ppcls/static/train.py -c ${rd_yaml_path}
        params:
          - -o Global.epochs=5
          - -o DataLoader.Train.dataset.image_root=big_dataset/ILSVRC2012
          - -o DataLoader.Train.dataset.cls_label_path=big_dataset/ILSVRC2012/train_list.txt
          - -o DataLoader.Eval.dataset.image_root=big_dataset/ILSVRC2012
          - -o DataLoader.Eval.dataset.cls_label_path=big_dataset/ILSVRC2012/val_list.txt
          - -o Global.save_interval=5
          - -o Global.eval_interval=5
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0
            evaluation: "="

  # linux_cpu:  #暂时只写了cpu，一般不会有人用cpu_eval
    # base: ./base/ImageNet_base.yaml
  #   train:
  #     -
  #       name: cpu
  #       params:
  #         - -o Global.device=cpu
  #       result:
  #         exit_code: 0

  windows:
    base: ./base/ImageNet_base.yaml
    train: skipped
    eval: skipped
    infer: skipped
    export: skipped
    predict: skipped

  windows_cpu:
    base: ./base/ImageNet_base.yaml
    train: skipped
    eval: skipped
    infer: skipped
    export: skipped
    predict: skipped


  mac:
    base: ./base/ImageNet_base.yaml
    train: skipped
    eval: skipped
    infer: skipped
    export: skipped
    predict: skipped

function: paddlelas_imagenet_parse
