case:
  linux:
    base: ./base/GeneralRecognition_base.yaml
    train:
      -
        name: multi
        cmd : -m paddle.distributed.launch tools/train.py
        params:
          - -o Global.epochs=5
          - -o Global.save_interval=5
          - -o DataLoader.Train.sampler.batch_size=32
          - -o DataLoader.Train.loader.num_workers=0
          - -o DataLoader.Train.sampler.shuffle=False
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: single
        cmd : tools/train.py
        params:
          - -o Global.epochs=2
          - -o Global.save_interval=2
          - -o DataLoader.Train.sampler.batch_size=32
          - -o DataLoader.Train.loader.num_workers=0
          - -o DataLoader.Train.sampler.shuffle=False
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: multi_static
        cmd : -m paddle.distributed.launch ppcls/static/train.py
        params:
          - -o Global.epochs=5
          - -o Global.save_interval=5
          - -o DataLoader.Train.sampler.batch_size=32
          - -o DataLoader.Train.loader.num_workers=0
          - -o DataLoader.Train.sampler.shuffle=False
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: single_static
        cmd : ppcls/static/train.py
        params:
          - -o Global.epochs=2
          - -o Global.save_interval=2
          - -o DataLoader.Train.sampler.batch_size=32
          - -o DataLoader.Train.loader.num_workers=0
          - -o DataLoader.Train.sampler.shuffle=False
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: multi_convergence
        cmd : -m paddle.distributed.launch tools/train.py
      -
        name: single_convergence
        cmd : tools/train.py
    eval:
      -
        name: trained
        cmd: -m paddle.distributed.launch tools/eval.py
        params:
          - -o Global.pretrained_model=${eval_trained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: pretrained
        cmd: -m paddle.distributed.launch tools/eval.py
        params:
          - -o Global.pretrained_model=${eval_pretrained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: single_trained
        cmd:  tools/eval.py
        params:
          - -o Global.pretrained_model=${eval_trained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
      -
        name: single_pretrained
        cmd:  tools/eval.py
        params:
          - -o Global.pretrained_model=${eval_pretrained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          ${kpi_value_eval}:
            base: 20
            threshold: 0.01
            evaluation: "-"
    infer: skipped
    export:
      -
        name: trained
        cmd: tools/export_model.py
        params:
          - -o Global.pretrained_model=${eval_trained_model}
          - -o Global.save_inference_dir=${export_trained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
      -
        name: pretrained
        cmd: tools/export_model.py
        params:
          - -o Global.pretrained_model=${eval_pretrained_model}
          - -o Global.save_inference_dir=${export_pretrained_model}
          - -o Global.output_dir=output/${qa_yaml_name}
    predict:
      -
        name: trained
        cmd: python/predict_system.py
        params:
          - -c configs/inference_general.yaml
          - -o Global.use_gpu=${set_cuda_flag}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          class_ids:
            base: [11, 11, 11, 11]
            threshold: 0
            evaluation: "="
      -
        name: pretrained
        cmd: python/predict_system.py
        params:
          - -c configs/inference_general.yaml
          - -o Global.use_gpu=${set_cuda_flag}
          - -o Global.output_dir=output/${qa_yaml_name}
        result:
          class_ids:
            base: [443, 84, 808, 511]
            threshold: 0
            evaluation: "="

  # linux_cpu: #考虑是否剔除，只用mac覆盖cpu的情况  #暂时只写了cpu，一般不会有人用cpu_eval
    # base: ./base/GeneralRecognition_base.yaml
  #   train:
  #     -
  #       name : cpu
  #       params:
  #         - -o Global.device=cpu
  #       result:
  #         exit_code: 0

  windows:
    base: ./base/GeneralRecognition_base.yaml

  # windows_cpu: #考虑是否剔除，只用mac覆盖cpu的情况
    # base: ./base/GeneralRecognition_base.yaml

  mac:
    base: ./base/GeneralRecognition_base.yaml
    train:
      -
        name : mac
        params:
          - -o Global.device=${set_cuda_flag}
    eval:
      -
        name : eval
        params:
          - -o Global.device=${set_cuda_flag}
    infer: skipped
    export:
      -
        name : export
        params:
          - -o Global.device=${set_cuda_flag}
    predict:
      -
        name : predict
        params:
          - -o Global.device=${set_cuda_flag}

function: paddlelas_imagenet_parse
