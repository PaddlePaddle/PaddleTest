csp_pan_ConvBNLayer_0:
  desc: "Det ppdet.modeling.necks.csp_pan.ConvBNLayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.ConvBNLayer"
    params:
      in_channel: 48
      out_channel: 48
      kernel_size: 3
      stride: 1
      groups: 1
      act: 'leaky_relu'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      x:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 48, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

csp_pan_DPModule_0:
  desc: "Det ppdet.modeling.necks.csp_pan.DPModule模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.DPModule"
    params:
      in_channel: 48
      out_channel: 48
      kernel_size: 3
      stride: 1
      act: 'leaky_relu'
      use_act_in_out: True
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      x:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 48, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

csp_pan_DarknetBottleneck_0:
  desc: "Det ppdet.modeling.necks.csp_pan.DarknetBottleneck模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.DarknetBottleneck"
    params:
      in_channels: 32
      out_channels: 64
      kernel_size: 3
      expansion: 0.5
      add_identity: True
      use_depthwise: False
      act: "leaky_relu"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      x:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 32, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

csp_pan_CSPLayer_0:
  desc: "Det ppdet.modeling.necks.csp_pan.CSPLayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.CSPLayer"
    params:
      in_channels: 32
      out_channels: 32
      kernel_size: 3
      expand_ratio: 0.5
      num_blocks: 1
      add_identity: True
      use_depthwise: False
      act: "leaky_relu"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      x:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 32, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

csp_pan_Channel_T_0:
  desc: "Det ppdet.modeling.necks.csp_pan.Channel_T模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.Channel_T"
    params:
      in_channels: [116, 232, 464]
      out_channels: 96
      act: "leaky_relu"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      x:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 116, 16, 16]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 232, 16, 16]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 464, 16, 16]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[2]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

csp_pan_CSPPAN_0:
  desc: "Det ppdet.modeling.necks.csp_pan.CSPPAN模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.CSPPAN"
    params:
      in_channels: [116]
      out_channels: 96
      kernel_size: 5
      num_features: 3
      num_csp_blocks: 1
      use_depthwise: True
      act: 'hard_swish'
      spatial_scales: [0.125]
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        !!python/tuple
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 116, 128, 128]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

csp_pan_CSPPAN_1:
  desc: "Det ppdet.modeling.necks.csp_pan.CSPPAN模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.csp_pan.CSPPAN"
    params:
      in_channels: [116, 232, 464]
      out_channels: 96
      kernel_size: 5
      num_features: 3
      num_csp_blocks: 1
      use_depthwise: True
      act: 'hard_swish'
      spatial_scales: [0.125, 0.0625, 0.03125]
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        !!python/tuple
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 116, 128, 128]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 232, 64, 64]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 464, 32, 32]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0000001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001
