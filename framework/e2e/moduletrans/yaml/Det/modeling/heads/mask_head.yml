mask_head_MaskFeat_0:
  desc: "Det ppdet.modeling.heads.mask_head.MaskFeat模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.heads.mask_head.MaskFeat"
    params:
      in_channel: 128
      out_channel: 128
      num_convs: 4
      norm_type:
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      feats:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 128, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.000001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

#mask_head_MaskHead_0:
#  desc: "Det ppdet.modeling.heads.mask_head.MaskHead模型结构"
#  Layer:
#    repo: "PaddleDetection"
#    layer_name: "ppdet.modeling.heads.mask_head.MaskHead"
#    params:
#      head: "**ppdet.modeling.heads.mask_head.MaskFeat()"
#      roi_extractor: {'resolution': 14, 'sampling_ratio': 0, 'aligned': True, 'spatial_scale': [0.25, 0.125, 0.0625, 0.03125, 0.015625]}
#      mask_assigner: '**ppdet.modeling.proposal_generator.target_layer.MaskAssigner()'
#      num_classes: 80
#      share_bbox_feat: False
#      export_onnx: False
#  DataGenerator:
#    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
#    data:
#      body_feats:
#        -
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [1, 256, 168, 256]
#          range: [ -1, 1]
#        -
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [1, 256, 84, 128]
#          range: [ -1, 1]
#        -
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [1, 256, 42, 64]
#          range: [ -1, 1]
#        -
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [1, 256, 21, 32]
#          range: [ -1, 1]
#        -
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [1, 256, 11, 16]
#          range: [ -1, 1]
#      rois:
#        -
#          generate_way: "random"
#          type: "Tensor"
#          dtype: "float32"
#          shape: [512, 4]
#          range: [ 0, 1000]
#      rois_num:
#        generate_way: "solid"
#        type: "Tensor"
#        dtype: "int32"
#        value: [512]
#      inputs:
#        im_id:
#          generate_way: "solid"  # random, solid, load
#          type: "Tensor"
#          dtype: "int64"
#          value: [ [424481]]
#        is_crowd:
#          -
#            generate_way: "solid"  # random, solid, load
#            type: "Tensor"
#            dtype: "int32"
#            value: [[0], [0]]
#        gt_class:
#          -
#            generate_way: "solid"
#            type: "Tensor"
#            dtype: "int32"
#            value: [[4], [0]]
#        gt_bbox:
#          -
#            generate_way: "random"  # random, solid, load
#            type: "Tensor"
#            dtype: "float32"
#            shape: [2, 4]
#            range: [ 0, 1000]
#        gt_poly:
#          -
#            generate_way: "random"  # random, solid, load
#            type: "Tensor"
#            dtype: "float32"
#            value: [[[[955.191478729248, 424.13116455078125, 918.6170501708984, 401.2642822265625, 798.2393493652344, 392.12066650390625, 719.0, 346.4183654785156, 345.670166015625, 382.9770812988281, 248.14361572265625, 277.83343505859375, 171.9573974609375, 285.46624755859375, 229.85638427734375, 428.695068359375, 152.14361572265625, 446.9822998046875, 243.56390380859375, 468.3226013183594, 583.3881530761719, 503.3705139160156, 591.0052490234375, 529.2747802734375, 595.5691833496094, 558.2164306640625, 615.3829345703125, 559.7429809570312, 633.670166015625, 556.70556640625, 639.7606506347656, 529.2747802734375, 623.0, 509.46099853515625, 623.0, 492.7003479003906, 659.5744323730469, 498.79083251953125, 665.6649169921875, 539.92919921875, 683.9521179199219, 552.1259155273438, 696.1488342285156, 550.5993041992188, 708.329833984375, 541.4557495117188, 702.2393493652344, 523.1685180664062, 693.0957336425781, 489.647216796875, 833.2872161865234, 498.79083251953125, 839.3777008056641, 527.7482299804688, 842.4308166503906, 564.3226318359375, 875.9521331787109, 565.83349609375, 889.6596755981445, 553.6524658203125, 888.1488571166992, 527.7482299804688, 879.005241394043, 520.1311645507812, 859.1914825439453, 477.46624755859375, 906.4360580444336, 477.46624755859375, 924.7075347900391, 459.17901611328125, 962.8085250854492, 434.80133056640625]], [[668.5763854980469, 408.8341064453125, 669.8825988769531, 406.2373962402344, 670.7481994628906, 403.20001220703125, 672.0544128417969, 399.29705810546875, 673.7855834960938, 396.7003479003906, 676.3822937011719, 394.087890625, 678.1291809082031, 392.3567199707031, 681.5914611816406, 390.1849060058594, 684.1882019042969, 387.58819580078125, 684.6288452148438, 387.16326904296875, 686.8006286621094, 383.6852722167969, 686.3599853515625, 380.22296142578125, 687.2255554199219, 375.4544372558594, 690.70361328125, 370.670166015625, 693.3003234863281, 370.2452392578125, 698.06884765625, 370.2452392578125, 713.6806335449219, 368.93902587890625, 720.6209716796875, 383.2603454589844, 715.8524475097656, 387.16326904296875, 713.6806335449219, 390.1849060058594, 711.5088500976562, 393.6629638671875, 710.2183532714844, 394.96917724609375, 706.7403259277344, 397.5658874511719, 706.3153991699219, 398.87213134765625, 709.352783203125, 401.4688720703125, 712.3901672363281, 403.20001220703125, 713.6806335449219, 404.5062255859375, 717.5836181640625, 405.3717956542969, 718.0242614746094, 407.5436096191406, 716.2931213378906, 409.69964599609375, 668.1514587402344, 410.14031982421875]]]]
#        curr_iter:
#          generate_way: "solid"
#          type: "Tensor"
#          dtype: "int64"
#          value: [0]
#        image:
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [1, 3, 672, 1024]
#          range: [ -1, 1]
#        im_shape:
#          generate_way: "solid"
#          type: "Tensor"
#          dtype: "float32"
#          value:  [[672.         , 1007.21313477]]
#        scale_factor:
#          generate_way: "solid"
#          type: "Tensor"
#          dtype: "float32"
#          value: [[1.57377052, 1.57377052]]
#        epoch_id:
#          generate_way: "solid"
#          type: "int"
#          dtype: "int64"
#          value: 0
#        targets:
#          !!python/tuple
#          -
#            -
#              generate_way: "random"  # random, solid, load
#              type: "Tensor"
#              dtype: "int32"
#              shape: [512]
#              range: [ 80, 81]
#          -
#            -
#              generate_way: "random"  # random, solid, load
#              type: "Tensor"
#              dtype: "float32"
#              shape: [512, 4]
#              range: [ 0, 1000]
#          -
#            -
#              generate_way: "random"  # random, solid, load
#              type: "Tensor"
#              dtype: "int64"
#              shape: [512]
#              range: [ 0, 2]
#        bbox_feat:
#          generate_way: "random"  # random, solid, load
#          type: "Tensor"
#          dtype: "float32"
#          shape: [512, 1024]
#          range: [ 0, 1]
#        feat_func:
#  Loss:
#    loss_name: "diy.loss.diy_loss.naive_loss_list"
#    params:
#      loss_list: ['logit["loss_bbox"] + logit["loss_giou"] + 0.1 * logit["loss_class_aux"] + 0.1 * logit["loss_bbox_aux"] + 0.1 * logit["loss_giou_aux"]']
#  optimizer:
#    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
#    params:
#      opt_api: "paddle.optimizer.SGD"
#      learning_rate: 0.001
#  Train:
#    step: 3
#  test:
#    dygraph_to_static_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_to_static_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_to_infer_predict_test:
#      acc_test: False
#      delta: 0.000001
#      rtol: 0.000001
##    dygraph_train_test:
##      delta: 0.00000001
##      rtol: 0.00000001
##    dygraph_predict_test:
##      delta: 0.00000001
##      rtol: 0.00000001
##    static_train_test:
##      delta: 0.00000001
##      rtol: 0.00000001
##    static_predict_test:
##      delta: 0.00000001
##      rtol: 0.00000001
