cascade_head_CascadeTwoFCHead_0:
  desc: "Det ppdet.modeling.heads.cascade_head.CascadeTwoFCHead模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.heads.cascade_head.CascadeTwoFCHead"
    params:
      in_channel: 256
      out_channel: 1024
      resolution: 7
      num_cascade_stage: 3
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      rois_feat:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 12544]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

cascade_head_CascadeXConvNormHead_0:
  desc: "Det ppdet.modeling.heads.cascade_head.CascadeXConvNormHead模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.heads.cascade_head.CascadeXConvNormHead"
    params:
      in_channel: 256
      num_convs: 4
      conv_dim: 256
      out_channel: 1024
      resolution: 7
      norm_type: 'gn'
      freeze_norm: False
      num_cascade_stage: 3
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      rois_feat:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 256, 7, 7]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

#cascade_head_CascadeHead_0:
#  desc: "Det ppdet.modeling.heads.cascade_head.CascadeHead模型结构"
#  Layer:
#    repo: "PaddleDetection"
#    layer_name: "ppdet.modeling.heads.cascade_head.CascadeHead"
#    params:
#        head: "**ppdet.modeling.heads.cascade_head.CascadeTwoFCHead"
#        in_channel: 256
#        roi_extractor: "**_get_class_default_kwargs(RoIAlign)"
#        bbox_assigner: 'BboxAssigner'
#        num_classes: 80
#        bbox_weight: [[10., 10., 5., 5.], [20.0, 20.0, 10.0, 10.0], [30.0, 30.0, 15.0, 15.0]]
#        num_cascade_stages: 4
#        bbox_loss:
#        reg_class_agnostic: True
#        stage_loss_weights:
#        loss_normalize_pos: False
#  DataGenerator:
#    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
#    data:
#      rois_feat:
#        generate_way: "random"  # random, solid, load
#        type: "Tensor"
#        dtype: "float64"
#        shape: [4, 256, 7, 7]
#        range: [ -1, 1]
#  Loss:
#    loss_name: "diy.loss.diy_loss.naive_loss_list"
#    params:
#      loss_list: ['logit']
#  optimizer:
#    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
#    params:
#      opt_api: "paddle.optimizer.SGD"
#      learning_rate: 0.00001
#  Train:
#    step: 3
#  test:
#    dygraph_to_static_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_to_static_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_to_infer_predict_test:
#      acc_test: False
#      delta: 0.000001
#      rtol: 0.000001
##    dygraph_train_test:
##      delta: 0.00000001
##      rtol: 0.00000001
##    dygraph_predict_test:
##      delta: 0.00000001
##      rtol: 0.00000001
