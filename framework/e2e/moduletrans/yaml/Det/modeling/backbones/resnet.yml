resnet_ConvNormLayer_0:
  desc: "Det ppdet.modeling.backbones.resnet.ConvNormLayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.ConvNormLayer"
    params:
      ch_in: 6
      ch_out: 8
      filter_size: 5
      stride: 2
      groups: 1
      act:
      norm_type: 'bn'
      norm_decay: 0.
      freeze_norm: True
      lr: 1.0
      dcn_v2: False
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 6, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

resnet_SELayer_0:
  desc: "Det ppdet.modeling.backbones.resnet.SELayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.SELayer"
    params:
      ch: 32
      reduction_ratio: 4
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 32, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

resnet_BasicBlock_0:
  desc: "Det ppdet.modeling.backbones.resnet.BasicBlock模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.BasicBlock"
    params:
      ch_in: 8
      ch_out: 8
      stride: 1
      shortcut: True
      variant: 'b'
      groups: 1
      base_width: 64
      lr: 0.8
      norm_type: 'bn'
      norm_decay: 0.
      freeze_norm: True
      dcn_v2: False
      std_senet: False
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

resnet_BottleNeck_0:
  desc: "Det ppdet.modeling.backbones.resnet.BottleNeck模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.BottleNeck"
    params:
      ch_in: 8
      ch_out: 16
      stride: 2
      shortcut: False
      variant: 'b'
      groups: 1
      base_width: 4
      lr: 1.0
      norm_type: 'bn'
      norm_decay: 0.
      freeze_norm: True
      dcn_v2: False
      std_senet: False
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

resnet_Blocks_0:
  desc: "Det ppdet.modeling.backbones.resnet.Blocks模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.Blocks"
    params:
      block: "**ppdet.modeling.backbones.resnet.BasicBlock"
      ch_in: 32
      ch_out: 32
      count: 2
      name_adapter: "**ppdet.modeling.backbones.name_adapter.NameAdapter(self)"
      stage_num: 2
      variant: 'b'
      groups: 1
      base_width: 64
      lr: 1.0
      norm_type: 'bn'
      norm_decay: 0.
      freeze_norm: True
      dcn_v2: False
      std_senet: False
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 32, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0000001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    build_dygraph_train_ground_truth:
#      mode: 'numpy'
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

resnet_ResNet_0:
  desc: "Det ppdet.modeling.backbones.resnet.ResNet模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.ResNet"
    params:
      depth: 50
      ch_in: 64
      variant: 'b'
      lr_mult_list: [1.0, 1.0, 1.0, 1.0]
      groups: 1
      base_width: 64
      norm_type: 'bn'
      norm_decay: 0
      freeze_norm: True
      freeze_at: 0
      return_idx: [0, 1, 2, 3]
      dcn_v2_stages: [-1]
      num_stages: 4
      std_senet: False
  DataGenerator:
    DataGenerator_name: "diy.data.struct_img_dataset.DictImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 3, 224, 224]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['0.0001 * logit[3]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0000001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

resnet_Res5Head_0:
  desc: "Det ppdet.modeling.backbones.resnet.Res5Head模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.resnet.Res5Head"
    params:
      depth: 50
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      roi_feat:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 1024, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
