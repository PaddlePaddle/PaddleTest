hrnet_ConvNormLayer_0:
  desc: "Det ppdet.modeling.backbones.hrnet.ConvNormLayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.ConvNormLayer"
    params:
      ch_in: 8
      ch_out: 16
      filter_size: 3
      stride: 1
      norm_type: 'bn'
      norm_groups: 8
      use_dcn: False
      norm_decay: 0.
      freeze_norm: False
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [5, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_ConvNormLayer_1:
  desc: "Det ppdet.modeling.backbones.hrnet.ConvNormLayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.ConvNormLayer"
    params:
      ch_in: 8
      ch_out: 16
      filter_size: 3
      stride: 1
      norm_type: 'gn'
      norm_groups: 8
      use_dcn: False
      norm_decay: 0.
      freeze_norm: False
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [5, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_Layer1_0:
  desc: "Det ppdet.modeling.backbones.hrnet.Layer1模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.Layer1"
    params:
      num_channels: 8
      has_se: True
      norm_decay: 0.
      freeze_norm: False
      name: 'Layer1'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [5, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_TransitionLayer_0:
  desc: "Det ppdet.modeling.backbones.hrnet.TransitionLayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.TransitionLayer"
    params:
      in_channels: [128]
      out_channels: [18, 36]
      norm_decay: 0.0001
      freeze_norm: False
      name: 'TransitionLayer'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 128, 16, 16]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[1]']  # opt.step()报错
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_Branches_0:
  desc: "Det ppdet.modeling.backbones.hrnet.Branches模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.Branches"
    params:
      block_num: 2
      in_channels: [32, 32]
      out_channels: [32, 32]
      has_se: True
      norm_decay: 0.
      freeze_norm: False
      name: 'Branches'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [5, 32, 16, 16]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [5, 32, 16, 16]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0] + logit[1]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test: #动转静报错
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_Branches_1:
  desc: "Det ppdet.modeling.backbones.hrnet.Branches模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.Branches"
    params:
      block_num: 2
      in_channels: [32, 32]
      out_channels: [32, 32]
      has_se: True
      norm_decay: 0.
      freeze_norm: False
      name: 'Branches'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [2, 5, 32, 16, 16]
        range: [ -1, 1]

  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0] + logit[1]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test: #动转静报错
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001

hrnet_BottleneckBlock_0:
  desc: "Det ppdet.modeling.backbones.hrnet.BottleneckBlock模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.BottleneckBlock"
    params:
      num_channels: 16
      num_filters: 4
      has_se: True
      stride: 1
      downsample: False
      norm_decay: 0.
      freeze_norm: True
      name: "BottleneckBlock"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [3, 16, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_BasicBlock_0:
  desc: "Det ppdet.modeling.backbones.hrnet.BasicBlock模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.BasicBlock"
    params:
      num_channels: 8
      num_filters: 8
      stride: 1
      has_se: False
      downsample: False
      norm_decay: 0.001
      freeze_norm: False
      name: "BasicBlock"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [3, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_SELayer_0:
  desc: "Det ppdet.modeling.backbones.hrnet.SELayer模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.SELayer"
    params:
      num_channels: 32
      num_filters: 32
      reduction_ratio: 4
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [3, 32, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_Stage_0:
  desc: "Det ppdet.modeling.backbones.hrnet.Stage模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.Stage"
    params:
      num_channels: [18, 36]
      num_modules: 1
      num_filters: [18, 36]
      has_se: False
      norm_decay: 0.
      freeze_norm: True
      multi_scale_output: True
      name: 'Stage'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 18, 56, 56]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 36, 28, 28]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_HighResolutionModule_0:
  desc: "Det ppdet.modeling.backbones.hrnet.HighResolutionModule模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.HighResolutionModule"
    params:
      num_channels: [8, 16]
      num_filters: [8, 16]
      has_se: False
      multi_scale_output: True
      norm_decay: 0.
      freeze_norm: True
      name: "HighResolutionModule"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 8, 56, 56]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 16, 28, 28]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_FuseLayers_0:
  desc: "Det ppdet.modeling.backbones.hrnet.FuseLayers模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.FuseLayers"
    params:
      in_channels: [8, 16]
      out_channels: [8, 16]
      multi_scale_output: True
      norm_decay: 0.
      freeze_norm: True
      name: "FuseLayers"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      input:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 8, 56, 56]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 16, 28, 28]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit[0]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

hrnet_HRNet_0:
  desc: "Det ppdet.modeling.backbones.hrnet.HRNet模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.backbones.hrnet.HRNet"
    params:
      width: 18
      has_se: False
      freeze_at: 0
      freeze_norm: True
      norm_decay: 0.
      return_idx: [0, 1, 2, 3]
      upsample: False
  DataGenerator:
    DataGenerator_name: "diy.data.struct_img_dataset.DictImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 3, 224, 224]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['100 * logit[3]']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
#    dygraph_train_test:
#      delta: 0.00000001
#      rtol: 0.00000001
#    dygraph_predict_test:
#      delta: 0.00000001
#      rtol: 0.00000001
