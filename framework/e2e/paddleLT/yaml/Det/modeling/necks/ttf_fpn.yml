ttf_fpn_Upsample_0:
  desc: "Det ppdet.modeling.necks.ttf_fpn.Upsample模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.ttf_fpn.Upsample"
    params:
      ch_in: 8
      ch_out: 16
      norm_type: 'bn'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      feat:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 8, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

ttf_fpn_DeConv_0:
  desc: "Det ppdet.modeling.necks.ttf_fpn.DeConv模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.ttf_fpn.DeConv"
    params:
      ch_in: 14
      ch_out: 16
      norm_type: 'bn'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 14, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

ttf_fpn_LiteUpsample_0:
  desc: "Det ppdet.modeling.necks.ttf_fpn.LiteUpsample模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.ttf_fpn.LiteUpsample"
    params:
      ch_in: 16
      ch_out: 32
      norm_type: 'bn'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 16, 32, 32]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.000001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

ttf_fpn_ShortCut_0:
  desc: "Det ppdet.modeling.necks.ttf_fpn.ShortCut模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.ttf_fpn.ShortCut"
    params:
      layer_num: 3
      ch_in: 16
      ch_out: 16
      norm_type: 'bn'
      lite_neck: False
      name: "ShortCut"
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      feat:
        generate_way: "random"  # random, solid, load
        type: "Tensor"
        dtype: "float64"
        shape: [4, 16, 16, 16]
        range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.00001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001

ttf_fpn_TTFFPN_0:
  desc: "Det ppdet.modeling.necks.ttf_fpn.TTFFPN模型结构"
  Layer:
    repo: "PaddleDetection"
    layer_name: "ppdet.modeling.necks.ttf_fpn.TTFFPN"
    params:
      in_channels: [16, 32, 64, 128]
      planes: [32, 16, 8]
      shortcut_num: [3, 2, 1]
      norm_type: 'bn'
      lite_neck: False
      fusion_method: 'add'
  DataGenerator:
    DataGenerator_name: "diy.data.single_img_dataset.SingleImageWithoutLabel"
    data:
      inputs:
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 16, 64, 64]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 32, 32, 32]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 64, 16, 16]
          range: [ -1, 1]
        -
          generate_way: "random"  # random, solid, load
          type: "Tensor"
          dtype: "float64"
          shape: [4, 128, 8, 8]
          range: [ -1, 1]
  Loss:
    loss_name: "diy.loss.diy_loss.naive_loss_list"
    params:
      loss_list: ['logit']
  optimizer:
    optimizer_name: "diy.optimizer.diy_opt.naive_opt"
    params:
      opt_api: "paddle.optimizer.SGD"
      learning_rate: 0.0000001
  Train:
    step: 3
  test:
    dygraph_to_static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_to_infer_predict_test:
      acc_test: False
      delta: 0.000001
      rtol: 0.000001
    dygraph_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    dygraph_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_train_test:
      delta: 0.00000001
      rtol: 0.00000001
    static_predict_test:
      delta: 0.00000001
      rtol: 0.00000001
