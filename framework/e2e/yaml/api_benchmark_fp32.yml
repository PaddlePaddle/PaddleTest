Conv2D_0:
  desc: "二维卷积 0"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      in_channels: 1
      out_channels: 1
      kernel_size: 1
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
  pytorch:
    api_name: "torch.nn.Conv2d"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups}

Conv2D_1:
  desc: "二维卷积 1"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 1
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
  pytorch:
    api_name: "torch.nn.Conv2d"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups}

Conv2D_2:
  desc: "二维卷积 2"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      in_channels: 100
      out_channels: 100
      kernel_size: 1
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
  pytorch:
    api_name: "torch.nn.Conv2d"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups}

randn_0:
  desc: "标准正态分布 0"
  enable_backward: false
  paddle:
    api_name: "paddle.randn"
    params:
      shape: [ 1, 1, 1, 1 ]
  pytorch:
    api_name: "torch.randn"
    mapping:
      ins: {x: input, shape: size}

randn_1:
  desc: "标准正态分布 1"
  enable_backward: false
  paddle:
    api_name: "paddle.randn"
    params:
      shape: [ 10, 10, 10, 10 ]
  pytorch:
    api_name: "torch.randn"
    mapping:
      ins: {x: input, shape: size}

randn_2:
  desc: "标准正态分布 2"
  enable_backward: false
  paddle:
    api_name: "paddle.randn"
    params:
      shape: [ 10, 10, 100, 100 ]
  pytorch:
    api_name: "torch.randn"
    mapping:
      ins: {x: input, shape: size}

Linear_0:
  desc: "线性层 0"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1]
        range: [ -1, 1 ]
    params:
      in_features: 1
      out_features: 1
  pytorch:
    api_name: "torch.nn.Linear"
    mapping:
      ins: {x: input, in_features: in_features, out_features: out_features}

Linear_1:
  desc: "线性层 1"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 100]
        range: [ -1, 1 ]
    params:
      in_features: 100
      out_features: 100
  pytorch:
    api_name: "torch.nn.Linear"
    mapping:
      ins: {x: input, in_features: in_features, out_features: out_features}

Linear_2:
  desc: "线性层 0"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1000, 1000]
        range: [ -1, 1 ]
    params:
      in_features: 100
      out_features: 100
  pytorch:
    api_name: "torch.nn.Linear"
    mapping:
      ins: {x: input, in_features: in_features, out_features: out_features}

split_0:
  desc: "tensor分割 0"
  enable_backward: false
  paddle:
    api_name: "paddle.split"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
    params:
      num_or_sections: 1
      axis: 2
  pytorch:
    api_name: "torch.split"
    mapping:
      ins: {x: tensor, num_or_sections: split_size_or_sections, axis: dim}

split_1:
  desc: "tensor分割 1"
  enable_backward: false
  paddle:
    api_name: "paddle.split"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
    params:
      num_or_sections: 2
      axis: 2
  pytorch:
    api_name: "torch.split"
    mapping:
      ins: {x: tensor, num_or_sections: split_size_or_sections, axis: dim}

split_2:
  desc: "tensor分割 1"
  enable_backward: false
  paddle:
    api_name: "paddle.split"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
    params:
      num_or_sections: 2
      axis: 2
  pytorch:
    api_name: "torch.split"
    mapping:
      ins: {x: tensor, num_or_sections: split_size_or_sections, axis: dim}

rand_0:
  desc: "均匀分布 0"
  enable_backward: false
  paddle:
    api_name: "paddle.rand"
    params:
      shape: [ 1, 1, 1, 1 ]
  pytorch:
    api_name: "torch.rand"
    mapping:
      ins: {x: input, shape: size}

rand_1:
  desc: "均匀分布 1"
  enable_backward: false
  paddle:
    api_name: "paddle.rand"
    params:
      shape: [ 10, 10, 10, 10 ]
  pytorch:
    api_name: "torch.rand"
    mapping:
      ins: {x: input, shape: size}

rand_2:
  desc: "均匀分布 2"
  enable_backward: false
  paddle:
    api_name: "paddle.rand"
    params:
      shape: [ 10, 10, 100, 100 ]
  pytorch:
    api_name: "torch.rand"
    mapping:
      ins: {x: input, shape: size}

all_0:
  desc: "对指定维度上的Tensor元素进行逻辑与运算 0"
  paddle:
    api_name: "paddle.all"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
    params:
      axis: 2
      keepdim: False
  pytorch:
    api_name: "torch.all"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

all_1:
  desc: "对指定维度上的Tensor元素进行逻辑与运算 1"
  paddle:
    api_name: "paddle.all"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
    params:
      axis: 2
      keepdim: False
  pytorch:
    api_name: "torch.all"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

all_2:
  desc: "对指定维度上的Tensor元素进行逻辑与运算 2"
  paddle:
    api_name: "paddle.all"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
    params:
      axis: 2
      keepdim: False
  pytorch:
    api_name: "torch.all"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

ReLU_0:
  desc: "ReLU激活层 0"
  paddle:
    api_name: "paddle.nn.ReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.nn.ReLU"
    mapping:
      ins: {x: input}

ReLU_1:
  desc: "ReLU激活层 1"
  paddle:
    api_name: "paddle.nn.ReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.nn.ReLU"
    mapping:
      ins: {x: input}

ReLU_2:
  desc: "ReLU激活层 2"
  paddle:
    api_name: "paddle.nn.ReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.nn.ReLU"
    mapping:
      ins: {x: input}

clone_0:
  desc: "对输入Tensor x 进行拷贝 0"
  enable_backward: false
  paddle:
    api_name: "paddle.clone"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.clone"
    mapping:
      ins: {x: input}

clone_1:
  desc: "对输入Tensor x 进行拷贝 1"
  enable_backward: false
  paddle:
    api_name: "paddle.clone"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.clone"
    mapping:
      ins: {x: input}

clone_2:
  desc: "对输入Tensor x 进行拷贝 2"
  enable_backward: false
  paddle:
    api_name: "paddle.clone"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.clone"
    mapping:
      ins: {x: input}

transpose_0:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 0"
  enable_backward: false
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      perm: [3, 0, 1, 2]
  pytorch:
    api_name: "torch.permute"
    mapping:
      ins: {x: input, perm: dims}

transpose_1:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 1"
  enable_backward: false
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      perm: [3, 0, 1, 2]
  pytorch:
    api_name: "torch.permute"
    mapping:
      ins: {x: input, perm: dims}

transpose_2:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 2"
  enable_backward: false
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      perm: [3, 0, 1, 2]
  pytorch:
    api_name: "torch.permute"
    mapping:
      ins: {x: input, perm: dims}

#where_0:
#  desc: "该OP返回一个根据输入 condition, 选择 x 或 y 的元素组成的多维 Tensor 0"
#  enable_backward: false
#  paddle:
#    api_name: "paddle.where"
#    params:
#      condition: true
#      x:
#        random: true
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#      y:
#        random: true
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.where"
#    mapping:
#      ins: {condition: input, x: x, y: y}

sort_0:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 0"
  enable_backward: false
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      descending: False
  pytorch:
    api_name: "torch.sort"
    mapping:
      ins: {x: input, axis: dim, descending: descending}

sort_1:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 1"
  enable_backward: false
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      descending: False
  pytorch:
    api_name: "torch.sort"
    mapping:
      ins: {x: input, axis: dim, descending: descending}

sort_2:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 2"
  enable_backward: false
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      descending: False
  pytorch:
    api_name: "torch.sort"
    mapping:
      ins: {x: input, axis: dim, descending: descending}

Dropout_0:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 0"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout"
    mapping:
      ins: {x: input, p: p}

Dropout_1:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 1"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout"
    mapping:
      ins: {x: input, p: p}

Dropout_2:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 2"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout"
    mapping:
      ins: {x: input, p: p}

#stack_0:
#  desc: "沿 axis 轴对输入 x 进行堆叠操作 0"
#  enable_backward: false
#  paddle:
#    api_name: "paddle.stack"
#    inputs:
#      x:
#        -
#          random: true
#          dtype: "float32"
#          shape: [ 1, 1, 1, 1 ]
#          range: [ -1, 1 ]
#        -
#          random: true
#          dtype: "float32"
#          shape: [ 1, 1, 1, 1 ]
#          range: [ -1, 1 ]
#    params:
#      axis: -1
#  pytorch:
#    api_name: "torch.stack"
#    mapping:
#      ins: {x: input, axis: dim}

randint_0:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor 0"
  enable_backward: false
  paddle:
    api_name: "paddle.randint"
    params:
      low: -100
      high: 100
      shape: [1, 1, 1, 1]
  pytorch:
    api_name: "torch.randint"
    mapping:
      ins: {low: low, high: high, shape: size}

randint_1:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor 1"
  enable_backward: false
  paddle:
    api_name: "paddle.randint"
    params:
      low: -100
      high: 100
      shape: [10, 10, 10, 10]
  pytorch:
    api_name: "torch.randint"
    mapping:
      ins: {low: low, high: high, shape: size}

randint_2:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor 2"
  enable_backward: false
  paddle:
    api_name: "paddle.randint"
    params:
      low: -100
      high: 100
      shape: [10, 10, 100, 100]
  pytorch:
    api_name: "torch.randint"
    mapping:
      ins: {low: low, high: high, shape: size}

median_0:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数 0"
  enable_backward: false
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.median"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

median_1:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数 1"
  enable_backward: false
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.median"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

median_2:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数 2"
  enable_backward: false
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.median"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

MaxPool2D_0:
  desc: "二维最大池化层 0"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
      ceil_mode: False
      return_mask: False
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: {x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices}

MaxPool2D_1:
  desc: "二维最大池化层 1"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      ceil_mode: False
      return_mask: False
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: {x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices}

MaxPool2D_2:
  desc: "二维最大池化层 0"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      ceil_mode: False
      return_mask: False
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: {x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices}

#CrossEntropyLoss_0:
#  desc: "交叉熵损失 0"
#  paddle:
#    api_name: "paddle.nn.CrossEntropyLoss"
#    inputs:
#      input:
#        random: true
#        dtype: "float32"
#        shape: [ 1, 1 ]
#        range: [ -1, 1 ]
#      label:
#        random: true
#        dtype: "int64"
#        shape: [ 1 ]
#        range: [ 1, 5 ]
#    params:
#      weight:
#      ignore_index: -100
#      reduction: 'mean'
#  pytorch:
#    api_name: "torch.nn.CrossEntropyLoss"
#    mapping:
#      ins: {x: input, weight: weight, ignore_index: ignore_index, reduction: reduction}

Embedding_0:
  desc: "embedding嵌入层 0"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      x:
        random: true
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ 0, 3 ]
    params:
      num_embeddings: 4
      embedding_dim: 4
      padding_idx:
      sparse: False
  pytorch:
    api_name: "torch.nn.Embedding"
    mapping:
      ins: {x: input, num_embeddings: num_embeddings, embedding_dim: embedding_dim, padding_idx: padding_idx, sparse: sparse}

Embedding_1:
  desc: "embedding嵌入层 1"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      x:
        random: true
        dtype: "int32"
        shape: [ 10, 10, 10, 10 ]
        range: [ 0, 3 ]
    params:
      num_embeddings: 4
      embedding_dim: 4
      padding_idx:
      sparse: False
  pytorch:
    api_name: "torch.nn.Embedding"
    mapping:
      ins: {x: input, num_embeddings: num_embeddings, embedding_dim: embedding_dim, padding_idx: padding_idx, sparse: sparse}

Embedding_2:
  desc: "embedding嵌入层 2"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      x:
        random: true
        dtype: "int32"
        shape: [ 10, 10, 100, 100 ]
        range: [ 0, 3 ]
    params:
      num_embeddings: 4
      embedding_dim: 4
      padding_idx:
      sparse: False
  pytorch:
    api_name: "torch.nn.Embedding"
    mapping:
      ins: {x: input, num_embeddings: num_embeddings, embedding_dim: embedding_dim, padding_idx: padding_idx, sparse: sparse}

empty_0:
  desc: "大小为shape并且数据类型为dtype的Tensor 0"
  enable_backward: false
  paddle:
    api_name: "paddle.empty"
    params:
      shape: [ 1, 1, 1, 1 ]
      dtype:
  pytorch:
    api_name: "torch.empty"
    mapping:
      ins: {shape: size, dtype: dtype}

empty_1:
  desc: "大小为shape并且数据类型为dtype的Tensor 1"
  enable_backward: false
  paddle:
    api_name: "paddle.empty"
    params:
      shape: [ 10, 10, 10, 10 ]
      dtype:
  pytorch:
    api_name: "torch.empty"
    mapping:
      ins: {shape: size, dtype: dtype}

empty_2:
  desc: "大小为shape并且数据类型为dtype的Tensor 2"
  enable_backward: false
  paddle:
    api_name: "paddle.empty"
    params:
      shape: [ 10, 10, 100, 100 ]
      dtype:
  pytorch:
    api_name: "torch.empty"
    mapping:
      ins: {shape: size, dtype: dtype}

equal_0:
  desc: "x: : y  逐元素比较x和y是否相等 0"
  enable_backward: false
  paddle:
    api_name: "paddle.equal"
    params:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: {x: input, y: other}

equal_1:
  desc: "x: : y  逐元素比较x和y是否相等 1"
  enable_backward: false
  paddle:
    api_name: "paddle.equal"
    params:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: {x: input, y: other}

equal_2:
  desc: "x: : y  逐元素比较x和y是否相等 2"
  enable_backward: false
  paddle:
    api_name: "paddle.equal"
    params:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: {x: input, y: other}

isclose_0:
  desc: "逐个检查x和y的所有元素是否均相近 0"
  enable_backward: false
  paddle:
    api_name: "paddle.isclose"
    params:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      rtol: 0.00001
      atol: 0.00000001
      equal_nan: false
  pytorch:
    api_name: "torch.isclose"
    mapping:
      ins: {x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan}

isclose_1:
  desc: "逐个检查x和y的所有元素是否均相近 1"
  enable_backward: false
  paddle:
    api_name: "paddle.isclose"
    params:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      rtol: 0.00001
      atol: 0.00000001
      equal_nan: false
  pytorch:
    api_name: "torch.isclose"
    mapping:
      ins: {x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan}

isclose_2:
  desc: "逐个检查x和y的所有元素是否均相近 2"
  enable_backward: false
  paddle:
    api_name: "paddle.isclose"
    params:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      rtol: 0.00001
      atol: 0.00000001
      equal_nan: false
  pytorch:
    api_name: "torch.isclose"
    mapping:
      ins: {x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan}

#Tensor_uniform__0:
#  desc: "均匀分布采样的随机数 0"
#  enable_backward: false
#  paddle:
#    api_name: "paddle.Tensor.uniform_"
#    inputs:
#      x:
#        random: true
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#    params:
#      min: -1.0
#      max: 1.0
#      seed: 0
#  pytorch:
#    api_name: "torch.Tensor.uniform_"
#    mapping:
#      ins: {min: min, max: max, seed: seed}

LeakyReLU_0:
  desc: "LeakyReLU 激活层 0"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      negative_slope: 0.01
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: {x: input, negative_slope: negative_slope}

LeakyReLU_1:
  desc: "LeakyReLU 激活层 1"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      negative_slope: 0.01
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: {x: input, negative_slope: negative_slope}

LeakyReLU_2:
  desc: "LeakyReLU 激活层 2"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      negative_slope: 0.01
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: {x: input, negative_slope: negative_slope}

AvgPool2D_0:
  desc: "构建一个二维平均池化层 0"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 1
      stride:
      padding: 0
      ceil_mode: False
      exclusive: True
      divisor_override:
  pytorch:
    api_name: "torch.nn.AvgPool2D"
    mapping:
      ins: {x: input, kernel_size: negative_slope, stride: stride, padding: padding, ceil_mode: ceil_mode, exclusive: count_include_pad, divisor_override: divisor_override}

AvgPool2D_1:
  desc: "构建一个二维平均池化层 1"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 2
      stride:
      padding: 0
      ceil_mode: False
      exclusive: True
      divisor_override:
  pytorch:
    api_name: "torch.nn.AvgPool2D"
    mapping:
      ins: {x: input, kernel_size: negative_slope, stride: stride, padding: padding, ceil_mode: ceil_mode, exclusive: count_include_pad, divisor_override: divisor_override}

AvgPool2D_2:
  desc: "构建一个二维平均池化层 2"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 2
      stride:
      padding: 0
      ceil_mode: False
      exclusive: True
      divisor_override:
  pytorch:
    api_name: "torch.nn.AvgPool2D"
    mapping:
      ins: {x: input, kernel_size: negative_slope, stride: stride, padding: padding, ceil_mode: ceil_mode, exclusive: count_include_pad, divisor_override: divisor_override}

AdaptiveAvgPool2D_0:
  desc: "2D的自适应平均池化 0"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      output_size: 1
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2D"
    mapping:
      ins: {x: input, output_size: output_size}

AdaptiveAvgPool2D_1:
  desc: "2D的自适应平均池化 1"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      output_size: 1
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2D"
    mapping:
      ins: {x: input, output_size: output_size}

AdaptiveAvgPool2D_2:
  desc: "2D的自适应平均池化 2"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      output_size: 1
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2D"
    mapping:
      ins: {x: input, output_size: output_size}

index_select_0:
  desc: "返回的Tensor其余维度大小和输入 x 相等, axis 维度的大小等于 index 的大小 0"
  enable_backward: false
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      index:
        random: true
        dtype: "int32"
        shape: [ 2 ]
        range: [ 0, 1 ]
      axis: 0
  pytorch:
    api_name: "torch.index_select"
    mapping:
      ins: {x: input, index: index, axis: dim}

index_select_1:
  desc: "返回的Tensor其余维度大小和输入 x 相等, axis 维度的大小等于 index 的大小 1"
  enable_backward: false
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      index:
        random: true
        dtype: "int32"
        shape: [ 2 ]
        range: [ 0, 1 ]
      axis: 0
  pytorch:
    api_name: "torch.index_select"
    mapping:
      ins: {x: input, index: index, axis: dim}

index_select_2:
  desc: "返回的Tensor其余维度大小和输入 x 相等, axis 维度的大小等于 index 的大小 2"
  enable_backward: false
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      index:
        random: true
        dtype: "int32"
        shape: [ 2 ]
        range: [ 0, 1 ]
      axis: 0
  pytorch:
    api_name: "torch.index_select"
    mapping:
      ins: {x: input, index: index, axis: dim}

Conv1D_0:
  desc: "一维卷积层 0"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      in_channels: 1
      out_channels: 1
      kernel_size: 1
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      padding_mode: 'zeros'
  pytorch:
    api_name: "torch.nn.Conv1D"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups, padding_mode: padding_mode}

Conv1D_1:
  desc: "一维卷积层 1"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 3
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      padding_mode: 'zeros'
  pytorch:
    api_name: "torch.nn.Conv1D"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups, padding_mode: padding_mode}

Conv1D_2:
  desc: "一维卷积层 2"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 10, 1000 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 3
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      padding_mode: 'zeros'
  pytorch:
    api_name: "torch.nn.Conv1D"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups, padding_mode: padding_mode}

#einsum_0:
#  desc: "对一组输入张量进行 Einstein 求和 0"
#  paddle:
#    api_name: "paddle.nn.Conv1D"
#    params:
#      equation: "i->"
#      x:
#        random: true
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.nn.Conv1D"
#    mapping:
#      ins: {equation: equation, x: x}

Conv2DTranspose_0:
  desc: "二维转置卷积层 0"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      in_channels: 1
      out_channels: 1
      kernel_size: 1
      stride: 1
      padding: 0
      output_padding: 0
      groups: 1
      dilation: 1
  pytorch:
    api_name: "torch.nn.ConvTranspose2d"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, output_padding: output_padding, groups: groups, dilation: dilation}

Conv2DTranspose_1:
  desc: "二维转置卷积层 1"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 3
      stride: 1
      padding: 0
      output_padding: 0
      groups: 1
      dilation: 1
  pytorch:
    api_name: "torch.nn.ConvTranspose2d"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, output_padding: output_padding, groups: groups, dilation: dilation}

Conv2DTranspose_2:
  desc: "二维转置卷积层 2"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 3
      stride: 1
      padding: 0
      output_padding: 0
      groups: 1
      dilation: 1
  pytorch:
    api_name: "torch.nn.ConvTranspose2d"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, output_padding: output_padding, groups: groups, dilation: dilation}

outer_0:
  desc: "计算两个Tensor的外积 0"
  paddle:
    api_name: "paddle.outer"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1 ]
        range: [ -1, 1 ]
    params:
      y:
        random: true
        dtype: "float32"
        shape: [ 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.outer"
    mapping:
      ins: {x: input, y: vec2}

outer_1:
  desc: "计算两个Tensor的外积 1"
  paddle:
    api_name: "paddle.outer"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100 ]
        range: [ -1, 1 ]
    params:
      y:
        random: true
        dtype: "float32"
        shape: [ 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.outer"
    mapping:
      ins: {x: input, y: vec2}

outer_2:
  desc: "计算两个Tensor的外积 2"
  paddle:
    api_name: "paddle.outer"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1000 ]
        range: [ -1, 1 ]
    params:
      y:
        random: true
        dtype: "float32"
        shape: [ 1000 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.outer"
    mapping:
      ins: {x: input, y: vec2}

slice_0:
  desc: "沿多个轴生成 input 的切片 0"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axes: [2]
      starts: [0]
      ends: [1]
  pytorch:
    api_name: "torch.narrow"
    mapping:
      ins: {x: input, axes: dim, starts: start, ends: length}

slice_1:
  desc: "沿多个轴生成 input 的切片 1"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axes: [2]
      starts: [0]
      ends: [8]
  pytorch:
    api_name: "torch.narrow"
    mapping:
      ins: {x: input, axes: dim, starts: start, ends: length}

slice_2:
  desc: "沿多个轴生成 input 的切片 2"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axes: [2]
      starts: [0]
      ends: [80]
  pytorch:
    api_name: "torch.narrow"
    mapping:
      ins: {x: input, axes: dim, starts: start, ends: length}

select_0:
  desc: "返回的Tensor其余维度大小和输入 x 相等, axis 维度的大小等于 index 的大小 0"
  enable_backward: false
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      index:
        random: true
        dtype: "int32"
        shape: [ 2 ]
        range: [ 0, 1 ]
      axis: 0
  pytorch:
    api_name: "torch.select"
    mapping:
      ins: {x: input, index: index, axis: dim}

select_1:
  desc: "返回的Tensor其余维度大小和输入 x 相等, axis 维度的大小等于 index 的大小 1"
  enable_backward: false
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      index:
        random: true
        dtype: "int32"
        shape: [ 2 ]
        range: [ 0, 1 ]
      axis: 0
  pytorch:
    api_name: "torch.select"
    mapping:
      ins: {x: input, index: index, axis: dim}

select_2:
  desc: "返回的Tensor其余维度大小和输入 x 相等, axis 维度的大小等于 index 的大小 2"
  enable_backward: false
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      index:
        random: true
        dtype: "int32"
        shape: [ 2 ]
        range: [ 0, 1 ]
      axis: 0
  pytorch:
    api_name: "torch.select"
    mapping:
      ins: {x: input, index: index, axis: dim}

diff_0:
  desc: "沿着指定轴计算输入Tensor的n阶前向差值 0"
  paddle:
    api_name: "paddle.diff"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      n: 1
      axis: -1
      prepend:
      append:
  pytorch:
    api_name: "torch.diff"
    mapping:
      ins: {x: input, n: n, axis: dim, prepend: prepend, append: append}

diff_1:
  desc: "沿着指定轴计算输入Tensor的n阶前向差值 1"
  paddle:
    api_name: "paddle.diff"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      n: 1
      axis: -1
      prepend:
      append:
  pytorch:
    api_name: "torch.diff"
    mapping:
      ins: {x: input, n: n, axis: dim, prepend: prepend, append: append}

diff_2:
  desc: "沿着指定轴计算输入Tensor的n阶前向差值 2"
  paddle:
    api_name: "paddle.diff"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      n: 1
      axis: -1
      prepend:
      append:
  pytorch:
    api_name: "torch.diff"
    mapping:
      ins: {x: input, n: n, axis: dim, prepend: prepend, append: append}

Sigmoid_0:
  desc: "沿着指定轴计算输入Tensor的n阶前向差值 0"
  paddle:
    api_name: "paddle.nn.Sigmoid"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.nn.Sigmoid"
    mapping:
      ins: {x: input}

Sigmoid_1:
  desc: "沿着指定轴计算输入Tensor的n阶前向差值 1"
  paddle:
    api_name: "paddle.nn.Sigmoid"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.nn.Sigmoid"
    mapping:
      ins: {x: input}

Sigmoid_2:
  desc: "沿着指定轴计算输入Tensor的n阶前向差值 2"
  paddle:
    api_name: "paddle.nn.Sigmoid"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.nn.Sigmoid"
    mapping:
      ins: {x: input}

moveaxis_0:
  desc: "将输入Tensor x 的轴从 source 位置移动到 destination 位置 0"
  paddle:
    api_name: "paddle.moveaxis"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      source: 2
      destination: 0
  pytorch:
    api_name: "torch.moveaxis"
    mapping:
      ins: {x: input, source: source, destination: destination}

moveaxis_1:
  desc: "将输入Tensor x 的轴从 source 位置移动到 destination 位置 1"
  paddle:
    api_name: "paddle.moveaxis"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      source: 2
      destination: 0
  pytorch:
    api_name: "torch.moveaxis"
    mapping:
      ins: {x: input, source: source, destination: destination}

moveaxis_2:
  desc: "将输入Tensor x 的轴从 source 位置移动到 destination 位置 2"
  paddle:
    api_name: "paddle.moveaxis"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      source: 2
      destination: 0
  pytorch:
    api_name: "torch.moveaxis"
    mapping:
      ins: {x: input, source: source, destination: destination}

amax_0:
  desc: "对指定维度上的Tensor元素求最大值运算 0"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.amax"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

amax_1:
  desc: "对指定维度上的Tensor元素求最大值运算 1"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.amax"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

amax_2:
  desc: "对指定维度上的Tensor元素求最大值运算 2"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.amax"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

MSELoss_0:
  desc: "计算预测值和目标值的均方差误差 0"
  paddle:
    api_name: "paddle.nn.MSELoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.MSELoss"
    mapping:
      ins: {x: input, label: target, reduction: reduction}

MSELoss_1:
  desc: "计算预测值和目标值的均方差误差 1"
  paddle:
    api_name: "paddle.nn.MSELoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.MSELoss"
    mapping:
      ins: {x: input, label: target, reduction: reduction}

MSELoss_2:
  desc: "计算预测值和目标值的均方差误差 2"
  paddle:
    api_name: "paddle.nn.MSELoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.MSELoss"
    mapping:
      ins: {x: input, label: target, reduction: reduction}

histogram_0:
  desc: "计算输入张量的直方图 0"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      bins: 1
      min: 0
      max: 1
  pytorch:
    api_name: "torch.histogram"
    mapping:
      ins: {x: input, bins: bins, range: !!python/tuple [0, 1]}

histogram_1:
  desc: "计算输入张量的直方图 1"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      bins: 10
      min: 0
      max: 10
  pytorch:
    api_name: "torch.histogram"
    mapping:
      ins: {x: input, bins: bins, range: !!python/tuple [0, 10]}

histogram_2:
  desc: "计算输入张量的直方图 2"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      bins: 10
      min: 0
      max: 10
  pytorch:
    api_name: "torch.histogram"
    mapping:
      ins: {x: input, bins: bins, range: !!python/tuple [0, 10]}

linalg_cov_0:
  desc: "计算输入Tensor的协方差矩阵 0"
  paddle:
    api_name: "paddle.linalg.cov"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
    params:
      rowvar: True
      ddof: True
      fweights:
      aweights:
  pytorch:
    api_name: "torch.cov"
    mapping:
      ins: {x: input}

linalg_cov_1:
  desc: "计算输入Tensor的协方差矩阵 1"
  paddle:
    api_name: "paddle.linalg.cov"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 100 ]
        range: [ -1, 1 ]
    params:
      rowvar: True
      ddof: True
      fweights:
      aweights:
  pytorch:
    api_name: "torch.cov"
    mapping:
      ins: {x: input}

linalg_cov_2:
  desc: "计算输入Tensor的协方差矩阵 2"
  paddle:
    api_name: "paddle.linalg.cov"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1000, 1000 ]
        range: [ -1, 1 ]
    params:
      rowvar: True
      ddof: True
      fweights:
      aweights:
  pytorch:
    api_name: "torch.cov"
    mapping:
      ins: {x: input}

Upsample_0:
  desc: "调整一个batch中图片的大小 0"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      size: [2, 2]
      scale_factor:
      mode: 'nearest'
      align_corners: False
  pytorch:
    api_name: "torch.nn.Upsample"
    mapping:
      ins: {x: input, size: size, scale_factor: scale_factor, mode: mode, align_corners: align_corners}

Upsample_1:
  desc: "调整一个batch中图片的大小 1"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      size: [20, 20]
      scale_factor:
      mode: 'nearest'
      align_corners: False
  pytorch:
    api_name: "torch.nn.Upsample"
    mapping:
      ins: {x: input, size: size, scale_factor: scale_factor, mode: mode, align_corners: align_corners}

Upsample_2:
  desc: "调整一个batch中图片的大小 1"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      size: [200, 200]
      scale_factor:
      mode: 'nearest'
      align_corners: False
  pytorch:
    api_name: "torch.nn.Upsample"
    mapping:
      ins: {x: input, size: size, scale_factor: scale_factor, mode: mode, align_corners: align_corners}

less_than_0:
  desc: "逐元素地返回 x<y 的逻辑值 0"
  enable_backward: false
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.less"
    mapping:
      ins: {x: input, y: other}

less_than_1:
  desc: "逐元素地返回 x<y 的逻辑值 1"
  enable_backward: false
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.less"
    mapping:
      ins: {x: input, y: other}

less_than_2:
  desc: "逐元素地返回 x<y 的逻辑值 2"
  enable_backward: false
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.less"
    mapping:
      ins: {x: input, y: other}

Conv3D_0:
  desc: "三维卷积层 0"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      in_channels: 1
      out_channels: 1
      kernel_size: 1
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      padding_mode: 'zeros'
  pytorch:
    api_name: "torch.nn.Conv3D"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups, padding_mode: padding_mode}

Conv3D_1:
  desc: "三维卷积层 1"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 3
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      padding_mode: 'zeros'
  pytorch:
    api_name: "torch.nn.Conv3D"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups, padding_mode: padding_mode}

Conv3D_2:
  desc: "三维卷积层 2"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 10, 100, 100, 100 ]
        range: [ -1, 1 ]
    params:
      in_channels: 10
      out_channels: 10
      kernel_size: 3
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      padding_mode: 'zeros'
  pytorch:
    api_name: "torch.nn.Conv3D"
    mapping:
      ins: {x: input, in_channels: in_channels, out_channels: out_channels, kernel_size: kernel_size, stride: stride, padding: padding, dilation: dilation, groups: groups, padding_mode: padding_mode}

#nanmedian_0:
#  desc: "忽略nan返回Tensor中位数 0"
#  paddle:
#    api_name: "paddle.nanmedian"
#    inputs:
#      x:
#        random: true
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#    params:
#      axis: -1
#      keepdim: False
#  pytorch:
#    api_name: "torch.nanmedian"
#    mapping:
#      ins: {x: input, axis: dim, keepdim: keepdim}

PReLU_0:
  desc: "PReLU激活层 0"
  paddle:
    api_name: "paddle.nn.PReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
    params:
      num_parameters: 1
      init: 0.25
  pytorch:
    api_name: "torch.nn.PReLU"
    mapping:
      ins: {x: input, num_parameters: num_parameters, init: init}

PReLU_1:
  desc: "PReLU激活层 1"
  paddle:
    api_name: "paddle.nn.PReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
    params:
      num_parameters: 1
      init: 0.25
  pytorch:
    api_name: "torch.nn.PReLU"
    mapping:
      ins: {x: input, num_parameters: num_parameters, init: init}

PReLU_2:
  desc: "PReLU激活层 0"
  paddle:
    api_name: "paddle.nn.PReLU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
    params:
      num_parameters: 1
      init: 0.25
  pytorch:
    api_name: "torch.nn.PReLU"
    mapping:
      ins: {x: input, num_parameters: num_parameters, init: init}

inner_0:
  desc: "计算两个Tensor的内积 0"
  paddle:
    api_name: "paddle.inner"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.inner"
    mapping:
      ins: {x: input, y: other}

inner_1:
  desc: "计算两个Tensor的内积 1"
  paddle:
    api_name: "paddle.inner"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.inner"
    mapping:
      ins: {x: input, y: other}

inner_2:
  desc: "计算两个Tensor的内积 2"
  paddle:
    api_name: "paddle.inner"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.inner"
    mapping:
      ins: {x: input, y: other}

multinomial_0:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor 0"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ 0, 1 ]
    params:
      num_samples: 1
      replacement: False
  pytorch:
    api_name: "torch.multinomial"
    mapping:
      ins: {x: input, num_samples: num_samples, replacement: replacement}

multinomial_1:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor 1"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 100 ]
        range: [ 0, 1 ]
    params:
      num_samples: 1
      replacement: False
  pytorch:
    api_name: "torch.multinomial"
    mapping:
      ins: {x: input, num_samples: num_samples, replacement: replacement}

multinomial_2:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor 1"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1000, 1000 ]
        range: [ 0, 1 ]
    params:
      num_samples: 1
      replacement: False
  pytorch:
    api_name: "torch.multinomial"
    mapping:
      ins: {x: input, num_samples: num_samples, replacement: replacement}

dropout_0:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 0"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.functional.dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.functional.dropout"
    mapping:
      ins: {x: input, p: p}

dropout_1:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 1"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.functional.dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.functional.dropout"
    mapping:
      ins: {x: input, p: p}

dropout_2:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 2"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.functional.dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.functional.dropout"
    mapping:
      ins: {x: input, p: p}

randperm_0:
  desc: "返回一个数值在0到n-1、随机排列的1-D Tensor 0"
  enable_backward: false
  paddle:
    api_name: "paddle.randperm"
    params:
      n: 1
  pytorch:
    api_name: "torch.randperm"
    mapping:
      ins: {n: n}

randperm_1:
  desc: "返回一个数值在0到n-1、随机排列的1-D Tensor 1"
  enable_backward: false
  paddle:
    api_name: "paddle.randperm"
    params:
      n: 10000
  pytorch:
    api_name: "torch.randperm"
    mapping:
      ins: {n: n}

randperm_2:
  desc: "返回一个数值在0到n-1、随机排列的1-D Tensor 1"
  enable_backward: false
  paddle:
    api_name: "paddle.randperm"
    params:
      n: 1000000
  pytorch:
    api_name: "torch.randperm"
    mapping:
      ins: {n: n}

Dropout2D_0:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0, 2D 0"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout2D"
    mapping:
      ins: {x: input, p: p}

Dropout2D_1:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0, 2D 1"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout2D"
    mapping:
      ins: {x: input, p: p}

Dropout2D_2:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0, 2D 2"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout2D"
    mapping:
      ins: {x: input, p: p}

greater_than_0:
  desc: "返回 x>y 逐元素比较x和y是否相等 0"
  enable_backward: false
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.greater_than"
    mapping:
      ins: {x: input, y: other}

greater_than_1:
  desc: "返回 x>y 逐元素比较x和y是否相等 1"
  enable_backward: false
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.greater_than"
    mapping:
      ins: {x: input, y: other}

greater_than_2:
  desc: "返回 x>y 逐元素比较x和y是否相等 2"
  enable_backward: false
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.greater_than"
    mapping:
      ins: {x: input, y: other}

ReLU6_0:
  desc: "ReLU6激活层 0"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 10 ]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: {x: input, y: other}

ReLU6_1:
  desc: "ReLU6激活层 0"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 10 ]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: {x: input, y: other}

ReLU6_2:
  desc: "ReLU6激活层 2"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 10 ]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: {x: input, y: other}

ReflectionPad2d_0:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 0"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 2, 2, 2, 2 ]
        range: [ -1, 1 ]
    params:
      padding: [1, 1, 0, 1]
      mode: 'reflect'
  pytorch:
    api_name: "torch.nn.ReflectionPad2d"
    mapping:
      ins: {x: input, padding: padding}

ReflectionPad2d_1:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 1"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      padding: [2, 2, 0, 2]
      mode: 'reflect'
  pytorch:
    api_name: "torch.nn.ReflectionPad2d"
    mapping:
      ins: {x: input, padding: padding}

ReflectionPad2d_2:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 2"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      padding: [9, 9, 0, 9]
      mode: 'reflect'
  pytorch:
    api_name: "torch.nn.ReflectionPad2d"
    mapping:
      ins: {x: input, padding: padding}

empty_like_0:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 0"
  enable_backward: false
  paddle:
    api_name: "paddle.empty_like"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.empty_like"
    mapping:
      ins: {x: input, padding: padding}

empty_like_1:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 1"
  enable_backward: false
  paddle:
    api_name: "paddle.empty_like"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.empty_like"
    mapping:
      ins: {x: input, padding: padding}

empty_like_2:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 2"
  enable_backward: false
  paddle:
    api_name: "paddle.empty_like"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.empty_like"
    mapping:
      ins: {x: input, padding: padding}

BCEWithLogitsLoss_0:
  desc: "计算输入 logit 和标签 label 间的 binary cross entropy with logits loss 损失 0"
  paddle:
    api_name: "paddle.nn.BCEWithLogitsLoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.BCEWithLogitsLoss"
    mapping:
      ins: {x: input, reduction: reduction}

BCEWithLogitsLoss_1:
  desc: "计算输入 logit 和标签 label 间的 binary cross entropy with logits loss 损失 1"
  paddle:
    api_name: "paddle.nn.BCEWithLogitsLoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.BCEWithLogitsLoss"
    mapping:
      ins: {x: input, reduction: reduction}

BCEWithLogitsLoss_2:
  desc: "计算输入 logit 和标签 label 间的 binary cross entropy with logits loss 损失 1"
  paddle:
    api_name: "paddle.nn.BCEWithLogitsLoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.BCEWithLogitsLoss"
    mapping:
      ins: {x: input, reduction: reduction}

rot90_0:
  desc: "沿axes指定的平面将n维tensor旋转90度  0"
  paddle:
    api_name: "paddle.rot90"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      k: 1
      axes: [2, 3]
  pytorch:
    api_name: "torch.rot90"
    mapping:
      ins: {x: input, k: k, axes: dims}

rot90_1:
  desc: "沿axes指定的平面将n维tensor旋转90度  1"
  paddle:
    api_name: "paddle.rot90"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      k: 1
      axes: [2, 3]
  pytorch:
    api_name: "torch.rot90"
    mapping:
      ins: {x: input, k: k, axes: dims}

rot90_2:
  desc: "沿axes指定的平面将n维tensor旋转90度  2"
  paddle:
    api_name: "paddle.rot90"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      k: 1
      axes: [2, 3]
  pytorch:
    api_name: "torch.rot90"
    mapping:
      ins: {x: input, k: k, axes: dims}

amin_0:
  desc: "对指定维度上的Tensor元素求最小值运算  0"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.amin"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

amin_1:
  desc: "对指定维度上的Tensor元素求最小值运算  1"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.amin"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

amin_2:
  desc: "对指定维度上的Tensor元素求最小值运算  2"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.amin"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

nansum_0:
  desc: "对指定维度上的Tensor元素求和, 将nan视为0  0"
  paddle:
    api_name: "paddle.nansum"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.nansum"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

nansum_1:
  desc: "对指定维度上的Tensor元素求和, 将nan视为0  1"
  paddle:
    api_name: "paddle.nansum"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.nansum"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

nansum_2:
  desc: "对指定维度上的Tensor元素求和, 将nan视为0  2"
  paddle:
    api_name: "paddle.nansum"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.nansum"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

nanmean_0:
  desc: "沿 axis 计算 x 的平均值, 且忽略掉 NaNs 值  0"
  paddle:
    api_name: "paddle.nanmean"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.nanmean"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

nanmean_1:
  desc: "沿 axis 计算 x 的平均值, 且忽略掉 NaNs 值  1"
  paddle:
    api_name: "paddle.nanmean"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.nanmean"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

nanmean_2:
  desc: "沿 axis 计算 x 的平均值, 且忽略掉 NaNs 值  2"
  paddle:
    api_name: "paddle.nanmean"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.nanmean"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

corrcoef_0:
  desc: "相关系数矩阵  0"
  paddle:
    api_name: "paddle.linalg.corrcoef"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.corrcoef"
    mapping:
      ins: {x: input}

corrcoef_1:
  desc: "相关系数矩阵  1"
  paddle:
    api_name: "paddle.linalg.corrcoef"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.corrcoef"
    mapping:
      ins: {x: input}

corrcoef_2:
  desc: "相关系数矩阵  1"
  paddle:
    api_name: "paddle.linalg.corrcoef"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1000, 1000 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.corrcoef"
    mapping:
      ins: {x: input}

quantile_0:
  desc: "沿给定的轴 axis 计算 x 中元素的分位数  0"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      q: 0.25
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.quantile"
    mapping:
      ins: {x: input, q: q, axis: dim, keepdim: keepdim}

quantile_1:
  desc: "沿给定的轴 axis 计算 x 中元素的分位数  1"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      q: 0.25
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.quantile"
    mapping:
      ins: {x: input, q: q, axis: dim, keepdim: keepdim}

quantile_2:
  desc: "沿给定的轴 axis 计算 x 中元素的分位数  2"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      q: 0.25
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.quantile"
    mapping:
      ins: {x: input, q: q, axis: dim, keepdim: keepdim}

L1Loss_0:
  desc: "L1 loss 损失  0"
  paddle:
    api_name: "paddle.nn.L1Loss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.L1Loss"
    mapping:
      ins: {input: input, label: Target}

L1Loss_1:
  desc: "L1 loss 损失  0"
  paddle:
    api_name: "paddle.nn.L1Loss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.L1Loss"
    mapping:
      ins: {input: input, label: Target}

L1Loss_2:
  desc: "L1 loss 损失  0"
  paddle:
    api_name: "paddle.nn.L1Loss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.L1Loss"
    mapping:
      ins: {input: input, label: Target}

linalg_norm_0:
  desc: "计算给定 Tensor 的矩阵范数（Frobenius 范数）和向量范数  0"
  paddle:
    api_name: "paddle.linalg.norm"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      p: 'fro'
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.linalg.norm"
    mapping:
      ins: {x: A, p: ord, axis: dim, keepdim: keepdim}

linalg_norm_1:
  desc: "计算给定 Tensor 的矩阵范数（Frobenius 范数）和向量范数  1"
  paddle:
    api_name: "paddle.linalg.norm"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      p: 'fro'
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.linalg.norm"
    mapping:
      ins: {x: A, p: ord, axis: dim, keepdim: keepdim}

linalg_norm_2:
  desc: "计算给定 Tensor 的矩阵范数（Frobenius 范数）和向量范数  2"
  paddle:
    api_name: "paddle.linalg.norm"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      p: 'fro'
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.linalg.norm"
    mapping:
      ins: {x: A, p: ord, axis: dim, keepdim: keepdim}

repeat_interleave_0:
  desc: "沿着指定轴 axis 对输入 x 进行复制  0"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      repeats: 1
      axis: 2
  pytorch:
    api_name: "torch.repeat_interleave"
    mapping:
      ins: {x: input, repeats: repeats, axis: dim}

repeat_interleave_1:
  desc: "沿着指定轴 axis 对输入 x 进行复制  1"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      repeats: 1
      axis: 2
  pytorch:
    api_name: "torch.repeat_interleave"
    mapping:
      ins: {x: input, repeats: repeats, axis: dim}

repeat_interleave_2:
  desc: "沿着指定轴 axis 对输入 x 进行复制  2"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      repeats: 1
      axis: 2
  pytorch:
    api_name: "torch.repeat_interleave"
    mapping:
      ins: {x: input, repeats: repeats, axis: dim}

#meshgrid_0:
#  desc: "对每个张量做扩充操作  0"
#  enable_backward: false
#  paddle:
#    api_name: "paddle.meshgrid"
#    inputs:
#      x:
#        random: true
#        dtype: "int32"
#        shape: [ 100 ]
#        range: [ 0, 100 ]
#      y:
#        random: true
#        dtype: "int32"
#        shape: [ 100 ]
#        range: [ 0, 100 ]
#  pytorch:
#    api_name: "torch.meshgrid"
#    mapping:
#      ins: {x: tensors}

mod_0:
  desc: "逐元素取模  0"
  enable_backward: false
  paddle:
    api_name: "paddle.mod"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.mod"
    mapping:
      ins: {x: input, y: other}

mod_1:
  desc: "逐元素取模  1"
  enable_backward: false
  paddle:
    api_name: "paddle.mod"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.fmod"
    mapping:
      ins: {x: input, y: other}

mod_2:
  desc: "逐元素取模  2"
  enable_backward: false
  paddle:
    api_name: "paddle.mod"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.fmod"
    mapping:
      ins: {x: input, y: other}

Flatten_0:
  desc: "将一个连续维度的 Tensor 展平成一维  0"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      start_axis: 1
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: {x: input, start_axis: start_dim, stop_axis: end_dim}

Flatten_1:
  desc: "将一个连续维度的 Tensor 展平成一维  1"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      start_axis: 1
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: {x: input, start_axis: start_dim, stop_axis: end_dim}

Flatten_2:
  desc: "将一个连续维度的 Tensor 展平成一维  2"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      start_axis: 1
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: {x: input, start_axis: start_dim, stop_axis: end_dim}

solve_0:
  desc: "计算线性方程组的解  0"
  paddle:
    api_name: "paddle.linalg.solve"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.linalg.solve"
    mapping:
      ins: {x: A, y: B}

solve_1:
  desc: "计算线性方程组的解  1"
  paddle:
    api_name: "paddle.linalg.solve"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.linalg.solve"
    mapping:
      ins: {x: A, y: B}

solve_2:
  desc: "计算线性方程组的解  2"
  paddle:
    api_name: "paddle.linalg.solve"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1000, 1000 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1000, 1000 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.linalg.solve"
    mapping:
      ins: {x: A, y: B}

BCELoss_0:
  desc: "二值交叉熵损失值 0"
  paddle:
    api_name: "paddle.nn.BCELoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ 0, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ 0, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.BCELoss"
    mapping:
      ins: {x: input, label: target, reduction: reduction}

BCELoss_1:
  desc: "二值交叉熵损失值 1"
  paddle:
    api_name: "paddle.nn.BCELoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ 0, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ 0, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.BCELoss"
    mapping:
      ins: {x: input, label: target, reduction: reduction}

BCELoss_2:
  desc: "二值交叉熵损失值 2"
  paddle:
    api_name: "paddle.nn.BCELoss"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ 0, 1 ]
      label:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ 0, 1 ]
    params:
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.BCELoss"
    mapping:
      ins: {x: input, label: target, reduction: reduction}

svd_0:
  desc: "二值交叉熵损失值 0"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.svd"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      full_matrices: false
  pytorch:
    api_name: "torch.linalg.svd"
    mapping:
      ins: {x: input, full_matrices: full_matrics}

svd_1:
  desc: "二值交叉熵损失值 1"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.svd"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      full_matrices: false
  pytorch:
    api_name: "torch.linalg.svd"
    mapping:
      ins: {x: input, full_matrices: full_matrics}

svd_2:
  desc: "二值交叉熵损失值 2"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.svd"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      full_matrices: false
  pytorch:
    api_name: "torch.linalg.svd"
    mapping:
      ins: {x: input, full_matrices: full_matrics}

GRU_0:
  desc: "门控循环单元网络 0"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      inputs:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
        range: [ -1, 1]
      initial_states:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
        range: [ -1, 1]
    params:
      input_size: 1
      hidden_size: 1
  pytorch:
    api_name: "torch.nn.GRU"
    mapping:
      ins: {inputs: input, initial_states: h_0, input_size: input_size, hidden_size: hidden_size}

GRU_1:
  desc: "门控循环单元网络 1"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      inputs:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 100, 100]
        range: [ -1, 1]
      initial_states:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 100]
        range: [ -1, 1]
    params:
      input_size: 100
      hidden_size: 100
  pytorch:
    api_name: "torch.nn.GRU"
    mapping:
      ins: {inputs: input, initial_states: h_0, input_size: input_size, hidden_size: hidden_size}

GRU_2:
  desc: "门控循环单元网络 2"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      inputs:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1000, 1000]
        range: [ -1, 1]
      initial_states:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1000]
        range: [ -1, 1]
    params:
      input_size: 1000
      hidden_size: 1000
  pytorch:
    api_name: "torch.nn.GRU"
    mapping:
      ins: {inputs: input, initial_states: h_0, input_size: input_size, hidden_size: hidden_size}

normal_0:
  desc: "二值交叉熵损失值 0"
  enable_backward: false
  paddle:
    api_name: "paddle.normal"
    params:
      mean: 0.0
      std: 1.0
      shape: [1, 1, 1, 1]
  pytorch:
    api_name: "torch.normal"
    mapping:
      ins: {mean: mean, std: std, shape: size}

normal_1:
  desc: "二值交叉熵损失值 1"
  enable_backward: false
  paddle:
    api_name: "paddle.normal"
    params:
      mean: 0.0
      std: 1.0
      shape: [10, 10, 10, 10]
  pytorch:
    api_name: "torch.normal"
    mapping:
      ins: {mean: mean, std: std, shape: size}

normal_2:
  desc: "二值交叉熵损失值 2"
  enable_backward: false
  paddle:
    api_name: "paddle.normal"
    params:
      mean: 0.0
      std: 1.0
      shape: [10, 10, 100, 100]
  pytorch:
    api_name: "torch.normal"
    mapping:
      ins: {mean: mean, std: std, shape: size}

ELU_0:
  desc: "ELU激活层 0"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      alpha: 1.0
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: {x: input, alpha: alpha}

ELU_1:
  desc: "ELU激活层 1"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      alpha: 1.0
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: {x: input, alpha: alpha}

ELU_2:
  desc: "ELU激活层 2"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      alpha: 1.0
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: {x: input, alpha: alpha}

NLLLoss_0:
  desc: "NLLLoss损失函数 0"
  paddle:
    api_name: "paddle.nn.NLLLoss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "int64"
        shape: [ 1, 1, 1 ]
        range: [ 0, 3 ]
    params:
      weight:
      ignore_index: -100
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.NLLLoss"
    mapping:
      ins: {x: input, weight: weight, ignore_index: ignore_index, reduction: reduction}

NLLLoss_1:
  desc: "NLLLoss损失函数 1"
  paddle:
    api_name: "paddle.nn.NLLLoss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "int64"
        shape: [ 10, 10, 10 ]
        range: [ 0, 3 ]
    params:
      weight:
      ignore_index: -100
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.NLLLoss"
    mapping:
      ins: {x: input, weight: weight, ignore_index: ignore_index, reduction: reduction}

NLLLoss_2:
  desc: "NLLLoss损失函数 2"
  paddle:
    api_name: "paddle.nn.NLLLoss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      label:
        random: true
        dtype: "int64"
        shape: [ 10, 100, 100 ]
        range: [ 0, 3 ]
    params:
      weight:
      ignore_index: -100
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.NLLLoss"
    mapping:
      ins: {x: input, weight: weight, ignore_index: ignore_index, reduction: reduction}

mode_0:
  desc: "沿着可选的 axis 查找对应轴上的众数和结果所在的索引信息 0"
  enable_backward: false
  paddle:
    api_name: "paddle.mode"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      keepdim: False
  pytorch:
    api_name: "torch.mode"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

mode_1:
  desc: "沿着可选的 axis 查找对应轴上的众数和结果所在的索引信息 1"
  enable_backward: false
  paddle:
    api_name: "paddle.mode"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      keepdim: False
  pytorch:
    api_name: "torch.mode"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

mode_2:
  desc: "沿着可选的 axis 查找对应轴上的众数和结果所在的索引信息 2"
  enable_backward: false
  paddle:
    api_name: "paddle.mode"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      keepdim: False
  pytorch:
    api_name: "torch.mode"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

logsumexp_0:
  desc: "沿着 axis 计算 x 的以e为底的指数的和的自然对数 0"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

logsumexp_1:
  desc: "沿着 axis 计算 x 的以e为底的指数的和的自然对数 1"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

logsumexp_2:
  desc: "沿着 axis 计算 x 的以e为底的指数的和的自然对数 2"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      axis:
      keepdim: False
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: {x: input, axis: dim, keepdim: keepdim}

angle_0:
  desc: "逐元素计算复数的相位角 0"
  paddle:
    api_name: "paddle.angle"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.angle"
    mapping:
      ins: {x: input}

angle_1:
  desc: "逐元素计算复数的相位角 1"
  paddle:
    api_name: "paddle.angle"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.angle"
    mapping:
      ins: {x: input}

angle_2:
  desc: "逐元素计算复数的相位角 2"
  paddle:
    api_name: "paddle.angle"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.angle"
    mapping:
      ins: {x: input}

ReplicationPad2d_0:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 0"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      padding: [1, 0, 1, 1]
      mode: 'replicate'
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: {x: input, padding: padding}

ReplicationPad2d_1:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 0"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      padding: [10, 0, 10, 10]
      mode: 'replicate'
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: {x: input, padding: padding}

ReplicationPad2d_2:
  desc: "按照 padding、mode 和 value 属性对输入进行填充 2"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      padding: [10, 0, 100, 100]
      mode: 'replicate'
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: {x: input, padding: padding}

linalg_qr_0:
  desc: "计算一个或一批矩阵的正交三角分解 0"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.qr"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      mode: 'reduced'
  pytorch:
    api_name: "torch.linalg.qr"
    mapping:
      ins: {x: input, mode: mode}

linalg_qr_1:
  desc: "计算一个或一批矩阵的正交三角分解 1"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.qr"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      mode: 'reduced'
  pytorch:
    api_name: "torch.linalg.qr"
    mapping:
      ins: {x: input, mode: mode}

linalg_qr_2:
  desc: "计算一个或一批矩阵的正交三角分解 2"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.qr"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      mode: 'reduced'
  pytorch:
    api_name: "torch.linalg.qr"
    mapping:
      ins: {x: input, mode: mode}

GELU_0:
  desc: "GELU激活层 0"
  paddle:
    api_name: "paddle.nn.GELU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      approximate: false
  pytorch:
    api_name: "torch.nn.GELU"
    mapping:
      ins: {x: input, approximate: approximate}

GELU_1:
  desc: "GELU激活层 1"
  paddle:
    api_name: "paddle.nn.GELU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      approximate: false
  pytorch:
    api_name: "torch.nn.GELU"
    mapping:
      ins: {x: input, approximate: approximate}

GELU_2:
  desc: "GELU激活层 2"
  paddle:
    api_name: "paddle.nn.GELU"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
    params:
      approximate: false
  pytorch:
    api_name: "torch.nn.GELU"
    mapping:
      ins: {x: input, approximate: approximate}

#LSTMCell_0:
#  desc: "门控循环单元网络 0"
#  paddle:
#    api_name: "paddle.nn.LSTMCell"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 10]
#        range: [ -1, 1]
#      prev_h:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 10]
#        range: [ -1, 1]
#      prev_c:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 10]
#        range: [ -1, 1]
#    params:
#      input_size: 10
#      hidden_size: 10
#  pytorch:
#    api_name: "torch.nn.LSTMCell"
#    mapping:
#      ins: {inputs: input, initial_states: h_0, input_size: input_size, hidden_size: hidden_size}

fmin_0:
  desc: "比较两个Tensor对应位置的元素，返回一个包含该元素最小值的新Tensor 0"
  paddle:
    api_name: "paddle.fmin"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.fmin"
    mapping:
      ins: {x: input, y: other}

fmin_1:
  desc: "比较两个Tensor对应位置的元素，返回一个包含该元素最小值的新Tensor 1"
  paddle:
    api_name: "paddle.fmin"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.fmin"
    mapping:
      ins: {x: input, y: other}

fmin_2:
  desc: "比较两个Tensor对应位置的元素，返回一个包含该元素最小值的新Tensor 2"
  paddle:
    api_name: "paddle.fmin"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
      y:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.fmin"
    mapping:
      ins: {x: input, y: other}

MaxPool3D_0:
  desc: "三维最大池化层 0"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
      ceil_mode: False
      return_mask: False
  pytorch:
    api_name: "torch.nn.MaxPool3d"
    mapping:
      ins: {x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices}

MaxPool3D_1:
  desc: "三维最大池化层 1"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
      ceil_mode: False
      return_mask: False
  pytorch:
    api_name: "torch.nn.MaxPool3d"
    mapping:
      ins: {x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices}

MaxPool3D_2:
  desc: "三维最大池化层 2"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 100, 100, 100 ]
        range: [ -1, 1 ]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
      ceil_mode: False
      return_mask: False
  pytorch:
    api_name: "torch.nn.MaxPool3d"
    mapping:
      ins: {x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices}

relu_0:
  desc: "relu激活函数"
  paddle:
    api_name: "paddle.nn.functional.relu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.functional.relu"
    mapping:
      ins: { x: input }

relu_1:
  desc: "relu激活函数"
  paddle:
    api_name: "paddle.nn.functional.relu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.functional.relu"
    mapping:
      ins: { x: input }

relu_2:
  desc: "relu激活函数"
  paddle:
    api_name: "paddle.nn.functional.relu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.functional.relu"
    mapping:
      ins: { x: input }

neg_0:
  desc: "计算输入 x 的相反数并返回"
  paddle:
    api_name: "paddle.neg"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.neg"
    mapping:
      ins: { x: input }

neg_1:
  desc: "计算输入 x 的相反数并返回"
  paddle:
    api_name: "paddle.neg"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.neg"
    mapping:
      ins: { x: input }

neg_2:
  desc: "计算输入 x 的相反数并返回"
  paddle:
    api_name: "paddle.neg"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.neg"
    mapping:
      ins: { x: input }

cosh_0:
  desc: "双曲余弦函数"
  paddle:
    api_name: "paddle.cosh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cosh"
    mapping:
      ins: { x: input }

cosh_1:
  desc: "双曲余弦函数"
  paddle:
    api_name: "paddle.cosh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cosh"
    mapping:
      ins: { x: input }

cosh_2:
  desc: "双曲余弦函数"
  paddle:
    api_name: "paddle.cosh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cosh"
    mapping:
      ins: { x: input }

sinh_0:
  desc: "双曲正弦函数"
  enable_backward: True
  paddle:
    api_name: "paddle.sinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sinh"
    mapping:
      ins: { x: input }

sinh_1:
  desc: "双曲正弦函数"
  paddle:
    api_name: "paddle.sinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sinh"
    mapping:
      ins: { x: input }

sinh_2:
  desc: "双曲正弦函数"
  paddle:
    api_name: "paddle.sinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sinh"
    mapping:
      ins: { x: input }


rsqrt_0:
  desc: "rsqrt激活函数"
  paddle:
    api_name: "paddle.rsqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ 1, 2]
  pytorch:
    api_name: "torch.rsqrt"
    mapping:
      ins: { x: input }

rsqrt_1:
  desc: "rsqrt激活函数"
  paddle:
    api_name: "paddle.rsqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ 1, 2 ]
  pytorch:
    api_name: "torch.rsqrt"
    mapping:
      ins: { x: input }

rsqrt_2:
  desc: "rsqrt激活函数"
  paddle:
    api_name: "paddle.rsqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ 1, 2 ]
  pytorch:
    api_name: "torch.rsqrt"
    mapping:
      ins: { x: input }

reciprocal_0:
  desc: "对输入Tensor取倒数"
  paddle:
    api_name: "paddle.reciprocal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, -2]
  pytorch:
    api_name: "torch.reciprocal"
    mapping:
      ins: { x: input }

reciprocal_1:
  desc: "对输入Tensor取倒数"
  paddle:
    api_name: "paddle.reciprocal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, -2]
  pytorch:
    api_name: "torch.reciprocal"
    mapping:
      ins: { x: input }

reciprocal_2:
  desc: "对输入Tensor取倒数"
  paddle:
    api_name: "paddle.reciprocal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, -2]
  pytorch:
    api_name: "torch.reciprocal"
    mapping:
      ins: { x: input }

masked_select_0:
  desc: "返回一个1-D 的Tensor, Tensor的值是根据 mask 对输入 x 进行选择的"
  paddle:
    api_name: "paddle.masked_select"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      mask:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 1, 1, 1]
  pytorch:
    api_name: "torch.masked_select"
    mapping:
      ins: { x: input, mask: mask }

masked_select_1:
  desc: "返回一个1-D 的Tensor, Tensor的值是根据 mask 对输入 x 进行选择的"
  paddle:
    api_name: "paddle.masked_select"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      mask:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 10, 10]
  pytorch:
    api_name: "torch.masked_select"
    mapping:
      ins: { x: input, mask: mask }

masked_select_2:
  desc: "返回一个1-D 的Tensor, Tensor的值是根据 mask 对输入 x 进行选择的"
  paddle:
    api_name: "paddle.masked_select"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      mask:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 100, 100]
  pytorch:
    api_name: "torch.masked_select"
    mapping:
      ins: { x: input, mask: mask }

less_equal_0:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }

less_equal_1:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }

less_equal_2:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }


greater_equal_0:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

greater_equal_1:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

greater_equal_2:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

imag_0:
  desc: "返回一个包含输入复数Tensor的虚部数值的新Tensor"
  paddle:
    api_name: "paddle.imag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.imag"
    mapping:
      ins: { x: input }


imag_1:
  desc: "返回一个包含输入复数Tensor的虚部数值的新Tensor"
  paddle:
    api_name: "paddle.imag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.imag"
    mapping:
      ins: { x: input }

imag_2:
  desc: "返回一个包含输入复数Tensor的虚部数值的新Tensor"
  paddle:
    api_name: "paddle.imag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.imag"
    mapping:
      ins: { x: input }

GroupNorm_0:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 2
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels }
      excess:
        device:

GroupNorm_1:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 2
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels }
      excess:
        device:

GroupNorm_2:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 2
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels }
      excess:
        device:

log_softmax_0:
  desc: "log_softmax激活函数"
  paddle:
    api_name: "paddle.nn.functional.log_softmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 5]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.functional.log_softmax"
    mapping:
      ins: { x: input, axis: dim }

log_softmax_1:
  desc: "log_softmax激活函数"
  paddle:
    api_name: "paddle.nn.functional.log_softmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 5]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.functional.log_softmax"
    mapping:
      ins: { x: input, axis: dim }

log_softmax_2:
  desc: "log_softmax激活函数"
  paddle:
    api_name: "paddle.nn.functional.log_softmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 5]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.functional.log_softmax"
    mapping:
      ins: { x: input, axis: dim }

tan_0:
  desc: "三角函数tangent"
  paddle:
    api_name: "paddle.tan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tan"
    mapping:
      ins: { x: input }

tan_1:
  desc: "三角函数tangent"
  paddle:
    api_name: "paddle.tan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tan"
    mapping:
      ins: { x: input }

tan_2:
  desc: "三角函数tangent"
  paddle:
    api_name: "paddle.tan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tan"
    mapping:
      ins: { x: input }

expm1_0:
  desc: "对输入，逐元素进行以自然数e为底指数运算并减1"
  paddle:
    api_name: "paddle.expm1"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.expm1"
    mapping:
      ins: { x: input }

expm1_1:
  desc: "对输入，逐元素进行以自然数e为底指数运算并减1"
  paddle:
    api_name: "paddle.expm1"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.expm1"
    mapping:
      ins: { x: input }

expm1_2:
  desc: "对输入，逐元素进行以自然数e为底指数运算并减1"
  paddle:
    api_name: "paddle.expm1"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.expm1"
    mapping:
      ins: { x: input }

bmm_0:
  desc: "对输入x及输入y进行矩阵相乘"
  paddle:
    api_name: "paddle.bmm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bmm"
    mapping:
      ins: { x: input, y: mat2 }

bmm_1:
  desc: "对输入x及输入y进行矩阵相乘"
  paddle:
    api_name: "paddle.bmm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bmm"
    mapping:
      ins: { x: input, y: mat2 }

bmm_2:
  desc: "对输入x及输入y进行矩阵相乘"
  paddle:
    api_name: "paddle.bmm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bmm"
    mapping:
      ins: { x: input, y: mat2 }

unbind_0:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.unbind"
    mapping:
      ins: { input: input }

unbind_1:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.unbind"
    mapping:
      ins: { input: input }
unbind_2:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.unbind"
    mapping:
      ins: { input: input }

InstanceNorm2D_0:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      num_features: 1
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

InstanceNorm2D_1:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      num_features: 10
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

InstanceNorm2D_2:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      num_features: 10
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:


tril_0:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tril"
    mapping:
      ins: { x: input }

tril_1:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tril"
    mapping:
      ins: { x: input }

tril_2:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tril"
    mapping:
      ins: { x: input }

full_like_0:
  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      fill_value: 3.
  pytorch:
    api_name: "torch.full_like"
    mapping:
      ins: { x: input, fill_value: fill_value }

full_like_1:
  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      fill_value: 3.
  pytorch:
    api_name: "torch.full_like"
    mapping:
      ins: { x: input, fill_value: fill_value }

full_like_2:
  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      fill_value: 3.
  pytorch:
    api_name: "torch.full_like"
    mapping:
      ins: { x: input, fill_value: fill_value }

pad_0:
  desc: "该OP依照 pad 和 mode 属性对 x 进行 pad"
  paddle:
    api_name: "paddle.nn.functional.pad"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      pad: [2, 1, 3, 1]
      mode: 'constant'
      value: 0.0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.pad"
    mapping:
      ins: { x: input, pad: pad, mode: mode, value: value }

pad_1:
  desc: "该OP依照 pad 和 mode 属性对 x 进行 pad"
  paddle:
    api_name: "paddle.nn.functional.pad"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      pad: [2, 1, 3, 1]
      mode: 'constant'
      value: 0.0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.pad"
    mapping:
      ins: { x: input, pad: pad, mode: mode, value: value }

pad_2:
  desc: "该OP依照 pad 和 mode 属性对 x 进行 pad"
  paddle:
    api_name: "paddle.nn.functional.pad"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      pad: [2, 1, 3, 1]
      mode: 'constant'
      value: 0.0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.pad"
    mapping:
      ins: { x: input, pad: pad, mode: mode, value: value }

interpolate_0:
  desc: "调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.functional.interpolate"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      size: [12, 12]
      mode: 'nearest'
      align_corners: False
      align_mode: 0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.interpolate"
    mapping:
      ins: { x: input, size: size, mode: mode, }

interpolate_1:
  desc: "调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.functional.interpolate"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      size: [12, 12]
      mode: 'nearest'
      align_corners: False
      align_mode: 0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.interpolate"
    mapping:
      ins: { x: input, size: size, mode: mode, }

interpolate_2:
  desc: "调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.functional.interpolate"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      size: [12, 12]
      mode: 'nearest'
      align_corners: False
      align_mode: 0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.interpolate"
    mapping:
      ins: { x: input, size: size, mode: mode, }

BatchNorm3D_0:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm3D_1:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 10, 10]
        range: [ -1, 1]
    params:
      num_features: 10
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm3D_2:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 100, 100]
        range: [ -1, 1]
    params:
      num_features: 10
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

log1p_0:
  desc: "计算Log1p（加一的自然对数）结果"
  paddle:
    api_name: "paddle.log1p"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.log1p"
    mapping:
      ins: { x: input }

log1p_1:
  desc: "计算Log1p（加一的自然对数）结果"
  paddle:
    api_name: "paddle.log1p"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.log1p"
    mapping:
      ins: { x: input }

log1p_2:
  desc: "计算Log1p（加一的自然对数）结果"
  paddle:
    api_name: "paddle.log1p"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.log1p"
    mapping:
      ins: { x: input }


cumprod_0:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
    params:
      dim: 0
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_1:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
    params:
      dim: 0
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_2:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
    params:
      dim: 0
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }


not_equal_0:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_1:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_2:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

divide_0:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_1:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_2:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 100, 100 ]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

triu_0:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的上三角部分被定义为对角线上和上方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.triu"
    mapping:
      ins: { x: input }

triu_1:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的上三角部分被定义为对角线上和上方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.triu"
    mapping:
      ins: { x: input }

triu_2:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的上三角部分被定义为对角线上和上方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.triu"
    mapping:
      ins: { x: input }

mm_0:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度, 但当任一输入维度大于3时, 两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mm"
    mapping:
      ins: { input: input, mat2: mat2 }

mm_1:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度, 但当任一输入维度大于3时, 两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mm"
    mapping:
      ins: { input: input, mat2: mat2 }

mm_2:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度, 但当任一输入维度大于3时, 两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mm"
    mapping:
      ins: { input: input, mat2: mat2 }

logical_or_0:
  desc: "逐元素的对 X 和 Y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other}

logical_or_1:
  desc: "逐元素的对 X 和 Y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other }

logical_or_2:
  desc: "逐元素的对 X 和 Y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other }

chunk_0:
  desc: "将输入Tensor分割成多个子Tensor"
  enable_backward: false
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      chunks: 1
  pytorch:
    api_name: "torch.chunk"
    mapping:
      ins: { x: input, chunks: chunks }

chunk_1:
  desc: "将输入Tensor分割成多个子Tensor"
  enable_backward: false
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      chunks: 5
  pytorch:
    api_name: "torch.chunk"
    mapping:
      ins: { x: input, chunks: chunks }

chunk_2:
  desc: "将输入Tensor分割成多个子Tensor"
  enable_backward: false
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      chunks: 5
  pytorch:
    api_name: "torch.chunk"
    mapping:
      ins: { x: input, chunks: chunks }

Softmax_0:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

Softmax_1:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

Softmax_2:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

cross_0:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.cross"
    mapping:
      ins: { x: input, y: other }

cross_1:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.cross"
    mapping:
      ins: { x: input, y: other }

cross_2:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.cross"
    mapping:
      ins: { x: input, y: other }

linspace_0:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 1
      stop: 1
      num: 1
      dtype: "float32"
  pytorch:
    api_name: "torch.linspace"
    mapping:
      ins: { start: start, stop: end, num: steps }

linspace_1:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 0
      stop: 10000
      num: 10000
      dtype: "float32"
  pytorch:
    api_name: "torch.linspace"
    mapping:
      ins: { start: start, stop: end, num: steps }

linspace_2:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 0
      stop: 1000000
      num: 1000000
      dtype: "float32"
  pytorch:
    api_name: "torch.linspace"
    mapping:
      ins: { start: start, stop: end, num: steps }

roll_0:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shifts: 2
  pytorch:
    api_name: "torch.roll"
    mapping:
      ins: { x: input, shifts: shifts }

roll_1:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      shifts: 2
  pytorch:
    api_name: "torch.roll"
    mapping:
      ins: { x: input, shifts: shifts }

roll_2:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      shifts: 2
  pytorch:
    api_name: "torch.roll"
    mapping:
      ins: { x: input, shifts: shifts }

real_0:
  desc: "返回一个包含输入复数Tensor的实部数值的新Tensor"
  paddle:
    api_name: "paddle.real"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.real"
    mapping:
      ins: { x: input }

real_1:
  desc: "返回一个包含输入复数Tensor的实部数值的新Tensor"
  paddle:
    api_name: "paddle.real"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.real"
    mapping:
      ins: { x: input }

real_2:
  desc: "返回一个包含输入复数Tensor的实部数值的新Tensor"
  paddle:
    api_name: "paddle.real"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.real"
    mapping:
      ins: { x: input }

subtract_0:
  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.subtract"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.subtract"
    mapping:
      ins: { x: input, y: other }

subtract_1:
  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.subtract"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.subtract"
    mapping:
      ins: { x: input, y: other }

subtract_2:
  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.subtract"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.subtract"
    mapping:
      ins: { x: input, y: other }

topk_0:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  enable_backward: false
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      k: 1
  pytorch:
    api_name: "torch.topk"
    mapping:
      ins: { x: input, k: k }

topk_1:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  enable_backward: false
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      k: 3
  pytorch:
    api_name: "torch.topk"
    mapping:
      ins: { x: input, k: k }

topk_2:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  enable_backward: false
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      k: 3
  pytorch:
    api_name: "torch.topk"
    mapping:
      ins: { x: input, k: k }

log2_0:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

log2_1:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

log2_2:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

logical_not_0:
  desc: "逐元素的对 X Tensor进行逻辑非运算"
  paddle:
    api_name: "paddle.logical_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_not"
    mapping:
      ins: { x: input }

logical_not_1:
  desc: "逐元素的对 X Tensor进行逻辑非运算"
  paddle:
    api_name: "paddle.logical_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_not"
    mapping:
      ins: { x: input }

logical_not_2:
  desc: "逐元素的对 X Tensor进行逻辑非运算"
  paddle:
    api_name: "paddle.logical_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_not"
    mapping:
      ins: { x: input }

broadcast_to_0:
  desc: "根据 shape 指定的形状广播 x ，广播后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.broadcast_to"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 1, 1, 1, 1]
  pytorch:
    api_name: "torch.broadcast_to"
    mapping:
      ins: { x: input, shape: size }

broadcast_to_1:
  desc: "根据 shape 指定的形状广播 x ，广播后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.broadcast_to"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 10, 10, 10, 10]
  pytorch:
    api_name: "torch.broadcast_to"
    mapping:
      ins: { x: input, shape: size }

broadcast_to_2:
  desc: "根据 shape 指定的形状广播 x ，广播后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.broadcast_to"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 10, 10, 100, 100]
  pytorch:
    api_name: "torch.broadcast_to"
    mapping:
      ins: { x: input, shape: size }

bincount_0:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  enable_backward: false
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1]
        range: [ 1, 20]
  pytorch:
    api_name: "torch.bincount"
    mapping:
      ins: { x: input }

bincount_1:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  enable_backward: false
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10000]
        range: [ 1, 20]
  pytorch:
    api_name: "torch.bincount"
    mapping:
      ins: { x: input }

bincount_2:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  enable_backward: false
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1000000]
        range: [ 1, 20]
  pytorch:
    api_name: "torch.bincount"
    mapping:
      ins: { x: input }

isinf_0:
  desc: "返回输入tensor的每一个值是否为 +/-INF"
  paddle:
    api_name: "paddle.isinf"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]
  pytorch:
    api_name: "torch.isinf"
    mapping:
      ins: { x: input }

isinf_1:
  desc: "返回输入tensor的每一个值是否为 +/-INF"
  paddle:
    api_name: "paddle.isinf"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]
  pytorch:
    api_name: "torch.isinf"
    mapping:
      ins: { x: input }

isinf_2:
  desc: "返回输入tensor的每一个值是否为 +/-INF"
  paddle:
    api_name: "paddle.isinf"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]
  pytorch:
    api_name: "torch.isinf"
    mapping:
      ins: { x: input }

BatchNorm1D_0:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
    params:
      num_features: 1
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm1D_1:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 10, 10, 100]
    params:
      num_features: 10
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm1D_2:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100, 100]
    params:
      num_features: 100
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

log10_0:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

log10_1:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

log10_2:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

diagonal_0:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input }

diagonal_1:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input }

diagonal_2:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input }

sign_0:
  desc: "对输入参数 ``x``中每个元素进行正负判断，并且输出正负判断值：1代表正，-1代表负，0代表零"
  paddle:
    api_name: "paddle.sign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.sign"
    mapping:
      ins: { x: input }

sign_1:
  desc: "对输入参数 ``x``中每个元素进行正负判断，并且输出正负判断值：1代表正，-1代表负，0代表零"
  paddle:
    api_name: "paddle.sign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.sign"
    mapping:
      ins: { x: input }

sign_2:
  desc: "对输入参数 ``x``中每个元素进行正负判断，并且输出正负判断值：1代表正，-1代表负，0代表零"
  paddle:
    api_name: "paddle.sign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.sign"
    mapping:
      ins: { x: input }

eye_0:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.eye"
    params:
      num_rows: 1
  pytorch:
    api_name: "torch.eye"
    mapping:
      ins: { num_rows: n }

eye_1:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.eye"
    params:
      num_rows: 10000
  pytorch:
    api_name: "torch.eye"
    mapping:
      ins: { num_rows: n }

eye_2:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.eye"
    params:
      num_rows: 1000000
  pytorch:
    api_name: "torch.eye"
    mapping:
      ins: { num_rows: n }

Tanh_0:
  desc: "Tanh激活层"
  paddle:
    api_name: "paddle.nn.Tanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -4, 4]
  pytorch:
    api_name: "torch.nn.Tanh"
    mapping:
      ins: { data: input }

Tanh_1:
  desc: "Tanh激活层"
  paddle:
    api_name: "paddle.nn.Tanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -4, 4]
  pytorch:
    api_name: "torch.nn.Tanh"
    mapping:
      ins: { data: input }

Tanh_2:
  desc: "Tanh激活层"
  paddle:
    api_name: "paddle.nn.Tanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -4, 4]
  pytorch:
    api_name: "torch.nn.Tanh"
    mapping:
      ins: { data: input }

full_0:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [1, 1, 1, 1]
      fill_value: 3.0
      dtype: "float32"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

full_1:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [10, 10, 10, 10]
      fill_value: 3.0
      dtype: "float32"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

full_2:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [10, 10, 100, 100]
      fill_value: 3.0
      dtype: "float32"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

argmin_0:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argmin"
    mapping:
      ins: { x: input }

argmin_1:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argmin"
    mapping:
      ins: { x: input }

argmin_2:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argmin"
    mapping:
      ins: { x: input }

flip_0:
  desc: "沿指定轴反转n维tensor"
  paddle:
    api_name: "paddle.flip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      axis: [2, 0, 1]
  pytorch:
    api_name: "torch.flip"
    mapping:
      ins: { x: input, axis: dims }

flip_1:
  desc: "沿指定轴反转n维tensor"
  paddle:
    api_name: "paddle.flip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: [2, 0, 1]
  pytorch:
    api_name: "torch.flip"
    mapping:
      ins: { x: input, axis: dims }

flip_2:
  desc: "沿指定轴反转n维tensor"
  paddle:
    api_name: "paddle.flip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      axis: [2, 0, 1]
  pytorch:
    api_name: "torch.flip"
    mapping:
      ins: { x: input, axis: dims }

logical_and_0:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  enable_backward: false
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

logical_and_1:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  enable_backward: false
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

logical_and_2:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  enable_backward: false
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

ones_like_0:
  desc: "返回一个和输入参数 x 具有相同形状的数值都为1的Tensor"
  paddle:
    api_name: "paddle.ones_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.ones_like"
    mapping:
      ins: { x: input }

ones_like_1:
  desc: "返回一个和输入参数 x 具有相同形状的数值都为1的Tensor"
  paddle:
    api_name: "paddle.ones_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.ones_like"
    mapping:
      ins: { x: input }

ones_like_2:
  desc: "返回一个和输入参数 x 具有相同形状的数值都为1的Tensor"
  paddle:
    api_name: "paddle.ones_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.ones_like"
    mapping:
      ins: { x: input }

expand_as_0:
  desc: "根据 y 的形状扩展 x ，扩展后， x 的形状和 y 的形状相同"
  paddle:
    api_name: "paddle.expand_as"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.Tensor.expand_as"
    mapping:
      ins: { x: input, y: other }

expand_as_1:
  desc: "根据 y 的形状扩展 x ，扩展后， x 的形状和 y 的形状相同"
  paddle:
    api_name: "paddle.expand_as"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.Tensor.expand_as"
    mapping:
      ins: { x: input, y: other }

expand_as_2:
  desc: "根据 y 的形状扩展 x ，扩展后， x 的形状和 y 的形状相同"
  paddle:
    api_name: "paddle.expand_as"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.Tensor.expand_as"
    mapping:
      ins: { x: input, y: other }

isfinite_0:
  desc: "返回输入 Tensor 的每一个值是否为有限值（既非 +/-INF 也非 +/-NaN ）"
  paddle:
    api_name: "paddle.isfinite"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[nan]]
  pytorch:
    api_name: "torch.isfinite"
    mapping:
      ins: { x: input }

isfinite_1:
  desc: "返回输入 Tensor 的每一个值是否为有限值（既非 +/-INF 也非 +/-NaN ）"
  paddle:
    api_name: "paddle.isfinite"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]
  pytorch:
    api_name: "torch.isfinite"
    mapping:
      ins: { x: input }

isfinite_2:
  desc: "返回输入 Tensor 的每一个值是否为有限值（既非 +/-INF 也非 +/-NaN ）"
  paddle:
    api_name: "paddle.isfinite"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]
  pytorch:
    api_name: "torch.isfinite"
    mapping:
      ins: { x: input }

LayerNorm_0:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [1, 1, 1]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_1:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [10, 10, 10]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_2:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [10, 100, 100]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

minimum_0:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

minimum_1:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

minimum_2:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

multiply_0:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

multiply_1:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

multiply_2:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

cumsum_0:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      axis: -1
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

cumsum_1:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: -1
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

cumsum_2:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      axis: -1
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

t_0:
  desc: "对小于等于2维的Tensor进行数据转置。0维和1维Tensor返回本身"
  paddle:
    api_name: "paddle.t"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.t"
    mapping:
      ins: { input: input }

t_1:
  desc: "对小于等于2维的Tensor进行数据转置。0维和1维Tensor返回本身"
  paddle:
    api_name: "paddle.t"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.t"
    mapping:
      ins: { input: input }

t_2:
  desc: "对小于等于2维的Tensor进行数据转置。0维和1维Tensor返回本身"
  paddle:
    api_name: "paddle.t"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1000, 1000]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.t"
    mapping:
      ins: { input: input }

square_0:
  desc: "对输入参数``x``进行逐元素取平方运算"
  paddle:
    api_name: "paddle.square"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.square"
    mapping:
      ins: { x: input }

square_1:
  desc: "对输入参数``x``进行逐元素取平方运算"
  paddle:
    api_name: "paddle.square"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.square"
    mapping:
      ins: { x: input }

square_2:
  desc: "对输入参数``x``进行逐元素取平方运算"
  paddle:
    api_name: "paddle.square"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.square"
    mapping:
      ins: { x: input }

pow_0:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 6]
  pytorch:
    api_name: "torch.pow"
    mapping:
      ins: { x: input, y: exponent }

pow_1:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 6]
  pytorch:
    api_name: "torch.pow"
    mapping:
      ins: { x: input, y: exponent }

pow_2:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 6]
  pytorch:
    api_name: "torch.pow"
    mapping:
      ins: { x: input, y: exponent }

conj_0:
  desc: "是逐元素计算Tensor的共轭运算"
  paddle:
    api_name: "paddle.conj"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.conj"
    mapping:
      ins: { x: input }

conj_1:
  desc: "是逐元素计算Tensor的共轭运算"
  paddle:
    api_name: "paddle.conj"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.conj"
    mapping:
      ins: { x: input }

conj_2:
  desc: "是逐元素计算Tensor的共轭运算"
  paddle:
    api_name: "paddle.conj"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.conj"
    mapping:
      ins: { x: input }

floor_0:
  desc: "向下取整函数"
  paddle:
    api_name: "paddle.floor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.floor"
    mapping:
      ins: { x: input }

floor_1:
  desc: "向下取整函数"
  paddle:
    api_name: "paddle.floor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.floor"
    mapping:
      ins: { x: input }

floor_2:
  desc: "向下取整函数"
  paddle:
    api_name: "paddle.floor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.floor"
    mapping:
      ins: { x: input }

diag_0:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.diag"
    mapping:
      ins: { x: input }

diag_1:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.diag"
    mapping:
      ins: { x: input }

diag_2:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1000, 1000]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.diag"
    mapping:
      ins: { x: input }

trace_0:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      offset: 0
      axis1: 0
      axis2: 1
  pytorch:
    api_name: "torch.trace"
    mapping:
      ins: { x: input }

trace_1:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      offset: 0
      axis1: 0
      axis2: 1
  pytorch:
    api_name: "torch.trace"
    mapping:
      ins: { x: input }

trace_2:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      offset: 0
      axis1: 0
      axis2: 1
  pytorch:
    api_name: "torch.trace"
    mapping:
      ins: { x: input }

nonzero_0:
  desc: "返回输入 x 中非零元素的坐标"
  enable_backward: false
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 2]
  pytorch:
    api_name: "torch.nonzero"
    mapping:
      ins: { x: input }

nonzero_1:
  desc: "返回输入 x 中非零元素的坐标"
  enable_backward: false
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 2]
  pytorch:
    api_name: "torch.nonzero"
    mapping:
      ins: { x: input }

nonzero_2:
  desc: "返回输入 x 中非零元素的坐标"
  enable_backward: false
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [ -1, 2]
  pytorch:
    api_name: "torch.nonzero"
    mapping:
      ins: { x: input }

round_0:
  desc: "将输入中的数值四舍五入到最接近的整数数值"
  paddle:
    api_name: "paddle.round"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.round"
    mapping:
      ins: { x: input }

round_1:
  desc: "将输入中的数值四舍五入到最接近的整数数值"
  paddle:
    api_name: "paddle.round"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.round"
    mapping:
      ins: { x: input }

round_2:
  desc: "将输入中的数值四舍五入到最接近的整数数值"
  paddle:
    api_name: "paddle.round"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.round"
    mapping:
      ins: { x: input }

var_0:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input }

var_1:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input }

var_2:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input }

tile_0:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.tile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      repeat_times: [2, 1]
  pytorch:
    api_name: "torch.tile"
    mapping:
      ins: { x: input, repeat_times: dims }

tile_1:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.tile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      repeat_times: [2, 1]
  pytorch:
    api_name: "torch.tile"
    mapping:
      ins: { x: input, repeat_times: dims }

tile_2:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.tile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      repeat_times: [2, 1]
  pytorch:
    api_name: "torch.tile"
    mapping:
      ins: { x: input, repeat_times: dims }

zeros_like_0:
  desc: "返回一个和 x 具有相同的形状的全零Tensor，数据类型为 dtype 或者和 x 相同"
  paddle:
    api_name: "paddle.zeros_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.zeros_like"
    mapping:
      ins: { x: input }

zeros_like_1:
  desc: "返回一个和 x 具有相同的形状的全零Tensor，数据类型为 dtype 或者和 x 相同"
  paddle:
    api_name: "paddle.zeros_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.zeros_like"
    mapping:
      ins: { x: input }

zeros_like_2:
  desc: "返回一个和 x 具有相同的形状的全零Tensor，数据类型为 dtype 或者和 x 相同"
  paddle:
    api_name: "paddle.zeros_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.zeros_like"
    mapping:
      ins: { x: input }

std_0:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

std_1:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

std_2:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }


argsort_0:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argsort"
    mapping:
      ins: { x: input }

argsort_1:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argsort"
    mapping:
      ins: { x: input }

argsort_2:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argsort"
    mapping:
      ins: { x: input }

maximum_0:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更大的元素保存到返回结果中"
  paddle:
    api_name: "paddle.maximum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.maximum"
    mapping:
      ins: { x: input, y: other }

maximum_1:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更大的元素保存到返回结果中"
  paddle:
    api_name: "paddle.maximum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.maximum"
    mapping:
      ins: { x: input, y: other }

maximum_2:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更大的元素保存到返回结果中"
  paddle:
    api_name: "paddle.maximum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.maximum"
    mapping:
      ins: { x: input, y: other }

unique_0:
  desc: "返回Tensor按升序排序后的独有元素"
  enable_backward: false
  paddle:
    api_name: "paddle.unique"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.unique"
    mapping:
      ins: { x: input }

unique_1:
  desc: "返回Tensor按升序排序后的独有元素"
  enable_backward: false
  paddle:
    api_name: "paddle.unique"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.unique"
    mapping:
      ins: { x: input }

unique_2:
  desc: "返回Tensor按升序排序后的独有元素"
  enable_backward: false
  paddle:
    api_name: "paddle.unique"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.unique"
    mapping:
      ins: { x: input }

numel_0:
  desc: "返回一个长度为1并且元素值为输入 x 元素个数的Tensor"
  paddle:
    api_name: "paddle.numel"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.numel"
    mapping:
      ins: { x: input }

numel_1:
  desc: "返回一个长度为1并且元素值为输入 x 元素个数的Tensor"
  paddle:
    api_name: "paddle.numel"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.numel"
    mapping:
      ins: { x: input }

numel_2:
  desc: "返回一个长度为1并且元素值为输入 x 元素个数的Tensor"
  paddle:
    api_name: "paddle.numel"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.numel"
    mapping:
      ins: { x: input }

ceil_0:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.ceil"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.ceil"
    mapping:
      ins: { x: input }

ceil_1:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.ceil"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.ceil"
    mapping:
      ins: { x: input }

ceil_2:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.ceil"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.ceil"
    mapping:
      ins: { x: input }

prod_0:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input }

prod_1:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input }

prod_2:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input }

isnan_0:
  desc: "返回输入tensor的每一个值是否为 +/-NaN"
  paddle:
    api_name: "paddle.isnan"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]
  pytorch:
    api_name: "torch.isnan"
    mapping:
      ins: { x: input }

clip_0:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -10, 10]
    params:
      min: -5.0
      max: 5.0
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max}

clip_1:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -10, 10]
    params:
      min: -5.0
      max: 5.0
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max}

clip_2:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -10, 10]
    params:
      min: -5.0
      max: 5.0
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max}

cos_0:
  desc: "余弦函数"
  paddle:
    api_name: "paddle.cos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cos"
    mapping:
      ins: { x: input }

cos_1:
  desc: "余弦函数"
  paddle:
    api_name: "paddle.cos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cos"
    mapping:
      ins: { x: input }

cos_2:
  desc: "余弦函数"
  paddle:
    api_name: "paddle.cos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cos"
    mapping:
      ins: { x: input }


sin_0:
  desc: "计算输入的正弦值"
  paddle:
    api_name: "paddle.sin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sin"
    mapping:
      ins: { x: input }

sin_1:
  desc: "计算输入的正弦值"
  paddle:
    api_name: "paddle.sin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sin"
    mapping:
      ins: { x: input }

sin_2:
  desc: "计算输入的正弦值"
  paddle:
    api_name: "paddle.sin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sin"
    mapping:
      ins: { x: input }

equal_all_0:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  enable_backward: false
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [-10, 10]
      y:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [-10, 10]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_1:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  enable_backward: false
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [-10, 10]
      y:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [-10, 10]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_2:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  enable_backward: false
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [-10, 10]
      y:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 100, 100]
        range: [-10, 10]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

matmul_0:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.matmul"
    mapping:
      ins: { x: input, y: other }

matmul_1:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.matmul"
    mapping:
      ins: { x: input, y: other }

matmul_2:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.matmul"
    mapping:
      ins: { x: input, y: other }

arange_0:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: 1.0
      end: 2.0
      step: 1.0
      dtype: "float32"
  pytorch:
    api_name: "torch.arange"
    mapping:
      ins: { start: start, end: end, step: step }

arange_1:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: -3.0
      end: 10000.0
      step: 1.0
      dtype: "float32"
  pytorch:
    api_name: "torch.arange"
    mapping:
      ins: { start: start, end: end, step: step }

arange_2:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: 0.0
      end: 1000000.0
      step: 1.0
      dtype: "float32"
  pytorch:
    api_name: "torch.arange"
    mapping:
      ins: { start: start, end: end, step: step }

any_0:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [1]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_1:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [10000]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_2:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [1000000]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

argmax_0:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argmax"
    mapping:
      ins: { x: input }

argmax_1:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argmax"
    mapping:
      ins: { x: input }

argmax_2:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argmax"
    mapping:
      ins: { x: input }

expand_0:
  desc: "根据 shape 指定的形状扩展 x ，扩展后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.expand"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 1, 1, 1, 1]
  pytorch:
    api_name: "torch.Tensor.expand"
    mapping:
      ins: { x: input, shape: size }

expand_1:
  desc: "根据 shape 指定的形状扩展 x ，扩展后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.expand"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 10, 10, 10, 10]
  pytorch:
    api_name: "torch.Tensor.expand"
    mapping:
      ins: { x: input, shape: size }

expand_2:
  desc: "根据 shape 指定的形状扩展 x ，扩展后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.expand"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 10, 10, 100, 100]
  pytorch:
    api_name: "torch.Tensor.expand"
    mapping:
      ins: { x: input, shape: size }

min_0:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.min"
    mapping:
      ins: { x: input }

min_1:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.min"
    mapping:
      ins: { x: input }

min_2:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.min"
    mapping:
      ins: { x: input }

exp_0:
  desc: "对输入, 逐元素进行以自然数e为底指数运算"
  paddle:
    api_name: "paddle.exp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.exp"
    mapping:
      ins: { x: input }

exp_1:
  desc: "对输入, 逐元素进行以自然数e为底指数运算"
  paddle:
    api_name: "paddle.exp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.exp"
    mapping:
      ins: { x: input }

exp_2:
  desc: "对输入, 逐元素进行以自然数e为底指数运算"
  paddle:
    api_name: "paddle.exp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.exp"
    mapping:
      ins: { x: input }

flatten_0:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.flatten"
    mapping:
      ins: { x: input }

flatten_1:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.flatten"
    mapping:
      ins: { x: input }

flatten_2:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.flatten"
    mapping:
      ins: { x: input }

ones_0:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: [1, 1, 1, 1]
  pytorch:
    api_name: "torch.ones"
    mapping:
      ins: { shape: size }

ones_1:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: [10, 10, 10, 10]
  pytorch:
    api_name: "torch.ones"
    mapping:
      ins: { shape: size }

ones_2:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: [10, 10, 100, 100]
  pytorch:
    api_name: "torch.ones"
    mapping:
      ins: { shape: size }

BatchNorm2D_0:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm2D_1:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      num_features: 10
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm2D_2:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      num_features: 10
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

abs_0:
  desc: "求绝对值"
  paddle:
    api_name: "paddle.abs"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.abs"
    mapping:
      ins: { x: input }

abs_1:
  desc: "求绝对值"
  paddle:
    api_name: "paddle.abs"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.abs"
    mapping:
      ins: { x: input }

abs_2:
  desc: "求绝对值"
  paddle:
    api_name: "paddle.abs"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.abs"
    mapping:
      ins: { x: input }

log_0:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

log_1:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

log_2:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }


squeeze_0:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.squeeze"
    mapping:
      ins: { x: input }

squeeze_1:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 100, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.squeeze"
    mapping:
      ins: { x: input }

squeeze_2:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 100, 100, 100, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.squeeze"
    mapping:
      ins: { x: input }

zeros_0:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape: [1, 1, 1, 1]
  pytorch:
    api_name: "torch.zeros"
    mapping:
      ins: { shape: size }

zeros_1:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape: [10, 10, 10, 10]
  pytorch:
    api_name: "torch.zeros"
    mapping:
      ins: { shape: size }

zeros_2:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape: [10, 10, 100, 100]
  pytorch:
    api_name: "torch.zeros"
    mapping:
      ins: { shape: size }

dot_0:
  desc: "计算向量的内积"
  paddle:
    api_name: "paddle.dot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1]
        range: [ -1, 1]

dot_1:
  desc: "计算向量的内积"
  paddle:
    api_name: "paddle.dot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 100]
        range: [ -1, 1]

dot_2:
  desc: "计算向量的内积"
  paddle:
    api_name: "paddle.dot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1000, 1000]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1000, 1000]
        range: [ -1, 1]

max_0:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.max"
    mapping:
      ins: { x: input }

max_1:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.max"
    mapping:
      ins: { x: input }

max_2:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.max"
    mapping:
      ins: { x: input }

sqrt_0:
  desc: "计算输入的算数平方根"
  paddle:
    api_name: "paddle.sqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sqrt"
    mapping:
      ins: { x: input }

sqrt_1:
  desc: "计算输入的算数平方根"
  paddle:
    api_name: "paddle.sqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sqrt"
    mapping:
      ins: { x: input }

sqrt_2:
  desc: "计算输入的算数平方根"
  paddle:
    api_name: "paddle.sqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sqrt"
    mapping:
      ins: { x: input }

allclose_0:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      rtol: 0.00001
      atol: 0.00000001
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol }

allclose_1:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      rtol: 0.00001
      atol: 0.00000001
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol }

allclose_2:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      rtol: 0.00001
      atol: 0.00000001
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol }

unsqueeze_0:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度"
  paddle:
    api_name: "paddle.unsqueeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      axis: [1, 2]

unsqueeze_1:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度"
  paddle:
    api_name: "paddle.unsqueeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: [1, 2]

unsqueeze_2:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度"
  paddle:
    api_name: "paddle.unsqueeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      axis: [1, 2]

add_0:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_1:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_2:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

mean_0:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input }

mean_1:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input }

mean_2:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input }

sum_0:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input }

sum_1:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input }

sum_2:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input }

reshape_0:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      shape: [1, 1, 1, 1]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

reshape_1:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      shape: [1, 10, 100, 10]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

reshape_2:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1]
    params:
      shape: [100, 10, 10, 100]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

__add___0:
  desc: "加法"
  paddle:
    api_name: "__add__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__add__"
    mapping:
      ins: { x: x, shape: y }

normalize_0:
  desc: "使用 Lp 范数沿维度 axis 对 x 进行归一化"
  paddle:
    api_name: "paddle.nn.functional.normalize"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 3]
    params:
      p: 2
      axis: 1
      epsilon: 0.000000000001
  pytorch:
    api_name: "torch.nn.functional.normalize"
    mapping:
      ins: { x: input, axis: dim, p: p, epsilon: eps }

normalize_1:
  desc: "使用 Lp 范数沿维度 axis 对 x 进行归一化"
  paddle:
    api_name: "paddle.nn.functional.normalize"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -2, 3]
    params:
      p: 2
      axis: 1
      epsilon: 0.000000000001
  pytorch:
    api_name: "torch.nn.functional.normalize"
    mapping:
      ins: { x: input, axis: dim, p: p, epsilon: eps }

normalize_2:
  desc: "使用 Lp 范数沿维度 axis 对 x 进行归一化"
  paddle:
    api_name: "paddle.nn.functional.normalize"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -2, 3]
    params:
      p: 2
      axis: 1
      epsilon: 0.000000000001
  pytorch:
    api_name: "torch.nn.functional.normalize"
    mapping:
      ins: { x: input, axis: dim, p: p, epsilon: eps }

__add___1:
  desc: "加法"
  paddle:
    api_name: "__add__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__add__"
    mapping:
      ins: { x: x, shape: y }

__add___2:
  desc: "加法"
  paddle:
    api_name: "__add__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__add__"
    mapping:
      ins: { x: x, shape: y }

__and___0:
  desc: "&"
  paddle:
    api_name: "__and__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__and__"
    mapping:
      ins: { x: x, shape: y }

__and___1:
  desc: "&"
  paddle:
    api_name: "__and__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__and__"
    mapping:
      ins: { x: x, shape: y }

__and___2:
  desc: "&"
  paddle:
    api_name: "__and__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__and__"
    mapping:
      ins: { x: x, shape: y }

__div___0:
  desc: "/"
  paddle:
    api_name: "__div__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__div__"
    mapping:
      ins: { x: x, shape: y }

__div___1:
  desc: "/"
  paddle:
    api_name: "__div__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__div__"
    mapping:
      ins: { x: x, shape: y }

__div___2:
  desc: "/"
  paddle:
    api_name: "__div__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__div__"
    mapping:
      ins: { x: x, shape: y }


__eq___0:
  desc: "=="
  paddle:
    api_name: "__eq__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__eq__"
    mapping:
      ins: { x: x, shape: y }

__eq___1:
  desc: "=="
  paddle:
    api_name: "__eq__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__eq__"
    mapping:
      ins: { x: x, shape: y }

__eq___2:
  desc: "=="
  paddle:
    api_name: "__eq__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__eq__"
    mapping:
      ins: { x: x, shape: y }

__floordiv___0:
  desc: "//"
  paddle:
    api_name: "__floordiv__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [ 1, 1, 1, 1]
        range: [ 1, 10 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [ 1, 1, 1, 1 ]
        range: [ 1, 10 ]
  pytorch:
    api_name: "__floordiv__"
    mapping:
      ins: { x: x, shape: y }

__floordiv___1:
  desc: "//"
  paddle:
    api_name: "__floordiv__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 10, 10]
        range: [ 1, 10 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 10, 10]
        range: [ 1, 10 ]
  pytorch:
    api_name: "__floordiv__"
    mapping:
      ins: { x: x, shape: y }

__floordiv___2:
  desc: "//"
  paddle:
    api_name: "__floordiv__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 100, 100]
        range: [ 1, 10 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 100, 100]
        range: [ 1, 10 ]
  pytorch:
    api_name: "__floordiv__"
    mapping:
      ins: { x: x, shape: y }

__ge___0:
  desc: ">="
  paddle:
    api_name: "__ge__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__ge__"
    mapping:
      ins: { x: x, shape: y }

__ge___1:
  desc: ">="
  paddle:
    api_name: "__ge__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__ge__"
    mapping:
      ins: { x: x, shape: y }

__ge___2:
  desc: ">="
  paddle:
    api_name: "__ge__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__ge__"
    mapping:
      ins: { x: x, shape: y }

__gt___0:
  desc: ">"
  paddle:
    api_name: "__gt__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__gt__"
    mapping:
      ins: { x: x, shape: y }

__gt___1:
  desc: ">"
  paddle:
    api_name: "__gt__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__gt__"
    mapping:
      ins: { x: x, shape: y }

__gt___2:
  desc: ">"
  paddle:
    api_name: "__gt__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__gt__"
    mapping:
      ins: { x: x, shape: y }

__lt___0:
  desc: "<"
  paddle:
    api_name: "__lt__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__lt__"
    mapping:
      ins: { x: x, shape: y }

__lt___1:
  desc: "<"
  paddle:
    api_name: "__lt__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__lt__"
    mapping:
      ins: { x: x, shape: y }

__lt___2:
  desc: "<"
  paddle:
    api_name: "__lt__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__lt__"
    mapping:
      ins: { x: x, shape: y }

__le___0:
  desc: "<="
  paddle:
    api_name: "__le__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__le__"
    mapping:
      ins: { x: x, shape: y }

__le___1:
  desc: "<="
  paddle:
    api_name: "__le__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__le__"
    mapping:
      ins: { x: x, shape: y }

__le___2:
  desc: "<="
  paddle:
    api_name: "__le__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__le__"
    mapping:
      ins: { x: x, shape: y }

__mod___0:
  desc: "%"
  paddle:
    api_name: "__mod__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [ 1, 1, 1, 1]
        range: [ 1, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [ 1, 1, 1, 1 ]
        range: [ 1, 2]
  pytorch:
    api_name: "__mod__"
    mapping:
      ins: { x: x, shape: y }

__mod___1:
  desc: "%"
  paddle:
    api_name: "__mod__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 10, 10]
        range: [ 1, 1000]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 10, 10]
        range: [ 1, 1000]
  pytorch:
    api_name: "__mod__"
    mapping:
      ins: { x: x, shape: y }

__mod___2:
  desc: "%"
  paddle:
    api_name: "__mod__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 100, 100]
        range: [ 1, 1000]
      y:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [10, 10, 100, 100]
        range: [ 1, 1000]
  pytorch:
    api_name: "__mod__"
    mapping:
      ins: { x: x, shape: y }

__mul___0:
  desc: "*"
  paddle:
    api_name: "__mul__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__mul__"
    mapping:
      ins: { x: x, shape: y }

__mul___1:
  desc: "*"
  paddle:
    api_name: "__mul__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__mul__"
    mapping:
      ins: { x: x, shape: y }

__mul___2:
  desc: "*"
  paddle:
    api_name: "__mul__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__mul__"
    mapping:
      ins: { x: x, shape: y }


__ne___0:
  desc: "!="
  paddle:
    api_name: "__ne__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__ne__"
    mapping:
      ins: { x: x, shape: y }

__ne___1:
  desc: "!="
  paddle:
    api_name: "__ne__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__ne__"
    mapping:
      ins: { x: x, shape: y }

__ne___2:
  desc: "!="
  paddle:
    api_name: "__ne__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__ne__"
    mapping:
      ins: { x: x, shape: y }

__or___0:
  desc: "|"
  paddle:
    api_name: "__or__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__or__"
    mapping:
      ins: { x: x, shape: y }

__or___1:
  desc: "|"
  paddle:
    api_name: "__or__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__or__"
    mapping:
      ins: { x: x, shape: y }

__or___2:
  desc: "|"
  paddle:
    api_name: "__or__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__or__"
    mapping:
      ins: { x: x, shape: y }

__pow___0:
  desc: "**"
  paddle:
    api_name: "__pow__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__pow__"
    mapping:
      ins: { x: x, shape: y }

__pow___1:
  desc: "**"
  paddle:
    api_name: "__pow__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__pow__"
    mapping:
      ins: { x: x, shape: y }

__pow___2:
  desc: "**"
  paddle:
    api_name: "__pow__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__pow__"
    mapping:
      ins: { x: x, shape: y }

__sub___0:
  desc: "-"
  paddle:
    api_name: "__sub__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__sub__"
    mapping:
      ins: { x: x, shape: y }

__sub___1:
  desc: "-"
  paddle:
    api_name: "__sub__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__sub__"
    mapping:
      ins: { x: x, shape: y }

__sub___2:
  desc: "-"
  paddle:
    api_name: "__sub__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__sub__"
    mapping:
      ins: { x: x, shape: y }

__xor___0:
  desc: "^"
  paddle:
    api_name: "__xor__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [ 1, 1, 1, 1]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__xor__"
    mapping:
      ins: { x: x, shape: y }

__xor___1:
  desc: "^"
  paddle:
    api_name: "__xor__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 10, 10]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__xor__"
    mapping:
      ins: { x: x, shape: y }

__xor___2:
  desc: "^"
  paddle:
    api_name: "__xor__"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10, 100, 100]
        range: [ -1, 1 ]
  pytorch:
    api_name: "__xor__"
    mapping:
      ins: { x: x, shape: y }
