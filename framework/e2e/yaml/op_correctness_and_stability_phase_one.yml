cast_base:
  desc: "将 x 的数据类型转换为 dtype 并输出。支持输出和输入的数据类型相同"
  paddle:
    api_name: "paddle.cast"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      dtype: "int32"

cast_0:
  desc: "将 x 的数据类型转换为 dtype 并输出。支持输出和输入的数据类型相同"
  paddle:
    api_name: "paddle.cast"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      dtype: "float32"

Linear_base:
  desc: "线性变换层"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3]
        range: [ -1, 1]
    params:
      in_features: 3
      out_features: 5

Linear_0:
  desc: "线性变换层"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2]
        range: [ -1, 1]
    params:
      in_features: 2
      out_features: 4

linear:
  desc: "线性变换"
  paddle:
    api_name: "paddle.nn.functional.linear"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -1, 1]

full_base:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: 3.0
      dtype: "float32"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

full_0:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: True
      dtype: "bool"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

full_1:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: False
      dtype: "bool"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

full_2:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: 1
      dtype: "int32"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

full_3:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: !!python/tuple [2, 3, 4, 4]
      fill_value: 1
      dtype: "int32"
  pytorch:
    api_name: "torch.full"
    mapping:
      ins: { shape: size, fill_value: fill_value }

gather_base:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]

gather_0:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]
      axis: 0

gather_1:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]
      axis: 1

gather_2:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目, 并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]
      axis: 2

gelu:
  desc: "gelu激活层"
  paddle:
    api_name: "paddle.nn.functional.gelu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      approximate: False
  pytorch:
    api_name: "torch.nn.functional.gelu"
    mapping:
      ins: { x: input }

LayerNorm_base:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [2, 2, 3]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_0:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 2, 3]
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_3:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 2, 3]
      epsilon: 0.00001
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_4:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 3]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_5:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 3]
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_6:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 3]
      epsilon: 0.00001
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_7:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [3,]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_8:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [3,]
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_9:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [3,]
      epsilon: 0.00001
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

mean_base:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input }

mean_0:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim }

mean_1:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim }

mean_2:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0, 1, 2]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim }

mean_3:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      keepdim: False
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

mean_4:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: True
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

reshape__base:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      shape: [6, 4, 4]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

reshape__0:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape_"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: [1, -1]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

reshape__1:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: [2, 0]

reshape__2:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: !!python/tuple [1, 4]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

reshape__3:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: !!python/tuple [2, 2]
  pytorch:
    api_name: "torch.reshape"
    mapping:
      ins: { x: input, shape: shape }

scale_base:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 1.0
      bias: 0.0
      bias_after_scale: True

scale_0:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: True

softmax:
  desc: "softmax激活函数"
  paddle:
    api_name: "paddle.nn.functional.softmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.functional.softmax"
    mapping:
      ins: { x: input, axis: dim }

Softmax_0:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

softmax_:
  desc: "softmax_激活函数, 对输入 x 采用 Inplace 策略"
  paddle:
    api_name: "paddle.nn.functional.softmax_"
    params:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
      axis: -1

CrossEntropyLoss_0:
  desc: "交叉熵损失 0"
  paddle:
    api_name: "paddle.nn.CrossEntropyLoss"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
      label:
        random: false
        dtype: "float32"
        value: [[0.]]
    params:
      soft_label: True
      weight:
      ignore_index: -100
      reduction: 'mean'
  pytorch:
    api_name: "torch.nn.CrossEntropyLoss"
    mapping:
      ins: {input: input, label: target, weight: weight, ignore_index: ignore_index, reduction: reduction}

split_1:
  desc: "tensor分割 1"
  enable_backward: false
  paddle:
    api_name: "paddle.split"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10]
        range: [ -1, 1 ]
    params:
      num_or_sections: 2
      axis: 2
  pytorch:
    api_name: "torch.split"
    mapping:
      ins: {x: tensor, num_or_sections: split_size_or_sections, axis: dim}

transpose_1:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 1"
  enable_backward: false
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      perm: [3, 0, 1, 2]
  pytorch:
    api_name: "torch.permute"
    mapping:
      ins: {x: input, perm: dims}

Dropout_1:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 1"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.Dropout"
    mapping:
      ins: {x: input, p: p}

dropout_1:
  desc: "根据给定的丢弃概率 p ，在训练过程中随机将一些神经元输出设置为0 1"
  enable_backward: false
  paddle:
    api_name: "paddle.nn.functional.dropout"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      p: 0.5
  pytorch:
    api_name: "torch.nn.functional.dropout"
    mapping:
      ins: {x: input, p: p}

matmul_1:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.matmul"
    mapping:
      ins: { x: input, y: other }

Embedding_1:
  desc: "embedding嵌入层 1"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      x:
        random: true
        dtype: "int32"
        shape: [ 10, 10, 10, 10 ]
        range: [ 0, 3 ]
    params:
      num_embeddings: 4
      embedding_dim: 4
      padding_idx:
      sparse: False
  pytorch:
    api_name: "torch.nn.Embedding"
    mapping:
      ins: {x: input, num_embeddings: num_embeddings, embedding_dim: embedding_dim, padding_idx: padding_idx, sparse: sparse}

concat_0:
  desc: "对输入沿参数 axis 轴进行联结，返回一个新的 Tensor"
  paddle:
    api_name: "paddle.concat"
    inputs:
      x:
        -
          random: true
          type: "Tensor"
          dtype: "float32"
          shape: [ 1, 1 ]
          range: [ -1, 1 ]
        -
          random: true
          type: "Tensor"
          dtype: "float32"
          shape: [ 1, 1 ]
          range: [ -1, 1 ]
    params:
      axis: 0
  pytorch:
    api_name: "torch.concat"
    mapping:
      ins: { x: tensors, axis: dim }

full_like_1:
  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  enable_backward: False
  paddle:
    api_name: "paddle.full_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      fill_value: 3.
  pytorch:
    api_name: "torch.full_like"
    mapping:
      ins: { x: input, fill_value: fill_value }

arange_1:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  enable_backward: False
  paddle:
    api_name: "paddle.arange"
    params:
      start: -3.0
      end: 10000.0
      step: 1.0
      dtype: "float32"
  pytorch:
    api_name: "torch.arange"
    mapping:
      ins: { start: start, end: end, step: step }

expand_as_1:
  desc: "根据 y 的形状扩展 x ，扩展后， x 的形状和 y 的形状相同"
  paddle:
    api_name: "paddle.expand_as"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10, 10, 10, 10]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.expand_as"
#    mapping:
#      ins: { x: input, y: other }

triu_1:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的上三角部分被定义为对角线上和上方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.triu"
    mapping:
      ins: { x: input }

sum_1:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input }

where_0:
  desc: "根据 condition 来选择 x 或 y 中的对应元素来组成新的 Tensor"
  paddle:
    api_name: "paddle.where"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1]
        range: [ -1, 1]
    params:
      condition:
        random: false
        type: "Tensor"
        dtype: "bool"
        value: True
  pytorch:
    api_name: "torch.where"
    mapping:
      ins: { condition: condition, x: input, y: other }

tile_1:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.tile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      repeat_times: [2, 1]
  pytorch:
    api_name: "torch.tile"
    mapping:
      ins: { x: input, repeat_times: dims }

topk_1:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  enable_backward: false
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      k: 3
  pytorch:
    api_name: "torch.topk"
    mapping:
      ins: { x: input, k: k }

unsqueeze_1:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度"
  paddle:
    api_name: "paddle.unsqueeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.unsqueeze"
    mapping:
      ins: { x: input, axis: dim }

zeros_like_1:
  desc: "返回一个和 x 具有相同的形状的全零Tensor，数据类型为 dtype 或者和 x 相同"
  enable_backward: False
  paddle:
    api_name: "paddle.zeros_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.zeros_like"
    mapping:
      ins: { x: input }

scatter_0:
  desc: "为 x 中的每个元素计算由 y 中相对应元素决定的赫维赛德阶跃函数"
  enable_backward: false
  paddle:
    api_name: "paddle.scatter"
    inputs:
      x:
        random: false
        type: "Tensor"
        dtype: "float32"
        value: [[1, 1], [2, 2], [3, 3]]
      index:
        random: false
        type: "Tensor"
        dtype: "int64"
        value: [2, 1, 0, 1]
      updates:
        random: false
        type: "Tensor"
        dtype: "float32"
        value: [[1, 1], [2, 2], [3, 3], [4, 4]]
#  pytorch:
#    api_name: "torch.index_copy"
#    mapping:
#      ins: { x: input, index: index, updates: source }

sort_1:
  desc: "该OP根据perm对输入的多维Tensor进行数据重排 1"
  enable_backward: false
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 10, 10, 10, 10 ]
        range: [ -1, 1 ]
    params:
      axis: -1
      descending: False
  pytorch:
    api_name: "torch.sort"
    mapping:
      ins: {x: input, axis: dim, descending: descending}

shape_base:
  desc: "获得输入Tensor或SelectedRows的shape"
  paddle:
    api_name: "paddle.shape"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

log_1:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

logical_and_1:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  enable_backward: false
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

multinomial_1:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor 1"
  enable_backward: False
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 100, 100 ]
        range: [ 0, 1 ]
    params:
      num_samples: 1
      replacement: False
  pytorch:
    api_name: "torch.multinomial"
    mapping:
      ins: {x: input, num_samples: num_samples, replacement: replacement}

ones_like_1:
  desc: "返回一个和输入参数 x 具有相同形状的数值都为1的Tensor"
  enable_backward: false
  paddle:
    api_name: "paddle.ones_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.ones_like"
    mapping:
      ins: { x: input }

index_sample_base:
  desc: "对输入 x 中的元素进行批量抽样，取 index 指定的对应下标的元素，按index中出现的先后顺序组织，填充为一个新的张量"
  paddle:
    api_name: "paddle.index_sample"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5]
        range: [ -1, 1]
      index:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4, 5]
        range: [ 0, 3]

argsort_1:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  enable_backward: False
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.argsort"
    mapping:
      ins: { x: input }

cumsum_1:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 10, 10, 10]
        range: [ -1, 1]
    params:
      axis: -1
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

"""
暂时没有的api:
paddle.incubate.nn.FusedLinear
paddle.incubate.nn.functional.fused_linear
fleet.meta_parallel.ParallelCrossEntropy
paddle.distributed.collective._c_identity
fleet.meta_parallel.VocabParallelEmbedding
paddle.distributed.collective._mp_allreduce
incubate.nn.FusedDropoutAdd
paddle.distributed.collective._c_concat
paddle.concat 竞品框架可能不支持[Tensor, Tensor]输入
paddle.incubate.softmax_mask_fuse_upper_triangle
fleet.meta_parallel.ColumnParallelLinear
fleet.meta_parallel.RowParallelLinear
paddle.incubate.nn.functional.flash_attention

"""
