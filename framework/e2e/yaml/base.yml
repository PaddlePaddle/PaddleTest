abs_base:
  desc: "求绝对值"
  paddle:
    api_name: "paddle.abs"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.abs"
    mapping:
      ins: { x: input }

acos_base:
  desc: "arccosine函数"
  paddle:
    api_name: "paddle.acos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.acos"
    mapping:
      ins: { x: input }

add_base:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_0:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float64"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float64"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_1:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_2:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 1]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_3:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

add_4:
  desc: "逐元素相加算子"
  paddle:
    api_name: "paddle.add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.add"
    mapping:
      ins: { x: input, y: other }

# 暂不支持list[Tensor, Tensor]输入
#add_n:
#  desc: "逐元素相加算子"
#  paddle:
#    api_name: "paddle.add_n"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]
#      y:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]

addmm_base:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -1, 1]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5]
        range: [ -1, 1]
    params:
      alpha: 1.0
      beta: 1.0
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_0:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: 5.0
      beta: 0.5
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_1:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: 0.0
      beta: 0.5
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_2:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: -3.3
      beta: 0.5
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_3:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: -3.3
      beta: 0.0
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_4:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: -3.3
      beta: -0.7
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_5:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: 1
      beta: 1
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_6:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5]
        range: [ -10, 10]
    params:
      alpha: 0
      beta: 0
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_7:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5]
        range: [ -10, 10]
    params:
      alpha: 3.3
      beta: -3.3
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

addmm_8:
  desc: "计算x和y的乘积，将结果乘以标量alpha，再加上input与beta的乘积，得到输出"
  paddle:
    api_name: "paddle.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 1]
        range: [ -10, 10]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5]
        range: [ -10, 10]
    params:
      alpha: 3.3
      beta: -3.3
  pytorch:
    api_name: "torch.addmm"
    mapping:
      ins: { input: input, x: mat1, y: mat2, alpha: alpha, beta: beta }

## weaktrans不支持bool输入
#all:
#  desc: "对指定维度上的Tensor元素进行逻辑与运算，并输出相应的计算结果"
#  paddle:
#    api_name: "paddle.all"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]

allclose_base:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.00001]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.0]
    params:
      rtol: 0.01
      atol: 0.01
      equal_nan: False
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan }

allclose_0:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      rtol: 0.00001
      atol: 0.00000001
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol }

allclose_1:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.1]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.0]
    params:
      rtol: 0.01
      atol: 0.0
      equal_nan: False
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan }

allclose_2:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.1]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.0]
    params:
      rtol: 0.000001
      atol: 0.001
      equal_nan: False
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan }

allclose_3:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.1, 0.001, 4000000]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10, 0.001, 4000000]
    params:
      rtol: 0.000001
      atol: 0.001
      equal_nan: True
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan }

allclose_4:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [nan]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [nan]
    params:
      rtol: 0.000001
      atol: 0.001
      equal_nan: True
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan }

allclose_5:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.1, 0.001, 4000000]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10, 0.001, 4000000]
    params:
      rtol: 0.000001
      atol: 0.001
      equal_nan: False
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other, rtol: rtol, atol: atol, equal_nan: equal_nan }

allclose_6:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.001]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10.00001]
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other }

allclose_7:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other }

allclose_8:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      rtol: -3.0
      atol: -2.0

allclose_9:
  desc: "逐个检查x和y的所有元素是否均满足∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.allclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: []
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: []
  pytorch:
    api_name: "torch.allclose"
    mapping:
      ins: { x: input, y: other }

any_base:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False], [False, True]]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_0:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [10]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_1:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [10, 10]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_2:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [3, 4, 2]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_3:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [2, 4, 4, 2]
        range: [-4, 4]
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input }

any_4:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [2, 4, 4, 2]
        range: [-4, 4]
    params:
      axis: 1
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input, axis: dim }

any_5:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [2, 4, 4, 2]
        range: [-4, 4]
    params:
      axis: -1
  pytorch:
    api_name: "torch.any"
    mapping:
      ins: { x: input, axis: dim }

any_6:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [2, 4, 4, 2]
        range: [-4, 4]
    params:
      axis: !!python/tuple [0, 1]

any_7:
  desc: "对指定维度上的Tensor元素进行逻辑或运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.any"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "bool"
        shape: [2, 4, 4, 2]
        range: [-4, 4]
    params:
      keepdim: True

asin_base:
  desc: "arcsin函数"
  paddle:
    api_name: "paddle.asin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.asin"
    mapping:
      ins: { x: input }

atan_base:
  desc: "arctangent函数"
  paddle:
    api_name: "paddle.atan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.atan"
    mapping:
      ins: { x: input }

atan2_base:
  desc: "对x/y进行逐元素的arctangent运算，通过符号确定象限"
  paddle:
    api_name: "paddle.atan2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6]
        range: [ -5, 5]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.atan2"
    mapping:
      ins: { x: input, y: other }

atan2_0:
  desc: "对x/y进行逐元素的arctangent运算，通过符号确定象限"
  paddle:
    api_name: "paddle.atan2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.atan2"
    mapping:
      ins: { x: input, y: other }

atan2_1:
  desc: "对x/y进行逐元素的arctangent运算，通过符号确定象限"
  paddle:
    api_name: "paddle.atan2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [6, 6]
        range: [ -5, 5]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [6, 6]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.atan2"
    mapping:
      ins: { x: input, y: other }

atan2_2:
  desc: "对x/y进行逐元素的arctangent运算，通过符号确定象限"
  paddle:
    api_name: "paddle.atan2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 4, 4, 4]
        range: [ -5, 5]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 4, 4, 4]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.atan2"
    mapping:
      ins: { x: input, y: other }

ceil_base:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.ceil"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.ceil"
    mapping:
      ins: { x: input }

clip_base:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
    params:
      min: -5.0
      max: 5.0
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max}

clip_0:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      min: -4
      max: 6
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max }

clip_1:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ 1, 10]
    params:
      min: 0.0
      max: 5
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max }

clip_2:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
    params:
      min: 1.0
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min }

clip_3:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -1, 10]
    params:
      min: 5
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min }

clip_4:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-10, 3, 0]
    params:
      min: 2.0
      max: 2.0
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input , min: min, max: max }

clip_5:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -1, 10]
    params:
      min:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1.0]

clip_6:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ 1, 10]
    params:
      max: 5
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input, max: max }

clip_7:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[1, 1, 1], [1, 1, 1]]]
    params:
      max: 1
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input, max: max }

clip_8:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [-10, 2, 0]
    params:
      max: -1
  pytorch:
    api_name: "torch.clip"
    mapping:
      ins: { x: input, max: max }

clip_9:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -1, 10]
    params:
      min: 1
      max:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [2.0]

clip_10:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -1, 10]
    params:
      min:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-10]
      max:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [20]

clip_11:
  desc: "向上取整运算函数"
  paddle:
    api_name: "paddle.clip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -1, 10]

conj_base:
  desc: "是逐元素计算Tensor的共轭运算"
  paddle:
    api_name: "paddle.conj"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.conj"
    mapping:
      ins: { x: input }

conj_0:
  desc: "是逐元素计算Tensor的共轭运算"
  paddle:
    api_name: "paddle.conj"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]

cos_base:
  desc: "余弦函数"
  paddle:
    api_name: "paddle.cos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cos"
    mapping:
      ins: { x: input }

cosh_base:
  desc: "双曲余弦函数"
  paddle:
    api_name: "paddle.cosh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.cosh"
    mapping:
      ins: { x: input }

cumsum_base:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -1
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

cumsum_0:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

cumsum_1:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -4
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

cumsum_2:
  desc: "沿给定 axis 计算张量 x 的累加和"
  paddle:
    api_name: "paddle.cumsum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 3
  pytorch:
    api_name: "torch.cumsum"
    mapping:
      ins: { x: input, axis: dim }

cumprod_base:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
    params:
      dim: 0
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_0:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
    params:
      dim: 1
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_1:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
    params:
      dim: -1
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_2:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -2, 2]
    params:
      dim: 3
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_3:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -2, 2]
    params:
      dim: 4
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

cumprod_4:
  desc: "沿给定 axis 计算张量 x 的累乘"
  paddle:
    api_name: "paddle.cumprod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [12]
        range: [ -2, 2]
    params:
      dim: 0
  pytorch:
    api_name: "torch.cumprod"
    mapping:
      ins: { x: input, dim: dim }

digamma_base:
  desc: "逐元素计算输入Tensor的digamma函数值"
  paddle:
    api_name: "paddle.digamma"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.digamma"
    mapping:
      ins: { x: input }

digamma_0:
  desc: "逐元素计算输入Tensor的digamma函数值"
  paddle:
    api_name: "paddle.digamma"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 6, 6, 6, 6]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.digamma"
    mapping:
      ins: { x: input }

divide_base:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [2, 3, 4]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, 5, 2]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_0:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3, 3]
        range: [ 1, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ 1, 10]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_1:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ 1, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_2:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.1, 2]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.1, 2]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_3:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, 2, 3]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_4:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-3], [-11], [-2]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1], [2], [1]]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_5:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_6:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, 2, 3]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

divide_7:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.divide"
    mapping:
      ins: { x: input, y: other }

equal_base:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.3, 4.5, -2.], [2., 0., 2.]], [[1., -4., -2.], [2., 1.1, 2.]]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.3, 4., -2.], [2., 1.5, 2.]], [[1., -4., -2.], [2., 0.1, 2.]]]

equal_0:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[2, 4, -2], [2, 0, 2]], [[1, -4, -2], [2, 1, 2]]]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[2, 4, -1], [2, 1, 3]], [[1, -4, -2], [2, 0, 2]]]

equal_1:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, 2, 3]

equal_2:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3]]

equal_3:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3]]

equal_4:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]

equal_5:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False, True], [True, False, True], [True, False, True]]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True, False, True]

equal_6:
  desc: "逐元素比较x和y是否相等，相同位置的元素相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False, True], [True, False, True], [True, False, True]]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, True, True]]

equal_all_base:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.3, 4.5, -2.], [2., 0., 2.]], [[1., -4., -2.], [2., 1.1, 2.]]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.3, 4.5, -2.], [2., 0., 2.]], [[1., -4., -2.1], [2., 1.1, 2.]]]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_0:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [3, 3, 3]
        range: [-10, 10]
      y:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [3, 3, 3]
        range: [-10, 10]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_1:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [-10, 10]
      y:
        random: True
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [-10, 10]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_2:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: True
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [-10, 10]
      y:
        random: True
        type: "Tensor"
        dtype: "int32"
        shape: [3, 3]
        range: [-10, 10]
#  pytorch:
#    api_name: "torch.equal"
#    mapping:
#      ins: { x: input, y: other }

equal_all_3:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[3, 3, 3], [3, 3, 3]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[3, 3, 3]]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_4:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False, True], [True, False, True]]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False, True]]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

equal_all_5:
  desc: "如果所有相同位置的元素相同返回True，否则返回False"
  paddle:
    api_name: "paddle.equal_all"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False, True], [True, False, True]]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [[True, False, True], [True, False, True]]
  pytorch:
    api_name: "torch.equal"
    mapping:
      ins: { x: input, y: other }

erf_base:
  desc: "逐元素计算 Erf 激活函数"
  paddle:
    api_name: "paddle.erf"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.erf"
    mapping:
      ins: { x: input }

exp_base:
  desc: "对输入, 逐元素进行以自然数e为底指数运算"
  paddle:
    api_name: "paddle.exp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.exp"
    mapping:
      ins: { x: input }

expm1_base:
  desc: "对输入，逐元素进行以自然数e为底指数运算并减1"
  paddle:
    api_name: "paddle.expm1"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.expm1"
    mapping:
      ins: { x: input }

floor_base:
  desc: "向下取整函数"
  paddle:
    api_name: "paddle.floor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.floor"
    mapping:
      ins: { x: input }

floor_divide_base:
  desc: "输入 x 与输入 y 逐元素整除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.floor_divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 3, 4]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1, 5, 2]
  pytorch:
    api_name: "torch.floor_divide"
    mapping:
      ins: { x: input, y: other }

floor_divide_0:
  desc: "输入 x 与输入 y 逐元素整除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.floor_divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 3, 3]
        range: [ 1, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3]
        range: [ 1, 10]
  pytorch:
    api_name: "torch.floor_divide"
    mapping:
      ins: { x: input, y: other }

floor_divide_1:
  desc: "输入 x 与输入 y 逐元素整除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.floor_divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [-10, 9]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [-10, 9]
  pytorch:
    api_name: "torch.floor_divide"
    mapping:
      ins: { x: input, y: other }

floor_divide_2:
  desc: "输入 x 与输入 y 逐元素整除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.floor_divide"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [0, 0, 0]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1, -1, 3]
  pytorch:
    api_name: "torch.floor_divide"
    mapping:
      ins: { x: input, y: other }

floor_divide_3:
  desc: "输入 x 与输入 y 逐元素整除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.floor_divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -10, 20]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ 1, 5]
  pytorch:
    api_name: "torch.floor_divide"
    mapping:
      ins: { x: input, y: other }

greater_equal_base:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[2.0, 1.0, -3.5], [-2.7, 1.5, 3], [0, 4.1, 8.6]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-2.0, 1.1, -3.5], [-2.5, 1.5, 3.5], [0.5, 4.2, 8.3]]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

greater_equal_0:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

greater_equal_1:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, -1, 2, -4]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

greater_equal_2:
  desc: "逐元素地返回 x>=y 的逻辑值，相同位置前者输入大于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.greater_equal"
    mapping:
      ins: { x: input, y: other }

greater_than_base:
  desc: "逐元素地返回 x>y 的逻辑值，相同位置前者输入大于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[2.0, 1.0, -3.5], [-2.7, 1.5, 3], [0, 4.1, 8.6]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-2.0, 1.1, -3.5], [-2.5, 1.5, 3.5], [0.5, 4.2, 8.3]]

greater_than_0:
  desc: "逐元素地返回 x>y 的逻辑值，相同位置前者输入大于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

greater_than_1:
  desc: "逐元素地返回 x>y 的逻辑值，相同位置前者输入大于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, -1, 2, -4]

greater_than_2:
  desc: "逐元素地返回 x>y 的逻辑值，相同位置前者输入大于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.greater_than"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -10, 10]

kron_base:
  desc: "计算两个张量的克罗内克积, 结果是一个合成的张量, 由第二个张量经过第一个张量中的元素缩放 后的组块构成。"
  paddle:
    api_name: "paddle.kron"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.kron"
    mapping:
      ins: { x: input, y: other }

kron_0:
  desc: "计算两个张量的克罗内克积, 结果是一个合成的张量, 由第二个张量经过第一个张量中的元素缩放 后的组块构成。"
  paddle:
    api_name: "paddle.kron"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 2]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 3, 2]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.kron"
    mapping:
      ins: { x: input, y: other }

kron_1:
  desc: "计算两个张量的克罗内克积, 结果是一个合成的张量, 由第二个张量经过第一个张量中的元素缩放 后的组块构成。"
  paddle:
    api_name: "paddle.kron"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 2]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.kron"
    mapping:
      ins: { x: input, y: other }

kron_2:
  desc: "计算两个张量的克罗内克积, 结果是一个合成的张量, 由第二个张量经过第一个张量中的元素缩放 后的组块构成。"
  paddle:
    api_name: "paddle.kron"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.kron"
    mapping:
      ins: { x: input, y: other }

kron_3:
  desc: "计算两个张量的克罗内克积, 结果是一个合成的张量, 由第二个张量经过第一个张量中的元素缩放 后的组块构成。"
  paddle:
    api_name: "paddle.kron"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 5]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.kron"
    mapping:
      ins: { x: input, y: other }

less_equal_base:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[2.0, 1.0, -3.5], [-2.7, 1.5, 3], [0, 4.1, 8.6]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-2.0, 1.1, -3.5], [-2.5, 1.5, 3.5], [0.5, 4.2, 8.3]]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }

less_equal_0:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }

less_equal_1:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }

less_equal_2:
  desc: "逐元素地返回 x<=y 的逻辑值，相同位置前者输入小于等于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.less_equal"
    mapping:
      ins: { x: input, y: other }

less_than_base:
  desc: "逐元素地返回 x<y 的逻辑值，相同位置前者输入小于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[2.0, 1.0, -3.5], [-2.7, 1.5, 3], [0, 4.1, 8.6]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-2.0, 1.1, -3.5], [-2.5, 1.5, 3.5], [0.5, 4.2, 8.3]]

less_than_0:
  desc: "逐元素地返回 x<y 的逻辑值，相同位置前者输入小于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

less_than_1:
  desc: "逐元素地返回 x<y 的逻辑值，相同位置前者输入小于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -10, 10]

less_than_2:
  desc: "逐元素地返回 x<y 的逻辑值，相同位置前者输入小于后者输入则返回True，否则返回False"
  paddle:
    api_name: "paddle.less_than"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -10, 10]

lgamma_base:
  desc: "计算输入 x 的 gamma 函数的自然对数并返回"
  paddle:
    api_name: "paddle.lgamma"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.lgamma"
    mapping:
      ins: { x: input }

log_base:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

log_0:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

log_1:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-3]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

log_2:
  desc: "Log激活函数(计算自然对数)"
  paddle:
    api_name: "paddle.log"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log"
    mapping:
      ins: { x: input }

log10_base:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

log10_0:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

log10_1:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-3]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

log10_2:
  desc: "Log10激活函数(计算底为10对数)"
  paddle:
    api_name: "paddle.log10"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log10"
    mapping:
      ins: { x: input }

log2_base:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0.001, 10]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

log2_0:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

log2_1:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-3]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

log2_2:
  desc: "Log2激活函数(计算底为2对数)"
  paddle:
    api_name: "paddle.log2"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.log2"
    mapping:
      ins: { x: input }

logical_and_base:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

logical_and_0:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True, False, True, False]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

logical_and_1:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

logical_and_2:
  desc: "逐元素的对 x 和 y 进行逻辑与运算"
  paddle:
    api_name: "paddle.logical_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_and"
    mapping:
      ins: { x: input, y: other }

logical_not_base:
  desc: "逐元素的对 X Tensor进行逻辑非运算"
  paddle:
    api_name: "paddle.logical_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_not"
    mapping:
      ins: { x: input }

logical_not_0:
  desc: "逐元素的对 X Tensor进行逻辑非运算"
  paddle:
    api_name: "paddle.logical_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_not"
    mapping:
      ins: { x: input }

logical_or_base:
  desc: "逐元素的对 X 和 Y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other }

logical_or_0:
  desc: "逐元素的对 x 和 y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True, False, True, False]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other }

logical_or_1:
  desc: "逐元素的对 x 和 y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other }

logical_or_2:
  desc: "逐元素的对 x 和 y 进行逻辑或运算"
  paddle:
    api_name: "paddle.logical_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_or"
    mapping:
      ins: { x: input, y: other }

logical_xor_base:
  desc: "逐元素的对 X 和 Y 进行逻辑异或运算"
  paddle:
    api_name: "paddle.logical_xor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_xor"
    mapping:
      ins: { x: input, y: other }

logical_xor_0:
  desc: "逐元素的对 x 和 y 进行逻辑异或运算"
  paddle:
    api_name: "paddle.logical_xor"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True]
      y:
        random: False
        type: "Tensor"
        dtype: "bool"
        value: [True, False, True, False]
  pytorch:
    api_name: "torch.logical_xor"
    mapping:
      ins: { x: input, y: other }

logical_xor_1:
  desc: "逐元素的对 x 和 y 进行逻辑异或运算"
  paddle:
    api_name: "paddle.logical_xor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_xor"
    mapping:
      ins: { x: input, y: other }

logical_xor_2:
  desc: "逐元素的对 x 和 y 进行逻辑异或运算"
  paddle:
    api_name: "paddle.logical_xor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.logical_xor"
    mapping:
      ins: { x: input, y: other }

bitwise_and_base:
  desc: "逐元素的对 X 和 Y 进行按位与运算"
  paddle:
    api_name: "paddle.bitwise_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bitwise_and"
    mapping:
      ins: { x: input, y: other }

bitwise_not_base:
  desc: "逐元素的对 X 和 Y 进行按位取反运算"
  paddle:
    api_name: "paddle.bitwise_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bitwise_not"
    mapping:
      ins: { x: input }

bitwise_or_base:
  desc: "逐元素的对 X 和 Y 进行按位或运算"
  paddle:
    api_name: "paddle.bitwise_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bitwise_or"
    mapping:
      ins: { x: input, y: other }

bitwise_xor_base:
  desc: "逐元素的对 X 和 Y 进行按位异或运算"
  paddle:
    api_name: "paddle.bitwise_xor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.bitwise_xor"
    mapping:
      ins: { x: input, y: other }

logsumexp_base:
  desc: "沿着参数``axis`` 计算 x 的以e为底的指数的和的自然对数"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

logsumexp_0:
  desc: "沿着参数``axis`` 计算 x 的以e为底的指数的和的自然对数"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 2
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: { x: input, axis: dim }

logsumexp_1:
  desc: "沿着参数``axis`` 计算 x 的以e为底的指数的和的自然对数"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0, 1]
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: { x: input, axis: dim }

logsumexp_2:
  desc: "沿着参数``axis`` 计算 x 的以e为底的指数的和的自然对数"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      keepdim: True
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

logsumexp_3:
  desc: "沿着参数``axis`` 计算 x 的以e为底的指数的和的自然对数"
  paddle:
    api_name: "paddle.logsumexp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0, 1]
      keepdim: True
  pytorch:
    api_name: "torch.logsumexp"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

max_base:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.max"
    mapping:
      ins: { x: input }

max_0:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2

max_1:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      keepdim: True

max_2:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False

max_3:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.max"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [-2, 1]
      keepdim: False

maximum_base:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更大的元素保存到返回结果中"
  paddle:
    api_name: "paddle.maximum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.maximum"
    mapping:
      ins: { x: input, y: other }

maximum_0:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更大的元素保存到返回结果中"
  paddle:
    api_name: "paddle.maximum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.maximum"
    mapping:
      ins: { x: input, y: other }

maximum_1:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更大的元素保存到返回结果中"
  paddle:
    api_name: "paddle.maximum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.maximum"
    mapping:
      ins: { x: input, y: other }

mean_base:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input }

mean_0:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim }

mean_1:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0, 1]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim }

mean_2:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0, 1, 2]
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim }

mean_3:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      keepdim: False
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

mean_4:
  desc: "沿参数 axis 计算 x 的平均值"
  paddle:
    api_name: "paddle.mean"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: True
  pytorch:
    api_name: "torch.mean"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

median_base:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数"
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      keepdims: False

median_0:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数"
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1

median_1:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数"
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdims: True

median_2:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数"
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      keepdim: True

median_3:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数"
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[2, 3, 1, 1], [10, 1, 15, nan], [4, 8, nan, 7]]
    params:
      axis: 0

median_4:
  desc: "沿给定的轴 axis 计算 x 中元素的中位数"
  paddle:
    api_name: "paddle.median"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

min_base:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.min"
    mapping:
      ins: { x: input }

min_0:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False

min_1:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2

min_2:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      keepdim: True

min_3:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.min"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [-2, 1]
      keepdim: False

minimum_base:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [2, -2, 0, 3]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

minimum_0:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

minimum_1:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

minimum_2:
  desc: "逐元素对比输入的两个Tensor，并且把各个位置更小的元素保存到返回结果中"
  paddle:
    api_name: "paddle.minimum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.minimum"
    mapping:
      ins: { x: input, y: other }

mm_base:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

mm_0:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 2]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 3]
        range: [ -1, 1]

mm_1:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 2]
        range: [ -1, 1]

mm_2:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5]
        range: [ -1, 1]

mm_3:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -1, 1]

mm_4:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7]
        range: [ -1, 1]

mm_5:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 4]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mm"
    mapping:
      ins: { input: input, mat2: mat2 }

mm_6:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度，但当任一输入维度大于3时，两个输入的维度必须相等"
  paddle:
    api_name: "paddle.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3]
        range: [ -1, 1]
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.mm"
    mapping:
      ins: { input: input, mat2: mat2 }

## 测试框架暂不支持
#multiplex:
#  desc: "根据给定的index参数，从每个输入Tensor中选择特定行构造输出Tensor"
#  paddle:
#    api_name: "paddle.multiplex"
#    inputs:
#      input:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]

multiply_base:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [2.0]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, -1, 4, 5]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

multiply_0:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

multiply_1:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

multiply_2:
  desc: "逐元素相乘算子，输入 x 与输入 y 逐元素相乘，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.multiply"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.multiply"
    mapping:
      ins: { x: input, y: other }

neg_base:
  desc: "计算输入 x 的相反数并返回"
  paddle:
    api_name: "paddle.neg"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.neg"
    mapping:
      ins: { x: input }

neg_0:
  desc: "计算输入 x 的相反数并返回"
  paddle:
    api_name: "paddle.neg"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.neg"
    mapping:
      ins: { x: input }

neg_1:
  desc: "计算输入 x 的相反数并返回"
  paddle:
    api_name: "paddle.neg"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0, 0, 0], [0, 0, 0]]
  pytorch:
    api_name: "torch.neg"
    mapping:
      ins: { x: input }

not_equal_base:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[2.0, 1.0, -3.5], [-2.7, 1.5, 3], [0, 4.1, 8.6]]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[-2.0, 1.1, -3.5], [-2.5, 1.5, 3.5], [0.5, 4.2, 8.3]]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_0:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1, -1, 2, -4]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_1:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 2, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_2:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 2]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_3:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[True, False, True], [True, False, True], [True, False, True]]
      y:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [True, False, True]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

not_equal_4:
  desc: "返回 x!=y 逐元素比较x和y是否相等，相同位置的元素不相同则返回True，否则返回False"
  paddle:
    api_name: "paddle.not_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.not_equal"
    mapping:
      ins: { x: input, y: other }

pow_base:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 6]
  pytorch:
    api_name: "torch.pow"
    mapping:
      ins: { x: input, y: exponent }

pow_0:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -2, 6]

pow_1:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0]
  pytorch:
    api_name: "torch.pow"
    mapping:
      ins: { x: input, y: exponent }

pow_2:
  desc: "指数算子，逐元素计算 x 的 y 次幂指数算子，逐元素计算 x 的 y 次幂"
  paddle:
    api_name: "paddle.pow"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -2, 6]
  pytorch:
    api_name: "torch.pow"
    mapping:
      ins: { x: input, y: exponent }

prod_base:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input }

prod_0:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

prod_1:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -1
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input, axis: dim }

prod_2:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: True
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

prod_3:
  desc: "对指定维度上的Tensor元素进行求乘积运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.prod"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      keepdim: True
  pytorch:
    api_name: "torch.prod"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

reciprocal_base:
  desc: "对输入Tensor取倒数"
  paddle:
    api_name: "paddle.reciprocal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, -2]
  pytorch:
    api_name: "torch.reciprocal"
    mapping:
      ins: { x: input }

round_base:
  desc: "将输入中的数值四舍五入到最接近的整数数值"
  paddle:
    api_name: "paddle.round"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.round"
    mapping:
      ins: { x: input }

rsqrt_base:
  desc: "rsqrt激活函数"
  paddle:
    api_name: "paddle.rsqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 1, 2]
  pytorch:
    api_name: "torch.rsqrt"
    mapping:
      ins: { x: input }

rsqrt_0:
  desc: "rsqrt激活函数"
  paddle:
    api_name: "paddle.rsqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, -2]
  pytorch:
    api_name: "torch.rsqrt"
    mapping:
      ins: { x: input }

rsqrt_1:
  desc: "rsqrt激活函数"
  paddle:
    api_name: "paddle.rsqrt"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0, 0]
  pytorch:
    api_name: "torch.rsqrt"
    mapping:
      ins: { x: input }

scale_base:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 1.0
      bias: 0.0
      bias_after_scale: True

scale_0:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: True

scale_1:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: False

scale_2:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: True
      act: 'tanh'

scale_3:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: True
      act: 'softmax'

scale_4:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: True
      act: 'sigmoid'

scale_5:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale: 2.0
      bias: 4.0
      bias_after_scale: True
      act: 'relu'

scale_6:
  desc: "对输入Tensor进行缩放和偏置"
  paddle:
    api_name: "paddle.scale"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

sign_base:
  desc: "对输入参数 ``x``中每个元素进行正负判断，并且输出正负判断值：1代表正，-1代表负，0代表零"
  paddle:
    api_name: "paddle.sign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.sign"
    mapping:
      ins: { x: input }

sin_base:
  desc: "计算输入的正弦值"
  paddle:
    api_name: "paddle.sin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sin"
    mapping:
      ins: { x: input }

sin_0:
  desc: "计算输入的正弦值"
  paddle:
    api_name: "paddle.sin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.sin"
    mapping:
      ins: { x: input }

sinh_base:
  desc: "双曲正弦函数"
  paddle:
    api_name: "paddle.sinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sinh"
    mapping:
      ins: { x: input }

sinh_0:
  desc: "双曲正弦函数"
  paddle:
    api_name: "paddle.sinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.sinh"
    mapping:
      ins: { x: input }

sqrt_base:
  desc: "计算输入的算数平方根"
  paddle:
    api_name: "paddle.sqrt"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.sqrt"
    mapping:
      ins: { x: input }

sqrt_0:
  desc: "计算输入的算数平方根"
  paddle:
    api_name: "paddle.sqrt"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0, 0]
  pytorch:
    api_name: "torch.sqrt"
    mapping:
      ins: { x: input }

square_base:
  desc: "对输入参数``x``进行逐元素取平方运算"
  paddle:
    api_name: "paddle.square"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 2]
  pytorch:
    api_name: "torch.square"
    mapping:
      ins: { x: input }

square_0:
  desc: "对输入参数``x``进行逐元素取平方运算"
  paddle:
    api_name: "paddle.square"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0, 0]
  pytorch:
    api_name: "torch.square"
    mapping:
      ins: { x: input }

stanh_base:
  desc: "stanh 激活函数"
  paddle:
    api_name: "paddle.stanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      scale_a: 0.67
      scale_b: 1.72

stanh_0:
  desc: "stanh 激活函数"
  paddle:
    api_name: "paddle.stanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      scale_a: 0.67
      scale_b: 1.72

stanh_1:
  desc: "stanh 激活函数"
  paddle:
    api_name: "paddle.stanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      scale_a: 1.43
      scale_b: 4.56

stanh_2:
  desc: "stanh 激活函数"
  paddle:
    api_name: "paddle.stanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      scale_a: 6.42
      scale_b: 3.58

stanh_3:
  desc: "stanh 激活函数"
  paddle:
    api_name: "paddle.stanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

std_base:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

std_0:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -1
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

std_1:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 2
      unbiased: False
      keepdim: False
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

std_2:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: False
      keepdim: True
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

std_3:
  desc: "沿给定的轴 axis 计算 x 中元素的标准差"
  paddle:
    api_name: "paddle.std"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.std"
    mapping:
      ins: { x: input }

subtract_base:
  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.subtract"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.subtract"
    mapping:
      ins: { x: input, y: other }

subtract_0:
  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.subtract"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [2, nan, 5]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, 4, nan]
  pytorch:
    api_name: "torch.subtract"
    mapping:
      ins: { x: input, y: other }

subtract_1:
  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.subtract"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [2, -inf, 5]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1, 4, inf]
  pytorch:
    api_name: "torch.subtract"
    mapping:
      ins: { x: input, y: other }

sum_base:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input }

sum_0:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

sum_1:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [1, 2]
      keepdim: False
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

sum_2:
  desc: "对指定维度上的Tensor元素进行求和运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.sum"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: True
  pytorch:
    api_name: "torch.sum"
    mapping:
      ins: { x: input, axis: dim, keepdim: keepdim }

tan_base:
  desc: "三角函数tangent"
  paddle:
    api_name: "paddle.tan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tan"
    mapping:
      ins: { x: input }

tanh_base:
  desc: "tanh 激活函数"
  paddle:
    api_name: "paddle.tanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh_0:
  desc: "tanh 激活函数"
  paddle:
    api_name: "paddle.tanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -100, -1]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh_1:
  desc: "tanh 激活函数"
  paddle:
    api_name: "paddle.tanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh_2:
  desc: "tanh 激活函数"
  paddle:
    api_name: "paddle.tanh"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0, 0]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh__base:
  desc: "tanh 激活函数, 对输入 x 采用 Inplace 策略"
  paddle:
    api_name: "paddle.tanh_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh__0:
  desc: "tanh 激活函数, 对输入 x 采用 Inplace 策略"
  paddle:
    api_name: "paddle.tanh_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -100, -1]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh__1:
  desc: "tanh 激活函数, 对输入 x 采用 Inplace 策略"
  paddle:
    api_name: "paddle.tanh_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

tanh__2:
  desc: "tanh 激活函数, 对输入 x 采用 Inplace 策略"
  paddle:
    api_name: "paddle.tanh_"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0, 0]
  pytorch:
    api_name: "torch.tanh"
    mapping:
      ins: { x: input }

trace_base:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

trace_0:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4]
        range: [ -1, 1]
    params:
      offset: 0
      axis1: 0
      axis2: 1
  pytorch:
    api_name: "torch.trace"
    mapping:
      ins: { x: input }

trace_1:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4]
        range: [ -1, 1]
    params:
      offset: -1
      axis1: 0
      axis2: 1

trace_2:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4]
        range: [ -1, 1]
    params:
      offset: 1
      axis1: 0
      axis2: 1

trace_3:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      offset: 0
      axis1: -3
      axis2: -2

trace_4:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      offset: -1
      axis1: 2
      axis2: -2

trace_5:
  desc: "计算输入 Tensor 在指定平面上的对角线元素之和，并输出相应的计算结果"
  paddle:
    api_name: "paddle.trace"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      offset: 1
      axis1: 0
      axis2: 2

var_base:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input }

var_0:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

var_1:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 2
      unbiased: False
      keepdim: False
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

var_2:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      unbiased: True
      keepdim: True
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

var_3:
  desc: "沿给定的轴 axis 计算 x 中元素的方差"
  paddle:
    api_name: "paddle.var"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2
      unbiased: True
      keepdim: False
  pytorch:
    api_name: "torch.var"
    mapping:
      ins: { x: input, axis: dim, unbiased: unbiased, keepdim: keepdim }

diagonal_base:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input }

diagonal_0:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -5, 5]
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input }

diagonal_1:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -5, 5]
    params:
      offset: 1
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input, offset: offset }

diagonal_2:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -5, 5]
    params:
      offset: -1
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input, offset: offset }

diagonal_3:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6, 6, 4, 4]
        range: [ -5, 5]
    params:
      axis1: 0
      axis2: 3
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input, axis1: dim1, axis2: dim2 }

diagonal_4:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6, 6, 4, 4]
        range: [ -5, 5]
    params:
      axis1: 3
      axis2: 4
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input, axis1: dim1, axis2: dim2 }

diagonal_5:
  desc: "如果输入是 2D Tensor，则返回对角线元素. 如果输入的维度大于 2D，则返回由对角线元素组成的数组"
  paddle:
    api_name: "paddle.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6, 6, 4, 4]
        range: [ -5, 5]
    params:
      axis1: -1
      axis2: 2
  pytorch:
    api_name: "torch.diagonal"
    mapping:
      ins: { x: input, axis1: dim1, axis2: dim2 }

trunc_base:
  desc: "将输入 Tensor 的小数部分置0，返回置0后的 Tensor ，如果输入 Tensor 的数据类型为整数，则不做处理"
  paddle:
    api_name: "paddle.trunc"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

trunc_0:
  desc: "将输入 Tensor 的小数部分置0，返回置0后的 Tensor ，如果输入 Tensor 的数据类型为整数，则不做处理"
  paddle:
    api_name: "paddle.trunc"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

trunc_1:
  desc: "将输入 Tensor 的小数部分置0，返回置0后的 Tensor ，如果输入 Tensor 的数据类型为整数，则不做处理"
  paddle:
    api_name: "paddle.trunc"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -10, 10]

log1p_base:
  desc: "计算Log1p（加一的自然对数）结果"
  paddle:
    api_name: "paddle.log1p"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

log1p_0:
  desc: "计算Log1p（加一的自然对数）结果"
  paddle:
    api_name: "paddle.log1p"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0.5, 20]

is_empty_base:
  desc: "测试变量是否为空"
  paddle:
    api_name: "paddle.is_empty"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

is_empty_0:
  desc: "测试变量是否为空"
  paddle:
    api_name: "paddle.is_empty"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: []

is_empty_1:
  desc: "测试变量是否为空"
  paddle:
    api_name: "paddle.is_empty"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[]]

# 测试框架兼容问题
#is_tensor:
#  desc: "测试输入对象是否是 paddle.Tensor"
#  paddle:
#    api_name: "paddle.is_tensor"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]

isfinite_base:
  desc: "返回输入 Tensor 的每一个值是否为有限值（既非 +/-INF 也非 +/-NaN ）"
  paddle:
    api_name: "paddle.isfinite"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]

isinf_base:
  desc: "返回输入tensor的每一个值是否为 +/-INF"
  paddle:
    api_name: "paddle.isinf"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]

isnan_base:
  desc: "返回输入tensor的每一个值是否为 +/-NaN"
  paddle:
    api_name: "paddle.isnan"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]

imag_base:
  desc: "返回一个包含输入复数Tensor的虚部数值的新Tensor"
  paddle:
    api_name: "paddle.imag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

real_base:
  desc: "返回一个包含输入复数Tensor的实部数值的新Tensor"
  paddle:
    api_name: "paddle.real"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

shape_base:
  desc: "获得输入Tensor或SelectedRows的shape"
  paddle:
    api_name: "paddle.shape"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

shape_0:
  desc: "获得输入Tensor或SelectedRows的shape"
  paddle:
    api_name: "paddle.shape"
    inputs:
      input:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[]]

shape_1:
  desc: "获得输入Tensor或SelectedRows的shape"
  paddle:
    api_name: "paddle.shape"
    inputs:
      input:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-inf, inf, -nan], [2.4, 0., -inf]]

broadcast_shape_base:
  desc: "该函数返回对x_shape大小的张量和y_shape大小的张量做broadcast操作后得到的shape"
  paddle:
    api_name: "paddle.broadcast_shape"
    params:
      x_shape: [2, 3, 4, 4, 1]
      y_shape: [2, 3, 1, 4, 3]

broadcast_shape_0:
  desc: "该函数返回对x_shape大小的张量和y_shape大小的张量做broadcast操作后得到的shape"
  paddle:
    api_name: "paddle.broadcast_shape"
    params:
      x_shape: [2, 1, 3, 1, 4, 2, 3]
      y_shape: [1, 2, 1, 1, 3]

arange_base:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: -3.0
      end: 15.0
      step: 2.0
      dtype: "float32"

arange_0:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: 5

arange_1:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: 5
      end: 10

arange_2:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start: 1
      end: 20
      step: 3

arange_3:
  desc: "该OP返回以步长 step 均匀分隔给定数值区间[start, end)的1-D Tensor"
  paddle:
    api_name: "paddle.arange"
    params:
      start:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1]
      end:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [20]
      step:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [3]

diag_base:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5]
        range: [ -1, 1]

diag_0:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -10, 10]

diag_1:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ -10, 10]

diag_2:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1]
        range: [ -10, 10]

diag_3:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
    params:
      offset: 0

diag_4:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
    params:
      offset: -1

diag_5:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
    params:
      offset: 1

diag_6:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ -10, 10]
    params:
      offset: 0

diag_7:
  desc: "如果 x 是向量（1-D张量），则返回带有 x 元素作为对角线的2-D方阵. 如果 x 是矩阵（2-D张量），则提取 x 的对角线元素，以1-D张量返回"
  paddle:
    api_name: "paddle.diag"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ -10, 10]
    params:
      offset: 10

diagflat_base:
  desc: "如果 x 是一维张量，则返回带有 x 元素作为对角线的二维方阵. 如果 x 是大于等于二维的张量，则返回一个二维方阵"
  paddle:
    api_name: "paddle.diagflat"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]

diagflat_0:
  desc: "如果 x 是一维张量，则返回带有 x 元素作为对角线的二维方阵. 如果 x 是大于等于二维的张量，则返回一个二维方阵"
  paddle:
    api_name: "paddle.diagflat"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]
    params:
      offset: -1

diagflat_1:
  desc: "如果 x 是一维张量，则返回带有 x 元素作为对角线的二维方阵. 如果 x 是大于等于二维的张量，则返回一个二维方阵"
  paddle:
    api_name: "paddle.diagflat"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]
    params:
      offset: 2

empty_base:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.empty"
    params:
      shape: [2, 3, 4, 4]
      dtype: "float32"

empty_0:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.empty"
    params:
      shape: [2, 3, 4, 4]
      dtype: "int32"

empty_like_base:
  desc: "根据参数``x`` 的shape和数据类型 dtype 创建未初始化的Tensor"
  paddle:
    api_name: "paddle.empty_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

empty_like_0:
  desc: "根据参数``x`` 的shape和数据类型 dtype 创建未初始化的Tensor"
  paddle:
    api_name: "paddle.empty_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

eye_base:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.eye"
    params:
      num_rows: 5

eye_0:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.eye"
    params:
      num_rows: 3
      num_columns: 5

eye_1:
  desc: "创建形状大小为shape并且数据类型为dtype的Tensor，其中元素值是未初始化的"
  paddle:
    api_name: "paddle.eye"
    params:
      num_rows: 5
      num_columns: 3
      dtype: "int64"

full_base:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: 3.0
      dtype: "float32"

full_0:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: True
      dtype: "bool"

full_1:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: False
      dtype: "bool"

full_2:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value: 1
      dtype: "int32"

full_3:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: !!python/tuple [2, 3, 4, 4]
      fill_value: 1
      dtype: "int32"

full_4:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 3, 4, 4]
      fill_value: 1
      dtype: "int32"

full_5:
  desc: "创建形状大小为 shape 并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full"
    params:
      shape: [2, 3, 4, 4]
      fill_value:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1]
      dtype: "int32"

full_like_base:
  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      fill_value: 3.

full_like_0:
  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
  paddle:
    api_name: "paddle.full_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      fill_value: True

#full_like_1:
#  desc: "创建一个和 x 具有相同的形状并且数据类型为 dtype 的Tensor，其中元素值均为 fill_value"
#  paddle:
#    api_name: "paddle.full_like"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]
#    params:
#      fill_value:
#        random: False
#        type: "Tensor"
#        dtype: "float32"
#        value: [-inf]

linspace_base:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: -3.0
      stop: 15.0
      num: 4
      dtype: "float32"

linspace_0:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 3.5
      stop: 9.6
      num: 5

linspace_1:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [3.9]
      stop: 9.6
      num: 5

linspace_2:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [4.0]
      stop:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [9.3]
      num: 5

linspace_3:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 3
      stop: 9
      num: 1

linspace_4:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 9
      stop: 3
      num: 5

linspace_5:
  desc: "返回一个Tensor，Tensor的值为在区间start和stop上均匀间隔的num个值，输出Tensor的长度为num"
  paddle:
    api_name: "paddle.linspace"
    params:
      start: 3
      stop: 9
      num:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [5]

numel_base:
  desc: "返回一个长度为1并且元素值为输入 x 元素个数的Tensor"
  paddle:
    api_name: "paddle.numel"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

ones_base:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: [2, 3, 4, 4]

ones_0:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: !!python/tuple [2, 3, 4, 4]

ones_1:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: [2, 3, 4, 4]
      dtype: 'bool'

ones_2:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为1的Tensor"
  paddle:
    api_name: "paddle.ones"
    params:
      shape: []

ones_like_base:
  desc: "返回一个和输入参数 x 具有相同形状的数值都为1的Tensor"
  paddle:
    api_name: "paddle.ones_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

ones_like_0:
  desc: "返回一个和输入参数 x 具有相同形状的数值都为1的Tensor"
  paddle:
    api_name: "paddle.ones_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -100, 100]

zeros_base:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape: [2, 3, 4, 4]

zeros_0:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape: !!python/tuple [2, 3, 4, 4]

zeros_1:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2]
      dtype: 'int32'

zeros_2:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape: [1, 2, 3]
      dtype: 'bool'

zeros_3:
  desc: "创建形状为 shape 、数据类型为 dtype 且值全为0的Tensor"
  paddle:
    api_name: "paddle.zeros"
    params:
      shape:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: []

zeros_like_base:
  desc: "返回一个和 x 具有相同的形状的全零Tensor，数据类型为 dtype 或者和 x 相同"
  paddle:
    api_name: "paddle.zeros_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

zeros_like_0:
  desc: "返回一个和 x 具有相同的形状的全零Tensor，数据类型为 dtype 或者和 x 相同"
  paddle:
    api_name: "paddle.zeros_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -100, 100]

argmax_base:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

argmax_0:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      dtype: "int32"
      keepdim: False

argmax_1:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 2

argmax_2:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -1

argmax_3:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 1, 2]
    params:
      axis: -1
      keepdim: True

argmax_4:
  desc: "沿参数``axis`` 计算输入 x 的最大元素的索引"
  paddle:
    api_name: "paddle.argmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False

argmin_base:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

argmin_0:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      dtype: "int32"
      keepdim: False

argmin_1:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 2

argmin_2:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -1

argmin_3:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 1, 2]
    params:
      axis: -1
      keepdim: True

argmin_4:
  desc: "沿参数``axis`` 计算输入 x 的最小元素的索引"
  paddle:
    api_name: "paddle.argmin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False

argsort_base:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

argsort_0:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0

argsort_1:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1

argsort_2:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -1

argsort_3:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据的相应索引，其维度和输入相同。默认升序排列"
  paddle:
    api_name: "paddle.argsort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 0
      descending: True

index_sample_base:
  desc: "对输入 x 中的元素进行批量抽样，取 index 指定的对应下标的元素，按index中出现的先后顺序组织，填充为一个新的张量"
  paddle:
    api_name: "paddle.index_sample"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5]
        range: [ -1, 1]
      index:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4, 5]
        range: [ 0, 3]

index_select_base:
  desc: "沿着指定轴 axis 对输入 x 进行索引，取 index 中指定的相应项，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 4, 4, 4]
        range: [ -1, 1]
      index:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4]
        range: [ 0, 3]

index_select_0:
  desc: "沿着指定轴 axis 对输入 x 进行索引，取 index 中指定的相应项，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.index_select"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [0, 2]
    params:
      axis: 1

masked_select_base:
  desc: "返回一个1-D 的Tensor, Tensor的值是根据 mask 对输入 x 进行选择的"
  paddle:
    api_name: "paddle.masked_select"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      mask:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [2, 3, 4, 4]

nonzero_base:
  desc: "返回输入 x 中非零元素的坐标"
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]

nonzero_0:
  desc: "返回输入 x 中非零元素的坐标"
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1.0, 1.0, 4.0], [0.0, 2.0, 0.0], [0.0, 0.0, 3.0]]
    params:
      as_tuple: False

nonzero_1:
  desc: "返回输入 x 中非零元素的坐标"
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1.0, 1.0, 4.0], [0.0, 2.0, 0.0], [0.0, 0.0, 3.0]]
    params:
      as_tuple: True

nonzero_2:
  desc: "返回输入 x 中非零元素的坐标"
  paddle:
    api_name: "paddle.nonzero"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      as_tuple: True

sort_base:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据，其维度和输入相同"
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]

sort_0:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据，其维度和输入相同"
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      axis: 0

sort_1:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据，其维度和输入相同"
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      axis: 1

sort_2:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据，其维度和输入相同"
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      axis: -1

sort_3:
  desc: "对输入变量沿给定轴进行排序，输出排序好的数据，其维度和输入相同"
  paddle:
    api_name: "paddle.sort"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      axis: 0
      descending: True

searchsorted_base:
  desc: "根据给定的 values 在 sorted_sequence 的最后一个维度查找合适的索引"
  paddle:
    api_name: "paddle.searchsorted"
    inputs:
      sorted_sequence:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      values:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

searchsorted_0:
  desc: "根据给定的 values 在 sorted_sequence 的最后一个维度查找合适的索引"
  paddle:
    api_name: "paddle.searchsorted"
    inputs:
      sorted_sequence:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      values:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      out_int32: True
      right: False

searchsorted_1:
  desc: "根据给定的 values 在 sorted_sequence 的最后一个维度查找合适的索引"
  paddle:
    api_name: "paddle.searchsorted"
    inputs:
      sorted_sequence:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      values:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      out_int32: False
      right: True

topk_base:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 3

topk_0:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 3
      axis: -1
      largest: True
      sorted: True

topk_1:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 3
      axis: -1
      largest: False
      sorted: True

topk_2:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 3
      axis: -2
      largest: True
      sorted: False

topk_3:
  desc: "沿着可选的 axis 查找topk最大或者最小的结果和结果所在的索引信息"
  paddle:
    api_name: "paddle.topk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 2
      axis: -1
      largest: True
      sorted: True

assign_base:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      output:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -2, 1]

assign_0:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]

assign_1:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      output:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -2, 1]

assign_2:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      output:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [2, 3, 4, 4]
        range: [ -2, 1]

assign_3:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    params:
      x: [2, 3, 4, 4]
      output:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -2, 1]

assign_4:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    params:
      x: 5
      output:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -2, 1]

assign_5:
  desc: "将输入Tensor或numpy数组拷贝至输出Tensor"
  paddle:
    api_name: "paddle.assign"
    params:
      x: !!python/tuple [2, 3, 4, 4]
      output:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -2, 1]

bernoulli_base:
  desc: "该OP以输入 x 为概率，生成一个伯努利分布（0-1分布）的Tensor"
  paddle:
    api_name: "paddle.bernoulli"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]

multinomial_base:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5]
        range: [ 0, 1]

multinomial_0:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5]
        range: [ 0, 1]
    params:
      num_samples: 1
      replacement: False

multinomial_1:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5]
        range: [ 0, 1]
    params:
      num_samples: 3
      replacement: False

multinomial_2:
  desc: "以输入 x 为概率，生成一个多项分布的Tensor"
  paddle:
    api_name: "paddle.multinomial"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5]
        range: [ 0, 1]
    params:
      num_samples: 1
      replacement: True

normal_base:
  desc: "返回符合正态分布（均值为 mean ，标准差为 std 的正态随机分布）的随机 Tensor"
  paddle:
    api_name: "paddle.normal"
    params:
      shape: [2, 3, 4, 4]

normal_0:
  desc: "返回符合正态分布（均值为 mean ，标准差为 std 的正态随机分布）的随机 Tensor"
  paddle:
    api_name: "paddle.normal"
    params:
      mean:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5]
        range: [ -1, 1]
      std:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5]
        range: [ 0, 1]

normal_1:
  desc: "返回符合正态分布（均值为 mean ，标准差为 std 的正态随机分布）的随机 Tensor"
  paddle:
    api_name: "paddle.normal"
    params:
      mean:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5]
        range: [ -1, 1]
      std: 0.01

rand_base:
  desc: "返回符合均匀分布的、范围在[0, 1)的Tensor，形状为 shape，数据类型为 dtype"
  paddle:
    api_name: "paddle.rand"
    params:
      shape: [2, 3, 4, 4]

rand_0:
  desc: "返回符合均匀分布的、范围在[0, 1)的Tensor，形状为 shape，数据类型为 dtype"
  paddle:
    api_name: "paddle.rand"
    params:
      shape: [2, 3, 4, 4]
      dtype: 'float32'

randint_base:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor"
  paddle:
    api_name: "paddle.randint"
    params:
      high: 5
      shape: [2, 3, 4, 4]

randint_0:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor"
  paddle:
    api_name: "paddle.randint"
    params:
      low: 2
      high: 5
      shape: [2, 3, 4, 4]

randint_1:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor"
  paddle:
    api_name: "paddle.randint"
    params:
      high: 6
      shape: [2, 3, 4, 4]
      dtype: "int32"

randint_like_base:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor，输出的形状与x的形状一致"
  paddle:
    api_name: "paddle.randint_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      high: 5

randint_like_0:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor，输出的形状与x的形状一致"
  paddle:
    api_name: "paddle.randint_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      low: 3
      high: 5

randint_like_1:
  desc: "返回服从均匀分布的、范围在[low, high)的随机Tensor，输出的形状与x的形状一致"
  paddle:
    api_name: "paddle.randint_like"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      high: 5
      dtype: "int32"

randn_base:
  desc: "返回符合标准正态分布（均值为0，标准差为1的正态随机分布）的随机Tensor"
  paddle:
    api_name: "paddle.randn"
    params:
      shape: [2, 3, 4, 4]

randperm_base:
  desc: "返回一个数值在0到n-1、随机排列的1-D Tensor"
  paddle:
    api_name: "paddle.randperm"
    params:
      n: 10

uniform_base:
  desc: "返回数值服从范围[min, max)内均匀分布的随机Tensor"
  paddle:
    api_name: "paddle.uniform"
    params:
      shape: [2, 3, 4, 4]

uniform_0:
  desc: "返回数值服从范围[min, max)内均匀分布的随机Tensor"
  paddle:
    api_name: "paddle.uniform"
    params:
      shape: [2, 3, 4, 4]
      min: -1.0
      max: 2.0
      seed: 0

uniform_1:
  desc: "返回数值服从范围[min, max)内均匀分布的随机Tensor"
  paddle:
    api_name: "paddle.uniform"
    params:
      shape: [2, 3, 4, 4]
      min: 1.0
      max: 5.0

uniform_2:
  desc: "返回数值服从范围[min, max)内均匀分布的随机Tensor"
  paddle:
    api_name: "paddle.uniform"
    params:
      shape: [2, 3, 4, 4]
      min: 1.0
      max: 5.0
      seed: 33

standard_normal_base:
  desc: "返回符合标准正态分布（均值为0，标准差为1的正态随机分布）的随机Tensor"
  paddle:
    api_name: "paddle.standard_normal"
    params:
      shape: [2, 3, 4, 4]

bincount_base:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [10]
        range: [ 1, 20]

bincount_0:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [20]
        range: [ 1, 20]
      weights:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [20]
        range: [ -1, 1]

bincount_1:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [20]
        range: [ 1, 20]
      weights:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [20]
        range: [ -1, 1]
    params:
      minlength: 30

bincount_2:
  desc: "统计输入张量中每个元素出现的次数，如果传入weights张量则每次计数加一时会乘以weights张量对应的值"
  paddle:
    api_name: "paddle.bincount"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [20]
        range: [ 1, 20]
      weights:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [20]
        range: [ -1, 1]
    params:
      minlength: 5

bmm_base:
  desc: "对输入x及输入y进行矩阵相乘"
  paddle:
    api_name: "paddle.bmm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 5]
        range: [ -1, 1]

cross_base:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

cross_0:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 4, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 4, 3]
        range: [ -1, 1]
    params:
      axis: 0

cross_1:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1

cross_2:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 3, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 3, 4]
        range: [ -1, 1]
    params:
      axis: 2

cross_3:
  desc: "计算张量 x 和 y 在 axis 维度上的向量积（叉积）"
  paddle:
    api_name: "paddle.cross"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 4]
        range: [ -1, 1]
    params:
      axis: -2

dist_base:
  desc: "计算 (x-y) 的 p 范数（p-norm）"
  paddle:
    api_name: "paddle.dist"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

dist_0:
  desc: "计算 (x-y) 的 p 范数（p-norm）"
  paddle:
    api_name: "paddle.dist"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: -.inf

dist_1:
  desc: "计算 (x-y) 的 p 范数（p-norm）"
  paddle:
    api_name: "paddle.dist"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: .inf

dist_2:
  desc: "计算 (x-y) 的 p 范数（p-norm）"
  paddle:
    api_name: "paddle.dist"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: 5

dot_base:
  desc: "计算向量的内积"
  paddle:
    api_name: "paddle.dot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]

histogram_base:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

histogram_0:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      bins: 4

histogram_1:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      bins: 4
      min: -4

histogram_2:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      bins: 4
      min: -40

histogram_3:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -4, 2]
    params:
      bins: 4
      max: 0

histogram_4:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -4, 2]
    params:
      bins: 4
      max: 5

histogram_5:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -4, 2]
    params:
      bins: 4
      min: 4
      max: 5

histogram_6:
  desc: "计算输入张量的直方图。以min和max为range边界，将其均分成bins个直条"
  paddle:
    api_name: "paddle.histogram"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -4, 2]
    params:
      bins: 4
      min: -41
      max: -5

matmul_base:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

matmul_0:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 5, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]

matmul_1:
  desc: "计算两个Tensor的乘积，遵循完整的广播规则"
  paddle:
    api_name: "paddle.matmul"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 1, 5, 2]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 5]
        range: [ -1, 1]

mv_base:
  desc: "计算矩阵 x 和向量 vec 的乘积"
  paddle:
    api_name: "paddle.mv"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 4]
        range: [ -1, 1]
    params:
      vec:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -1, 1]

mv_0:
  desc: "计算矩阵 x 和向量 vec 的乘积"
  paddle:
    api_name: "paddle.mv"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 4]
        range: [ -1, 1]
    params:
      vec:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [0, 0, 0, 0]

rank_base:
  desc: "计算输入Tensor的维度（秩）"
  paddle:
    api_name: "paddle.rank"
    inputs:
      input:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[2., 2., 4., 6.], [1., 1., 2., 3.], [-5., 1., 4., 3.]]

rank_0:
  desc: "计算输入Tensor的维度（秩）"
  paddle:
    api_name: "paddle.rank"
    inputs:
      input:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[6, 4], [0, 0]]

rank_1:
  desc: "计算输入Tensor的维度（秩）"
  paddle:
    api_name: "paddle.rank"
    inputs:
      input:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[6, 4], [3, 2]]

t_base:
  desc: "对小于等于2维的Tensor进行数据转置。0维和1维Tensor返回本身"
  paddle:
    api_name: "paddle.t"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 4]
        range: [ -1, 1]

t_0:
  desc: "对小于等于2维的Tensor进行数据转置。0维和1维Tensor返回本身"
  paddle:
    api_name: "paddle.t"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: []
        range: [ -1, 1]

t_1:
  desc: "对小于等于2维的Tensor进行数据转置。0维和1维Tensor返回本身"
  paddle:
    api_name: "paddle.t"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -1, 1]

tril_base:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]

tril_0:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: 0

tril_1:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: 1

tril_2:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: -1

tril_3:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: -5

tril_4:
  desc: "返回输入矩阵 input 的下三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.tril"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: 5

triu_base:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的上三角部分被定义为对角线上和上方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 7, 7]
        range: [ -1, 1]

triu_0:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: 0

triu_1:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: 1

triu_2:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: -1

triu_3:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [7, 6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: -5

triu_4:
  desc: "返回输入矩阵 input 的上三角部分，其余部分被设为0。 矩形的下三角部分被定义为对角线上和下方的元素"
  paddle:
    api_name: "paddle.triu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 3, 3]
        range: [ -1, 1]
    params:
      diagonal: 5

broadcast_to_base:
  desc: "根据 shape 指定的形状广播 x ，广播后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.broadcast_to"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 3, 1]
        range: [ -1, 1]
    params:
      shape: [2, 3, 4, 3, 5]

broadcast_0:
  desc: "根据 shape 指定的形状广播 x ，广播后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.broadcast_to"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3]
        range: [ -1, 1]
    params:
      shape: [1, 2, 1, 3]

cast_base:
  desc: "将 x 的数据类型转换为 dtype 并输出。支持输出和输入的数据类型相同"
  paddle:
    api_name: "paddle.cast"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      dtype: "int32"

cast_0:
  desc: "将 x 的数据类型转换为 dtype 并输出。支持输出和输入的数据类型相同"
  paddle:
    api_name: "paddle.cast"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      dtype: "float32"

chunk_base:
  desc: "将输入Tensor分割成多个子Tensor"
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [9, 2, 4, 4]
        range: [ -1, 1]
    params:
      chunks: 3

chunk_0:
  desc: "将输入Tensor分割成多个子Tensor"
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [9, 2, 4, 4]
        range: [ -1, 1]
    params:
      chunks: 3
      axis: 0

chunk_1:
  desc: "将输入Tensor分割成多个子Tensor"
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [9, 2, 4, 4]
        range: [ -1, 1]
    params:
      chunks: 2
      axis: -1

chunk_2:
  desc: "将输入Tensor分割成多个子Tensor"
  paddle:
    api_name: "paddle.chunk"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [9, 2, 4, 4]
        range: [ -1, 1]
    params:
      chunks: 2
      axis:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1]

crop_base:
  desc: "根据偏移量（offsets）和形状（shape），裁剪输入（x）Tensor"
  paddle:
    api_name: "paddle.crop"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      shape: [2, 3, 13, 13]

crop_0:
  desc: "根据偏移量（offsets）和形状（shape），裁剪输入（x）Tensor"
  paddle:
    api_name: "paddle.crop"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    params:
      shape: [2, 2]
      offsets: !!python/tuple [0, 1]

crop_1:
  desc: "根据偏移量（offsets）和形状（shape），裁剪输入（x）Tensor"
  paddle:
    api_name: "paddle.crop"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 3]
        range: [ -10, 10]
    params:
      shape: [2, 1, -1, 2]
      offsets: [0, 0, 1, 1]

expand_base:
  desc: "根据 shape 指定的形状扩展 x ，扩展后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.expand"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 3, 1]
        range: [ -1, 1]
    params:
      shape: [2, 3, 4, 3, 5]

expand_0:
  desc: "根据 shape 指定的形状扩展 x ，扩展后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.expand"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 3, 1]
        range: [ -1, 1]
    params:
      shape: !!python/tuple [2, 3, 4, 3, 5]

expand_1:
  desc: "根据 shape 指定的形状扩展 x ，扩展后， x 的形状和 shape 指定的形状一致"
  paddle:
    api_name: "paddle.expand"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 3, 1]
        range: [ -1, 1]
    params:
      shape:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 3, 4, 3, 5]

expand_as_base:
  desc: "根据 y 的形状扩展 x ，扩展后， x 的形状和 y 的形状相同"
  paddle:
    api_name: "paddle.expand_as"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 1, 3, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 3, 5]
        range: [ -1, 1]

expand_as_0:
  desc: "根据 y 的形状扩展 x ，扩展后， x 的形状和 y 的形状相同"
  paddle:
    api_name: "paddle.expand_as"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 1, 3, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 3, 5]
        range: [ -1, 1]

flatten_base:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

flatten_0:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      start_axis: 0
      stop_axis: -1

flatten_1:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      start_axis: 1
      stop_axis: -1

flatten_2:
  desc: "根据给定的start_axis 和 stop_axis 将连续的维度展平"
  paddle:
    api_name: "paddle.flatten"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      start_axis: 1
      stop_axis: 2

flip_base:
  desc: "沿指定轴反转n维tensor"
  paddle:
    api_name: "paddle.flip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [2, 0, 1]

flip_0:
  desc: "沿指定轴反转n维tensor"
  paddle:
    api_name: "paddle.flip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [0]

flip_1:
  desc: "沿指定轴反转n维tensor"
  paddle:
    api_name: "paddle.flip"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [-1, 0, 1, 2]

gather_base:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]

gather_0:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]
      axis: 0

gather_1:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]
      axis: 1

gather_2:
  desc: "根据索引 index 获取输入 x 的指定 aixs 维度的条目，并将它们拼接在一起"
  paddle:
    api_name: "paddle.gather"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 0, 1]
      axis: -1

gather_nd_base:
  desc: "gather 的高维推广，并且支持多轴同时索引"
  paddle:
    api_name: "paddle.gather_nd"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[0, 1]]

reshape_base:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      shape: [6, 4, 4]

reshape_0:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: [1, -1]

reshape_1:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: [2, 0]

reshape_2:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: !!python/tuple [1, 4]

reshape__base:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      shape: [6, 4, 4]

reshape__0:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape_"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: [1, -1]

reshape__1:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: [2, 0]

reshape__2:
  desc: "在保持输入 x 数据不变的情况下，改变 x 的形状, inplace策略"
  paddle:
    api_name: "paddle.reshape"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[8, 4], [7, 9]]
    params:
      shape: !!python/tuple [1, 4]

roll_base:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      shifts: 2

roll_0:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      shifts: 0
      axis: 0

roll_1:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    params:
      shifts: -1
      axis: 0

roll_2:
  desc: "沿着指定维度 axis 对输入 x 进行循环滚动，当元素移动到最后位置时，会从第一个位置重新插入"
  paddle:
    api_name: "paddle.roll"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    params:
      shifts: [-1, 1]
      axis: [0, 1]

scatter_nd_base:
  desc: "根据 index ，将 updates 添加到一个新的张量中，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.scatter_nd"
    inputs:
      index:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 2]
        range: [ 0, 3]
    params:
      updates:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 9, 10]
        range: [ -1, 1]
      shape: [3, 5, 9, 10]

scatter_nd_add_base:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.scatter_nd_add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 5, 9, 10]
        range: [ -1, 1]
    params:
      index:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 2]
        range: [ 0, 3]
      updates:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 9, 10]
        range: [ -1, 1]

scatter_nd_add_0:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.scatter_nd_add"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4]
        range: [ -10, 10]
    params:
      index:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[0, 0, 2], [0, 1, 2]]
      updates:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [-1, -1]

shard_index_base:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.shard_index"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4, 1]
        range: [ 1, 20]
    params:
      index_num: 30
      nshards: 2
      shard_id: 0

shard_index_0:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.shard_index"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4, 1]
        range: [ 4, 13]
    params:
      index_num: 13
      nshards: 3
      shard_id: 0

shard_index_1:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.shard_index"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 1]
        range: [ 0, 7]
    params:
      index_num: 20
      nshards: 2
      shard_id: 1

shard_index_2:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.shard_index"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4, 2, 1]
        range: [ 2, 17]
    params:
      index_num: 20
      nshards: 4
      shard_id: 1

shard_index_3:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.shard_index"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4, 2, 1]
        range: [ 2, 17]
    params:
      index_num: 20
      nshards: 4
      shard_id: 1
      ignore_value: 13

shard_index_4:
  desc: "通过对Tensor中的单个值或切片应用稀疏加法，从而得到输出的Tensor"
  paddle:
    api_name: "paddle.shard_index"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 1]
        range: [ 2, 17]
    params:
      index_num: 6
      nshards: 40
      shard_id: 4

slice_base:
  desc: "沿多个轴生成 input 的切片"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 4, 4]
        range: [ -1, 1]
    params:
      axes: [0, 3, 1, 2]
      starts: [-3, 0, 1, 2]
      ends: [3, 2, 2, 4]

slice_0:
  desc: "沿多个轴生成 input 的切片"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6]
        range: [ -1, 1]
    params:
      axes: [0]
      starts: [1]
      ends: [3]

slice_1:
  desc: "沿多个轴生成 input 的切片"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6]
        range: [ -1, 1]
    params:
      axes: [0, 1]
      starts: [3, 2]
      ends: [5, 4]

slice_2:
  desc: "沿多个轴生成 input 的切片"
  paddle:
    api_name: "paddle.slice"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 6]
        range: [ -1, 1]
    params:
      axes: [0, 1]
      starts: [3, 2]
      ends: [5, 4]

squeeze_base:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 1, 3, 2, 1]
        range: [ -1, 1]

squeeze_0:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
    params:
      axis: -4

squeeze_1:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
    params:
      axis: [2, 3]

squeeze_2:
  desc: "删除输入Tensor的Shape中尺寸为1的维度"
  paddle:
    api_name: "paddle.squeeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
    params:
      axis: !!python/tuple [-4, -3]

squeeze__base:
  desc: "删除输入Tensor的Shape中尺寸为1的维度, inplace策略"
  paddle:
    api_name: "paddle.squeeze_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 1, 3, 2, 1]
        range: [ -1, 1]

squeeze__0:
  desc: "删除输入Tensor的Shape中尺寸为1的维度, inplace策略"
  paddle:
    api_name: "paddle.squeeze_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
    params:
      axis: -4

squeeze__1:
  desc: "删除输入Tensor的Shape中尺寸为1的维度, inplace策略"
  paddle:
    api_name: "paddle.squeeze_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
    params:
      axis: [2, 3]

squeeze__2:
  desc: "删除输入Tensor的Shape中尺寸为1的维度, inplace策略"
  paddle:
    api_name: "paddle.squeeze_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 1, 3]
        range: [ -1, 1]
    params:
      axis: !!python/tuple [-4, -3]

strided_slice_base:
  desc: "沿多个轴生成 input 的切片"
  paddle:
    api_name: "paddle.strided_slice"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axes: [0, 3, 1, 2]
      starts: [-3, 0, 1, 2]
      ends: [3, 2, 2, 4]
      strides: [1, 1, 1, 2]

strided_slice_0:
  desc: "沿多个轴生成 input 的切片"
  paddle:
    api_name: "paddle.strided_slice"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 6]
        range: [ -1, 1]
    params:
      axes: [1, 2, 3]
      starts: [-3, 0, 2]
      ends: [3, 2, 4]
      strides: [1, 1, 1]

tile_base:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.tile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      repeat_times: [2, 1]

transpose_base:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      perm: [2, 3, 0, 1]

transpose_0:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      perm: [2, 1, 3, 0]

transpose_1:
  desc: "根据参数 repeat_times 对输入 x 的各维度进行复制"
  paddle:
    api_name: "paddle.transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      perm: [0, 2, 3, 1]

tensordot_base:
  desc: "张量缩并运算（Tensor Contraction），即沿着axes给定的多个轴对两个张量对应元素的乘积进行加和操作"
  paddle:
    api_name: "paddle.tensordot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 1, 5]
        range: [ -1, 1]
    params:
      axes: [0, 2]

tensordot_0:
  desc: "张量缩并运算（Tensor Contraction），即沿着axes给定的多个轴对两个张量对应元素的乘积进行加和操作"
  paddle:
    api_name: "paddle.tensordot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 3, 4]
        range: [ -4, 1]
    params:
      axes: 0

tensordot_1:
  desc: "张量缩并运算（Tensor Contraction），即沿着axes给定的多个轴对两个张量对应元素的乘积进行加和操作"
  paddle:
    api_name: "paddle.tensordot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 3, 4]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 4, 3, 4]
        range: [ -4, 1]
    params:
      axes: 1

unbind_base:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]

unbind_0:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: 0

unbind_1:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: 1

unbind_2:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: 2

unbind_3:
  desc: "将输入Tensor按照指定的维度分割成多个子Tensor"
  paddle:
    api_name: "paddle.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: -1

unique_base:
  desc: "返回Tensor按升序排序后的独有元素"
  paddle:
    api_name: "paddle.unique"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]

unique_0:
  desc: "返回Tensor按升序排序后的独有元素"
  paddle:
    api_name: "paddle.unique"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0.4, 0.4], [0.7, 0.9]]
    params:
      axis: 1

unique_1:
  desc: "返回Tensor按升序排序后的独有元素"
  paddle:
    api_name: "paddle.unique"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[8, 4], [7, 9]]
    params:
      axis: 0

unique_consecutive_base:
  desc: "将Tensor中连续重复的元素进行去重，返回连续不重复的Tensor"
  paddle:
    api_name: "paddle.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]

unique_consecutive_0:
  desc: "将Tensor中连续重复的元素进行去重，返回连续不重复的Tensor"
  paddle:
    api_name: "paddle.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
    params:
      return_inverse: False
      return_counts: False
      axis: 0

unique_consecutive_1:
  desc: "将Tensor中连续重复的元素进行去重，返回连续不重复的Tensor"
  paddle:
    api_name: "paddle.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
    params:
      return_inverse: True
      return_counts: False
      axis: 0

unique_consecutive_2:
  desc: "将Tensor中连续重复的元素进行去重，返回连续不重复的Tensor"
  paddle:
    api_name: "paddle.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
    params:
      return_inverse: False
      return_counts: True
      axis: 0

unique_consecutive_3:
  desc: "将Tensor中连续重复的元素进行去重，返回连续不重复的Tensor"
  paddle:
    api_name: "paddle.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -5, 5]
    params:
      return_inverse: False
      return_counts: False
      axis: -2

unsqueeze_base:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度"
  paddle:
    api_name: "paddle.unsqueeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: [1, 2]

unsqueeze_0:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度"
  paddle:
    api_name: "paddle.unsqueeze"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: -1

unsqueeze__base:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度, inplace策略"
  paddle:
    api_name: "paddle.unsqueeze_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4]
        range: [ -1, 1]
    params:
      axis: [1, 2]

unsqueeze__0:
  desc: "向输入Tensor的Shape中一个或多个位置（axis）插入尺寸为1的维度, inplace策略"
  paddle:
    api_name: "paddle.unsqueeze_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 5]
        range: [ -1, 1]
    params:
      axis: -1

unstack_base:
  desc: "将单个dim为 D 的Tensor沿 axis 轴unpack为 num 个dim为 (D-1) 的Tensor"
  paddle:
    api_name: "paddle.unstack"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

unstack_0:
  desc: "将单个dim为 D 的Tensor沿 axis 轴unpack为 num 个dim为 (D-1) 的Tensor"
  paddle:
    api_name: "paddle.unstack"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1

unstack_1:
  desc: "将单个dim为 D 的Tensor沿 axis 轴unpack为 num 个dim为 (D-1) 的Tensor"
  paddle:
    api_name: "paddle.unstack"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 2

unstack_2:
  desc: "将单个dim为 D 的Tensor沿 axis 轴unpack为 num 个dim为 (D-1) 的Tensor"
  paddle:
    api_name: "paddle.unstack"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: -2

isclose_base:
  desc: "逐个检查x和y的所有元素是否均满足∣∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.isclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.3, 4.5, -2.], [2., 0., 2.]], [[1., -4., -2.], [2., 1.1, 2.]]]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.3, 4.5, -2.], [2., 0., 2.]], [[1., -4., -2.], [2., 1.1, 2.]]]

isclose_0:
  desc: "逐个检查x和y的所有元素是否均满足∣∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.isclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10000.0, 0.0000001, nan, 1.0, 3.0, 0.0]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10000.01, 0.000001, nan, nan, 3.0, nan]
    params:
      equal_nan: False

isclose_1:
  desc: "逐个检查x和y的所有元素是否均满足∣∣x−y∣∣≤atol+rtol×∣∣y∣∣"
  paddle:
    api_name: "paddle.isclose"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10000.0, 0.0000001, nan, 1.0, 3.0, 0.0]
      y:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [10000.01, 0.000001, nan, nan, 3.0, nan]
    params:
      equal_nan: True

lu_base:
  desc: "对输入的N维(N>=2)矩阵x进行LU分解"
  paddle:
    api_name: "paddle.linalg.lu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

lu_0:
  desc: "对输入的N维(N>=2)矩阵x进行LU分解"
  paddle:
    api_name: "paddle.linalg.lu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      get_infos: True

lu_1:
  desc: "对输入的N维(N>=2)矩阵x进行LU分解"
  paddle:
    api_name: "paddle.linalg.lu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      pivot: True

cholesky_solve_base:
  desc: "对输入的N维(N>=2)矩阵x进行LU分解"
  paddle:
    api_name: "paddle.linalg.cholesky_solve"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]

cholesky_solve_0:
  desc: "对输入的N维(N>=2)矩阵x进行LU分解"
  paddle:
    api_name: "paddle.linalg.cholesky_solve"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1]
        range: [ -10, 10]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3]
        range: [ -10, 10]
    params:
      upper: True

inner_base:
  desc: "计算两个Tensor的内积"
  paddle:
    api_name: "paddle.inner"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

inner_0:
  desc: "计算两个Tensor的内积"
  paddle:
    api_name: "paddle.inner"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 5, 4]
        range: [ -10, 10]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 4]
        range: [ -10, 10]

outer_base:
  desc: "计算两个Tensor的外积"
  paddle:
    api_name: "paddle.outer"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]

outer_0:
  desc: "计算两个Tensor的外积"
  paddle:
    api_name: "paddle.outer"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 5, 4]
        range: [ -10, 10]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 2]
        range: [ -10, 10]

gcd_base:
  desc: "计算两个输入的按元素绝对值的最大公约数，输入必须是整型"
  paddle:
    api_name: "paddle.gcd"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 4]
        range: [ -50, 50]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 4, 1]
        range: [ -5, 5]

gcd_0:
  desc: "计算两个输入的按元素绝对值的最大公约数，输入必须是整型"
  paddle:
    api_name: "paddle.gcd"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [6, 1, 4, 5]
        range: [ -4, 14]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 1, 5]
        range: [ -21, 2]

amin_base:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

amin_0:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False

amin_1:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [1, -1]
      keepdim: False

amin_2:
  desc: "对指定维度上的Tensor元素求最小值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [1, -1]
      keepdim: True

amax_base:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

amax_0:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
      keepdim: False

amax_1:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [1, -1]
      keepdim: False

amax_2:
  desc: "对指定维度上的Tensor元素求最大值运算，并输出相应的计算结果"
  paddle:
    api_name: "paddle.amax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: [1, -1]
      keepdim: True

moveaxis_base:
  desc: "将输入Tensor x 的轴从 source 位置移动到 destination 位置，其他轴按原来顺序排布"
  paddle:
    api_name: "paddle.moveaxis"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      source: [1, 0]
      destination: [2, 3]

moveaxis_0:
  desc: "将输入Tensor x 的轴从 source 位置移动到 destination 位置，其他轴按原来顺序排布"
  paddle:
    api_name: "paddle.moveaxis"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 2]
        range: [ -2, 2]
    params:
      source: 0
      destination: 1

moveaxis_1:
  desc: "将输入Tensor x 的轴从 source 位置移动到 destination 位置，其他轴按原来顺序排布"
  paddle:
    api_name: "paddle.moveaxis"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4, 2]
        range: [ -2, 2]
    params:
      source: 0
      destination: 1

logit_base:
  desc: "实现了logit层"
  paddle:
    api_name: "paddle.logit"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

logit_0:
  desc: "实现了logit层"
  paddle:
    api_name: "paddle.logit"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      eps: 0.02

logit_1:
  desc: "实现了logit层"
  paddle:
    api_name: "paddle.logit"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      eps: 0.5

erfinv_base:
  desc: "计算输入矩阵x的逆误差函数"
  paddle:
    api_name: "paddle.erfinv"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

erfinv__base:
  desc: "计算输入矩阵x的逆误差函数, 采用inplace策略"
  paddle:
    api_name: "paddle.Tensor.erfinv_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

repeat_interleave_base:
  desc: "沿着指定轴 axis 对输入 x 进行复制，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      repeats:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [2, 3, 1]
      axis: 1

repeat_interleave_0:
  desc: "沿着指定轴 axis 对输入 x 进行复制，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ 0, 1]
    params:
      repeats: 3

repeat_interleave_1:
  desc: "沿着指定轴 axis 对输入 x 进行复制，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 2]
        range: [ -2, 2]
    params:
      repeats: 2

repeat_interleave_2:
  desc: "沿着指定轴 axis 对输入 x 进行复制，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 2, 4, 4, 5]
        range: [ -2, 2]
    params:
      repeats: 2
      axis: 1

repeat_interleave_3:
  desc: "沿着指定轴 axis 对输入 x 进行复制，创建并返回到一个新的Tensor"
  paddle:
    api_name: "paddle.repeat_interleave"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 2, 4, 4, 5]
        range: [ -2, 2]
    params:
      repeats: 2
      axis: 3

poisson_base:
  desc: "以输入参数 x 为泊松分布的 lambda 参数"
  paddle:
    api_name: "paddle.poisson"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -5, 10]

# 此api动态图有问题
#element_size:
#  desc: "Tensor比特位长度"
#  paddle:
#    api_name: "paddle.Tensor.element_size"
#    inputs:
#      x:
#        random: True
#        type: "Tensor"
#        dtype: "int32"
#        shape: [1]
#        range: [ -5, 10]

exponential__base:
  desc: "计算指数, 采用inplace策略"
  paddle:
    api_name: "paddle.Tensor.exponential_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

clone_base:
  desc: "对输入Tensor x 进行拷贝，并返回一个新的Tensor"
  paddle:
    api_name: "paddle.clone"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]

take_along_axis_base:
  desc: "基于输入索引矩阵, 沿着指定axis从arr矩阵里选取1d切片"
  paddle:
    api_name: "paddle.take_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      indices:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[[2]]]]
      axis: 2

take_along_axis_0:
  desc: "基于输入索引矩阵, 沿着指定axis从arr矩阵里选取1d切片"
  paddle:
    api_name: "paddle.take_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      indices:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[[2]]]]
      axis: -2

put_along_axis_base:
  desc: "基于输入index矩阵, 将输入value沿着指定axis放置入arr矩阵"
  paddle:
    api_name: "paddle.put_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      indices:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[[0]]]]
      value: 21.
      axis: 0

put_along_axis_0:
  desc: "基于输入index矩阵, 将输入value沿着指定axis放置入arr矩阵"
  paddle:
    api_name: "paddle.put_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      indices:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[[2]]]]
      values: -4.
      axis: -2
      reduce: 'add'

put_along_axis_1:
  desc: "基于输入index矩阵, 将输入value沿着指定axis放置入arr矩阵"
  paddle:
    api_name: "paddle.put_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      indices:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[[2]]]]
      values: -4.
      axis: 2
      reduce: 'multiple'

nansum_base:
  desc: "支持nan相加"
  paddle:
    api_name: "paddle.nansum"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1., 2., nan], [-3.0, nan, -nan], [2.4, 0., 1.1]]

mode_base:
  desc: "求Tensor的众数"
  paddle:
    api_name: "paddle.mode"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [1.0, 2.0, 2.0]], [[1.0, 10.0, 10.0], [1.0, 0.0, 0.0]], [[1.0, 6.0, 6.0], [1.0, 3.0, 3.0]]]

mode_0:
  desc: "求Tensor的众数"
  paddle:
    api_name: "paddle.mode"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [1.0, 2.0, 2.0]], [[1.0, 10.0, 10.0], [1.0, 0.0, 0.0]], [[1.0, 6.0, 6.0], [1.0, 3.0, 3.0]]]
    axis: 1
    keepdim: False

mode_1:
  desc: "求Tensor的众数"
  paddle:
    api_name: "paddle.mode"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [1.0, 2.0, 2.0]], [[1.0, 10.0, 10.0], [1.0, 0.0, 0.0]], [[1.0, 6.0, 6.0], [1.0, 3.0, 3.0]]]
    axis: 2
    keepdim: True

quantile_base:
  desc: "Tensor的quantile求值"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      q: 0.5
      axis: 0

quantile_0:
  desc: "Tensor的quantile求值"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      q: 0.75
      axis: -1

quantile_1:
  desc: "Tensor的quantile求值"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      q: 0.75
      axis: -1
      keepdim: True

quantile_2:
  desc: "Tensor的quantile求值"
  paddle:
    api_name: "paddle.quantile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 6, 3, 4, 2, 5]
        range: [ -1, 1]
    params:
      q: [0.25, 0.5, 0.75]
      axis: 3
      keepdim: False

renorm_base:
  desc: "求Tensor的renorm值"
  paddle:
    api_name: "paddle.renorm"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]], [[10.0, 10.0, 10.0], [0.0, 0.0, 0.0]], [[6.0, 6.0, 6.0], [3.0, 3.0, 3.0]]]
    params:
      p: 2
      axis: 1
      max_norm: 20

renorm_0:
  desc: "求Tensor的renorm值"
  paddle:
    api_name: "paddle.renorm"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]], [[1.5, 1.5, 1.5], [0.0, 0.0, 0.0]], [[2.5, 2.5, 2.5], [3.0, 3.0, 3.0]]]
    params:
      p: 1
      axis: 0
      max_norm: 5

renorm_1:
  desc: "求Tensor的renorm值"
  paddle:
    api_name: "paddle.renorm"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]], [[10.0, 10.0, 10.0], [0.0, 0.0, 0.0]], [[6.0, 6.0, 6.0], [3.0, 3.0, 3.0]]]
    params:
      p: 2
      axis: 1
      max_norm: 40

renorm_2:
  desc: "求Tensor的renorm值"
  paddle:
    api_name: "paddle.renorm"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]], [[10.0, 10.0, 10.0], [0.0, 0.0, 0.0]], [[6.0, 6.0, 6.0], [3.0, 3.0, 3.0]]]
    params:
      p: 2
      axis: 1
      max_norm: 50

renorm_3:
  desc: "求Tensor的renorm值"
  paddle:
    api_name: "paddle.renorm"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]], [[10.0, 10.0, 10.0], [0.0, 0.0, 0.0]], [[6.0, 6.0, 6.0], [3.0, 3.0, 3.0]]]
    params:
      p: 1.5
      axis: 2
      max_norm: 20

renorm_4:
  desc: "求Tensor的renorm值"
  paddle:
    api_name: "paddle.renorm"
    inputs:
      x:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]], [[10.0, 10.0, 10.0], [0.0, 0.0, 0.0]], [[6.0, 6.0, 6.0], [3.0, 3.0, 3.0]]]
    params:
      p: 1.2
      axis: 2
      max_norm: 6.5

kthvalue_base:
  desc: "Tensor的kthvalue求值"
  paddle:
    api_name: "paddle.kthvalue"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 3
      axis: 0

kthvalue_0:
  desc: "Tensor的kthvalue求值"
  paddle:
    api_name: "paddle.kthvalue"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 4
      axis: 2

kthvalue_1:
  desc: "Tensor的kthvalue求值"
  paddle:
    api_name: "paddle.kthvalue"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 4, 4]
        range: [ -1, 1]
    params:
      k: 4
      axis: 2
      keepdim: True
