Conv1D_base:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: 3
      stride: 1
      padding: 0

Conv1D_0:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      kernel_size: 3
      in_channels: 3
      out_channels: 1

Conv1D_1:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: 2
      stride: 1
      padding: 0

Conv1D_2:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [2]
      stride: 1
      padding: 0

Conv1D_3:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 2
      padding: 0

Conv1D_4:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 2
      padding: 1

Conv1D_5:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 6
      kernel_size: [3]
      stride: 2
      padding: 0
      groups: 3

Conv1D_6:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3]
      stride: 1
      padding: 0

Conv1D_7:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3]
      stride: 1
      padding: 0
      data_format: "NLC"

Conv1D_8:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      padding_mode: "reflect"

Conv1D_9:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      padding_mode: "replicate"

Conv1D_10:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      padding_mode: "circular"

Conv1D_11:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      dilation: 2
      padding_mode: "zeros"

Conv1D_12:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      dilation: [2]
      padding_mode: "zeros"

Conv1D_13:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: [1]
      padding: 1
      dilation: !!python/tuple [2,]
      padding_mode: "zeros"

Conv1D_14:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: !!python/tuple [1,]
      dilation: !!python/tuple [2,]
      padding_mode: "zeros"

Conv1D_15:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: [1]
      padding: [1]
      dilation: !!python/tuple [2,]
      padding_mode: "zeros"

Conv1D_16:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.Conv1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: 3
      stride: 1
      padding: 0

Conv1DTranspose_base:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      dilation: 1

Conv1DTranspose_0:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      kernel_size: 2
      in_channels: 3
      out_channels: 1
      stride: 2
      padding: 1
      output_padding: 1
      groups: 1
      dilation: 1

Conv1DTranspose_1:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: 1
      dilation: 1

Conv1DTranspose_2:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 2
      padding: [1]
      dilation: 1

Conv1DTranspose_3:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3]
      stride: 1
      padding: [1]
      dilation: 2

Conv1DTranspose_4:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [3]
      stride: 1
      padding: [1]
      dilation: 2
      groups: 3

Conv1DTranspose_5:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [3]
      stride: 1
      padding: [1]
      dilation: 1
      groups: 3
      data_format: "NLC"

Conv1DTranspose_6:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [3]
      stride: 2
      padding: [1]
      dilation: 1
      groups: 3
      data_format: "NLC"
      output_padding: 1

Conv1DTranspose_7:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.Conv1DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3]
      stride: 1
      padding: 0
      dilation: 1

Conv2D_base:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 1
      padding: 0

Conv2D_0:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      in_channels: 3
      out_channels: 1

Conv2D_1:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [2, 2]
      stride: 1
      padding: 0

Conv2D_2:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [2, 2]
      stride: 1
      padding: 0

Conv2D_3:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 2
      padding: 0

Conv2D_4:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 2
      padding: 1

Conv2D_5:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 6
      kernel_size: [3, 3]
      stride: 2
      padding: 0
      groups: 3

Conv2D_6:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3, 3]
      stride: 1
      padding: 0

Conv2D_7:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3, 3]
      stride: 1
      padding: 0
      data_format: "NHWC"

Conv2D_8:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: 1
      padding_mode: "reflect"

Conv2D_9:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: 1
      padding_mode: "replicate"

Conv2D_10:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: 1
      padding_mode: "circular"

Conv2D_11:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: 1
      dilation: 2
      padding_mode: "zeros"

Conv2D_12:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: 1
      dilation: [2, 2]
      padding_mode: "zeros"

Conv2D_13:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: 1
      dilation: !!python/tuple [2, 2]
      padding_mode: "zeros"

Conv2D_14:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: !!python/tuple [1, 2]
      dilation: !!python/tuple [2, 2]
      padding_mode: "zeros"

Conv2D_15:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.Conv2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: [2, 1]
      padding: [1, 2]
      dilation: !!python/tuple [2, 2]
      padding_mode: "zeros"

Conv2DTranspose_base:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 1
      padding: 1
      dilation: 1

Conv2DTranspose_0:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      kernel_size: [2, 2]
      in_channels: 3
      out_channels: 1
      stride: 2
      padding: 1
      output_padding: 1
      groups: 1
      dilation: 1

Conv2DTranspose_1:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 1
      padding: 1
      dilation: 1

Conv2DTranspose_2:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 1
      padding: [1, 0]
      dilation: 1

Conv2DTranspose_3:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 1
      padding: [1, 0]
      dilation: 2

Conv2DTranspose_4:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 6
      out_channels: 3
      kernel_size: [3, 3]
      stride: 1
      padding: [1, 0]
      dilation: 1
      groups: 3

Conv2DTranspose_5:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 6]
        range: [ 0, 1]
    params:
      in_channels: 6
      out_channels: 3
      kernel_size: [3, 3]
      stride: 1
      padding: [1, 0]
      dilation: 1
      groups: 3
      data_format: "NHWC"

Conv2DTranspose_6:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 6]
        range: [ 0, 1]
    params:
      in_channels: 6
      out_channels: 3
      kernel_size: [3, 3]
      stride: 2
      padding: [1, 0]
      dilation: 1
      groups: 3
      data_format: "NHWC"
      output_padding: 1

Conv2DTranspose_7:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.Conv2DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3]
      stride: 1
      padding: 0
      dilation: 1

Conv3D_base:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 1
      padding: 0

Conv3D_0:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      in_channels: 3
      out_channels: 1

Conv3D_1:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [2, 2, 2]
      stride: 1
      padding: 0

Conv3D_2:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [2, 2, 2]
      stride: 1
      padding: 0

Conv3D_3:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 2
      padding: 0

Conv3D_4:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 2
      padding: 1

Conv3D_5:
  desc: "3维卷积第5个case"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      in_channels: 3
      out_channels: 6
      stride: 2
      padding: 0
      groups: 3

Conv3D_6:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3, 3, 3]
      stride: 1
      padding: 0

Conv3D_7:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 4, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3, 3, 3]
      stride: 1
      padding: 0
      data_format: "NDHWC"

Conv3D_8:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: 1
      padding_mode: "reflect"

Conv3D_9:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: 1
      padding_mode: "replicate"

Conv3D_10:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: 1
      padding_mode: "circular"

Conv3D_11:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: 1
      dilation: 2
      padding_mode: "zeros"

Conv3D_12:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: 1
      dilation: [2, 2, 2]
      padding_mode: "zeros"

Conv3D_13:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: 1
      dilation: !!python/tuple [2, 2, 2]
      padding_mode: "zeros"

Conv3D_14:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: !!python/tuple [1, 2, 2]
      dilation: !!python/tuple [2, 2, 2]
      padding_mode: "zeros"

Conv3D_15:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.Conv3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: [2, 2, 1]
      padding: [1, 2, 2]
      dilation: !!python/tuple [2, 2, 2]
      padding_mode: "zeros"

Conv3DTranspose_base:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 1
      padding: 1
      dilation: 1

Conv3DTranspose_0:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      kernel_size: [2, 2, 2]
      in_channels: 3
      out_channels: 1
      stride: 2
      padding: 1
      output_padding: 1
      groups: 1
      dilation: 1

Conv3DTranspose_1:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 1
      padding: 1
      dilation: 1

Conv3DTranspose_2:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 1
      padding: [1, 0, 1]
      dilation: 1

Conv3DTranspose_3:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 1
      kernel_size: [3, 3, 3]
      stride: 1
      padding: [1, 0, 1]
      dilation: 2

Conv3DTranspose_4:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [3, 3, 3]
      stride: 1
      padding: [1, 0, 1]
      dilation: 1
      groups: 3

Conv3DTranspose_5:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [3, 3, 3]
      stride: 1
      padding: [1, 0, 1]
      dilation: 1
      groups: 3
      data_format: "NDHWC"

Conv3DTranspose_6:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 3
      kernel_size: [3, 3, 3]
      stride: 2
      padding: [1, 0, 1]
      dilation: 1
      groups: 3
      data_format: "NDHWC"
      output_padding: 1

Conv3DTranspose_7:
  desc: "3维反卷积"
  paddle:
    api_name: "paddle.nn.Conv3DTranspose"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ 0, 1]
    params:
      in_channels: 3
      out_channels: 2
      kernel_size: [3, 3, 3]
      stride: 1
      padding: 0
      dilation: 1

AdaptiveAvgPool1D_base:
  desc: "1维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool1d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool1D_0:
  desc: "1维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      output_size: 2
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool1d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool1D_1:
  desc: "1维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool1d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool2D_base:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      output_size: [3, 3]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool2D_0:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -10, 10]
    params:
      output_size: 4
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool2D_1:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      output_size: [2, 3]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool2D_2:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      output_size: [1, 4]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool2D_3:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -10, 10]
    params:
      output_size: [3, 3]
      data_format: "NHWC"

AdaptiveAvgPool2D_4:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -10, 10]
    params:
      output_size: 3
      data_format: "NHWC"

AdaptiveAvgPool2D_5:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3]
      data_format: "NHWC"

AdaptiveAvgPool2D_6:
  desc: "2维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      output_size: [1, 1]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_base:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [3, 3, 3]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_0:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 4
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_1:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [2, 3, 3]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_2:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [2, 2, 2]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_3:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [1, 3, 2]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_4:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: 3
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_5:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3, 3]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_6:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3, 3]
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveAvgPool3D_7:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3, 3]
      data_format: "NDHWC"

AdaptiveAvgPool3D_8:
  desc: "3维自适应池化"
  paddle:
    api_name: "paddle.nn.AdaptiveAvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [1, 1, 1]
  pytorch:
    api_name: "torch.nn.AdaptiveAvgPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool1D_base:
  desc: "1维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool1d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool1D_0:
  desc: "1维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      output_size: 4
      return_mask: False
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool1d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }

AdaptiveMaxPool1D_1:
  desc: "1维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32]
        range: [ -10, 10]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool1d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool1D_2:
  desc: "1维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32]
        range: [ -1, 1]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool1d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool1D_3:
  desc: "1维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 4]
        range: [ -1, 1]
    params:
      output_size: 4
      return_mask: True
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool1d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }

AdaptiveMaxPool1D_4:
  desc: "1维自适应最大值池化，返回mask为True"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      output_size: 4
      return_mask: True
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool1d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }

AdaptiveMaxPool2D_base:
  desc: "2维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 8, 8]
        range: [ -10, 10]
    params:
      output_size: 3
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool2D_0:
  desc: "2维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 4
      return_mask: False
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool2d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }


AdaptiveMaxPool2D_1:
  desc: "2维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 8, 8]
        range: [ -10, 10]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool2d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool2D_2:
  desc: "2维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 5, 5]
        range: [ -10, 10]
    params:
      output_size: 3
      return_mask: True
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool2d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }

AdaptiveMaxPool3D_base:
  desc: "3维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 8, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool3d"
    mapping:
      ins: { data: input, output_size: output_size }

AdaptiveMaxPool3D_1:
  desc: "3维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 4
      return_mask: False
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool3d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }

AdaptiveMaxPool3D_2:
  desc: "3维自适应最大值池化"
  paddle:
    api_name: "paddle.nn.AdaptiveMaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 5, 5, 5]
        range: [ -10, 10]
    params:
      output_size: 3
      return_mask: True
  pytorch:
    api_name: "torch.nn.AdaptiveMaxPool3d"
    mapping:
      ins: { data: input, output_size: output_size, return_mask: return_indices }

AvgPool1D_base:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.AvgPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

AvgPool1D_0:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 3
      stride: 4
      padding: 0
  pytorch:
    api_name: "torch.nn.AvgPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

AvgPool1D_1:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.AvgPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

AvgPool1D_2:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 1
      exclusive: False
  pytorch:
    api_name: "torch.nn.AvgPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

AvgPool1D_3:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.AvgPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode }

AvgPool2D_base:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -10, 10]
    params:
      kernel_size: [2, 2]
      stride: [2, 2]
      padding: [0, 0, 0, 0]

AvgPool2D_0:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.AvgPool2d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

AvgPool2D_1:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: [3, 3]
      padding: [0, 0, 0, 0]
      ceil_mode: True
      exclusive: False

AvgPool2D_2:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: [3, 3]
      padding: [0, 0, 0, 0]
      ceil_mode: False
      exclusive: False

AvgPool2D_3:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [0, 0]

AvgPool2D_4:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [1, 1]
      exclusive: False

AvgPool2D_5:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [0, 0]

AvgPool2D_6:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 1]
      padding: !!python/tuple [0, 0]

AvgPool2D_7:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3]
      stride: [3, 3]
      padding: [0, 0, 0, 0]

AvgPool3D_base:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]
      exclusive: False

AvgPool3D_0:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0

AvgPool3D_1:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
      ceil_mode: True

AvgPool3D_2:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
      data_format: "NDHWC"
      exclusive: False

AvgPool3D_3:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 2, 3]
      padding: [0, 0, 0]
      exclusive: False

AvgPool3D_4:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [0, 0, 0]
      exclusive: False

AvgPool3D_5:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 0, 0]
      exclusive: True

AvgPool3D_6:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 1, 1]
      exclusive: True

AvgPool3D_7:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 2, 1]
      exclusive: True

AvgPool3D_8:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: 1
      exclusive: True

AvgPool3D_9:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: 2
      padding: 1
      exclusive: True

AvgPool3D_10:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: [0, 0, 1]
      exclusive: True

AvgPool3D_11:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: !!python/tuple [1, 0, 0]
      exclusive: True

AvgPool3D_12:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [0, 1, 0]
      exclusive: False

AvgPool3D_13:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.AvgPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
      exclusive: False

MaxPool1D_base:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_0:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 3
      stride: 4
      padding: 0
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_1:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_2:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 1
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_3:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode }

MaxPool1D_4:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
      return_mask: True
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding, return_mask: return_indices }

MaxPool1D_5:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: [1]
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_6:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: !!python/tuple [1]
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_7:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: [1]
      padding: 1
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_8:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: !!python/tuple [1]
      padding: 1
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_9:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3]
      stride: 1
      padding: 1
  pytorch:
    api_name: "torch.nn.MaxPool1d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool1D_10:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: [1, 1]

MaxPool2D_base:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -10, 10]
    params:
      kernel_size: [2, 2]
      stride: [2, 2]
      padding: [0, 0, 0, 0]

MaxPool2D_0:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool2D_1:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [0, 0, 0, 0]
      ceil_mode: True

MaxPool2D_2:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [0, 0, 0, 0]

MaxPool2D_3:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [1, 1]

MaxPool2D_4:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 2]
      padding: [0, 0]

MaxPool2D_5:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 2]
      padding: [0, 0]

MaxPool2D_6:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 2]
      padding: !!python/tuple [0, 0]

MaxPool2D_7:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [3, 3]
      padding: [0, 0, 0, 0]

MaxPool2D_8:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: !!python/tuple [3, 3]
      stride: !!python/tuple [3, 3]
      padding: !!python/tuple [0, 0]
  pytorch:
    api_name: "torch.nn.MaxPool2d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool3D_base:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]

MaxPool3D_0:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.MaxPool3d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxPool3D_1:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]
      ceil_mode: True

MaxPool3D_2:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 8, 8, 3]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
      data_format: "NDHWC"

MaxPool3D_3:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 2, 3]
      padding: [0, 0, 0]

MaxPool3D_4:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [0, 0, 0]

MaxPool3D_5:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 0, 0]

MaxPool3D_6:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 1, 1]

MaxPool3D_7:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 2, 1]

MaxPool3D_8:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: 1

MaxPool3D_9:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: 2
      padding: 1

MaxPool3D_10:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: [1, 0, 0]

MaxPool3D_11:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: !!python/tuple [1, 0, 0]

MaxPool3D_12:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]

MaxPool3D_13:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.MaxPool3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -10, 10]
    params:
      kernel_size: !!python/tuple [3, 3, 3]
      stride: !!python/tuple [2, 2, 2]
      padding: !!python/tuple [0, 0, 0]
  pytorch:
    api_name: "torch.nn.MaxPool3d"
    mapping:
      ins: { data: input, kernel_size: kernel_size, stride: stride, padding: padding }

MaxUnPool2D_base:
  desc: "2维最大逆池化"
  paddle:
    api_name: "paddle.nn.MaxUnPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 5]
        range: [ -1, 1]
      indices:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 5, 5]
        range: [ 0, 20]
    params:
      kernel_size: 2
      stride: 2
      padding: 0

MaxUnPool2D_0:
  desc: "2维最大逆池化"
  paddle:
    api_name: "paddle.nn.MaxUnPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 40, 40]
        range: [ -1, 1]
      indices:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 4, 40, 40]
        range: [ 0, 20]
    params:
      kernel_size: 2

MaxUnPool2D_1:
  desc: "2维最大逆池化"
  paddle:
    api_name: "paddle.nn.MaxUnPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 40, 40]
        range: [ -1, 1]
      indices:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 4, 40, 40]
        range: [ 0, 20]
    params:
      kernel_size: !!python/tuple [2, 4]

MaxUnPool2D_2:
  desc: "2维最大逆池化"
  paddle:
    api_name: "paddle.nn.MaxUnPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 40, 40]
        range: [ -1, 1]
      indices:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 4, 40, 40]
        range: [ 0, 20]
    params:
      kernel_size: 4
      padding: 2

MaxUnPool2D_3:
  desc: "2维最大逆池化"
  paddle:
    api_name: "paddle.nn.MaxUnPool2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 40, 40]
        range: [ -1, 1]
      indices:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 4, 40, 40]
        range: [ 0, 20]
    params:
      kernel_size: 4
      padding: 2
      stride: 2

Pad1D_base:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      data_format: 'NCL'

Pad1D_1:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      value: 0
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.ConstantPad1d"
    mapping:
      ins: { data: input, padding: padding, value: value }

Pad1D_2:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2]
      mode: "constant"
      data_format: 'NCHW'

Pad1D_3:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2, 1, 0]
      mode: "constant"
      data_format: 'NCDHW'

Pad1D_4:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      data_format: 'NCL'

Pad1D_5:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2]
      mode: "constant"
      data_format: 'NCHW'

Pad1D_6:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2, 1, 0]
      mode: "constant"
      data_format: 'NCDHW'

Pad1D_7:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.ReflectionPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_8:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1]
      mode: "reflect"
      data_format: 'NLC'

Pad1D_9:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
  pytorch:
    api_name: "torch.nn.ReflectionPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_10:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 1]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0]
      mode: "reflect"
      data_format: "NHWC"

Pad1D_11:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1]
      mode: "reflect"
      data_format: "NLC"

Pad1D_12:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
  pytorch:
    api_name: "torch.nn.ReflectionPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_13:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 1]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0]
      mode: "reflect"
      data_format: "NHWC"

Pad1D_14:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0, 1, 0]
      mode: "reflect"
      data_format: "NCDHW"

Pad1D_15:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 2, 2, 2]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0, 1, 0]
      mode: "reflect"
      data_format: "NDHWC"

Pad1D_16:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_17:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [2, 1]
      mode: "replicate"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_18:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_19:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NLC"

Pad1D_20:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_21:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [2, 1]
      mode: "replicate"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_22:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_23:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NLC"

Pad1D_24:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NHWC"

Pad1D_25:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 0, 0, 1]
      mode: "replicate"
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad1D_26:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 0, 0, 1]
      mode: "replicate"
      data_format: "NDHWC"

Pad1D_27:
  desc: "1维pad填充"
  paddle:
    api_name: "paddle.nn.Pad1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: 2
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad1d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_base:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      data_format: 'NCL'

Pad2D_0:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      padding: [1, 4, 3, 2]
      mode: "constant"
      value: 3.0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.ConstantPad2d"
    mapping:
      ins: { data: input, padding: padding, value: value }

Pad2D_1:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      value: 0
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.ConstantPad2d"
    mapping:
      ins: { data: input, padding: padding, value: value }

Pad2D_2:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2]
      mode: "constant"
      data_format: 'NCHW'

Pad2D_3:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2, 1, 0]
      mode: "constant"
      data_format: 'NCDHW'

Pad2D_4:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      data_format: 'NCL'

Pad2D_5:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2]
      mode: "constant"
      data_format: 'NCHW'

Pad2D_6:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2, 1, 0]
      mode: "constant"
      data_format: 'NCDHW'

Pad2D_7:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.ReflectionPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_8:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1]
      mode: "reflect"
      data_format: 'NLC'

Pad2D_9:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReflectionPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_10:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 1]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0]
      mode: "reflect"
      data_format: "NHWC"

Pad2D_11:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1]
      mode: "reflect"
      data_format: "NLC"

Pad2D_12:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReflectionPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_13:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 1]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0]
      mode: "reflect"
      data_format: "NHWC"

Pad2D_14:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0, 1, 0]
      mode: "reflect"
      data_format: "NCDHW"

Pad2D_15:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 2, 2, 2]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0, 1, 0]
      mode: "reflect"
      data_format: "NDHWC"

Pad2D_16:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_17:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [2, 1]
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_18:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_19:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NLC"

Pad2D_20:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_21:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [2, 1]
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_22:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_23:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NLC"

Pad2D_24:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NHWC"

Pad2D_25:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 0, 0, 1]
      mode: "replicate"
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad2D_26:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 0, 0, 1]
      mode: "replicate"
      data_format: "NDHWC"

Pad2D_27:
  desc: "2维pad填充"
  paddle:
    api_name: "paddle.nn.Pad2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 2]
        range: [ -1, 1]
    params:
      padding: 2
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad2d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_base:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      data_format: 'NCL'

Pad3D_0:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      padding: [1, 4, 3, 2, 1, 1]
      mode: "constant"
      value: 2.1
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.ConstantPad3d"
    mapping:
      ins: { data: input, padding: padding, value: value }

Pad3D_1:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      value: 0
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.ConstantPad3d"
    mapping:
      ins: { data: input, padding: padding, value: value }

Pad3D_2:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2]
      mode: "constant"
      data_format: 'NCHW'

Pad3D_3:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2, 1, 0]
      mode: "constant"
      data_format: 'NCDHW'

Pad3D_4:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "constant"
      data_format: 'NCL'

Pad3D_5:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2]
      mode: "constant"
      data_format: 'NCHW'

Pad3D_6:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 2, 1, 0]
      mode: "constant"
      data_format: 'NCDHW'

Pad3D_7:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.ReflectionPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_8:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1]
      mode: "reflect"
      data_format: 'NLC'

Pad3D_9:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReflectionPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_10:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 1]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0]
      mode: "reflect"
      data_format: "NHWC"

Pad3D_11:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1]
      mode: "reflect"
      data_format: "NLC"

Pad3D_12:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "reflect"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReflectionPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_13:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 1]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0]
      mode: "reflect"
      data_format: "NHWC"

Pad3D_14:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0, 1, 0]
      mode: "reflect"
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.ReflectionPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_15:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 2, 2, 2]
        range: [ -1, 1]
    params:
      padding: [1, 1, 1, 0, 1, 0]
      mode: "reflect"
      data_format: "NDHWC"

Pad3D_16:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_17:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [2, 1]
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_18:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_19:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NLC"

Pad3D_20:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_21:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [2, 1]
      mode: "replicate"
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_22:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_23:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      padding: [1, 2]
      mode: "replicate"
      data_format: "NLC"

Pad3D_24:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3, 4]
        range: [ -1, 1]
    params:
      padding: [2, 1, 2, 1]
      mode: "replicate"
      data_format: "NHWC"

Pad3D_25:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 0, 0, 1]
      mode: "replicate"
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

Pad3D_26:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 3, 2]
        range: [ -1, 1]
    params:
      padding: [1, 0, 1, 0, 0, 1]
      mode: "replicate"
      data_format: "NDHWC"

Pad3D_27:
  desc: "3维pad填充"
  paddle:
    api_name: "paddle.nn.Pad3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2, 2, 2]
        range: [ -1, 1]
    params:
      padding: 2
      mode: "replicate"
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.ReplicationPad3d"
    mapping:
      ins: { data: input, padding: padding }

CELU_base:
  desc: "CELU激活层"
  paddle:
    api_name: "paddle.nn.CELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -2, 4]
  pytorch:
    api_name: "torch.nn.CELU"
    mapping:
      ins: { data: input }

CELU_0:
  desc: "CELU激活层"
  paddle:
    api_name: "paddle.nn.CELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4]
        range: [ -4, 3]
  pytorch:
    api_name: "torch.nn.CELU"
    mapping:
      ins: { data: input }

CELU_1:
  desc: "CELU激活层"
  paddle:
    api_name: "paddle.nn.CELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4]
        range: [ -4, 3]
    params:
      alpha: 0.2
  pytorch:
    api_name: "torch.nn.CELU"
    mapping:
      ins: { data: input, alpha: alpha }

CELU_2:
  desc: "CELU激活层"
  paddle:
    api_name: "paddle.nn.CELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -4, 3]
    params:
      alpha: -0.4
  pytorch:
    api_name: "torch.nn.CELU"
    mapping:
      ins: { data: input, alpha: alpha }

CELU_3:
  desc: "CELU激活层"
  paddle:
    api_name: "paddle.nn.CELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      alpha: 0.56
  pytorch:
    api_name: "torch.nn.CELU"
    mapping:
      ins: { data: input, alpha: alpha }

ELU_base:
  desc: "ELU激活层"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: { data: input }

ELU_0:
  desc: "ELU激活层"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      alpha: 0.56
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: { data: input, alpha: alpha }

ELU_1:
  desc: "ELU激活层"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      alpha: 2
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: { data: input, alpha: alpha }

ELU_2:
  desc: "ELU激活层"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      alpha: 0
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: { data: input, alpha: alpha }

ELU_3:
  desc: "ELU激活层"
  paddle:
    api_name: "paddle.nn.ELU"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1, 6], [1, 15.6]]
    params:
      alpha: 0.2
  pytorch:
    api_name: "torch.nn.ELU"
    mapping:
      ins: { data: input, alpha: alpha }

GELU_base:
  desc: "GELU激活层"
  paddle:
    api_name: "paddle.nn.GELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.GELU"
    mapping:
      ins: { data: input }

GELU_0:
  desc: "GELU激活层"
  paddle:
    api_name: "paddle.nn.GELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      approximate: True

GELU_1:
  desc: "GELU激活层"
  paddle:
    api_name: "paddle.nn.GELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      approximate: True

Hardshrink_base:
  desc: "Hardshrink激活层"
  paddle:
    api_name: "paddle.nn.Hardshrink"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-1, 0.3, 2.5]
  pytorch:
    api_name: "torch.nn.Hardshrink"
    mapping:
      ins: { data: input }

Hardshrink_0:
  desc: "Hardshrink激活层"
  paddle:
    api_name: "paddle.nn.Hardshrink"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      threshold: 0.4
  pytorch:
    api_name: "torch.nn.Hardshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Hardshrink_1:
  desc: "Hardshrink激活层"
  paddle:
    api_name: "paddle.nn.Hardshrink"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-1, 0.3, 2.5]
    params:
      threshold: 0
  pytorch:
    api_name: "torch.nn.Hardshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Hardshrink_2:
  desc: "Hardshrink激活层"
  paddle:
    api_name: "paddle.nn.Hardshrink"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-1, -0.01, 2.5]
    params:
      threshold: 0
  pytorch:
    api_name: "torch.nn.Hardshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Hardshrink_3:
  desc: "Hardshrink激活层"
  paddle:
    api_name: "paddle.nn.Hardshrink"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-1, -0.01, 2.5]
    params:
      threshold: -1
  pytorch:
    api_name: "torch.nn.Hardshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Hardsigmoid_base:
  desc: "Hardsigmoid激活层"
  paddle:
    api_name: "paddle.nn.Hardsigmoid"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.Hardsigmoid"
    mapping:
      ins: { data: input }

Hardsigmoid_0:
  desc: "Hardsigmoid激活层"
  paddle:
    api_name: "paddle.nn.Hardsigmoid"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Hardsigmoid"
    mapping:
      ins: { data: input }

Hardsigmoid_1:
  desc: "Hardsigmoid激活层"
  paddle:
    api_name: "paddle.nn.Hardsigmoid"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[3., 3., 3.], [-5., 0., 5.], [-3., -3., -3.]]
  pytorch:
    api_name: "torch.nn.Hardsigmoid"
    mapping:
      ins: { data: input }

Hardswish_base:
  desc: "Hardswish激活层"
  paddle:
    api_name: "paddle.nn.Hardswish"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.Hardswish"
    mapping:
      ins: { data: input }

Hardswish_0:
  desc: "Hardswish激活层"
  paddle:
    api_name: "paddle.nn.Hardswish"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Hardswish"
    mapping:
      ins: { data: input }

Hardswish_1:
  desc: "Hardswish激活层"
  paddle:
    api_name: "paddle.nn.Hardswish"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
  pytorch:
    api_name: "torch.nn.Hardswish"
    mapping:
      ins: { data: input }

Hardtanh_base:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-1.5, 0.3, 2.5]
  pytorch:
    api_name: "torch.nn.Hardtanh"
    mapping:
      ins: { data: input }

Hardtanh_0:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -3, 3]
    params:
      min: -1.5
      max: 2.0
  pytorch:
    api_name: "torch.nn.Hardtanh"
    mapping:
      ins: { data: input, min: min_val, max: max_val }

Hardtanh_1:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: 0
      max: 1.3
  pytorch:
    api_name: "torch.nn.Hardtanh"
    mapping:
      ins: { data: input, min: min_val, max: max_val }

Hardtanh_2:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: -3.4
      max: 0
  pytorch:
    api_name: "torch.nn.Hardtanh"
    mapping:
      ins: { data: input, min: min_val, max: max_val }

Hardtanh_3:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: 1
      max: 1

Hardtanh_4:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: 0
      max: 0

Hardtanh_5:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: -3.2
      max: -3.2

Hardtanh_6:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: -3.3
      max: 3.2
  pytorch:
    api_name: "torch.nn.Hardtanh"
    mapping:
      ins: { data: input, min: min_val, max: max_val }

Hardtanh_7:
  desc: "Hardtanh激活层"
  paddle:
    api_name: "paddle.nn.Hardtanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      min: 2.3
      max: 3.5
  pytorch:
    api_name: "torch.nn.Hardtanh"
    mapping:
      ins: { data: input, min: min_val, max: max_val }

LeakyReLU_base:
  desc: "LeakyReLU激活层"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.LeakyReLU"
    mapping:
      ins: { data: input }

LeakyReLU_0:
  desc: "LeakyReLU激活层"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      negative_slope: 0.015
  pytorch:
    api_name: "torch.nn.LeakyReLU"
    mapping:
      ins: { data: input, negative_slope: negative_slope }

LeakyReLU_1:
  desc: "LeakyReLU激活层"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      negative_slope: 0
  pytorch:
    api_name: "torch.nn.LeakyReLU"
    mapping:
      ins: { data: input, negative_slope: negative_slope }

LeakyReLU_2:
  desc: "LeakyReLU激活层"
  paddle:
    api_name: "paddle.nn.LeakyReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      negative_slope: -1
  pytorch:
    api_name: "torch.nn.LeakyReLU"
    mapping:
      ins: { data: input, negative_slope: negative_slope }

LogSigmoid_base:
  desc: "LogSigmoid激活层"
  paddle:
    api_name: "paddle.nn.LogSigmoid"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.LogSigmoid"
    mapping:
      ins: { data: input }

LogSigmoid_0:
  desc: "LogSigmoid激活层"
  paddle:
    api_name: "paddle.nn.LogSigmoid"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.LogSigmoid"
    mapping:
      ins: { data: input }

LogSoftmax_base:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[1], [2]], [[3], [4]]]
    params:
      axis: 0
  pytorch:
    api_name: "torch.nn.LogSoftmax"
    mapping:
      ins: { data: input, axis: dim }

LogSoftmax_0:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.LogSoftmax"
    mapping:
      ins: { data: input, axis: dim }

LogSoftmax_1:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -10, 10]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.LogSoftmax"
    mapping:
      ins: { data: input, axis: dim }

LogSoftmax_2:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -10, 10]
    params:
      axis: 0
  pytorch:
    api_name: "torch.nn.LogSoftmax"
    mapping:
      ins: { data: input, axis: dim }

LogSoftmax_3:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -10, 10]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.LogSoftmax"
    mapping:
      ins: { data: input, axis: dim }

LogSoftmax_4:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -10, 10]
    params:
      axis: 2
  pytorch:
    api_name: "torch.nn.LogSoftmax"
    mapping:
      ins: { data: input, axis: dim }

LogSoftmax_5:
  desc: "LogSoftmax激活层"
  paddle:
    api_name: "paddle.nn.LogSoftmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -10, 10]

Maxout_base:
  desc: "Maxout激活层"
  paddle:
    api_name: "paddle.nn.Maxout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 4, 3, 3]
        range: [ -10, 10]
    params:
      groups: 2

Maxout_0:
  desc: "Maxout激活层"
  paddle:
    api_name: "paddle.nn.Maxout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 4, 4]
        range: [ -1, 1]
    params:
      groups: 2
      axis: 1

Maxout_1:
  desc: "Maxout激活层"
  paddle:
    api_name: "paddle.nn.Maxout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [9, 2, 2, 6]
        range: [ -10, 10]
    params:
      groups: 2
      axis: 3

Maxout_2:
  desc: "Maxout激活层"
  paddle:
    api_name: "paddle.nn.Maxout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 9, 3, 3]
        range: [ -10, 10]
    params:
      groups: 3

#PReLU:
#  desc: "PReLU激活层"
#  paddle:
#    api_name: "paddle.nn.PReLU"
#    params:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 6, 4, 4]
#        range: [ -1, 1]
#      num_parameters: 0.5
#      init: 0.35
#      weight_attr: None
#      data_format: "NCHW"

ReLU_base:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 10, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.ReLU"
    mapping:
      ins: { data: input }

ReLU_0:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.ReLU"
    mapping:
      ins: { data: input }

ReLU_1:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[-1, 4], [1, 15.6]]
  pytorch:
    api_name: "torch.nn.ReLU"
    mapping:
      ins: { data: input }

ReLU6_base:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-1, 0.3, 6.5]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: { data: input }

ReLU6_0:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 10]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: { data: input }

ReLU6_1:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [6, 6, 6, 6]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: { data: input }

ReLU6_2:
  desc: "ReLU激活层"
  paddle:
    api_name: "paddle.nn.ReLU6"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.ReLU6"
    mapping:
      ins: { data: input }

SELU_base:
  desc: "SELU激活层"
  paddle:
    api_name: "paddle.nn.SELU"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0.1, 1], [2, 3]]
  pytorch:
    api_name: "torch.nn.SELU"
    mapping:
      ins: { data: input }

SELU_0:
  desc: "SELU激活层"
  paddle:
    api_name: "paddle.nn.SELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      scale: 1.05173
      alpha: 1.67325

SELU_1:
  desc: "SELU激活层"
  paddle:
    api_name: "paddle.nn.SELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      alpha: 0

SELU_2:
  desc: "SELU激活层"
  paddle:
    api_name: "paddle.nn.SELU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]

Sigmoid_base:
  desc: "Sigmoid激活层"
  paddle:
    api_name: "paddle.nn.Sigmoid"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [1.0, 2.0, 3.0, 4.0]
  pytorch:
    api_name: "torch.nn.Sigmoid"
    mapping:
      ins: { data: input }

Sigmoid_0:
  desc: "Sigmoid激活层"
  paddle:
    api_name: "paddle.nn.Sigmoid"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Sigmoid"
    mapping:
      ins: { data: input }

Silu_base:
  desc: "Silu激活层"
  paddle:
    api_name: "paddle.nn.Silu"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 10, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.SiLU"
    mapping:
      ins: { data: input }

Silu_0:
  desc: "Silu激活层"
  paddle:
    api_name: "paddle.nn.Silu"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.SiLU"
    mapping:
      ins: { data: input }

Silu_1:
  desc: "Silu激活层"
  paddle:
    api_name: "paddle.nn.Silu"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 1, 3, 3]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.SiLU"
    mapping:
      ins: { data: input }

Softmax_base:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [6.0, 7.0, 8.0, 9.0]]]

Softmax_0:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

Softmax_1:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [6.0, 7.0, 8.0, 9.0]]]
    params:
      axis: 1
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

Softmax_3:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [6.0, 7.0, 8.0, 9.0]]]
    params:
      axis: 2
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

Softmax_4:
  desc: "Softmax激活层"
  paddle:
    api_name: "paddle.nn.Softmax"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [6.0, 7.0, 8.0, 9.0]]]
    params:
      axis: 0
  pytorch:
    api_name: "torch.nn.Softmax"
    mapping:
      ins: { data: input, axis: dim }

Softplus_base:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.4, -0.2, 0.1, 0.3]
    params:
      beta: 1
      threshold: 15
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_0:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      beta: 1
      threshold: 20
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_1:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      beta: 0.000001
      threshold: 20
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_2:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      beta: -0.000001
      threshold: 20
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_3:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      beta: -3
      threshold: 20
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_4:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      beta: 3
      threshold: 5
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_5:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      beta: 3
      threshold: -5
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softplus_6:
  desc: "Softplus激活层"
  paddle:
    api_name: "paddle.nn.Softplus"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      beta: 2
      threshold: 20
  pytorch:
    api_name: "torch.nn.Softplus"
    mapping:
      ins: { data: input, beta: beta, threshold: threshold }

Softshrink_base:
  desc: "Softshrink激活层"
  paddle:
    api_name: "paddle.nn.Softshrink"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.9, -0.2, 0.1, 0.8]
    params:
      threshold: 0.5
  pytorch:
    api_name: "torch.nn.Softshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Softshrink_0:
  desc: "Softshrink激活层"
  paddle:
    api_name: "paddle.nn.Softshrink"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      threshold: 0.2
  pytorch:
    api_name: "torch.nn.Softshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Softshrink_1:
  desc: "Softshrink激活层"
  paddle:
    api_name: "paddle.nn.Softshrink"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      threshold: 0
  pytorch:
    api_name: "torch.nn.Softshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Softshrink_2:
  desc: "Softshrink激活层"
  paddle:
    api_name: "paddle.nn.Softshrink"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
    params:
      threshold: 5
  pytorch:
    api_name: "torch.nn.Softshrink"
    mapping:
      ins: { data: input, threshold: lambd }

Softsign_base:
  desc: "Softsign激活层"
  paddle:
    api_name: "paddle.nn.Softsign"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.4, -0.2, 0.1, 0.3]
  pytorch:
    api_name: "torch.nn.Softsign"
    mapping:
      ins: { data: input }

Softsign_0:
  desc: "Softsign激活层"
  paddle:
    api_name: "paddle.nn.Softsign"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Softsign"
    mapping:
      ins: { data: input }

Softsign_1:
  desc: "Softsign激活层"
  paddle:
    api_name: "paddle.nn.Softsign"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.Softsign"
    mapping:
      ins: { data: input }

Swish_base:
  desc: "Swish激活层"
  paddle:
    api_name: "paddle.nn.Swish"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 10, 3, 3]
        range: [ -10, 10]

Swish_0:
  desc: "Swish激活层"
  paddle:
    api_name: "paddle.nn.Swish"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -4, 4]

Swish_1:
  desc: "Swish激活层"
  paddle:
    api_name: "paddle.nn.Swish"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 1, 3, 3]
        range: [ -1, 1]

Tanh_base:
  desc: "Tanh激活层"
  paddle:
    api_name: "paddle.nn.Tanh"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.4, -0.2, 0.1, 0.3]
  pytorch:
    api_name: "torch.nn.Tanh"
    mapping:
      ins: { data: input }

Tanh_0:
  desc: "Tanh激活层"
  paddle:
    api_name: "paddle.nn.Tanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -4, 4]
  pytorch:
    api_name: "torch.nn.Tanh"
    mapping:
      ins: { data: input }

Tanh_1:
  desc: "Tanh激活层"
  paddle:
    api_name: "paddle.nn.Tanh"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Tanh"
    mapping:
      ins: { data: input }

Tanhshrink_base:
  desc: "Tanhshrink激活层"
  paddle:
    api_name: "paddle.nn.Tanhshrink"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [-0.4, -0.2, 0.1, 0.3]
  pytorch:
    api_name: "torch.nn.Tanhshrink"
    mapping:
      ins: { data: input }

Tanhshrink_0:
  desc: "Tanhshrink激活层"
  paddle:
    api_name: "paddle.nn.Tanhshrink"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Tanhshrink"
    mapping:
      ins: { data: input }

Tanhshrink_1:
  desc: "Tanhshrink激活层"
  paddle:
    api_name: "paddle.nn.Tanhshrink"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -10, 10]
  pytorch:
    api_name: "torch.nn.Tanhshrink"
    mapping:
      ins: { data: input }

ThresholdedReLU_base:
  desc: "ThresholdedReLU激活层"
  paddle:
    api_name: "paddle.nn.ThresholdedReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [100, 4, 3, 3]
        range: [ -10, 10]

ThresholdedReLU_0:
  desc: "ThresholdedReLU激活层"
  paddle:
    api_name: "paddle.nn.ThresholdedReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 2]
    params:
      threshold: 1.25

ThresholdedReLU_1:
  desc: "ThresholdedReLU激活层"
  paddle:
    api_name: "paddle.nn.ThresholdedReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 1, 4, 3]
        range: [ -10, 1]
    params:
      threshold: -1

ThresholdedReLU_2:
  desc: "ThresholdedReLU激活层"
  paddle:
    api_name: "paddle.nn.ThresholdedReLU"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 1, 4, 3]
        range: [ -10, 1]
    params:
      threshold: 0

BatchNorm_base:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -2, 10]
    params:
      num_channels: 3

BatchNorm_0:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5]
        range: [ -4, 4]
    params:
      num_channels: 4

BatchNorm_1:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 6]
        range: [ -4, 4]
    params:
      num_channels: 4

BatchNorm_2:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 6, 7]
        range: [ -4, 4]
    params:
      num_channels: 4

BatchNorm_3:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 6]
        range: [ -4, 4]
    params:
      num_channels: 6
      data_layout: "NHWC"

BatchNorm_4:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 4, 5, 6]
        range: [ -4, 4]
    params:
      num_channels: 4
      epsilon: 0.0001

BatchNorm_7:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 8, 2, 4]
        range: [ -4, 4]
    params:
      num_channels: 8
      act: "relu"

BatchNorm_8:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 8, 2, 4]
        range: [ -4, 4]
    params:
      num_channels: 8
      act: "sigmoid"

# 测试框架不支持输入
#BatchNorm_9:
#  desc: "BN批归一化"
#  paddle:
#    api_name: "paddle.nn.BatchNorm"
#    inputs:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [3, 2, 4, 6]
#        range: [ -4, 4]
#    params:
#      num_channels: 2
#      param_attr=paddle.ParamAttr(learning_rate=0.1)
#      use_global_stats: True

BatchNorm_10:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 5]
        range: [ -4, 4]
    params:
      num_channels: 3
      is_test: True

BatchNorm_11:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 5]
        range: [ -4, 4]
    params:
      num_channels: 3
      trainable_statistics: True

BatchNorm_12:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_channels: 3
      is_test: False
      momentum: 0.9
      epsilon: 0.00001
      dtype: 'float32'
      data_layout: 'NHWC'
      in_place: False
      do_model_average_for_mean_and_var: False
      use_global_stats: False
      trainable_statistics: False

BatchNorm_13:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      num_channels: 3
      is_test: False
      momentum: 0.85
      epsilon: 0.00001
      dtype: 'float32'
      data_layout: 'NCHW'
      in_place: False
      do_model_average_for_mean_and_var: False
      use_global_stats: False
      trainable_statistics: False

# CPU精度有问题
#BatchNorm_14:
#  desc: "BN批归一化"
#  paddle:
#    api_name: "paddle.nn.BatchNorm"
#    inputs:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 8, 8]
#        range: [ -1, 1]
#    params:
#      num_channels: 3
#      is_test: False
#      momentum: 0.9
#      epsilon: 0.00001
#      dtype: 'float32'
#      data_layout: 'NCHW'
#      in_place: True
#      do_model_average_for_mean_and_var: False
#      use_global_stats: False
#      trainable_statistics: False

BatchNorm_15:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      num_channels: 3
      is_test: False
      momentum: 0.9
      epsilon: 0.00001
      dtype: 'float32'
      data_layout: 'NCHW'
      in_place: False
      do_model_average_for_mean_and_var: True
      use_global_stats: False
      trainable_statistics: False

# use_global_stats需要用参数api传入learning_rate, 测试框架不支持传api
#BatchNorm_16:
#  desc: "BN批归一化"
#  paddle:
#    api_name: "paddle.nn.BatchNorm"
#    inputs:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 8, 8]
#        range: [ -1, 1]
#    params:
#      num_channels: 3
#      is_test: False
#      momentum: 0.85
#      epsilon: 0.00001
#      dtype: 'float32'
#      data_layout: 'NCHW'
#      in_place: False
#      do_model_average_for_mean_and_var: False
#      use_global_stats: True
#      trainable_statistics: False

BatchNorm_17:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      num_channels: 3
      is_test: False
      momentum: 0.85
      epsilon: 0.00001
      dtype: 'float32'
      data_layout: 'NCHW'
      in_place: False
      do_model_average_for_mean_and_var: False
      trainable_statistics: False

BatchNorm_18:
  desc: "BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ -1, 1]
    params:
      num_channels: 3
      is_test: False
      momentum: 0.9
      epsilon: 0.00001
      dtype: 'float32'
      data_layout: 'NCHW'
      in_place: False
      do_model_average_for_mean_and_var: False
      use_global_stats: False
      trainable_statistics: False

BatchNorm1D_base:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0.6964692], [0.28613934]]
    params:
      num_features: 1
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm1D_0:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      num_features: 3
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm1D_2:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[0.6964692, 0.28613934, 0.22685145]], [[0.5513148, 0.71946895, 0.42310646]]]
    params:
      num_features: 1
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm1D_3:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0.6964692], [0.28613934]]
    params:
      num_features: 1
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum }
      excess:
        device:

BatchNorm1D_4:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[0.6964692, 0.28613934, 0.22685145]], [[0.5513148, 0.71946895, 0.42310646]]]
    params:
      num_features: 1
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum }
      excess:
        device:

BatchNorm1D_5:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0.6964692], [0.28613934]]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm1D_6:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[0.6964692, 0.28613934, 0.22685145]], [[0.5513148, 0.71946895, 0.42310646]]]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm1D_7:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[0.6964692], [0.28613934]]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm1D_8:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: False
        type: "Tensor"
        dtype: "float32"
        value: [[[0.6964692, 0.28613934, 0.22685145]], [[0.5513148, 0.71946895, 0.42310646]]]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
      weight_attr: False
      data_format: "NCL"

BatchNorm1D_9:
  desc: "1维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      num_features: 3
      data_format: "NC"
  pytorch:
    api_name: "torch.nn.BatchNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm2D_base:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      num_features: 3
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm2D_1:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm2D_2:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum }
      excess:
        device:

BatchNorm2D_3:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm2D_4:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.BatchNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm2D_7:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
      data_format: "NCHW"
      weight_attr: False

BatchNorm2D_8:
  desc: "2维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -1, 1]
    params:
      num_features: 3
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NHWC'

BatchNorm3D_base:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      num_features: 3
      momentum: 0.9
      epsilon: 0.00001
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm3D_1:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

BatchNorm3D_2:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum }
      excess:
        device:

BatchNorm3D_3:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

BatchNorm3D_4:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
      weight_attr: False

BatchNorm3D_5:
  desc: "3维BN批归一化"
  paddle:
    api_name: "paddle.nn.BatchNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 1
      momentum: 0.1
      epsilon: 0.00001
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.BatchNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, momentum: momentum, epsilon: eps }
      excess:
        device:

GroupNorm_base:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 2
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels }
      excess:
        device:

GroupNorm_0:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 2, 2]
        range: [ -1, 1]
    params:
      num_groups: 6
      num_channels: 6
      epsilon: 0.00001
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

GroupNorm_2:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 2
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

GroupNorm_5:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 2
      epsilon: 0.00001
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

GroupNorm_6:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 3, 4, 4, 2]
        range: [ -1, 1]
    params:
      num_groups: 6
      num_channels: 6
      epsilon: 0.00001
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

GroupNorm_7:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 2, 2]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 4
      epsilon: 0.00001
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

GroupNorm_8:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 6, 8, 8]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 6
      epsilon: 0.00001
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

GroupNorm_9:
  desc: "分组归一化"
  paddle:
    api_name: "paddle.nn.GroupNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -1, 1]
    params:
      num_groups: 2
      num_channels: 4
      epsilon: 0.00002
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.GroupNorm"
    mapping:
      ins: { data: input, num_groups: num_groups, num_channels: num_channels, epsilon: eps }
      excess:
        device:

InstanceNorm1D_base:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm1D_1:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

InstanceNorm1D_2:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00002
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps }
      excess:
        device:

InstanceNorm1D_3:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm1D_5:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.1
      data_format: "NCL"
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm1D_6:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3]
        range: [ -1, 1]
    params:
      num_features: 3
      epsilon: 0.00001
      momentum: 0.1
      data_format: "NLC"
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm1D_7:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.1
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.InstanceNorm1d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm1D_8:
  desc: "1维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm1D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      num_features: 3
      epsilon: 0.00001
      momentum: 0.1
      data_format: "NC"

InstanceNorm2D_base:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

InstanceNorm2D_0:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm2D_2:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps }
      excess:
        device:

InstanceNorm2D_3:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm2D_4:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm2D_6:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
      weight_attr: False
      bias_attr: False
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm2D_8:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5, 3, 3]
        range: [ -1, 1]
    params:
      num_features: 5
      epsilon: 0.00001
      momentum: 0.9
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm2D_9:
  desc: "2维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 5, 3, 3]
        range: [ -1, 1]
    params:
      num_features: 5
      epsilon: 0.00001
      momentum: 0.9
      data_format: 'NHWC'
  pytorch:
    api_name: "torch.nn.InstanceNorm2d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm3D_base:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features }
      excess:
        device:

InstanceNorm3D_0:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3, 3, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm3D_2:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps }
      excess:
        device:

InstanceNorm3D_3:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.1
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm3D_4:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm3D_5:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm3D_6:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      num_features: 2
      epsilon: 0.00001
      momentum: 0.9
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

InstanceNorm3D_7:
  desc: "3维实例归一化"
  paddle:
    api_name: "paddle.nn.InstanceNorm3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 5, 5]
        range: [ -1, 1]
    params:
      num_features: 3
      epsilon: 0.00001
      momentum: 0.9
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.InstanceNorm3d"
    mapping:
      ins: { data: input, num_features: num_features, epsilon: eps, momentum: momentum }
      excess:
        device:

LayerNorm_base:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [2, 2, 3]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_0:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 2, 3]
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_3:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 2, 3]
      epsilon: 0.00001
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_4:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 3]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_5:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 3]
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_6:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [2, 3]
      epsilon: 0.00001
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_7:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [3,]
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape }
      excess:
        device:

LayerNorm_8:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: [3,]
      epsilon: 0.00001
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LayerNorm_9:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LayerNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      normalized_shape: !!python/tuple [3,]
      epsilon: 0.00001
      weight_attr: False
      bias_attr: False
  pytorch:
    api_name: "torch.nn.LayerNorm"
    mapping:
      ins: { data: input, normalized_shape: normalized_shape, epsilon: eps }
      excess:
        device:

LocalResponseNorm_base:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      size: 5
  pytorch:
    api_name: "torch.nn.LocalResponseNorm"
    mapping:
      ins: { data: input, size: size }

LocalResponseNorm_0:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      size: 5
      alpha: 0.0002
  pytorch:
    api_name: "torch.nn.LocalResponseNorm"
    mapping:
      ins: { data: input, size: size, alpha: alpha }

LocalResponseNorm_1:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      size: 5
      beta: 0.125
  pytorch:
    api_name: "torch.nn.LocalResponseNorm"
    mapping:
      ins: { data: input, size: size, beta: beta }

LocalResponseNorm_2:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      size: 5
      k: 0.9
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.LocalResponseNorm"
    mapping:
      ins: { data: input, size: size, k: k }

LocalResponseNorm_3:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      size: 3
  pytorch:
    api_name: "torch.nn.LocalResponseNorm"
    mapping:
      ins: { data: input, size: size }

LocalResponseNorm_4:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 8, 8, 4]
        range: [ -1, 1]
    params:
      size: 5
      data_format: 'NHWC'

LocalResponseNorm_5:
  desc: "层归一化"
  paddle:
    api_name: "paddle.nn.LocalResponseNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      size: 5
      alpha: 0.0001
      beta: 0.665
      k: 0.9
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.LocalResponseNorm"
    mapping:
      ins: { data: input, size: size, alpha: alpha, beta: beta, k: k }

SpectralNorm_base:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight_shape: [2, 3, 8, 8]

SpectralNorm_0:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4]
        range: [ -1, 1]
    params:
      weight_shape: [2, 4]
      dim: 0
      power_iters: 1

SpectralNorm_1:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 5]
        range: [ -1, 1]
    params:
      weight_shape: [2, 4, 5]
      dim: 0
      power_iters: 1

SpectralNorm_2:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 5, 6]
        range: [ -1, 1]
    params:
      weight_shape: [2, 4, 5, 6]
      dim: 0
      power_iters: 1

SpectralNorm_3:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 5, 6]
        range: [ -1, 1]
    params:
      weight_shape: [4, 3, 5, 6]
      dim: 0
      power_iters: 1

SpectralNorm_4:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 2, 5, 6]
        range: [ -1, 1]
    params:
      weight_shape: [4, 3, 2, 5, 6]
      dim: 0
      power_iters: 1

SpectralNorm_5:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 2, 5, 6]
        range: [ -1, 1]
    params:
      weight_shape: [4, 3, 2, 5, 6]
      dim: 1
      power_iters: 1

SpectralNorm_6:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 5]
        range: [ -1, 1]
    params:
      weight_shape: [4, 3, 5]
      dim: 1
      power_iters: 10

SpectralNorm_7:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 5]
        range: [ -1, 1]
    params:
      weight_shape: [4, 3, 5]
      dim: 1
      power_iters: 10
      dtype: "float32"

# 会报错
#SpectralNorm_8:
#  desc: "谱归一化"
#  paddle:
#    api_name: "paddle.nn.SpectralNorm"
#    inputs:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float64"
#        shape: [4, 3, 5]
#        range: [ -1, 1]
#    params:
#      weight_shape: [4, 3, 5]
#      dim: 1
#      power_iters: 10
#      dtype: "float64"

SpectralNorm_9:
  desc: "谱归一化"
  paddle:
    api_name: "paddle.nn.SpectralNorm"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight_shape: [2, 3, 8, 8]
      dim: 1
      power_iters: 1
      eps: 0.000000000001
      dtype: "float32"

#SyncBatchNorm:
#  desc: "跨卡GPU同步的批归一化"
#  paddle:
#    api_name: "paddle.nn.SyncBatchNorm"
#    params:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 8, 8]
#        range: [ -1, 1]
#      num_features: 3
#      epsilon: 0.00001
#      momentum: 0.9
#      data_format: 'NCHW'

#BiRNN:
#  desc: "谱归一化"
#  paddle:
#    api_name: "paddle.nn.BiRNN"
#    params:
#      data:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 8, 8]
#        range: [ -1, 1]

GRU_base:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5

GRU_0:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 23, 16]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 32]
        range: [ -1, 1]
    params:
      input_size: 16
      hidden_size: 32
      num_layers: 2
      direction: 'forward'
      dropout: 0.
      time_major: False

GRU_1:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5
      num_layers: 3

GRU_2:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5
      num_layers: 3
      direction: "bidirect"

GRU_3:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5
      num_layers: 3
      direction: "bidirectional"

GRU_5:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5
      num_layers: 3
      direction: "bidirectional"
      time_major: True

GRU_6:
  desc: "门控循环单元网络"
  paddle:
    api_name: "paddle.nn.GRU"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5
      num_layers: 3
      direction: "bidirectional"
      time_major: True
      dropout: 0

GRUCell_base:
  desc: "门控循环单元Cell"
  paddle:
    api_name: "paddle.nn.GRUCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3]
        range: [ -1, 1]
    params:
      input_size: 2
      hidden_size: 3

GRUCell_0:
  desc: "门控循环单元Cell"
  paddle:
    api_name: "paddle.nn.GRUCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 12]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 16]
        range: [ -1, 1]
    params:
      input_size: 12
      hidden_size: 16

GRUCell_1:
  desc: "门控循环单元Cell"
  paddle:
    api_name: "paddle.nn.GRUCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 16]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 32]
        range: [ -1, 1]
    params:
      input_size: 16
      hidden_size: 32

SimpleRNN_base:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      input_size: 3
      hidden_size: 2

SimpleRNN_0:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 4]
        range: [ -1, 1]
    params:
      input_size: 3
      hidden_size: 4

SimpleRNN_1:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 4]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 4
      num_layers: 2

SimpleRNN_2:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 4]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 4
      num_layers: 2
      activation: "relu"

SimpleRNN_3:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 5]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 5
      time_major: True

SimpleRNN_4:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 4]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 4
      dropout: 0.8

SimpleRNN_5:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 4]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1,]
        range: [ 2, 4]
    params:
      input_size: 4
      hidden_size: 4
      dropout: 0.8

SimpleRNN_6:
  desc: "简单循环神经网络"
  paddle:
    api_name: "paddle.nn.SimpleRNN"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 23, 16]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 32]
        range: [ -1, 1]
    params:
      input_size: 16
      hidden_size: 32
      num_layers: 2

SimpleRNNCell_base:
  desc: "简单循环神经网络cell单元"
  paddle:
    api_name: "paddle.nn.SimpleRNNCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 7]
        range: [ -1, 1]
    params:
      input_size: 4
      hidden_size: 7

SimpleRNNCell_0:
  desc: "简单循环神经网络cell单元"
  paddle:
    api_name: "paddle.nn.SimpleRNNCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 12]
        range: [ -1, 1]
    params:
      input_size: 12
      hidden_size: 4

SimpleRNNCell_1:
  desc: "简单循环神经网络cell单元"
  paddle:
    api_name: "paddle.nn.SimpleRNNCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 12]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 6]
        range: [ -1, 1]
    params:
      input_size: 12
      hidden_size: 6

SimpleRNNCell_2:
  desc: "简单循环神经网络cell单元"
  paddle:
    api_name: "paddle.nn.SimpleRNNCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 12]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6]
        range: [ -1, 1]
    params:
      input_size: 12
      hidden_size: 6
      activation: "relu"

SimpleRNNCell_3:
  desc: "简单循环神经网络cell单元"
  paddle:
    api_name: "paddle.nn.SimpleRNNCell"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 16]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 32]
        range: [ -1, 1]
    params:
      input_size: 16
      hidden_size: 32
      activation: 'tanh'

MultiHeadAttention_base:
  desc: "多头注意力机制"
  paddle:
    api_name: "paddle.nn.MultiHeadAttention"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      embed_dim: 8
      num_heads: 2
      dropout: 0.0

MultiHeadAttention_0:
  desc: "多头注意力机制"
  paddle:
    api_name: "paddle.nn.MultiHeadAttention"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      embed_dim: 8
      num_heads: 2
      dropout: 0.0
      kdim: 8
      vdim: 8

MultiHeadAttention_1:
  desc: "多头注意力机制"
  paddle:
    api_name: "paddle.nn.MultiHeadAttention"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      embed_dim: 8
      num_heads: 2
      dropout: 0.0
      need_weights: True

MultiHeadAttention_2:
  desc: "多头注意力机制"
  paddle:
    api_name: "paddle.nn.MultiHeadAttention"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      embed_dim: 8
      num_heads: 2
      dropout: 1.

MultiHeadAttention_3:
  desc: "多头注意力机制"
  paddle:
    api_name: "paddle.nn.MultiHeadAttention"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 9]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 9]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 9]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      embed_dim: 9
      num_heads: 3
      dropout: 0.3

MultiHeadAttention_4:
  desc: "多头注意力机制"
  paddle:
    api_name: "paddle.nn.MultiHeadAttention"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      embed_dim: 8
      num_heads: 2
      dropout: 0.5

Transformer_base:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512
      dropout: 0.1
      activation: 'relu'

Transformer_0:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512
      dropout: 0.8

Transformer_1:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512
      activation: 'tanh'

Transformer_2:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512
      attn_dropout: 0.4

Transformer_3:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512
      act_dropout: 0.3

Transformer_4:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512
      normalize_before: True

Transformer_5:
  desc: "Transformer模型"
  paddle:
    api_name: "paddle.nn.Transformer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      num_encoder_layers: 4
      num_decoder_layers: 4
      dim_feedforward: 512

#TransformerDecoder:
#  desc: "Transformer解码器, 由多个Transformer解码器层(TransformerDecoderLayer)叠加组成的"
#  paddle:
#    api_name: "paddle.nn.TransformerDecoder"
#    params:
#      data0:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 4, 128]
#        range: [ -1, 1]
#      data1:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 6, 128]
#        range: [ -1, 1]
#      data2:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 2, 4, 4]
#        range: [ -1, 1]
#      data3:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 2, 4, 6]
#        range: [ -1, 1]
#      data4:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 2, 6, 4]
#        range: [ -1, 1]
#      decoder_layer: 128
#      num_layers: 2
#      norm: 512
#      dropout: 0.1
#      activation: 'relu'

TransformerDecoderLayer_base:
  desc: "Transformer解码器层"
  paddle:
    api_name: "paddle.nn.TransformerDecoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      dropout: 0.1
      activation: 'relu'

TransformerDecoderLayer_0:
  desc: "Transformer解码器层"
  paddle:
    api_name: "paddle.nn.TransformerDecoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      activation: 'tanh'

TransformerDecoderLayer_1:
  desc: "Transformer解码器层"
  paddle:
    api_name: "paddle.nn.TransformerDecoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      attn_dropout: 0.4

TransformerDecoderLayer_2:
  desc: "Transformer解码器层"
  paddle:
    api_name: "paddle.nn.TransformerDecoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      act_dropout: 0.6

TransformerDecoderLayer_3:
  desc: "Transformer解码器层"
  paddle:
    api_name: "paddle.nn.TransformerDecoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      normalize_before: True

TransformerDecoderLayer_4:
  desc: "Transformer解码器层"
  paddle:
    api_name: "paddle.nn.TransformerDecoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 128]
        range: [ -1, 1]
      data2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
      data3:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 6]
        range: [ -1, 1]
      data4:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 6, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      dropout: 0.5

TransformerEncoderLayer_base:
  desc: "Transformer编码器层"
  paddle:
    api_name: "paddle.nn.TransformerEncoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      dropout: 0.1
      activation: 'relu'

TransformerEncoderLayer_0:
  desc: "Transformer编码器层"
  paddle:
    api_name: "paddle.nn.TransformerEncoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      activation: 'tanh'

TransformerEncoderLayer_1:
  desc: "Transformer编码器层"
  paddle:
    api_name: "paddle.nn.TransformerEncoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      attn_dropout: 0.3

TransformerEncoderLayer_2:
  desc: "Transformer编码器层"
  paddle:
    api_name: "paddle.nn.TransformerEncoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      act_dropout: 0.2

TransformerEncoderLayer_3:
  desc: "Transformer编码器层"
  paddle:
    api_name: "paddle.nn.TransformerEncoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      normalize_before: True

TransformerEncoderLayer_4:
  desc: "Transformer编码器层"
  paddle:
    api_name: "paddle.nn.TransformerEncoderLayer"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 128]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 4]
        range: [ -1, 1]
    params:
      d_model: 128
      nhead: 2
      dim_feedforward: 512
      dropout: 0.4

Bilinear_base:
  desc: "该层对两个输入执行双线性张量积"
  paddle:
    api_name: "paddle.nn.Bilinear"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2]
        range: [ -1, 1]
    params:
      in1_features: 1
      in2_features: 2
      out_features: 4

Bilinear_0:
  desc: "该层对两个输入执行双线性张量积"
  paddle:
    api_name: "paddle.nn.Bilinear"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 4]
        range: [ -1, 1]
    params:
      in1_features: 5
      in2_features: 4
      out_features: 8

Linear_base:
  desc: "线性变换层"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3]
        range: [ -1, 1]
    params:
      in_features: 3
      out_features: 5

Linear_0:
  desc: "线性变换层"
  paddle:
    api_name: "paddle.nn.Linear"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2]
        range: [ -1, 1]
    params:
      in_features: 2
      out_features: 4

AlphaDropout_base:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ 0, 2]
    params:
      p: 0.5

AlphaDropout_0:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -1, 1]
    params:
      p: 0.5

AlphaDropout_1:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2]
        range: [ -1, 1]
    params:
      p: 0.65

AlphaDropout_2:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ 0, 2]
    params:
      p: 1.0

AlphaDropout_3:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ 0, 2]
    params:
      p: 0.0

AlphaDropout_4:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 10, 15, 20]
        range: [ -5, 10]
    params:
      p: 0.5

AlphaDropout_5:
  desc: "AlphaDropout是一种具有自归一化性质的dropout。均值为0，方差为1的输入，经过AlphaDropout计算之后，输出的均值和方差与输入保持一致。"
  paddle:
    api_name: "paddle.nn.AlphaDropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -100, 100]
    params:
      p: 0.43

Dropout_base:
  desc: "Dropout是一种正则化手段，该算子根据给定的丢弃概率p ，在训练过程中随机将一些神经元输出设置为0，通过阻止神经元节点间的相关性来减少过拟合"
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      p: 0.5

Dropout_0:
  desc: "Dropout是一种正则化手段，该算子根据给定的丢弃概率p ，在训练过程中随机将一些神经元输出设置为0，通过阻止神经元节点间的相关性来减少过拟合"
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.5
      axis: 1

Dropout_1:
  desc: "Dropout是一种正则化手段，该算子根据给定的丢弃概率p ，在训练过程中随机将一些神经元输出设置为0，通过阻止神经元节点间的相关性来减少过拟合"
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.5
      axis: 2

Dropout_2:
  desc: "Dropout是一种正则化手段，该算子根据给定的丢弃概率p ，在训练过程中随机将一些神经元输出设置为0，通过阻止神经元节点间的相关性来减少过拟合"
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.5
      axis: 4

Dropout_3:
  desc: "Dropout是一种正则化手段，该算子根据给定的丢弃概率p ，在训练过程中随机将一些神经元输出设置为0，通过阻止神经元节点间的相关性来减少过拟合"
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.5
      mode: "downscale_in_infer"

Dropout_4:
  desc: "Dropout是一种正则化手段，该算子根据给定的丢弃概率p ，在训练过程中随机将一些神经元输出设置为0，通过阻止神经元节点间的相关性来减少过拟合"
  paddle:
    api_name: "paddle.nn.Dropout"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.35
      mode: "upscale_in_train"

Dropout2D_base:
  desc: "2维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
        range: [ -1, 1]

Dropout2D_0:
  desc: "2维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.3

Dropout2D_1:
  desc: "2维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.5
      data_format: 'NHWC'

Dropout2D_2:
  desc: "2维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout2D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 5]
        range: [ -1, 1]
    params:
      p: 0.5
      data_format: 'NCHW'

Dropout3D_base:
  desc: "3维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]

Dropout3D_0:
  desc: "3维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.33

Dropout3D_1:
  desc: "3维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]
    params:
      p: 1.

Dropout3D_2:
  desc: "3维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.

Dropout3D_3:
  desc: "3维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10, 10]
        range: [ -1, 1]
    params:
      p: 0.6
      data_format: 'NDHWC'

Dropout3D_4:
  desc: "3维Dropout"
  paddle:
    api_name: "paddle.nn.Dropout3D"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 5, 6]
        range: [ -1, 1]
    params:
      p: 0.5
      data_format: 'NCDHW'

Embedding_base:
  desc: "嵌入层(Embedding Layer)"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [3, 1]
        range: [0, 10]
    params:
      num_embeddings: 10
      embedding_dim: 3

Embedding_0:
  desc: "嵌入层(Embedding Layer)"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [3, 1]
        range: [0, 10]
    params:
      num_embeddings: 10
      embedding_dim: 3
      sparse: True

Embedding_1:
  desc: "嵌入层(Embedding Layer)"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [3, 1]
        range: [0, 10]
    params:
      num_embeddings: 10
      embedding_dim: 3
      padding_idx: 2

Embedding_2:
  desc: "嵌入层(Embedding Layer)"
  paddle:
    api_name: "paddle.nn.Embedding"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [3, 1]
        range: [0, 10]
    params:
      num_embeddings: 10
      embedding_dim: 3
      sparse: False

PixelShuffle_base:
  desc: "该算子将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.PixelShuffle"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 9, 4, 4]
        range: [ -10, 10]
    params:
      upscale_factor: 3
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.PixelShuffle"
    mapping:
      ins: { data0: input, upscale_factor: upscale_factor }

PixelShuffle_0:
  desc: "该算子将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.PixelShuffle"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 9, 4, 4]
        range: [ -1, 1]
    params:
      upscale_factor: 3
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.PixelShuffle"
    mapping:
      ins: { data0: input, upscale_factor: upscale_factor }

PixelShuffle_1:
  desc: "该算子将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.PixelShuffle"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 81, 4, 4]
        range: [ -10, 10]
    params:
      upscale_factor: 3
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.PixelShuffle"
    mapping:
      ins: { data0: input, upscale_factor: upscale_factor }

PixelShuffle_2:
  desc: "该算子将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.PixelShuffle"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 9]
        range: [ -10, 10]
    params:
      upscale_factor: 3
      data_format: 'NHWC'

PixelShuffle_4:
  desc: "该算子将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.PixelShuffle"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float64"
        shape: [4, 9, 4, 4]
        range: [ -10, 10]
    params:
      upscale_factor: 3
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.PixelShuffle"
    mapping:
      ins: { data0: input, upscale_factor: upscale_factor }

PixelShuffle_5:
  desc: "该算子将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.PixelShuffle"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 9, 4, 4]
        range: [ -2555, 2555]
    params:
      upscale_factor: 3
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.PixelShuffle"
    mapping:
      ins: { data0: input, upscale_factor: upscale_factor }

Upsample_base:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      scale_factor: 0.6
      mode: 'linear'
      align_corners: True
      align_mode: 0
      data_format: 'NWC'

Upsample_0:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]
    params:
      size: [12, 12]
      mode: 'nearest'
      align_corners: False
      align_mode: 0
      data_format: 'NCHW'

Upsample_2:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -1000, 1000]
    params:
      size: [17]
      mode: "linear"
      align_corners: True
      align_mode: 0
      data_format: "NWC"

Upsample_3:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      scale_factor: 0.4
      mode: "linear"
      align_corners: True
      align_mode: 0
      data_format: "NWC"

Upsample_4:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      mode: "bilinear"
      scale_factor: [0.6, 1.2]
      align_corners: True
      align_mode: 0
      data_format: "NCHW"

Upsample_5:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      mode: "bilinear"
      scale_factor: [0.6, 1.2]
      align_corners: False
      align_mode: 0
      data_format: "NCHW"

Upsample_6:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      mode: "bilinear"
      scale_factor: [0.6, 0.6]
      align_corners: True
      align_mode: 0
      data_format: "NCHW"

Upsample_7:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      mode: "bilinear"
      scale_factor: [0.6, 1.2]
      align_corners: True
      align_mode: 1
      data_format: "NCHW"

Upsample_8:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      mode: "bilinear"
      size: [8, 12]
      align_corners: True
      align_mode: 1
      data_format: "NCHW"

Upsample_9:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      mode: "bilinear"
      scale_factor: [0.6, 1.2]
      align_corners: True
      align_mode: 1
      data_format: "NHWC"

Upsample_10:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 4, 5]
        range: [ -10, 10]
    params:
      size: [10, 11]
      mode: "bilinear"
      align_corners: True
      align_mode: 0
      data_format: "NCHW"

Upsample_11:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      mode: "trilinear"
      scale_factor: [0.6, 1., 0.9]
      align_corners: True
      align_mode: 0
      data_format: "NCDHW"

Upsample_12:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      mode: "trilinear"
      scale_factor: [0.6, 1., 0.9]
      align_corners: False
      align_mode: 0
      data_format: "NCDHW"

Upsample_13:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      mode: "trilinear"
      scale_factor: [0.6, 0.6, 0.6]
      align_corners: True
      align_mode: 0
      data_format: "NCDHW"

Upsample_14:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      mode: "trilinear"
      scale_factor: [0.6, 1., 0.9]
      align_corners: True
      align_mode: 1
      data_format: "NCDHW"

Upsample_15:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      mode: "trilinear"
      size: [2, 13, 10]
      align_corners: True
      align_mode: 1
      data_format: "NCDHW"

Upsample_16:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      mode: "trilinear"
      scale_factor: [0.6, 1.2, 0.5]
      align_corners: True
      align_mode: 1
      data_format: "NDHWC"

Upsample_17:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 10, 10, 10]
        range: [ -10, 10]
    params:
      size: [10, 11, 8]
      mode: "trilinear"
      align_corners: True
      align_mode: 0
      data_format: "NCDHW"

Upsample_18:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -10, 10]
    params:
      size: [10, 11]
      mode: "bicubic"
      align_corners: True
      align_mode: 0
      data_format: "NCHW"

Upsample_19:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 10, 10]
        range: [ -1000, 1000]
    params:
      size: [10, 11]
      mode: "bicubic"
      align_corners: True
      align_mode: 0
      data_format: "NCHW"

Upsample_20:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      scale_factor: 0.6
      mode: 'linear'
      align_corners: False
      align_mode: 0
      data_format: 'NWC'

Upsample_21:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      scale_factor: 0.6
      mode: 'linear'
      align_corners: False
      align_mode: 1
      data_format: 'NWC'

Upsample_22:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      scale_factor: 9
      mode: 'linear'
      align_corners: False
      align_mode: 0
      data_format: 'NWC'

Upsample_23:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      scale_factor: 0.1
      mode: 'linear'
      align_corners: False
      align_mode: 0
      data_format: 'NWC'

Upsample_24:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      size: [8]
      mode: 'linear'
      align_corners: False
      align_mode: 1
      data_format: 'NWC'

Upsample_25:
  desc: "该OP用于插值调整一个batch中2D-或3D-image的大小"
  paddle:
    api_name: "paddle.nn.Upsample"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 10, 4]
        range: [ -10, 10]
    params:
      size: [11]
      mode: 'linear'
      align_corners: False
      align_mode: 1
      data_format: 'NWC'

UpsamplingBilinear2D_base:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -10, 10]
    params:
      size: [10, 10]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingBilinear2D_0:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -10, 10]
    params:
      scale_factor: !!python/tuple [1.2, 3.3]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, scale_factor: scale_factor }

UpsamplingBilinear2D_1:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]
    params:
      size: [12, 12]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingBilinear2D_2:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -10, 10]
    params:
      size: [100, 50]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingBilinear2D_3:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -1000, 10]
    params:
      size: [10, 10]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingBilinear2D_4:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 20, 20]
        range: [ -10, 10]
    params:
      size: [10, 10]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingBilinear2D_5:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -10, 10]
    params:
      size: [10., 10.]
      data_format: 'NHWC'

UpsamplingBilinear2D_6:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -10, 10]
    params:
      size: [10, 10]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingBilinear2D_7:
  desc: "该OP用于双线性插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingBilinear2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 5, 6, 7]
        range: [ -10, 10]
    params:
      scale_factor: !!python/tuple [3.7, 4.1]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingBilinear2d"
    mapping:
      ins: { data0: input, scale_factor: scale_factor }

UpsamplingNearest2D_base:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      size: [12, 12]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingNearest2D_0:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]
    params:
      size: [12, 12]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingNearest2D_1:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      size: [12, 12]
      data_format: 'NHWC'

UpsamplingNearest2D_2:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      scale_factor: 2
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, scale_factor: scale_factor }

UpsamplingNearest2D_3:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      scale_factor: 5
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, scale_factor: scale_factor }

UpsamplingNearest2D_4:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      scale_factor: [2, 3]
      data_format: 'NCHW'

UpsamplingNearest2D_5:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      scale_factor: !!python/tuple [2, 3]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, scale_factor: scale_factor }

UpsamplingNearest2D_6:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      size: !!python/tuple [12, 13]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingNearest2D_7:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 0]
    params:
      size: [12, 13]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, size: size }

UpsamplingNearest2D_8:
  desc: "该OP用于最近邻插值插值调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.UpsamplingNearest2D"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 6, 10]
        range: [ -10, 10]
    params:
      size: [256, 256]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.UpsamplingNearest2d"
    mapping:
      ins: { data0: input, size: size }

CosineSimilarity_base:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5]
        range: [ -10, 10]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5]
        range: [ -10, 10]
    params:
      axis: 1
      eps: 0.00000001
  pytorch:
    api_name: "torch.nn.CosineSimilarity"
    mapping:
      ins: { data0: input1, data1: input2, axis: dim, eps: eps }

CosineSimilarity_0:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 8, 2]
        range: [ -10, 10]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 8, 2]
        range: [ -10, 10]
    params:
      axis: 1
      eps: 0.00000001
  pytorch:
    api_name: "torch.nn.CosineSimilarity"
    mapping:
      ins: { data0: input1, data1: input2, axis: dim, eps: eps }

CosineSimilarity_1:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5, 2]
        range: [ -10, 10]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5, 2]
        range: [ -10, 10]
    params:
      axis: -1
      eps: 0.00000001
  pytorch:
    api_name: "torch.nn.CosineSimilarity"
    mapping:
      ins: { data0: input1, data1: input2, axis: dim, eps: eps }

CosineSimilarity_2:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5, 2]
        range: [ -10, 10]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5, 2]
        range: [ -10, 10]
    params:
      axis: -2
      eps: 0.00000001
  pytorch:
    api_name: "torch.nn.CosineSimilarity"
    mapping:
      ins: { data0: input1, data1: input2, axis: dim, eps: eps }

CosineSimilarity_3:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5]
        range: [ -10, 10]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 5]
        range: [ -10, 10]
    params:
      axis: 1
      eps: 0.000001
  pytorch:
    api_name: "torch.nn.CosineSimilarity"
    mapping:
      ins: { data0: input1, data1: input2, axis: dim, eps: eps }

CosineSimilarity_4:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 2, 3, 4]
        range: [ -100, 100]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -100, 100]
    params:
      axis: -1
      eps: 0.00000001
  pytorch:
    api_name: "torch.nn.CosineSimilarity"
    mapping:
      ins: { data0: input1, data1: input2, axis: dim, eps: eps }

CosineSimilarity_5:
  desc: "比较两个tensor的余弦相似度"
  paddle:
    api_name: "paddle.nn.CosineSimilarity"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 1, 3]
        range: [ -100, 100]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3]
        range: [ -100, 100]
    params:
      axis: 0
      eps: 0.00000001

Flatten_base:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input }

Flatten_0:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input }

Flatten_1:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: 0
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_2:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, stop_axis: end_dim }

Flatten_3:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim }

Flatten_4:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: 1
      stop_axis: 2
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_5:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: -3
      stop_axis: -3
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_6:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: -3
      stop_axis: 1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_7:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      start_axis: -2
      stop_axis: 1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_8:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: 0
      stop_axis: 1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_9:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      start_axis: 0
      stop_axis: 2
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_10:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 100]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input }

Flatten_11:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 5]
        range: [ -1, 1]
    params:
      start_axis: -3
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

Flatten_12:
  desc: "展开一个tensor"
  paddle:
    api_name: "paddle.nn.Flatten"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 5]
        range: [ -1, 1]
    params:
      start_axis: -2
      stop_axis: -1
  pytorch:
    api_name: "torch.nn.Flatten"
    mapping:
      ins: { data0: input, start_axis: start_dim, stop_axis: end_dim }

PairwiseDistance_base:
  desc: "计算两个tensor之间pairwise的距离"
  paddle:
    api_name: "paddle.nn.PairwiseDistance"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ -1, 1]
    params:
      p: 2.
  pytorch:
    api_name: "torch.nn.PairwiseDistance"
    mapping:
      ins: { data0: input1, data1: input2, p: p }

PairwiseDistance_0:
  desc: "计算两个tensor之间pairwise的距离"
  paddle:
    api_name: "paddle.nn.PairwiseDistance"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: 0.
      epsilon: 0.000001
      keepdim: False

PairwiseDistance_1:
  desc: "计算两个tensor之间pairwise的距离"
  paddle:
    api_name: "paddle.nn.PairwiseDistance"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: 1.
      epsilon: 0.000001
      keepdim: False

PairwiseDistance_2:
  desc: "计算两个tensor之间pairwise的距离"
  paddle:
    api_name: "paddle.nn.PairwiseDistance"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: 2.
      epsilon: 0.00001
      keepdim: False

PairwiseDistance_3:
  desc: "计算两个tensor之间pairwise的距离"
  paddle:
    api_name: "paddle.nn.PairwiseDistance"
    inputs:
      data0:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
      data1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      p: 2.
      epsilon: 0.000001
      keepdim: True

# yaml不支持inf无穷输入
#PairwiseDistance_4:
#  desc: "计算两个tensor之间pairwise的距离"
#  paddle:
#    api_name: "paddle.nn.PairwiseDistance"
#    inputs:
#      data0:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]
#      data1:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 4, 4]
#        range: [ -1, 1]
#    params:
#      p: inf
#      epsilon: 0.00001
#      keepdim: False

Unfold_base:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.Unfold"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
    params:
      kernel_sizes: 3
  pytorch:
    api_name: "torch.nn.Unfold"
    mapping:
      ins: { data: input, kernel_sizes: kernel_size }

Unfold_0:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.Unfold"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
    params:
      kernel_sizes: [3, 3]
  pytorch:
    api_name: "torch.nn.Unfold"
    mapping:
      ins: { data: input, kernel_sizes: kernel_size }

Unfold_1:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.Unfold"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
    params:
      kernel_sizes: [3, 3]
      paddings: 1
  pytorch:
    api_name: "torch.nn.Unfold"
    mapping:
      ins: { data: input, kernel_sizes: kernel_size, paddings: padding }

Unfold_2:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.Unfold"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
    params:
      kernel_sizes: [2, 4]
      paddings: 1
  pytorch:
    api_name: "torch.nn.Unfold"
    mapping:
      ins: { data: input, kernel_sizes: kernel_size, paddings: padding }

Unfold_3:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.Unfold"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 10, 10]
    params:
      kernel_sizes: [2, 4]
      paddings: 1
      strides: 2
  pytorch:
    api_name: "torch.nn.Unfold"
    mapping:
      ins: { data: input, kernel_sizes: kernel_size, paddings: padding, strides: stride }

Unfold_4:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.Unfold"
    inputs:
      data:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 8, 8]
    params:
      kernel_sizes: [3, 3]
      strides: 1
      paddings: 0
      dilations: 1
  pytorch:
    api_name: "torch.nn.Unfold"
    mapping:
      ins: { data: input, kernel_sizes: kernel_size, paddings: padding, strides: stride, dilations: dilation }

conv1d_base:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv1d_0:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 2]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation, groups: groups }

conv1d_1:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv1d_2:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 2]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv1d_3:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv1d_4:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 2
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv1d_5:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6]
        range: [ -1, 1]
      stride: 2
      padding: 0
      groups: 3
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, groups: groups }

conv1d_6:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv1d_7:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]
      stride: 1
      padding: 0
      data_format: "NLC"

conv1d_11:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: [1]
      padding: 1
      dilation: 2
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, dilation: dilation }

conv1d_12:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: [1]
      padding: [1]
      dilation: [2,]
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, dilation: dilation }

conv1d_13:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: [1]
      padding: [1]
      dilation: !!python/tuple [2,]
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, dilation: dilation }

conv1d_14:
  desc: "1维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: [1]
      padding: [2]
      dilation: !!python/tuple [2,]
  pytorch:
    api_name: "torch.nn.functional.conv1d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, dilation: dilation }

conv1d_transpose_base:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 1
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding,
             dilation: dilation, groups: groups }

conv1d_transpose_:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 2]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation, groups: groups }

conv1d_transpose_0:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding,
             dilation: dilation, groups: groups }

conv1d_transpose_1:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 1
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding,
             dilation: dilation, groups: groups }

conv1d_transpose_2:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 2
      padding: [1]
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding,
             dilation: dilation, groups: groups }

conv1d_transpose_3:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1]
      output_padding: 0
      dilation: 2
      groups: 1
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding,
             dilation: dilation, groups: groups }

conv1d_transpose_4:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1]
      output_padding: 0
      dilation: 1
      groups: 3
      data_format: 'NCL'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose1d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding,
             dilation: dilation, groups: groups }

conv1d_transpose_5:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1]
      output_padding: 0
      dilation: 1
      groups: 3
      data_format: 'NLC'

conv1d_transpose_6:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3]
        range: [ -1, 1 ]
      stride: 2
      padding: [1]
      output_padding: 1
      dilation: 1
      groups: 3
      data_format: 'NLC'

conv1d_transpose_7:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 3]
        range: [ -1, 1 ]
      stride: 1
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'

conv1d_transpose_8:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [0, 0], [3, 4]]
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'

conv1d_transpose_9:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [3, 4], [0, 0]]
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NLC'

conv1d_transpose_10:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: "SAME"
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'

conv1d_transpose_11:
  desc: "1维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv1d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 5]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1 ]
      stride: 1
      padding: "VALID"
      output_padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCL'

conv2d_base:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv2d_0:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 3, 1, 3, 3 ]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 3, 1, 2, 2 ]
        range: [ -1, 1 ]
      padding: 0
      groups: 1
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, padding: padding, groups: groups }

conv2d_1:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 2]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding }

conv2d_2:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 2, 2]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv2d_3:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 2]
        range: [ -1, 1]
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding }

conv2d_4:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 2]
        range: [ -1, 1]
      stride: 2
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding }

conv2d_5:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 3, 3]
        range: [ -1, 1]
      stride: 2
      padding: 0
      groups: 3
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, groups: groups }

conv2d_6:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv2d_7:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 3]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]
      stride: 1
      padding: 0
      data_format: "NHWC"

conv2d_11:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3]
        range: [ -1, 1]
      stride: [2, 1]
      padding: 1
      dilation: 2
      data_format: "NHWC"

conv2d_12:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3]
        range: [ -1, 1]
      stride: [2, 1]
      padding: 1
      dilation: [2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv2d_13:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 4, 3, 3]
        range: [ -1, 1]
      stride: [2, 1]
      padding: 1
      dilation: !!python/tuple [2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv2d_14:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 4, 3, 3]
        range: [ -1, 1]
      stride: [2, 1]
      padding: !!python/tuple [1, 2]
      dilation: !!python/tuple [2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv2d_15:
  desc: "2维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3]
        range: [ -1, 1]
      stride: [2, 1]
      padding: [1, 2]
      dilation: !!python/tuple [2, 2]
      data_format: "NHWC"

conv2d_transpose_base:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 1
      padding: 1
      output_padding: 0
      dilation: 1
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, output_padding: output_padding, dilation: dilation }

conv2d_transpose_0:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      output_padding: 0
      dilation: 1
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding, dilation: dilation }

conv2d_transpose_1:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 1
      dilation: 1
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv2d_transpose_2:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0]
      dilation: 1
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv2d_transpose_3:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0]
      dilation: 2
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv2d_transpose_4:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 6, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0]
      output_padding: 0
      dilation: 1
      groups: 3
      data_format: "NCHW"
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding, dilation: dilation, groups: groups }

conv2d_transpose_5:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0]
      output_padding: 0
      dilation: 1
      groups: 3
      data_format: "NHWC"

conv2d_transpose_6:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 6]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 3, 3]
        range: [ -1, 1 ]
      stride: 2
      padding: [1, 0]
      output_padding: 1
      dilation: 1
      groups: 3
      data_format: "NHWC"

conv2d_transpose_7:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 2, 3, 4]
      dilation: 1
      output_padding: 0
      groups: 1

conv2d_transpose_8:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [0, 0], [1, 2], [3, 4]]
      data_format: "NCHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv2d_transpose_9:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [0, 0], [1, 2], [3, 4]]
      data_format: "NCHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv2d_transpose_10:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 8, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [1, 2], [3, 4], [0, 0]]
      data_format: "NHWC"
      dilation: 1
      output_padding: 0
      groups: 1

conv2d_transpose_11:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: "SAME"
      data_format: "NCHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv2d_transpose_12:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: "VALID"
      data_format: "NCHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv2d_transpose_13:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv2d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 2, 2]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose2d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation, groups: groups }

conv3d_base:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv3d_0:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 3, 1, 3, 3, 3 ]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 3, 1, 2, 2, 2 ]
        range: [ -1, 1 ]
      padding: 0
      groups: 1
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, groups: groups, padding: padding }

conv3d_1:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 2, 2, 2]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv3d_2:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 2, 2, 2]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv3d_3:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv3d_4:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 2
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv3d_5:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 1, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6]
        range: [ -1, 1]
      stride: 2
      padding: 0
      groups: 3
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, groups: groups }

conv3d_6:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding }

conv3d_7:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 4, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2]
        range: [ -1, 1]
      stride: 1
      padding: 0
      data_format: "NDHWC"

conv3d_11:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      stride: [2, 2, 1]
      padding: 1
      dilation: 2
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_12:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      stride: [2, 2, 1]
      padding: 1
      dilation: [2, 2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_13:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      stride: [2, 2, 1]
      padding: 1
      dilation: !!python/tuple [2, 2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_14:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      stride: [2, 2, 1]
      padding: !!python/tuple [1, 2, 2]
      dilation: !!python/tuple [2, 2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_15:
  desc: "3维卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 3, 3, 3, 3]
        range: [ -1, 1 ]
      stride: [2, 2, 1]
      padding: [1, 2, 2]
      dilation: !!python/tuple [2, 2, 2]
  pytorch:
    api_name: "torch.nn.functional.conv3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }


conv3d_transpose_base:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ -1, 1]
      stride: 1
      padding: 1
      output_padding: 0
      dilation: 1
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, bias: bias, stride: stride, padding: padding, output_padding: output_padding, dilation: dilation }

conv3d_transpose_0:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      output_padding: 0
      dilation: 1
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding, dilation: dilation }

conv3d_transpose_1:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: 1
      dilation: 1
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_transpose_2:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0, 1]
      dilation: 1
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_transpose_3:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0, 1]
      dilation: 2
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation }

conv3d_transpose_4:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 2, 2, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0, 1]
      output_padding: 0
      dilation: 1
      groups: 3
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, output_padding: output_padding, dilation: dilation, groups: groups }

conv3d_transpose_5:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 2, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 0, 2]
      output_padding: 0
      dilation: 1
      groups: 3
      data_format: "NDHWC"

conv3d_transpose_6:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 2, 2, 6, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 3, 3, 3]
        range: [ -1, 1 ]
      stride: 2
      padding: [1, 0, 2]
      output_padding: 1
      dilation: 1
      groups: 3
      data_format: "NDHWC"

conv3d_transpose_7:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [1, 2, 3, 4, 2, 1]
      dilation: 1
      output_padding: 0
      groups: 1

conv3d_transpose_8:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [0, 0], [1, 2], [3, 4], [0, 1]]
      data_format: "NCDHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv3d_transpose_9:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [0, 0], [1, 2], [3, 4], [0, 1]]
      data_format: "NCDHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv3d_transpose_10:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 8, 8, 3]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: [[0, 0], [1, 2], [3, 4], [0, 0], [0, 0]]
      data_format: "NDHWC"
      dilation: 1
      output_padding: 0
      groups: 1

conv3d_transpose_11:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: "SAME"
      data_format: "NCDHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv3d_transpose_12:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 5, 5, 5]
        range: [ -1, 1 ]
      stride: 1
      padding: "VALID"
      data_format: "NCDHW"
      dilation: 1
      output_padding: 0
      groups: 1

conv3d_transpose_13:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 2, 2, 2]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation, groups: groups }

conv3d_transpose_14:
  desc: "2维反卷积"
  paddle:
    api_name: "paddle.nn.functional.conv3d_transpose"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 1, 2, 2, 2]
        range: [ -1, 1 ]
      stride: 1
      padding: 0
      dilation: 1
      groups: 1
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.functional.conv_transpose3d"
    mapping:
      ins: { x: input, weight: weight, stride: stride, padding: padding, dilation: dilation, groups: groups }

adaptive_avg_pool1d_base:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      output_size: 2
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool1d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool1d_0:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16]
        range: [ -1, 1]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool1d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool1d_1:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16]
        range: [ -10, 10]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool1d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool1d_3:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16]
        range: [ -10, 10]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool1d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool2d_base:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -1, 1]
    params:
      output_size: [3, 3]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool2d_0:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      output_size: [1, 1]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool2d_1:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      output_size: [2, 3]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool2d_2:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 4, 4]
        range: [ -10, 10]
    params:
      output_size: [1, 4]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool2d_3:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -10, 10]
    params:
      output_size: [3, 3]
      data_format: "NHWC"

adaptive_avg_pool2d_4:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -10, 10]
    params:
      output_size: 3
      data_format: "NHWC"

adaptive_avg_pool2d_5:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 4, 3]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3]
      data_format: "NHWC"

adaptive_avg_pool2d_6:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16, 16]
        range: [ -1, 1]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_base:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -1, 1]
    params:
      output_size: [3, 3, 3]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_0:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [1, 1, 1]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_1:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [2, 3, 3]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_2:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [2, 2, 2]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_3:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: [1, 3, 2]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_4:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: 3
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_5:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3, 3]
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_6:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3, 3]
      data_format: "NCDHW"
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_avg_pool3d_7:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 32, 32]
        range: [ -10, 10]
    params:
      output_size: !!python/tuple [3, 3, 3]
      data_format: "NDHWC"

adaptive_avg_pool3d_8:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16, 16, 16]
        range: [ -1, 1]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.functional.adaptive_avg_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_max_pool1d_base:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool1d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_max_pool1d_0:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32]
        range: [ -10, 10]
    params:
      output_size: 8
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool1d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_max_pool1d_1:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16]
        range: [ -1, 1]
    params:
      output_size: 8
      return_mask: False
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool1d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool1d_2:
  desc: "1维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16]
        range: [ -1, 1]
    params:
      output_size: 8
      return_mask: True
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool1d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool2d_base:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 1, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 3
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_max_pool2d_0:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16, 16]
        range: [ -1, 1]
    params:
      output_size: 8
      return_mask: True
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool2d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool2d_1:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool2d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_max_pool2d_2:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 5, 5]
        range: [ -1, 1]
    params:
      output_size: 3
      return_mask: True
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool2d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool2d_3:
  desc: "2维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16, 16]
        range: [ -1, 1]
    params:
      output_size: 8
      return_mask: False
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool2d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool3d_base:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 8, 8, 8]
        range: [ -1, 1]
    params:
      output_size: 4
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool3d"
    mapping:
      ins: { x: input, output_size: output_size }

adaptive_max_pool3d_0:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16, 16, 16]
        range: [ -1, 1]
    params:
      output_size: 8
      return_mask: False
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool3d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool3d_1:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4, 3, 16, 16, 16]
        range: [ -1, 1]
    params:
      output_size: 8
      return_mask: True
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool3d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

adaptive_max_pool3d_2:
  desc: "3维自适应平均池化"
  paddle:
    api_name: "paddle.nn.functional.adaptive_max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 5, 5, 5]
        range: [ -1, 1]
    params:
      output_size: 3
      return_mask: True
  pytorch:
    api_name: "torch.nn.functional.adaptive_max_pool3d"
    mapping:
      ins: { x: input, output_size: output_size, return_mask: return_indices }

avg_pool1d_base:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.avg_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool1d_0:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 3
      stride: 4
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.avg_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool1d_1:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.avg_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool1d_2:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 1
      exclusive: False

avg_pool1d_3:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      exclusive: True

avg_pool1d_4:
  desc: "1维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      exclusive: True
      ceil_mode: False

avg_pool2d_base:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [2, 2]
  pytorch:
    api_name: "torch.nn.functional.avg_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size }

avg_pool2d_0:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
  pytorch:
    api_name: "torch.nn.functional.avg_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size }

avg_pool2d_1:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [3, 3]
      padding: [0, 0]
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.functional.avg_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode }

avg_pool2d_2:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [3, 3]
      padding: [0, 0, 0, 0]
      ceil_mode: False
      exclusive: False

avg_pool2d_3:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [0, 0]
  pytorch:
    api_name: "torch.nn.functional.avg_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool2d_4:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 1]
      padding: [0, 0]
  pytorch:
    api_name: "torch.nn.functional.avg_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool2d_5:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 1]
      padding: [1, 1]

avg_pool2d_6:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 1]
      padding: !!python/tuple [1, 1]

avg_pool2d_7:
  desc: "2维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      exclusive: True
      ceil_mode: True

avg_pool3d_base:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.avg_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool3d_0:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.avg_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool3d_1:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.functional.avg_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode }

avg_pool3d_2:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 8, 8, 3]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
      data_format: "NDHWC"

avg_pool3d_3:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 2, 3]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.avg_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool3d_4:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.avg_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

avg_pool3d_5:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 0, 0]

avg_pool3d_6:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 1, 1]

avg_pool3d_7:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 2, 1]

avg_pool3d_8:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 2, 1]
      stride: 1
      padding: [1, 1, 1]
      exclusive: True

avg_pool3d_9:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: 2
      padding: 1

avg_pool3d_10:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: [1, 0, 0]
      exclusive: True

avg_pool3d_11:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: !!python/tuple [1, 0, 0]
      exclusive: True

avg_pool3d_12:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [0, 0, 0]
      exclusive: False

avg_pool3d_13:
  desc: "3维平均池化"
  paddle:
    api_name: "paddle.nn.functional.avg_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      exclusive: True
      ceil_mode: False

max_pool1d_base:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_0:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 3
      stride: 4
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_1:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 1
      stride: 1
      padding: 0
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_2:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_3:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode }

max_pool1d_4:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 2]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 2
      padding: 0
      return_mask: True
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, return_mask: return_indices }

max_pool1d_5:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: [1]
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_6:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_7:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: [1]
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_8:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 2
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_9:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: [3]
      stride: 1
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool1d_10:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8]
        range: [ -10, 10]
    params:
      kernel_size: 2
      stride: 1
      padding: [1, 1]

max_pool1d_11:
  desc: "1维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool1d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      return_mask: True
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.functional.max_pool1d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, return_mask: return_indices, ceil_mode: ceil_mode }

max_pool2d_base:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [2, 2]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size }

max_pool2d_0:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size }

max_pool2d_1:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, ceil_mode: ceil_mode }

max_pool2d_2:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride }

max_pool2d_3:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 1]
      padding: [1, 1]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool2d_4:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: [1, 2]
      padding: [0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool2d_5:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 2]
      padding: [0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool2d_6:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 32, 32]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3]
      stride: !!python/tuple [1, 2]
      padding: !!python/tuple [0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool2d_7:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      return_mask: True
      ceil_mode: True
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.max_pool2d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, return_mask: return_indices, ceil_mode: ceil_mode }

max_pool2d_8:
  desc: "2维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 16, 16, 3]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      data_format: 'NHWC'

max_pool3d_base:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_0:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [2, 2, 2]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_1:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]
      ceil_mode: True
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode }

max_pool3d_2:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 8, 8, 3]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 1, 1]
      padding: [0, 0, 0]
      data_format: "NDHWC"

max_pool3d_3:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [1, 2, 3]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_4:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [0, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_5:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_6:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 1, 1]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_7:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: [1, 2, 1]

max_pool3d_8:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: [3, 2, 1]
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_9:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: 2
      padding: 1
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_10:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: [1, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_11:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8, 8]
        range: [ -1, 1]
    params:
      kernel_size: [3, 3, 3]
      stride: !!python/tuple [3, 2, 1]
      padding: !!python/tuple [1, 0, 0]
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding }

max_pool3d_12:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 16, 16, 16]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      return_mask: True
      ceil_mode: True
      data_format: 'NCDHW'
  pytorch:
    api_name: "torch.nn.functional.max_pool3d"
    mapping:
      ins: { x: input, kernel_size: kernel_size, stride: stride, padding: padding, ceil_mode: ceil_mode, return_mask: return_indices }

max_pool3d_13:
  desc: "3维最大池化"
  paddle:
    api_name: "paddle.nn.functional.max_pool3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 16, 16, 16, 3]
        range: [ -1, 1]
    params:
      kernel_size: 2
      stride: 1
      padding: 0
      data_format: 'NDHWC'

pad:
  desc: "该OP依照 pad 和 mode 属性对 x 进行 pad"
  paddle:
    api_name: "paddle.nn.functional.pad"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      pad: [2, 1, 3, 1]
      mode: 'constant'
      value: 0.0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.pad"
    mapping:
      ins: { x: input, pad: pad, mode: mode, value: value }

pad0:
  desc: "该OP依照 pad 和 mode 属性对 x 进行 pad"
  paddle:
    api_name: "paddle.nn.functional.pad"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      pad:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [4]
        range: [1, 3]
      mode: 'constant'
      value: 0.0
      data_format: 'NCHW'

celu:
  desc: "celu激活层"
  paddle:
    api_name: "paddle.nn.functional.celu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 5]
    params:
      alpha: 1.0
  pytorch:
    api_name: "torch.nn.functional.celu"
    mapping:
      ins: { x: input, alpha: alpha }

elu:
  desc: "elu激活层"
  paddle:
    api_name: "paddle.nn.functional.elu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 5]
    params:
      alpha: 1.0
  pytorch:
    api_name: "torch.nn.functional.elu"
    mapping:
      ins: { x: input, alpha: alpha }

#elu_:
#  desc: "elu激活层, 对输入x采用Inplace策略"
#  paddle:
#    api_name: "paddle.nn.functional.elu_"
#    params:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 8, 8]
#        range: [ -1, 5]
#      alpha: 1.0

gelu:
  desc: "gelu激活层"
  paddle:
    api_name: "paddle.nn.functional.gelu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      approximate: False
  pytorch:
    api_name: "torch.nn.functional.gelu"
    mapping:
      ins: { x: input }

#gumbel_softmax:
#  desc: "该OP实现了按Gumbel-Softmax分布进行采样的功能，通过hard可选择是否离散化"
#  paddle:
#    api_name: "paddle.nn.functional.gumbel_softmax"
#    params:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3, 8, 8]
#        range: [ -2, 5]
#      temperature: 1.0
#      hard: False
#      axis: -1

hardshrink:
  desc: "hardshrink激活函数"
  paddle:
    api_name: "paddle.nn.functional.hardshrink"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      threshold: 0.75
  pytorch:
    api_name: "torch.nn.functional.hardshrink"
    mapping:
      ins: { x: input, threshold: lambd }

hardsigmoid:
  desc: "hardsigmoid激活函数"
  paddle:
    api_name: "paddle.nn.functional.hardsigmoid"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      slope: 0.1666667
      offset: 0.5
  pytorch:
    api_name: "torch.nn.functional.hardsigmoid"
    mapping:
      ins: { x: input }

hardswish:
  desc: "hardswish激活函数"
  paddle:
    api_name: "paddle.nn.functional.hardswish"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
  pytorch:
    api_name: "torch.nn.functional.hardswish"
    mapping:
      ins: { x: input }

hardtanh:
  desc: "hardtanh激活函数"
  paddle:
    api_name: "paddle.nn.functional.hardtanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      min: -1.0
      max: 1.0
  pytorch:
    api_name: "torch.nn.functional.hardtanh"
    mapping:
      ins: { x: input, min: min_val, max: max_val }

leaky_relu:
  desc: "leaky_relu激活函数"
  paddle:
    api_name: "paddle.nn.functional.leaky_relu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      negative_slope: 0.01
  pytorch:
    api_name: "torch.nn.functional.leaky_relu"
    mapping:
      ins: { x: input, negative_slope: negative_slope }

log_sigmoid:
  desc: "log_sigmoid激活函数"
  paddle:
    api_name: "paddle.nn.functional.log_sigmoid"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]

log_softmax:
  desc: "log_softmax激活函数"
  paddle:
    api_name: "paddle.nn.functional.log_softmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -2, 5]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.functional.log_softmax"
    mapping:
      ins: { x: input, axis: dim }

maxout:
  desc: "maxout激活函数"
  paddle:
    api_name: "paddle.nn.functional.maxout"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
    params:
      groups: 2
      axis: 1

prelu:
  desc: "prelu激活函数"
  paddle:
    api_name: "paddle.nn.functional.prelu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1]
        range: [ 0, 1]
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.prelu"
    mapping:
      ins: { x: input, weight: weight }

relu:
  desc: "relu激活函数"
  paddle:
    api_name: "paddle.nn.functional.relu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
  pytorch:
    api_name: "torch.nn.functional.relu"
    mapping:
      ins: { x: input }

relu_:
  desc: "relu_激活函数, 对输入 x 采用 Inplace 策略"
  paddle:
    api_name: "paddle.nn.functional.relu_"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]

relu6:
  desc: "relu6激活函数"
  paddle:
    api_name: "paddle.nn.functional.relu6"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 10]
  pytorch:
    api_name: "torch.nn.functional.relu6"
    mapping:
      ins: { x: input }

selu:
  desc: "selu激活函数"
  paddle:
    api_name: "paddle.nn.functional.selu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 10]
    params:
      scale: 1.0507
      alpha: 1.6732
  pytorch:
    api_name: "torch.nn.functional.selu"
    mapping:
      ins: { x: input }

sigmoid:
  desc: "sigmoid激活函数"
  paddle:
    api_name: "paddle.nn.functional.sigmoid"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
  pytorch:
    api_name: "torch.nn.functional.sigmoid"
    mapping:
      ins: { x: input }

silu:
  desc: "silu激活函数"
  paddle:
    api_name: "paddle.nn.functional.silu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
  pytorch:
    api_name: "torch.nn.functional.silu"
    mapping:
      ins: { x: input }

softmax:
  desc: "softmax激活函数"
  paddle:
    api_name: "paddle.nn.functional.softmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 5]
    params:
      axis: -1
  pytorch:
    api_name: "torch.nn.functional.softmax"
    mapping:
      ins: { x: input, axis: dim }

#softmax_:
#  desc: "softmax_激活函数, 对输入 x 采用 Inplace 策略"
#  paddle:
#    api_name: "paddle.nn.functional.softmax_"
#    params:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 4, 8, 8]
#        range: [ -2, 5]
#      axis: -1

softplus:
  desc: "softplus激活函数"
  paddle:
    api_name: "paddle.nn.functional.softplus"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 7]
    params:
      beta: 1
      threshold: 5
  pytorch:
    api_name: "torch.nn.functional.softplus"
    mapping:
      ins: { x: input, beta: beta, threshold: threshold }

softshrink:
  desc: "softshrink激活函数"
  paddle:
    api_name: "paddle.nn.functional.softshrink"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      threshold: 0.5
  pytorch:
    api_name: "torch.nn.functional.softshrink"
    mapping:
      ins: { x: input, threshold: lambd }

softsign:
  desc: "softsign激活函数"
  paddle:
    api_name: "paddle.nn.functional.softsign"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
  pytorch:
    api_name: "torch.nn.functional.softsign"
    mapping:
      ins: { x: input }

swish:
  desc: "swish激活函数"
  paddle:
    api_name: "paddle.nn.functional.swish"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]

tanhshrink:
  desc: "tanhshrink激活函数"
  paddle:
    api_name: "paddle.nn.functional.tanhshrink"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
  pytorch:
    api_name: "torch.nn.functional.tanhshrink"
    mapping:
      ins: { x: input }

thresholded_relu:
  desc: "thresholded_relu激活函数"
  paddle:
    api_name: "paddle.nn.functional.thresholded_relu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      threshold: 1.5

local_response_norm:
  desc: "局部响应正则化"
  paddle:
    api_name: "paddle.nn.functional.local_response_norm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      size: 5
      alpha: 0.0001
      beta: 0.75
      k: 1.0
      data_format: 'NCHW'
  pytorch:
    api_name: "torch.nn.functional.local_response_norm"
    mapping:
      ins: { x: input, size: size, alpha: alpha, beta: beta, k: k }

normalize:
  desc: "使用 Lp 范数沿维度 axis 对 x 进行归一化"
  paddle:
    api_name: "paddle.nn.functional.normalize"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      p: 2
      axis: 1
      epsilon: 0.000000000001
  pytorch:
    api_name: "torch.nn.functional.normalize"
    mapping:
      ins: { x: input, axis: dim, p: p, epsilon: eps }

bilinear:
  desc: "对两个输入执行双线性张量积"
  paddle:
    api_name: "paddle.nn.functional.bilinear"
    inputs:
      x1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -1, 1]
      x2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 5, 4]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 10]
        range: [ -1, 1]

bilinear_0:
  desc: "对两个输入执行双线性张量积"
  paddle:
    api_name: "paddle.nn.functional.bilinear"
    inputs:
      x1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 5]
        range: [ -1, 1]
      x2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 4]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 5, 4]
        range: [ -1, 1]
  pytorch:
    api_name: "torch.nn.functional.bilinear"
    mapping:
      ins: { x1: input1, x2: input2, weight: weight,  }

linear:
  desc: "线性变换"
  paddle:
    api_name: "paddle.nn.functional.linear"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 2]
        range: [ -1, 1]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4]
        range: [ -1, 1]
      bias:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [4]
        range: [ -1, 1]

# 测试框架navie_func无法关闭全局train
#alpha_dropout0:
#  desc: "一种具有自归一化性质的dropout"
#  paddle:
#    api_name: "paddle.nn.functional.alpha_dropout"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 3]
#        range: [ 0, 2]
#    params:
#      p: 0.5

alpha_dropout_base:
  desc: "一种具有自归一化性质的dropout"
  paddle:
    api_name: "paddle.nn.functional.alpha_dropout"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      p: 0.5
      training: False
  pytorch:
    api_name: "torch.nn.functional.alpha_dropout"
    mapping:
      ins: { x: input, p: p, training: training }

alpha_dropout2:
  desc: "一种具有自归一化性质的dropout"
  paddle:
    api_name: "paddle.nn.functional.alpha_dropout"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ 0, 2]
    params:
      p: 1.0
      training: False
  pytorch:
    api_name: "torch.nn.functional.alpha_dropout"
    mapping:
      ins: { x: input, p: p, training: training }

alpha_dropout3:
  desc: "一种具有自归一化性质的dropout"
  paddle:
    api_name: "paddle.nn.functional.alpha_dropout"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3]
        range: [ 0, 2]
    params:
      p: 0
      training: False
  pytorch:
    api_name: "torch.nn.functional.alpha_dropout"
    mapping:
      ins: { x: input, p: p, training: training }

#dropout:
#  desc: "一种正则化手段"
#  paddle:
#    api_name: "paddle.nn.functional.dropout"
#    params:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [2, 4, 8, 8]
#        range: [ -2, 3]
#      p: 0.5
#      training: False
#      mode: "upscale_in_train"

dropout2d_base:
  desc: "一种正则化手段"
  paddle:
    api_name: "paddle.nn.functional.dropout2d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      p: 0.5
      training: False
  pytorch:
    api_name: "torch.nn.functional.dropout2d"
    mapping:
      ins: { x: input, p: p, training: training }

dropout3d_base:
  desc: "一种正则化手段"
  paddle:
    api_name: "paddle.nn.functional.dropout3d"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8, 8]
        range: [ -2, 3]
    params:
      p: 0.5
      training: False
  pytorch:
    api_name: "torch.nn.functional.dropout3d"
    mapping:
      ins: { x: input, p: p, training: training }

diag_embed_base:
  desc: "其在指定的 2D 平面（由 dim1 和 dim2 指定）上的对角线由输入 input 填充"
  paddle:
    api_name: "paddle.nn.functional.diag_embed"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8, 8]
        range: [ -2, 3]
    params:
      offset: 0
      dim1: -2
      dim2: -1
  pytorch:
    api_name: "torch.diag_embed"
    mapping:
      ins: { input: input, offset: offset, dim1: dim1, dim2: dim2 }

embedding_base:
  desc: "嵌入层(Embedding Layer)"
  paddle:
    api_name: "paddle.nn.functional.embedding"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int64"
        shape: [3, 1]
        range: [ 2, 8]
    params:
      weight:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [10, 3]
        range: [ -1, 1]
      padding_idx: -1
      sparse: True

affine_grid_base:
  desc: "生成仿射变换前后的feature maps的坐标映射关系"
  paddle:
    api_name: "paddle.nn.functional.affine_grid"
    params:
      theta:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 2]
      out_shape: [1, 2, 3, 3]
      align_corners: True

affine_grid0:
  desc: "生成仿射变换前后的feature maps的坐标映射关系"
  paddle:
    api_name: "paddle.nn.functional.affine_grid"
    params:
      theta:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 2, 3]
        range: [ -1, 2]
      out_shape:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [1, 2, 3, 3]
      align_corners: True

cosine_similarity_base:
  desc: "计算x1与x2沿axis维度的余弦相似度"
  paddle:
    api_name: "paddle.nn.functional.cosine_similarity"
    inputs:
      x1:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
      x2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      axis: 1
      eps: 0.00000001

grid_sample_base:
  desc: "基于flow field网格的对输入X进行双线性插值采样"
  paddle:
    api_name: "paddle.nn.functional.grid_sample"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ -1, 1]
    params:
      grid:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 8, 9, 2]
        range: [ -1, 1]
      mode: 'bilinear'
      padding_mode: 'zeros'
      align_corners: True

label_smooth_base:
  desc: "标签平滑正则化(LSR)"
  paddle:
    api_name: "paddle.nn.functional.label_smooth"
    inputs:
      label:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ 0, 5]
    params:
      epsilon: 0.1

label_smooth0:
  desc: "标签平滑正则化(LSR)"
  paddle:
    api_name: "paddle.nn.functional.label_smooth"
    inputs:
      label:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 8, 8]
        range: [ 0, 5]
    params:
      prior_dist:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 8]
        range: [ 0, 1]
      epsilon: 0.1

one_hot_base:
  desc: "该OP将输入'x'中的每个id转换为一个one-hot向量，其长度为 num_classes"
  paddle:
    api_name: "paddle.nn.functional.one_hot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 3, 8, 8]
        range: [ 0, 5]
    params:
      num_classes: 6

pixel_shuffle_base:
  desc: "将一个形为[N, C, H, W]或是[N, H, W, C]的Tensor重新排列成形为 [N, C/r**2, H*r, W*r]或 [N, H*r, W*r, C/r**2] 的Tensor"
  paddle:
    api_name: "paddle.nn.functional.pixel_shuffle"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 9, 4, 4]
        range: [ -1, 1]
    params:
      upscale_factor: 3
      data_format: 'NCHW'

gather_tree_base:
  desc: "在整个束搜索(Beam Search)结束后使用"
  paddle:
    api_name: "paddle.nn.functional.gather_tree"
    inputs:
      ids:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[2, 2], [6, 1]], [[3, 9], [6, 1]], [[0, 1], [9, 0]]]
      parents:
        random: False
        type: "Tensor"
        dtype: "int32"
        value: [[[0, 0], [1, 1]], [[1, 0], [1, 0]], [[0, 0], [0, 1]]]

#gather_tree0:
#  desc: "在整个束搜索(Beam Search)结束后使用"
#  paddle:
#    api_name: "paddle.nn.functional.gather_tree"
#    params:
#      ids:
#        random: true
#        type: "Tensor"
#        dtype: "int32"
#        shape: [2, 3]
#        range: [ 0, 10]
#      parents:
#        random: true
#        type: "Tensor"
#        dtype: "int32"
#        shape: [2, 3]
#        range: [ 0, 10]

unfold_base:
  desc: "通被称作为im2col过程. 对于每一个输入形状为[N, C, H, W]的 x ，都将计算出一个形状为[N, Cout, Lout]的输出"
  paddle:
    api_name: "paddle.nn.functional.unfold"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [5, 3, 8, 8]
    params:
      kernel_sizes: [3, 3]
      strides: 1
      paddings: 0
      dilations: 1

glu_base:
  desc: "glu激活函数"
  paddle:
    api_name: "paddle.nn.functional.glu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 8, 8]
        range: [ -2, 3]
    params:
      axis: -1

interpolate_base:
  desc: "调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.functional.interpolate"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 4, 9, 8]
        range: [ -1, 1]
    params:
      size: [12, 12]
      mode: 'nearest'
      align_corners: False
      align_mode: 0
      data_format: 'NCHW'

sequence_mask_base:
  desc: "该层根据输入 x 和 maxlen 输出一个掩码"
  paddle:
    api_name: "paddle.nn.functional.sequence_mask"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [2, 4, 9, 8]
        range: [ 0, 10]
    params:
      maxlen: 10

temporal_shift_base:
  desc: "对输入X做时序通道T上的位移操作，为TSM(Temporal Shift Module)中使用的操作"
  paddle:
    api_name: "paddle.nn.functional.temporal_shift"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [6, 4, 9, 8]
        range: [ 0, 10]
    params:
      seg_num: 3
      shift_ratio: 0.25

upsample_base:
  desc: "调整一个batch中图片的大小"
  paddle:
    api_name: "paddle.nn.functional.upsample"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [2, 3, 9, 8]
        range: [ -1, 1]
    params:
      size: [12, 12]
      mode: 'nearest'
      align_corners: False
      align_mode: 0
      data_format: 'NCHW'

class_center_sample_base:
  desc: "类别中心采样方法, 从全量的类别中心采样一个子集类别中心参与训练"
  paddle:
    api_name: "paddle.nn.functional.class_center_sample"
    inputs:
      label:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [200]
        range: [ 0, 19]
    params:
      num_classes: 20
      num_samples: 6
