svd:
  desc: "计算一个或一批矩阵的奇异值分解。"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.svd"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      full_matrices: False
  pytorch:
    api_name: "torch.svd"
    mapping:
      ins: { x: input, full_matrices: compute_uv }

symeig:
  desc: "计算厄米特矩阵或者实数对称矩阵的特征值和特征向量。"
  enable_backward: false
  paddle:
    api_name: "paddle.linalg.eigh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      UPLO: L
  pytorch:
    api_name: "torch.symeig"
    mapping:
      ins: { x: input }

take_along_axis:
  desc: "基于输入索引矩阵，沿着指定 axis 从 arr 矩阵里选取 1d 切片。"
  enable_backward: false
  paddle:
    api_name: "paddle.take_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      indices:
        random: true
        type: "Tensor"
        dtype: "int"
        shape: [ 1, 1, 1, 1 ]
        range: [ 0, 1 ]
    params:
      axis: 0
  pytorch:
    api_name: "torch.take_along_dim"
    mapping:
      ins: { arr: input, indices: indices, axis: dim }

Tensor_acos:
  desc: "arccosine 函数。"
  paddle:
    api_name: "paddle.Tensor.acos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.acos"
#    mapping:
#      ins: { x: input }

Tensor_acosh:
  desc: "Arccosh 函数。"
  paddle:
    api_name: "paddle.Tensor.acosh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.acosh"
#    mapping:
#      ins: { x: input }

#Tensor_add_:
#  desc: "逐元素相加算子，输入 x 与输入 y 逐元素相加，并将各个位置的输出元素保存到返回结果中。"
#  paddle:
#    api_name: "paddle.Tensor.add_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#      y:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.add_"
#    mapping:
#      ins: { x: input, y: other }

Tensor_addmm:
  desc: "计算 x 和 y 的乘积，将结果乘以标量 alpha，再加上 input 与 beta 的乘积，得到输出。"
  paddle:
    api_name: "paddle.Tensor.addmm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
    params:
      alpha: 1.0
      beta: 1.0
#  pytorch:
#    api_name: "torch.Tensor.addmm"
#    mapping:
#      ins: { input: input, x: mat1, y: mat2, beta: beta, alpha: alpha }

Tensor_any:
  desc: "对指定维度上的 Tensor 元素进行逻辑或运算，并输出相应的计算结果。"
  paddle:
    api_name: "paddle.Tensor.any"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "bool"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis: 1
      keepdim: False
#  pytorch:
#    api_name: "torch.Tensor.any"
#    mapping:
#      ins: { x: input, axis: dim, keepdim: keepdim }

Tensor_arccos:
  desc: "arccosine 函数。"
  paddle:
    api_name: "paddle.Tensor.acos"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.arccos"
#    mapping:
#      ins: { x: input }

Tensor_arccosh:
  desc: "Arccosh 函数。"
  paddle:
    api_name: "paddle.Tensor.acosh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.arccosh"
#    mapping:
#      ins: { x: input }

Tensor_arcsin:
  desc: "arcsine 函数。"
  paddle:
    api_name: "paddle.Tensor.asin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.arcsin"
#    mapping:
#      ins: { x: input }

Tensor_arcsinh:
  desc: "Arcsinh 函数。"
  paddle:
    api_name: "paddle.Tensor.asinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.arcsinh"
#    mapping:
#      ins: { x: input }

Tensor_arctan:
  desc: "arctangent 函数。"
  paddle:
    api_name: "paddle.Tensor.atan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.arctan"
#    mapping:
#      ins: { x: input }

Tensor_arctanh:
  desc: "Arctanh 函数。"
  paddle:
    api_name: "paddle.Tensor.atanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.arctanh"
#    mapping:
#      ins: { x: input }

Tensor_asin:
  desc: "arcsine 函数。"
  paddle:
    api_name: "paddle.Tensor.asin"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.asin"
#    mapping:
#      ins: { x: input }

Tensor_asinh:
  desc: "Arcsinh 函数。"
  paddle:
    api_name: "paddle.Tensor.asinh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.asinh"
#    mapping:
#      ins: { x: input }

Tensor_atan:
  desc: "arctangent 函数。"
  paddle:
    api_name: "paddle.Tensor.atan"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.atan"
#    mapping:
#      ins: { x: input }

Tensor_atanh:
  desc: "Arctanh 函数。"
  paddle:
    api_name: "paddle.Tensor.atanh"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.atanh"
#    mapping:
#      ins: { x: input }

Tensor_bitwise_and:
  desc: "对 Tensor x 和 y 逐元素进行 按位与 运算。"
  paddle:
    api_name: "paddle.Tensor.bitwise_and"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      out: None
#  pytorch:
#    api_name: "torch.Tensor.bitwise_and"
#    mapping:
#      ins: { x: input, y: other, out: out }

Tensor_bitwise_not:
  desc: "对 Tensor x 逐元素进行 按位取反 运算。"
  paddle:
    api_name: "paddle.Tensor.bitwise_not"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      out: None
#  pytorch:
#    api_name: "torch.Tensor.bitwise_not"
#    mapping:
#      ins: { x: input, out: out }

Tensor_bitwise_or:
  desc: "对 Tensor x 和 y 逐元素进行 按位或 运算。"
  paddle:
    api_name: "paddle.Tensor.bitwise_or"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.bitwise_or"
#    mapping:
#      ins: { x: input, y: other }

Tensor_bitwise_xor:
  desc: "对 Tensor x 和 y 逐元素进行 按位异或 运算。"
  paddle:
    api_name: "paddle.Tensor.bitwise_xor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.bitwise_xor"
#    mapping:
#      ins: { x: input, y: other }

#Tensor_ceil_:
#  desc: "向上取整运算函数。"
#  paddle:
#    api_name: "paddle.Tensor.ceil_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.ceil_"
#    mapping:
#      ins: { x: input }

Tensor_cholesky:
  desc: "计算一个对称正定矩阵或一批对称正定矩阵的 Cholesky 分解"
  paddle:
    api_name: "paddle.Tensor.cholesky"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ 0, 1]
    params:
      upper: False
#  pytorch:
#    api_name: "torch.Tensor.cholesky"
#    mapping:
#      ins: { x: input, upper: upper }

Tensor_cholesky_solve:
  desc: "对 A @ X = B 的线性方程求解"
  paddle:
    api_name: "paddle.Tensor.cholesky_solve"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1 ]
    params:
      upper: False
#  pytorch:
#    api_name: "torch.Tensor.cholesky_solve"
#    mapping:
#      ins: { x: input, y: input2, upper: upper }

#Tensor_clamp_:
#  desc: "将输入的所有元素进行剪裁，使得输出元素限制在[min, max]内"
#  paddle:
#    api_name: "paddle.Tensor.clip_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#    params:
#      min: -1.0
#      max: 1.0
#  pytorch:
#    api_name: "torch.Tensor.clamp_"
#    mapping:
#      ins: { x: input, min: min, max: max }

#Tensor_clip_:
#  desc: "将输入的所有元素进行剪裁，使得输出元素限制在[min, max]内"
#  paddle:
#    api_name: "paddle.Tensor.clip_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#    params:
#      min: -1.0
#      max: 1.0
#  pytorch:
#    api_name: "torch.Tensor.clip_"
#    mapping:
#      ins: { x: input, min: min, max: max }

#Tensor_copy_:
#  desc: "对输入 Tensor x 进行拷贝，并返回一个新的 Tensor。"
#  paddle:
#    api_name: "paddle.Tensor.copy_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.copy_"
#    mapping:
#      ins: { x: src }

Tensor_corrcoef:
  desc: "相关系数矩阵表示输入矩阵中每对变量的相关性。"
  paddle:
    api_name: "paddle.Tensor.corrcoef"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1]
        range: [ -1, 1]
    params:
      rowvar: True
#  pytorch:
#    api_name: "torch.Tensor.corrcoef"
#    mapping:
#      ins: { x: input }

Tensor_deg2rad:
  desc: "将元素从弧度的角度转换为度"
  paddle:
    api_name: "paddle.Tensor.deg2rad"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.deg2rad"
#    mapping:
#      ins: { x: input }

Tensor_diagonal:
  desc: "根据参数 offset、axis1、axis2，返回输入 Tensor 的局部视图。"
  paddle:
    api_name: "paddle.Tensor.diagonal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      offset: 0
      axis1: 0
      axis2: 1
#  pytorch:
#    api_name: "torch.Tensor.diagonal"
#    mapping:
#      ins: { x: input, offset: offset, axis1: dim1, axis2: dim2 }

Tensor_digamma:
  desc: "逐元素计算输入 Tensor 的 digamma 函数值"
  paddle:
    api_name: "paddle.Tensor.digamma"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.digamma"
#    mapping:
#      ins: { x: input }

Tensor_dist:
  desc: "计算 (x-y) 的 p 范数（p-norm）"
  paddle:
    api_name: "paddle.Tensor.dist"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      p: 2.0
  pytorch:
    api_name: "torch.Tensor.dist"
    mapping:
      ins: { x: input, y: other, p: p }

Tensor_eig:
  desc: "计算一般方阵 x 的的特征值和特征向量。"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.eig"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.eig"
#    mapping:
#      ins: { x: A }

Tensor_erf:
  desc: "逐元素计算 Erf 激活函数。"
  paddle:
    api_name: "paddle.Tensor.erf"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.erf"
#    mapping:
#      ins: { x: input }

Tensor_erfinv:
  desc: "计算输入矩阵 x 的逆误差函数。 "
  paddle:
    api_name: "paddle.Tensor.erfinv"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.erfinv"
#    mapping:
#      ins: { x: input }

#Tensor_erfinv_:
#  desc: "计算输入矩阵 x 的逆误差函数。 "
#  paddle:
#    api_name: "paddle.Tensor.erfinv_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.erfinv_"
#    mapping:
#      ins: { x: input }

#Tensor_exp_:
#  desc: "对输入，逐元素进行以自然数 e 为底指数运算。"
#  paddle:
#    api_name: "paddle.Tensor.exp_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.exp_"
#    mapping:
#      ins: { x: input }

#Tensor_exponential_:
#  desc: "通过 指数分布 随机数来填充该 Tensor。"
#  paddle:
#    api_name: "paddle.Tensor.exponential_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#    params:
#      lam: 2
#  pytorch:
#    api_name: "torch.Tensor.exponential_"
#    mapping:
#      ins: { x: input, lam: lambd }

#Tensor_fill_diagonal_:
#  desc: "以 value 值填充输入 Tensor x 的对角线元素值。"
#  paddle:
#    api_name: "paddle.Tensor.fill_diagonal_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#    params:
#      value: 2
#      offset: 0
#      wrap: False
#  pytorch:
#    api_name: "torch.Tensor.fill_diagonal_"
#    mapping:
#      ins: { x: input, value: fill_value, wrap: wrap }

#Tensor_floor_:
#  desc: "向下取整函数。"
#  paddle:
#    api_name: "paddle.Tensor.floor_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.floor_"
#    mapping:
#      ins: { x: input }

Tensor_floor_divide:
  desc: "逐元素整除算子。"
  paddle:
    api_name: "paddle.Tensor.floor_divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ 1, 10]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ 1, 10]
#  pytorch:
#    api_name: "torch.Tensor.floor_divide"
#    mapping:
#      ins: { x: input, y: value }

Tensor_fmax:
  desc: "比较两个 Tensor 对应位置的元素，返回一个包含该元素最大值的新 Tensor。"
  paddle:
    api_name: "paddle.Tensor.fmax"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.fmax"
#    mapping:
#      ins: { x: input, y: other }

Tensor_frac:
  desc: "得到输入 Tensor 的小数部分。"
  paddle:
    api_name: "paddle.Tensor.frac"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.frac"
#    mapping:
#      ins: { x: input }

Tensor_gcd:
  desc: "计算两个输入的按元素绝对值的最大公约数"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.gcd"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.gcd"
#    mapping:
#      ins: { x: input, y: other }

Tensor_outer:
  desc: "计算两个 Tensor 的外积。"
  paddle:
    api_name: "paddle.Tensor.outer"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.ger"
#    mapping:
#      ins: { x: input, y: vec2 }

Tensor_heaviside:
  desc: "为 x 中的每个元素计算由 y 中相对应元素决定的赫维赛德阶跃函数"
  paddle:
    api_name: "paddle.Tensor.heaviside"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.heaviside"
#    mapping:
#      ins: { x: input, y: values }

Tensor_inverse:
  desc: "计算方阵的逆。"
  paddle:
    api_name: "paddle.Tensor.inverse"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.inverse"
#    mapping:
#      ins: { x: input }

Tensor_kthvalue:
  desc: "在指定的轴上查找第 k 小的元素和其对应所在的索引信息。"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.kthvalue"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      k: 1
      axis: -1
#  pytorch:
#    api_name: "torch.Tensor.kthvalue"
#    mapping:
#      ins: { x: input, k: k, axis: dim }

Tensor_lcm:
  desc: "计算两个输入的按元素绝对值的最小公倍数。"
  paddle:
    api_name: "paddle.Tensor.lcm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "int32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.lcm"
#    mapping:
#      ins: { x: input, y: other }

Tensor_less_equal:
  desc: "逐元素地返回 x<=y 的逻辑值"
  paddle:
    api_name: "paddle.Tensor.less_equal"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.le"
#    mapping:
#      ins: { x: input, y: other }

Tensor_lerp:
  desc: "基于给定的 weight 计算 x 与 y 的线性插值"
  paddle:
    api_name: "paddle.Tensor.lerp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      weight: 0.5
#  pytorch:
#    api_name: "torch.Tensor.lerp"
#    mapping:
#      ins: { x: input, y: end, weight: weight }

#Tensor_lerp_:
#  desc: "基于给定的 weight 计算 x 与 y 的线性插值"
#  paddle:
#    api_name: "paddle.Tensor.lerp_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -1, 1]
#    params:
#      y:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#      weight: 0.5
#  pytorch:
#    api_name: "torch.Tensor.lerp_"
#    mapping:
#      ins: { x: input, y: end, weight: weight }

Tensor_lgamma:
  desc: "计算输入 x 的 gamma 函数的自然对数并返回。"
  paddle:
    api_name: "paddle.Tensor.lgamma"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.lgamma"
#    mapping:
#      ins: { x: input }

Tensor_logcumsumexp:
  desc: "计算 x 的指数的前缀和的对数。"
  paddle:
    api_name: "paddle.Tensor.logcumsumexp"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      axis: 1
#  pytorch:
#    api_name: "torch.Tensor.logcumsumexp"
#    mapping:
#      ins: { x: input, axis: dim }

Tensor_logical_xor:
  desc: "逐元素的对 X 和 Y 进行逻辑异或运算。"
  paddle:
    api_name: "paddle.Tensor.logical_xor"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      out: None
#  pytorch:
#    api_name: "torch.Tensor.logical_xor"
#    mapping:
#      ins: { x: input, y: other, out: out }

Tensor_logit:
  desc: "实现了 logit 层。"
  paddle:
    api_name: "paddle.Tensor.logit"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      eps: 0
#  pytorch:
#    api_name: "torch.Tensor.logit"
#    mapping:
#      ins: { x: input }

Tensor_lstsq:
  desc: "求解线性方程组的最小二乘问题。"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.lstsq"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.lstsq"
#    mapping:
#      ins: { x: A, y: B, driver: driver }

Tensor_lu:
  desc: "对输入的 N 维(N>=2)矩阵 x 进行 LU 分解。"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.lu"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [3, 3, 3]
        range: [ -1, 1]
    params:
      pivot: True
      get_infos: False
#  pytorch:
#    api_name: "torch.Tensor.lu"
#    mapping:
#      ins: { x: A, pivot: pivot, get_infos: get_infos }

Tensor_matrix_power:
  desc: "计算一个或一批方阵的 n 次幂。"
  paddle:
    api_name: "paddle.Tensor.matrix_power"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      n: 2
#  pytorch:
#    api_name: "torch.Tensor.matrix_power"
#    mapping:
#      ins: { x: A, n: n }

Tensor_mm:
  desc: "用于两个输入矩阵的相乘, 两个输入的形状可为任意维度, 但当任一输入维度大于3时, 两个输入的维度必须相等"
  paddle:
    api_name: "paddle.Tensor.mm"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      mat2:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
#  pytorch:
#    api_name: "torch.Tensor.mm"
#    mapping:
#      ins: { input: input, mat2: mat2 }

Tensor_mv:
  desc: "计算矩阵 x 和向量 vec 的乘积。"
  paddle:
    api_name: "paddle.Tensor.mv"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1 ]
        range: [ -1, 1 ]
    params:
      vec:
        random: true
        dtype: "float32"
        shape: [ 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.mv"
#    mapping:
#      ins: {x: input, vec: vec }

Tensor_nanquantile:
  desc: "nanquantile计算"
  paddle:
    api_name: "paddle.Tensor.nanquantile"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -1, 1]
    params:
      q: 0.5
  pytorch:
    api_name: "torch.Tensor.nanquantile"
    mapping:
      ins: { x: input, q: q }

Tensor_slice:
  desc: "沿多个轴生成 input 的切片 0"
  paddle:
    api_name: "paddle.Tensor.slice"
    inputs:
      input:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axes: [2]
      starts: [0]
      ends: [1]
#  pytorch:
#    api_name: "torch.Tensor.narrow_copy"
#    mapping:
#      ins: {x: input, axes: dim, starts: start, ends: length }

Tensor_norm:
  desc: "计算一个或一批矩阵的正交三角分解，也称 QR 分解"
  paddle:
    api_name: "paddle.Tensor.norm"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      p: fro
      axis: 0
      keepdim: False
#  pytorch:
#    api_name: "torch.Tensor.norm"
#    params:
#        some: True
#    mapping:
#      ins: { x: A, p: ord, axis: dim, keepdim: keepdim }

Tensor_qr:
  desc: "计算一个或一批矩阵的正交三角分解，也称 QR 分解"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.qr"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      mode: reduced
#  pytorch:
#    api_name: "torch.Tensor.qr"
#    params:
#        some: True
#    mapping:
#      ins: { x: input }

Tensor_rad2deg:
  desc: "将元素从弧度的角度转换为度"
  paddle:
    api_name: "paddle.Tensor.rad2deg"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.rad2deg"
#    mapping:
#      ins: { x: input }

#Tensor_reciprocal_:
#  desc: "对输入 Tensor 取倒数"
#  paddle:
#    api_name: "paddle.Tensor.reciprocal_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.reciprocal_"
#    mapping:
#      ins: { x: input }

Tensor_remainder:
  desc: "逐元素取模算子。"
  paddle:
    api_name: "paddle.Tensor.remainder"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.remainder"
#    mapping:
#      ins: { x: input, y: other }

Tensor_repeat_interleave:
  desc: "沿着指定轴 axis 对输入 x 进行复制  0"
  paddle:
    api_name: "paddle.Tensor.repeat_interleave"
    inputs:
      x:
        random: true
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      repeats: 1
      axis: 2
#  pytorch:
#    api_name: "torch.Tensor.repeat_interleave"
#    mapping:
#      ins: {x: input, repeats: repeats, axis: dim}

#Tensor_round_:
#  desc: "将输入中的数值四舍五入到最接近的整数数值"
#  paddle:
#    api_name: "paddle.Tensor.round_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -10, 10]
#  pytorch:
#    api_name: "torch.Tensor.round_"
#    mapping:
#      ins: { x: input }

#Tensor_rsqrt_:
#  desc: "rsqrt激活函数"
#  paddle:
#    api_name: "paddle.Tensor.rsqrt_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ 1, 2]
#  pytorch:
#    api_name: "torch.Tensor.rsqrt_"
#    mapping:
#      ins: { x: input }

#Tensor_sqrt_:
#  desc: "计算输入的算数平方根"
#  paddle:
#    api_name: "paddle.Tensor.sqrt_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [1, 1, 1, 1]
#        range: [ -2, 2]
#  pytorch:
#    api_name: "torch.Tensor.sqrt_"
#    mapping:
#      ins: { x: input }

#Tensor_squeeze_:
#  desc: "删除输入 Tensor 的 Shape 中尺寸为 1 的维度。"
#  paddle:
#    api_name: "paddle.Tensor.squeeze_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.squeeze_"
#    mapping:
#      ins: { x: input }

#Tensor_subtract_:
#  desc: "逐元素相减算子，输入 x 与输入 y 逐元素相减，并将各个位置的输出元素保存到返回结果中。"
#  paddle:
#    api_name: "paddle.Tensor.subtract_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#    params:
#      y:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.subtract_"
#    mapping:
#      ins: { x: input, y: other }

Tensor_take_along_axis:
  desc: "基于输入索引矩阵，沿着指定 axis 从 arr 矩阵里选取 1d 切片。"
  paddle:
    api_name: "paddle.Tensor.take_along_axis"
    inputs:
      arr:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      indices:
        random: true
        type: "Tensor"
        dtype: "int"
        shape: [ 1, 1, 1, 1 ]
        range: [ 0, 1 ]
    params:
      axis: 0
#  pytorch:
#    api_name: "torch.Tensor.take_along_dim"
#    mapping:
#      ins: { arr: input, indices: indices, axis: dim }

#Tensor_tanh_:
#  desc: "tanh 激活函数"
#  paddle:
#    api_name: "paddle.Tensor.tanh_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.tanh_"
#    mapping:
#      ins: { x: input }

Tensor_trunc:
  desc: "将输入 Tensor 的小数部分置0，返回置0后的 Tensor ，如果输入 Tensor 的数据类型为整数，则不做处理"
  paddle:
    api_name: "paddle.Tensor.trunc"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
#  pytorch:
#    api_name: "torch.Tensor.trunc"
#    mapping:
#      ins: { input: input }

Tensor_unbind:
  desc: "将输入 Tensor 按照指定的维度分割成多个子 Tensor。"
  enable_backward: false
  paddle:
    api_name: "paddle.Tensor.unbind"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axis: 0
#  pytorch:
#    api_name: "torch.Tensor.unbind"
#    mapping:
#      ins: { input: input, axis: dim }

Tensor_unique_consecutive:
  desc: "将 Tensor 中连续重复的元素进行去重"
  paddle:
    api_name: "paddle.Tensor.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      return_inverse: False
      return_counts: False
      axis: 0
#  pytorch:
#    api_name: "torch.Tensor.unique_consecutive"
#    mapping:
#      ins: { x: input, return_inverse: return_inverse, return_counts: return_counts, axis: dim }

#Tensor_unsqueeze_:
#  desc: "向输入 Tensor 的 Shape 中一个或多个位置（axis）插入尺寸为 1 的维度。"
#  paddle:
#    api_name: "paddle.Tensor.unsqueeze_"
#    inputs:
#      x:
#        random: true
#        type: "Tensor"
#        dtype: "float32"
#        shape: [ 1, 1, 1, 1 ]
#        range: [ -1, 1 ]
#    params:
#      axis: 2
#  pytorch:
#    api_name: "torch.Tensor.unsqueeze_"
#    mapping:
#      ins: { x: input, axis: dim }

tensordot:
  desc: "张量缩并运算，即沿着 axes 给定的多个轴对两个张量对应元素的乘积进行加和操作。"
  paddle:
    api_name: "paddle.tensordot"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      axes: 2
  pytorch:
    api_name: "torch.tensordot"
    mapping:
      ins: { x: a, y: b, axes: dims }

linalg_triangular_solve:
  desc: "计算具有唯一解的线性方程组解，torch.triangular_solve替换为linalg.solve_triangular"
  paddle:
    api_name: "paddle.linalg.triangular_solve"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      upper: True
      transpose: False
      unitriangular: False
  pytorch:
    api_name: "torch.linalg.solve_triangular"
    mapping:
      ins: { x: input, y: B, upper: upper, transpose: left, unitriangular: unitriangular }

tril_indices:
  desc: "返回行数和列数已知的二维矩阵中下三角矩阵元素的行列坐标"
  enable_backward: false
  paddle:
    api_name: "paddle.tril_indices"
    params:
      row: 1
      col: 1
      offset: 0
  pytorch:
    api_name: "torch.tril_indices"
    mapping:
      ins: { row: row, col: col, offset: offset }

true_divide:
  desc: "输入 x 与输入 y 逐元素相除，并将各个位置的输出元素保存到返回结果中"
  paddle:
    api_name: "paddle.divide"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2 ]
      y:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [1, 1, 1, 1]
        range: [ -2, 2 ]
  pytorch:
    api_name: "torch.true_divide"
    mapping:
      ins: { x: input, y: other }

trunc_1:
  desc: "将输入 Tensor 的小数部分置0，返回置0后的 Tensor ，如果输入 Tensor 的数据类型为整数，则不做处理"
  paddle:
    api_name: "paddle.trunc"
    inputs:
      input:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.trunc"
    mapping:
      ins: { input: input }

unique_consecutive:
  desc: "将 Tensor 中连续重复的元素进行去重"
  enable_backward: false
  paddle:
    api_name: "paddle.unique_consecutive"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
    params:
      return_inverse: False
      return_counts: False
      axis: 0
  pytorch:
    api_name: "torch.unique_consecutive"
    mapping:
      ins: { x: input, return_inverse: return_inverse, return_counts: return_counts, axis: dim}

as_complex:
  desc: "将实数 Tensor 转为复数 Tensor"
  paddle:
    api_name: "paddle.as_complex"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "float32"
        shape: [ 1, 1, 1, 2 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.view_as_complex"
    mapping:
      ins: {x: input}

as_real:
  desc: "复数 Tensor 转为实数 Tensor"
  paddle:
    api_name: "paddle.as_real"
    inputs:
      x:
        random: true
        type: "Tensor"
        dtype: "complex64"
        shape: [ 1, 1, 1, 1 ]
        range: [ -1, 1 ]
  pytorch:
    api_name: "torch.view_as_real"
    mapping:
      ins: {x: input}
