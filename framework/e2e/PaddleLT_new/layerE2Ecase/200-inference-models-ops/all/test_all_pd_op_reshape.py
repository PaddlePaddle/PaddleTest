import os
os.environ['FLAGS_cinn_new_group_scheduler'] = '1'
os.environ['FLAGS_group_schedule_tiling_first'] = '1'
os.environ['FLAGS_enable_pir_api'] = '1'
os.environ['FLAGS_cinn_bucket_compile'] = '1'
import sys
import unittest
import numpy as np
from dataclasses import dataclass
import typing as t
import itertools

@dataclass
class Stage:
    name: str
    env_vars: t.Dict[str, str]

cinn_stages = [
    Stage(
        name="dynamic_to_static",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=False,
            FLAGS_prim_enable_dynamic=False,
        ),
    ),
    Stage(
        name="prim",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
        ),
    ),
    Stage(
        name="infer_symbolic",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=False,
            FLAGS_check_infer_symbolic=True,
        ),
    ),
	Stage(
        name="frontend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=True,
        ), 
    ),
    Stage(
        name="backend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=False,
        ), 
    ),
]

def GetCinnStageByName(name):
    for stage in cinn_stages:
        if stage.name == name:
            return stage
    return None

def GetCurrentCinnStage():
    name = os.getenv('PADDLE_DEBUG_CINN_STAGE_NAME')
    if name is None:
        return None
    stage_names = [stage.name for stage in cinn_stages]
    assert name in stage_names, (
        f"PADDLE_DEBUG_CINN_STAGE_NAME should be in {stage_names}"
    )
    return GetCinnStageByName(name)

def GetPrevCinnStage(stage):
    for i in range(1, len(cinn_stages)):
        if stage is cinn_stages[i]:
            return cinn_stages[i - 1]
    return None

def IsCinnStageEnableDiff():
    value = os.getenv('PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF')
    enabled = value in {
        '1',
        'true',
        'True',
    }
    if enabled:
        assert GetCurrentCinnStage() is not None
    return enabled

def GetExitCodeAndStdErr(cmd, env):
    env = {
        k:v
        for k, v in env.items()
        if v is not None
    }
    import subprocess
    result = subprocess.run(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        env=env,
    )
    return result.returncode, result.stderr

def GetStageExitCodeAndStdErr(stage):
    return GetExitCodeAndStdErr(
        [sys.executable, __file__],
        env=dict(
            PADDLE_DEBUG_CINN_STAGE_NAME=stage.name,
            PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF='0',
            PYTHONPATH=os.getenv('PYTHONPATH'),
            ATHENA_ENABLE_TRY_RUN="False",
        ),
    )

def AthenaTryRunEnabled():
    return os.getenv('ATHENA_ENABLE_TRY_RUN') not in {
        "0",
        "False",
        "false",
        "OFF"
    }

def GetNeedSkipAndSkipMessage():
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    if not IsCinnStageEnableDiff():
        return False, ""
    last_stage = GetPrevCinnStage(current_stage)
    if last_stage is None:
        return False, ""
    exitcode, stderr = GetStageExitCodeAndStdErr(last_stage)
    if exitcode != 0:
        return True, "last stage failed."
    return False, ""

def GetCurrentStageTryRunExitCodeAndStdErr():
    if not AthenaTryRunEnabled():
        return False, ""
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    return GetStageExitCodeAndStdErr(current_stage)

def SetDefaultEnv(**env_var2value):
    for env_var, value in env_var2value.items():
        if os.getenv(env_var) is None:
            os.environ[env_var] = str(value)

SetDefaultEnv(
    PADDLE_DEBUG_CINN_STAGE_NAME="backend",
    PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF=False,
    PADDLE_DEBUG_ENABLE_CINN=True,
    FLAGS_enable_pir_api=True,
    FLAGS_prim_all=True,
    FLAGS_prim_enable_dynamic=True,
    FLAGS_use_cinn=False,
    FLAGS_check_infer_symbolic=False,
    FLAGS_enable_fusion_fallback=False,
)

import paddle

def SetEnvVar(env_var2value):
    for env_var, value in env_var2value.items():
        os.environ[env_var] = str(value)
    paddle.set_flags({
        env_var:value
        for env_var, value in env_var2value.items()
        if env_var.startswith('FLAGS_')
    })

if GetCurrentCinnStage() is not None:
    SetEnvVar(GetCurrentCinnStage().env_vars)

def GetEnvVarEnableJit():
    enable_jit = os.getenv('PADDLE_DEBUG_ENABLE_JIT')
    return enable_jit not in {
        "0",
        "False",
        "false",
        "OFF",
    }

def GetEnvVarEnableCinn():
    enable_cinn = os.getenv('PADDLE_DEBUG_ENABLE_CINN')
    if enable_cinn is None:
        return True
    return enable_cinn not in {
        "0",
        "False",
        "false",
        "OFF",
    }


def GetTolerance(dtype):
    if dtype == np.float16:
        return GetFloat16Tolerance()
    if dtype == np.float32:
        return GetFloat32Tolerance()
    return 1e-6

def GetFloat16Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT16_TOL'))
    except:
        return 1e-3

def GetFloat32Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT32_TOL'))
    except:
        return 1e-6

def IsInteger(dtype):
    return np.dtype(dtype).char in np.typecodes['AllInteger']

def ApplyToStatic(net, use_cinn):
    build_strategy = paddle.static.BuildStrategy()
    build_strategy.build_cinn_pass = use_cinn
    return paddle.jit.to_static(
        net,
        input_spec=net.get_input_spec(),
        build_strategy=build_strategy,
        full_graph=True,
    )

class InstanceTrait:

    @classmethod
    def instance(cls):
        if cls.instance_ is None:
            cls.instance_ = cls()
        return cls.instance_

    @classmethod
    def static_instance_with_cinn(cls):
        if cls.static_instance_with_cinn_ is None:
            cls.static_instance_with_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=True
            )
        return cls.static_instance_with_cinn_

    @classmethod
    def static_instance_without_cinn(cls):
        if cls.static_instance_without_cinn_ is None:
            cls.static_instance_without_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=False
            )
        return cls.static_instance_without_cinn_


class CinnTestBase:

    def setUp(self):
        paddle.seed(2024)
        self.prepare_data()

    def _test_entry(self):
        dy_outs = self.train(use_cinn=False)
        cinn_outs = self.train(use_cinn=GetEnvVarEnableCinn())

        for cinn_out, dy_out in zip(cinn_outs, dy_outs):
          if type(cinn_out) is list and type(dy_out) is list:
            for x, y in zip(cinn_out, dy_out):
              self.assert_all_close(x, y)
          else:
            self.assert_all_close(cinn_out, dy_out)

    def train(self, use_cinn):
        if GetEnvVarEnableJit():
            net = self.prepare_static_net(use_cinn)
        else:
            net = self.prepare_net()
        paddle.seed(2024)
        out = net(*self.inputs)
        return out
    
    def prepare_data(self):
        self.inputs = self.get_inputs()
        for input in self.inputs:
            input.stop_gradient = True

    def prepare_net(self):
        return self.get_test_class().instance()

    def prepare_static_net(self, use_cinn):
        if use_cinn:
            return self.get_test_class().static_instance_with_cinn()
        else:
            return self.get_test_class().static_instance_without_cinn()

    def assert_all_close(self, x, y):
        if (hasattr(x, "numpy") and hasattr(y, "numpy")):
            x_numpy = x.numpy()
            y_numpy = y.numpy()
            assert x_numpy.dtype == y_numpy.dtype
            if IsInteger(x_numpy.dtype):
                np.testing.assert_equal(x_numpy, y_numpy)
            else:
                tol = GetTolerance(x_numpy.dtype)
                np.testing.assert_allclose(x_numpy, y_numpy, atol=tol, rtol=tol)
        else:
            assert x == y





need_skip, skip_message = GetNeedSkipAndSkipMessage()
try_run_exit_code, try_run_stderr = GetCurrentStageTryRunExitCodeAndStdErr()
class TestTryRun(unittest.TestCase):
    def test_panic(self):
        if not AthenaTryRunEnabled():
            return
        if try_run_exit_code == 0:
            # All unittest cases passed.
            return
        if try_run_exit_code > 0:
            # program failed but not panic.
            return
        # program panicked.
        kOutputLimit = 65536
        message = try_run_stderr[-kOutputLimit:]
        raise RuntimeError(f"panicked. last {kOutputLimit} characters of stderr: \n{message}")
class PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb0444dc99c3ac86df6a2b588dad4300(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3994140625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a0b65ecd4fd986024e93753bfd3c82c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e429ba311317de0da7ead611ca98ed0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3430ff81f66cc4a5356a89e385f3f645(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e429ba311317de0da7ead611ca98ed0
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b40089da3ce29114718a25f24de3b509(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b8f32a0936d6992798e652c8fab53cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b40089da3ce29114718a25f24de3b509
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9962276da9ce745db32c85ab2c856c4a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ed42ede22da9d554c959704486bb590(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9962276da9ce745db32c85ab2c856c4a
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_56d15c7701954747083eaa309d460f5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e95ef843643e8ae38693ac5780b094df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_56d15c7701954747083eaa309d460f5f
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1435ec68106ada9b09690ff610301a0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f209034d026402df7c7a6baa6608b033(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1435ec68106ada9b09690ff610301a0a
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d20619502e57f68fea535ebaca4b9970(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f46c2b4ddf325ecbdfb086bde22ac83d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d20619502e57f68fea535ebaca4b9970
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8e9f6cc0c9b7b43f0a661e1072294dfa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65d9250fcf87709cf8f6e2417430c44f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8e9f6cc0c9b7b43f0a661e1072294dfa
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3959c93179c104dabc01a5615673b38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1788bee2b0184e6648ed4065d195f60c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_222c339fd4d1817a73fb27e327413387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e95260de6333db167b544fa6886878d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5cb566008637fe80b0257fecbd0657c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e95260de6333db167b544fa6886878d
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d8157971fc7e20d1a1649847b17550f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6b24854b2742b124a5d34d6e9dff56f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3759765625, 0.424072265625, 0.449462890625, 0.0924072265625, 0.2191162109375, 0.28515625, 0.03338623046875, 0.43310546875, 0.335205078125, 0.4365234375, 0.275390625, 0.30517578125, 0.1539306640625, 0.403076171875, 0.24169921875, 0.385009765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58f84d1d360fefd7f1ae4b2c98684591(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfe8f0b9362b8530a1a4134dbf182175(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3965635895729065, 0.16649548709392548, 0.07379059493541718, 0.28799471259117126, 0.07671383768320084, 0.30779895186424255, 0.43640223145484924, 0.09340911358594894, 0.44809794425964355, 0.29580754041671753, 0.28075507283210754, 0.17665840685367584, 0.1403399109840393, 0.2733430862426758, 0.11324454843997955, 0.05740761756896973], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_040e6fbfa405b001dba7b80ea22e51c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_074002d010dc476fb4f6b1fde317a10f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48f9b993ff699180fbc23cc191e20a8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f49d8cb88e0c825acc2d12f6c90e3bbc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_77a643f7378d55f0f985cd226f1364aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3bdcaf5b6d6c0e81e03bfd4e4348c4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_77a643f7378d55f0f985cd226f1364aa
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_719edacd5c7b0a3fe91f9454b916c0e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.004421700723469257, 0.17597493529319763, 0.20536407828330994, 0.12479618191719055, 0.31193476915359497, 0.4078334867954254, 0.0485972985625267, 0.318244606256485, 0.20698998868465424, 0.22152984142303467, 0.30241134762763977, 0.20769068598747253, 0.17816577851772308, 0.008036965504288673, 0.3837926387786865, 0.12541545927524567], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec8fe23e588eb82c2ba37ae31e0bdc04(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2197076678276062, 0.0940999910235405, 0.11066421121358871, 0.22640207409858704, 0.11810009926557541, 0.3645334541797638, 0.15809446573257446, 0.05676616355776787, 0.21948941051959991, 0.2263626754283905, 0.17605148255825043, 0.26195064187049866, 0.13877326250076294, 0.2215796262025833, 0.04470398649573326, 0.1336459070444107], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7b5c4c221594b7d3c0769db388032b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.438720703125, 0.460205078125, 0.2459716796875, 0.09722900390625, 0.27685546875, 0.26904296875, 0.345458984375, 0.10101318359375, 0.232177734375, 0.216552734375, 0.09783935546875, 0.2486572265625, 0.0176239013671875, 0.45849609375, 0.203857421875, 0.318115234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_742a8da1082951ba5d819c21526364ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_012f19189650dad87be60335a3a8882e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8907027e1722275a0f8ac1bd491d6529(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6aca1ae391a7fd9925f852a33ddbbbc1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8907027e1722275a0f8ac1bd491d6529
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f562b0c05658c4452fda7de5aa6dd72f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6632152983516094597914fbd1047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61858562edc929e9999781fa546daa5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6632152983516094597914fbd1047e
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c10de201bce3f87606322999496df08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9489a7128fdbe63338ad0d47e17e13f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41283097863197327, 0.039540309458971024, 0.3393658697605133, 0.4357337951660156, 0.39555251598358154, 0.17265549302101135, 0.13145001232624054, 0.0489308126270771, 0.26320314407348633, 0.3439194858074188, 0.27374768257141113, 0.4526122212409973, 0.14021317660808563, 0.27623000741004944, 0.04560655727982521, 0.48507118225097656, 0.33947816491127014, 0.06395615637302399, 0.2987542152404785, 0.03583494946360588], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_310618c00d619831e3f82c908e2c517a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_823a5987e415ca2993342734e38f41d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_310618c00d619831e3f82c908e2c517a
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfa7d0a930a96a795dddc4b53bf763c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73e77a7490ebcc8923a88e459bbc6f99(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11322021484375, 0.41552734375, 0.348876953125, 0.1533203125, 0.040618896484375, 0.0869140625, 0.11541748046875, 0.3154296875, 0.265625, 0.1796875, 0.31494140625, 0.0631103515625, 0.06353759765625, 0.01372528076171875, 0.255126953125, 0.29248046875, 0.40234375, 0.0204010009765625, 0.427490234375, 0.322265625, 0.370361328125, 0.2012939453125, 0.296875, 0.135986328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e5ce00188e4fe7be78b41e7139f61c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1436767578125, 0.415771484375, 0.11724853515625, 0.0029354095458984375, 0.080322265625, 0.198974609375, 0.1046142578125, 0.408935546875, 0.2115478515625, 0.364501953125, 0.047454833984375, 0.269287109375, 0.477783203125, 0.105712890625, 0.29296875, 0.1409912109375, 0.385009765625, 0.292236328125, 0.4892578125, 0.314697265625, 0.37060546875, 0.354736328125, 0.438232421875, 0.382080078125, 0.29833984375, 0.455078125, 0.37255859375, 0.09124755859375, 0.493408203125, 0.478271484375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_061d2e68853ccd58f85a6af977d649bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6fa6217e3af039251f9d5238188a846(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_061d2e68853ccd58f85a6af977d649bc
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9de8b232ce1a702757c0ad034258d01a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2288818359375, 0.3662109375, 0.31103515625, 0.2415771484375, 0.322021484375, 0.1295166015625, 0.309814453125, 0.390625, 0.0167236328125, 0.49462890625, 0.435791015625, 0.2666015625, 0.1776123046875, 0.34619140625, 0.342529296875, 0.366943359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e0c825643db18caa24dc3d0da307588(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1dab80e2a68dc29685d19543500b12d8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f83fa518685c319f171748be0913ad7c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1dab80e2a68dc29685d19543500b12d8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faad70cf18affedd64b7596c522ae1f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8b94dd95189364001a79065ef3b68b2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_973aa68f77f19750e1c09eec0c1c7f12(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27512243390083313, 0.12792038917541504, 0.4424717128276825, 0.01762736216187477, 0.18235895037651062, 0.262273907661438, 0.3703030049800873, 0.4140661656856537, 0.16937898099422455, 0.4702371656894684, 0.3926743268966675, 0.26980847120285034, 0.11969484388828278, 0.3669740855693817, 0.19235126674175262, 0.3662109076976776, 0.3443688154220581, 0.33828720450401306, 0.06299235671758652, 0.4461681842803955, 0.11929910629987717, 0.25478121638298035, 0.21362519264221191, 0.23096798360347748], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e013344503775f7c23fe4188d0e33db9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e70dd51951f06b7a54630ae5897eeb88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e013344503775f7c23fe4188d0e33db9
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4dee74942b3047e19581b527d65cdea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_029cf30cfe4bb2a83f4c3681084531de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4dee74942b3047e19581b527d65cdea
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b17ac827aa037e3c431fa3f354115491(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed62f7e4e4ce11f311803887a3e2f95a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_061ea1a545e58f525f09bad4f3abed42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69e4f457d8124bf4103a2941416202ba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3894188404083252, 0.10100984573364258, 0.15461990237236023, 0.12252016365528107, 0.49874627590179443, 0.2167384773492813, 0.312262624502182, 0.22780504822731018, 0.18858683109283447, 0.23878243565559387, 0.12526704370975494, 0.08298668265342712, 0.012588167563080788, 0.07618390768766403, 0.1616743952035904, 0.2550129294395447, 0.04985056817531586, 0.3654599189758301, 0.3870098292827606], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf7e9b59f3e4618e1c91821b9bcd5142(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_72bc5727e5e9d153c125a28ed1b42262(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a64347907c89b001fff53f04a66bcda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_72bc5727e5e9d153c125a28ed1b42262
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6c7aba6b5335f4bd83f94ebbc5e0deb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bb48ed47d99105fb3876eb192ed56704(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8415d2bc894ea3989dd098e5171f09d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bb48ed47d99105fb3876eb192ed56704
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_245246f176861084458858972821b9c5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3019236922264099, 0.4000304937362671, 0.30721884965896606, 0.23254337906837463, 0.3165130019187927, 0.0046506840735673904, 0.29266828298568726, 0.24605120718479156, 0.45917004346847534, 0.35807517170906067, 0.4773777425289154, 0.1580287218093872, 0.16692239046096802, 0.07836787402629852, 0.2783706486225128, 0.09936483204364777], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f84ce01bd216876bcf3ee843ae3cee0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06641124933958054, 0.2291320562362671, 0.29542556405067444, 0.08626353740692139, 0.1479022204875946, 0.3210790455341339, 0.2838164269924164, 0.05478566884994507, 0.2834378778934479, 0.04665027931332588, 0.0899965763092041, 0.24612689018249512, 0.10560344904661179, 0.12056343257427216, 0.08719367533922195, 0.1902407705783844], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d670895b0c9c3bc69ef90141b6123dfa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df4baf128ce8debc91df27e5f7de8bc3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12610386312007904, 0.46161559224128723, 0.1611277312040329, 0.00017604202730581164, 0.4493936598300934, 0.03547762706875801, 0.4633723795413971, 0.19782070815563202, 0.2897692620754242, 0.2394517958164215, 0.20263709127902985, 0.4281943738460541, 0.2172703593969345, 0.3084319829940796, 0.35721078515052795, 0.10594075173139572, 0.4198846220970154, 0.2274494767189026, 0.494407594203949, 0.43359866738319397, 0.4165443778038025, 0.04102635756134987, 0.16366709768772125, 0.30164405703544617], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c485ec025d6486261cccbc00e5629efc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25bd063daed0e2f412e215aeb00b42a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c485ec025d6486261cccbc00e5629efc
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6213a99911c159307238785fba3d732e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_561e016c24803f84ea14602e5c934a2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6213a99911c159307238785fba3d732e
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a7703647190228da56677428840df221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a332fe32ef5d9c267f89a22a5636c229(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a7703647190228da56677428840df221
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_efee572a45d8a18c3d7d45712726cf02(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33349403738975525, 0.061475999653339386, 0.1446361094713211, 0.28618475794792175, 0.12243352830410004, 0.33812767267227173, 0.4382650852203369, 0.40651509165763855, 0.2290334552526474, 0.12596729397773743, 0.26169684529304504, 0.45532581210136414, 0.48429644107818604, 0.3303384482860565, 0.244485005736351, 0.1755862683057785], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31232cbdee9766d4562a30dbd94eef49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1207025b2416dc423736d9776a3021f7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93f067a2008ed5a9e4398890d89ecfa8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1207025b2416dc423736d9776a3021f7
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6295a2dc69caca65eba56abec5ec0683(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6612d6c57b3033ac2228350ee5b8c1f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13002093136310577], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90ca54ec813d2dbc0135ae05bb92682b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52828b3ee07cfbca61a6de8cffe68213(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53564ba522bacb38c544962dfcc6798c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6d1a33e801d0a9f6512aba0db61e931(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53564ba522bacb38c544962dfcc6798c
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c4bc581ccd596618a68d4bd832c5deb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1116943359375, 0.00763702392578125, 0.47119140625, 0.0291900634765625, 0.379638671875, 0.307861328125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93afa811994c197405d5b535a411202f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b003e04f4f7eaee26e7acace8d4db5ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2568359375, 0.052947998046875, 0.1668701171875, 0.333984375, 0.09735107421875, 0.285888671875, 0.332275390625, 0.1600341796875, 0.1923828125, 0.332275390625, 0.39794921875, 0.377197265625, 0.04620361328125, 0.441162109375], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcabcab139b242ad1c233087264f27f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0ef09d24b5b2bac1d9be7643dd43304(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.494140625, 0.194580078125, 0.296630859375, 0.11419677734375, 0.3310546875, 0.361328125, 0.117431640625, 0.43701171875, 0.2025146484375, 0.292236328125, 0.06927490234375, 0.438720703125, 0.1002197265625, 0.463134765625, 0.200439453125, 0.053924560546875, 0.1605224609375, 0.267822265625, 0.241455078125, 0.35107421875, 0.262451171875, 0.2091064453125, 0.25634765625, 0.28125, 0.34130859375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c743400599af87b42dbc04ea27205e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20556640625, 0.2193603515625, 0.33984375, 0.14208984375, 0.1768798828125, 0.3193359375, 0.036407470703125, 0.035919189453125, 0.369140625, 0.328125, 0.3544921875, 0.48876953125, 0.399169921875, 0.2568359375, 0.14794921875, 0.2142333984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_99200d942536595268e4a8e6d2dd8a38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22998046875, 0.44677734375, 0.211669921875, 0.393310546875, 0.3486328125, 0.339599609375, 0.061676025390625, 0.0845947265625, 0.177490234375, 0.247314453125, 0.12060546875, 0.37109375, 0.41162109375, 0.1424560546875, 0.0828857421875, 0.1591796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7f46837d0ee6fa67b6919f2711169a99(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23646527528762817, 0.4714430570602417, 0.48234114050865173, 0.43704953789711], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_47366ba000dea28308771433e1cd6306(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91520cd20b279a31055bb1bc3b3afa8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_47366ba000dea28308771433e1cd6306
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bdacde2836f98446b9906b50142ce07c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba2e2861851cf732031cab97c0a25e69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bdacde2836f98446b9906b50142ce07c
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8ccac1805637a4eb070b3c73cef73435(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71715403e13a9a950a4b3fd0f6579549(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2022705078125, 0.326904296875, 0.306884765625, 0.473388671875, 0.11907958984375, 0.03692626953125, 0.4267578125, 0.46484375, 0.1953125, 0.427978515625, 0.474365234375, 0.41650390625, 0.0283355712890625, 0.3974609375, 0.12109375, 0.1832275390625, 0.06048583984375, 0.18212890625, 0.12310791015625, 0.08807373046875, 0.298095703125, 0.431396484375, 0.244140625, 0.025238037109375, 0.07940673828125, 0.33984375, 0.362548828125], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a95afc5eb47d95b3bebf49e9f7e01db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_064c55c9db61dd2826504c03a7b3196f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc83b346411f5b614cd0430827bafd7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_064c55c9db61dd2826504c03a7b3196f
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f03a8d3924845c19fc33960a3a00973a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b575d7cd8768eea14c2cfdd9ced60fae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26181328296661377, 0.4423964023590088, 0.09003488719463348, 0.2405611127614975, 0.18720677495002747, 0.48757433891296387, 0.0010617857333272696, 0.46161365509033203, 0.10970127582550049, 0.24957135319709778, 0.37561923265457153, 0.22928854823112488], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b48f8ad897df4cf019c174ded30d3056(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d5915752baf0e0dafc1d62c6e4e9288(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68d8d908c50b752522d09f347f3bfbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf5cb82337c68469d12eeec970f95c11(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fca1cb9315bba4c8a53b28e9a87864e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf5cb82337c68469d12eeec970f95c11
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e5262ed39ae5effcb6cff9d9e541323(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_486c808b421f715ea60783b020b9ac2a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fb401baa1e511a86947d94ae47f2477(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_486c808b421f715ea60783b020b9ac2a
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f6b1a39fd2b31e29001192842df487c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.418212890625, 0.3134765625, 0.1951904296875, 0.373291015625, 0.11871337890625, 0.2352294921875, 0.307373046875, 0.25537109375, 0.16943359375, 0.1756591796875, 0.3330078125, 0.263671875, 0.05047607421875, 0.232177734375, 0.27294921875, 0.1375732421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83bfc3ef07cbea4746117e48369e2470(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a6d051dfa976c5a12f3f3fac97617f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83bfc3ef07cbea4746117e48369e2470
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b29f3340116338d8fa64da0e59ef5523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f28c5db0c3c537261759a15642ad0804(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.298095703125, 0.05755615234375, 0.0869140625, 0.30517578125, 0.06561279296875, 0.39990234375, 0.1341552734375, 0.2100830078125, 0.1812744140625, 0.063720703125, 0.49609375, 0.373779296875, 0.005535125732421875, 0.154296875, 0.09759521484375, 0.06976318359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b97198222d9c791cf52522722728637(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26673170924186707, 0.33619824051856995, 0.23490464687347412, 0.4631482660770416, 0.33310529589653015, 0.47378894686698914, 0.15110087394714355, 0.30556023120880127, 0.05249704420566559, 0.3681011199951172, 0.2835218608379364, 0.35620245337486267, 0.05388675630092621, 0.38299286365509033, 0.04699891060590744, 0.15700028836727142, 0.12087077647447586, 0.29220467805862427], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_13a6402fe9abbf5115466a5568661351(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc9eb38c355a03046dca565d5635d10d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3560616672039032, 0.2095300853252411, 0.3891250789165497, 0.43306705355644226, 0.12464017421007156, 0.4789709746837616, 0.08137708902359009, 0.4434288740158081, 0.24031749367713928, 0.01829671673476696, 0.34163612127304077, 0.48411035537719727, 0.46548786759376526, 0.01731858029961586, 0.2915875315666199, 0.10715289413928986, 0.09877210110425949, 0.3220957815647125, 0.20352065563201904, 0.3885257840156555, 0.3594505190849304, 0.28211548924446106, 0.48636704683303833, 0.453302800655365, 0.25123873353004456, 0.17658761143684387, 0.17935825884342194, 0.05496516823768616, 0.1810137927532196, 0.04874764010310173], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66f305930ed7184f3a7a550668fb500a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f4c0a937648e2e3a65fdc32427c30ac9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef57cec8081a6f7c2bb3633898f253f4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f4c0a937648e2e3a65fdc32427c30ac9
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53475d6685eb45512151053dbf5bd1f4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.432373046875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00f02511ec4c290a2f458e183d862398(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_62696cfd7642932947982d9572431133(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c77d53f7598ede2d42bf98b201c4a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_62696cfd7642932947982d9572431133
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_61d37ed2584d74e6259927213baeb5ee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d49e6c080b6db60f90307048c67da766(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43798184394836426, 0.2930348515510559, 0.3648661971092224], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0047d47e5f8e9adc1e42d4bd90c82c64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d225cb9dca3ceffd2ef092b0dc79be2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.038864411413669586, 0.0490422360599041, 0.18228362500667572, 0.0801665335893631, 0.41187217831611633, 0.03117341175675392, 0.44322630763053894, 0.3286488950252533, 0.09001012146472931, 0.429853618144989, 0.36779195070266724, 0.49537304043769836], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c3e29d6dc024759b223509e8ce149214(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3649376630783081, 0.3182789087295532, 0.003096494125202298, 0.4252881705760956, 0.4244883954524994, 0.17893552780151367, 0.16353555023670197, 0.4295688271522522, 0.0718536302447319, 0.0013103079982101917, 0.16936978697776794, 0.054996248334646225], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cac42a93549f9f5e140adc06880552ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5493eac47e1690331038b39fa914687a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38874295353889465, 0.004369879141449928, 0.3584657609462738, 0.4828575551509857, 0.018445264548063278, 0.4775507152080536, 0.10245124995708466, 0.006617730483412743, 0.2563771605491638, 0.3027958869934082], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a12dc12354ac03d454e8c31840ea78a3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.252575546503067], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_746b1dfce60ffc19aa5c95a9cd3a2171(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f6495d6602a9f64e42e306ebe733d9ba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_746b1dfce60ffc19aa5c95a9cd3a2171
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2864e061d373c1f57649883b519d2d25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8d4398dd34f7e9193cad0c48addc178(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2864e061d373c1f57649883b519d2d25
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dddae32fb10aa2967df8285de100133a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_454acca9b203c0b4e82d33fdd727940f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dddae32fb10aa2967df8285de100133a
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c6e486a5615fb35f59ab84c186179de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5019dfac401ad8840745540dde57a5a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c6e486a5615fb35f59ab84c186179de
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4d330a83e6c72ad2a5f4a32ba301273(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_129f129b9faf90dfd59f86536bbd6ed6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37353515625, 0.446044921875, 0.1312255859375, 0.2308349609375, 0.0276031494140625, 0.260986328125, 0.282470703125, 0.1551513671875, 0.270751953125, 0.1275634765625, 0.4052734375, 0.493408203125, 0.212890625, 0.045166015625, 0.283447265625, 0.30859375, 0.245849609375, 0.03521728515625, 0.09417724609375, 0.2509765625, 0.376708984375, 0.06622314453125, 0.47216796875, 0.02642822265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d692bd31a3f82782f743852d686be04(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21826171875, 0.498046875, 0.455810546875, 0.424072265625, 0.0008997917175292969, 0.453369140625, 0.368896484375, 0.320068359375, 0.136474609375, 0.205810546875, 0.1602783203125, 0.40185546875, 0.431396484375, 0.12030029296875, 0.310791015625, 0.438720703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a41f1e759f01afb45c4b1bb18453784(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2c11f347654121d6936dc449fc5175bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7fcdc4d8c28e638b61f5bc62ea9040b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2c11f347654121d6936dc449fc5175bf
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c380f56e3c450ff942683a9fb13de58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bcc54b5a11a947bd6e04eaba51cf5c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47098591923713684, 0.35439878702163696, 0.17596761882305145, 0.019175970926880836, 0.1525845229625702, 0.18393287062644958, 0.18585413694381714, 0.008959345519542694, 0.3822980225086212, 0.19156776368618011, 0.2607671618461609, 0.4079239070415497, 0.041039396077394485, 0.45814064145088196, 0.4298044741153717, 0.3845875859260559, 0.45272496342658997, 0.10343587398529053, 0.0373367965221405, 0.11673267185688019, 0.03910137340426445, 0.05783708766102791, 0.31797677278518677, 0.12481418997049332, 0.06783298403024673], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d6335c00c45156738c0ff2e61111ea9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_954fbf7ea6df11680a4537b6f7d2c5d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3118382692337036, 0.476834774017334, 0.41617006063461304, 0.4541412889957428, 0.3700210750102997, 0.35176101326942444, 0.42455676198005676, 0.1454135626554489, 0.3874279856681824, 0.1193205863237381, 0.01966509409248829, 0.0183724332600832, 0.008873376995325089, 0.3260855972766876, 0.3801661729812622, 0.31015273928642273], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69218afca1de34a20882bdd1b223f6db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33870020508766174, 0.16588453948497772, 0.12573391199111938, 0.20760057866573334, 0.17005209624767303, 0.42553144693374634, 0.2415975034236908, 0.1384803056716919, 0.4347679316997528, 0.21357835829257965, 0.38772282004356384, 0.2906855046749115, 0.43399348855018616, 0.3838852047920227, 0.3205482065677643, 0.19369186460971832, 0.39680030941963196, 0.19692528247833252, 0.32312455773353577, 0.3674499988555908, 0.0027382157277315855, 0.03001539595425129, 0.16547393798828125, 0.43786460161209106, 0.03359595686197281, 0.1607382893562317, 0.43003565073013306, 0.3938737213611603, 0.2809458374977112, 0.3065425455570221], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d3d25914804b3e80ce958cd92df52d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4506d7b50329fce3d573b3e13065738e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2d55aa0a01dd07d04572211ed20b372(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.351318359375, 0.492431640625, 0.0206298828125, 0.10321044921875, 0.331298828125, 0.46142578125, 0.3720703125, 0.433349609375, 0.349365234375, 0.2266845703125, 0.495849609375, 0.46533203125, 0.36572265625, 0.2218017578125, 0.4306640625, 0.380126953125, 0.35498046875, 0.302001953125, 0.366943359375, 0.1944580078125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46002b77891066f4fe496de5ea391acf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.451904296875, 0.43212890625, 0.4658203125, 0.308837890625, 0.1798095703125, 0.0863037109375, 0.271728515625, 0.0567626953125, 0.31689453125, 0.00820159912109375, 0.1376953125, 0.1026611328125, 0.015716552734375, 0.1622314453125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e5448cf2764e76aae861805749cb979(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7832364c3d6074c14661633de10beffd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e5448cf2764e76aae861805749cb979
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88011f6d7f203f36d78354e39fee767f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4671209454536438, 0.2251543402671814, 0.4250906705856323, 0.39441433548927307, 0.1344204694032669, 0.03540319204330444, 0.38906610012054443, 0.3486629128456116], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38b09de3ab78231dc2c93d9a49e91c09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7c1d31962adac57c3593e247c368cc05(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09417724609375, 0.2342529296875, 0.456298828125, 0.09649658203125, 0.430908203125, 0.2344970703125, 0.07830810546875, 0.0222625732421875, 0.29931640625, 0.08099365234375, 0.1358642578125, 0.368896484375, 0.02197265625, 0.20556640625, 0.1632080078125, 0.40966796875, 0.46435546875, 0.1942138671875, 0.39111328125, 0.40771484375, 0.0753173828125, 0.46875, 0.32958984375, 0.33203125, 0.162841796875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7872bb5d5bd139750fed1830f3f860f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c3f2554b0d2e33dc87eb61efe4e2e57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bd2845671761dcf5153557334a09cd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a57f8b17cc4618e17cad921d6ce61cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3008420169353485, 0.4357687830924988], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93858bbb3e68664061165b72e552602e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39540478587150574, 0.11833180487155914, 0.10366180539131165, 0.40017983317375183, 0.18330904841423035, 0.14188891649246216, 0.35045334696769714, 0.4245442748069763, 0.3238358199596405, 0.4984823167324066, 0.26580387353897095, 0.08523941040039062, 0.08193923532962799, 0.39671388268470764, 0.2955469787120819, 0.15158149600028992, 0.30495601892471313, 0.30528533458709717, 0.40660321712493896], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0166dc3ef09da4a9345e022ef27086c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2294921875, 0.417236328125, 0.4970703125, 0.46240234375, 0.2498779296875, 0.47705078125, 0.22216796875, 0.354736328125, 0.408447265625, 0.184326171875, 0.37646484375, 0.41357421875, 0.1318359375, 0.17333984375, 0.263916015625, 0.04364013671875, 0.00551605224609375, 0.051513671875, 0.1573486328125, 0.3623046875, 0.32958984375, 0.217529296875, 0.199951171875, 0.22900390625, 0.47900390625, 0.3447265625, 0.146728515625, 0.490234375, 0.09295654296875, 0.057525634765625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab92ba270100f625e64a660ea8eae72e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd1df9ff6539d495984fda2360e0d729(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab92ba270100f625e64a660ea8eae72e
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb48540e9b97fe660f9df3c137d26607(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24960996210575104, 0.030962742865085602, 0.3021920323371887, 0.12914583086967468, 0.20016483962535858, 0.25015243887901306, 0.3075847029685974, 0.32225698232650757], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a640473358402807a2cf043edbb6d5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13602489233016968, 0.12101531028747559, 0.35582345724105835, 0.18086431920528412, 0.11917001754045486, 0.3423732817173004, 0.00036523566814139485, 0.118374302983284, 0.13627508282661438, 0.3434959352016449, 0.3980211019515991, 0.0057599423453211784, 0.18060798943042755, 0.2299971580505371, 0.03654582053422928, 0.36827918887138367, 0.2954116761684418, 0.46519601345062256, 0.17039798200130463, 0.3454940915107727, 0.16581937670707703, 0.419410765171051, 0.06311380863189697, 0.210301011800766], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0874cf81d85d28b952be2932e7836f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d89f910dcc5dd27afeec4dd70233feee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([92], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ede6904fd620e82af6c338868d98a762(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28037112951278687, 0.022466987371444702, 0.41314592957496643, 0.3632659316062927, 0.24874696135520935, 0.0844167023897171, 0.4211007356643677, 0.041788022965192795, 0.43050822615623474, 0.27345341444015503, 0.4168657064437866, 0.26226603984832764, 0.3338208794593811, 0.41490018367767334, 0.47231325507164, 0.007184204179793596], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c9601cfb5ceb29217360db6e01f52da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08331298828125, 0.034759521484375, 0.467041015625, 0.2607421875, 0.369384765625, 0.49755859375, 0.2978515625, 0.296630859375, 0.119873046875, 0.25244140625, 0.357666015625, 0.00125885009765625, 0.478759765625, 0.001739501953125, 0.2734375, 0.081298828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5346be0741969f6fa6753d2a19545f7f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3daba85b0a666479fc9bbcb2fbd7abb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5346be0741969f6fa6753d2a19545f7f
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c781b5935a73981fdf151d79465b9710(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba
    def get_inputs(self):
        return [
            paddle.to_tensor([0.140139639377594], dtype='float32').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8d3982d08c563e6ce77294ee1e7cf62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_741427a311970464e02b105168b617c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09285256266593933, 0.04720509797334671, 0.27809950709342957], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02adab333a60198faa2c9e42ba6ef992(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_18c3d8bea7eaa1e793e24763fb533f22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4886557459831238, 0.3545139729976654, 0.2045636773109436, 0.4043283462524414, 0.45497390627861023, 0.2792987823486328, 0.3562948703765869, 0.0005845262785442173, 0.37880653142929077, 0.3412620425224304, 0.40791618824005127, 0.47825008630752563, 0.41908180713653564, 0.12655209004878998, 0.4811266362667084, 0.2703104019165039, 0.3968386948108673, 0.19475723803043365, 0.419820100069046, 0.3930110037326813], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df799e00f127b4c3ad1a650bc974527e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4783e4b44e267157676985eef807dfd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df799e00f127b4c3ad1a650bc974527e
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22a13fcfc74c8cccef0dab82a210552e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83ade4a9304be412942b6e1280cf2e36(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b723a7a28bfc7fed7de7d6e3ca44d772(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83ade4a9304be412942b6e1280cf2e36
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa374c46f3c6e9551c4d82a69e8a84bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1177978515625, 0.10736083984375, 0.17626953125, 0.047332763671875, 0.46435546875, 0.3310546875, 0.04241943359375, 0.2359619140625, 0.3115234375, 0.39111328125, 0.2196044921875, 0.49658203125, 0.1343994140625, 0.32861328125, 0.360107421875, 0.154052734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bbc699299635ee802f2d664da6a9b1fa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1414794921875, 0.253173828125, 0.151123046875, 0.06689453125, 0.2025146484375, 0.470458984375, 0.327880859375, 0.0174102783203125, 0.11859130859375, 0.261962890625, 0.07928466796875, 0.11572265625, 0.380615234375, 0.252685546875, 0.240234375, 0.1397705078125, 0.126953125, 0.126708984375, 0.1995849609375, 0.171142578125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25ddcaf81ae82ccc95ba700078014547(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7a1db34c47b53457ab991ab2f0365f73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0535888671875, 0.1917724609375, 0.254150390625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_246e50fd7b15a76a14330975998e9ad6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468391090631485, 0.3508916199207306, 0.36763519048690796, 0.3091651201248169, 0.37929531931877136, 0.4816274046897888, 0.10513675212860107, 0.07238780707120895, 0.2638873755931854, 0.2625063359737396, 0.012437134981155396, 0.4584621787071228, 0.4890022277832031, 0.0282514039427042, 0.21094346046447754, 0.26508551836013794], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_191dc03200364a7a8918b252bce8eee8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_903fd88fc7c0339de047dd4e0ba339f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.393310546875, 0.480224609375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4e4af757ee3706dea660ead48b720dcc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48828125, 0.415283203125, 0.020263671875, 0.4541015625, 0.495361328125, 0.34130859375, 0.19140625], dtype='float16').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7613755c7aacd6c9d84b40a0d4afdae0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.233642578125, 0.3505859375, 0.1788330078125, 0.1861572265625, 0.46728515625, 0.468994140625, 0.336181640625, 0.2403564453125, 0.051666259765625, 0.449951171875, 0.460693359375, 0.479248046875, 0.373291015625, 0.332275390625, 0.0079193115234375, 0.01538848876953125, 0.457763671875, 0.043792724609375, 0.47265625, 0.00487518310546875, 0.1412353515625, 0.1654052734375, 0.41357421875, 0.284423828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae63bd5c538e09b4fb3cdd6b4e784dbf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49018847942352295, 0.025257214903831482, 0.1941780000925064, 0.37934407591819763, 0.19437652826309204, 0.4412555992603302, 0.40530335903167725, 0.022242598235607147, 0.3021165132522583, 0.41730591654777527, 0.4131968915462494, 0.024683574214577675, 0.3507847785949707, 0.04569891840219498, 0.06424988061189651, 0.14624761044979095], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_986e6baa848d2c75ea089102e8497d84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_104f4bfe7eacd7010083733b0824b859(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_986e6baa848d2c75ea089102e8497d84
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_807873d0f506ad298b71c19f07581295(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_838634b35c6d33fa5166244548b04197(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1007080078125, 0.2421875, 0.420166015625, 0.2303466796875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64edb4d01d9b5264eacbee672737212d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_04c91930d2f56a79633bc631a149c1e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.363130122423172, 0.3123685419559479, 0.3303300142288208, 0.02128687873482704, 0.4536930322647095, 0.29163452982902527, 0.21618984639644623, 0.09881718456745148, 0.35866427421569824, 0.004350031726062298, 0.2366943061351776, 0.4003368020057678, 0.4704836905002594, 0.26907190680503845, 0.10419546812772751, 0.37342292070388794, 0.2044810950756073, 0.19878405332565308, 0.3988046646118164, 0.16727255284786224, 0.3269178867340088, 0.32195356488227844, 0.48339763283729553, 0.21697895228862762, 0.19777652621269226, 0.4953179657459259, 0.4471351206302643, 0.17073051631450653], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6dd86b3755c3efd4ca3e199f48325657(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03717041015625, 0.049591064453125, 0.475341796875, 0.08807373046875, 0.0252532958984375, 0.283935546875, 0.233154296875, 0.10943603515625, 0.323486328125, 0.493408203125, 0.098388671875, 0.47607421875, 0.0367431640625, 0.438720703125, 0.47216796875, 0.46923828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6934dcc13a4887704906ae1567278e01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4007340967655182, 0.4053456783294678, 0.03762775659561157, 0.24753904342651367, 0.2628130614757538, 0.06615635007619858, 0.40845054388046265, 0.26592645049095154, 0.49703067541122437, 0.1181400865316391, 0.40714797377586365, 0.4359591007232666, 0.16269198060035706, 0.3944888114929199, 0.44129377603530884, 0.05856374651193619, 0.20254851877689362, 0.3460010588169098, 0.21231405436992645, 0.1788606345653534, 0.3675380349159241, 0.05950087308883667, 0.3548378050327301, 0.25916630029678345, 0.0514812134206295, 0.01688418537378311, 0.1441701054573059, 0.2888532876968384], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d393bbd360f2b132da1ab33ebd4f80e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.427490234375, 0.0250091552734375, 0.043182373046875, 0.2939453125, 0.1524658203125, 0.41796875, 0.1768798828125, 0.287841796875, 0.22119140625, 0.456298828125, 0.05609130859375], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08d927ff4613402ffcc261794c20b188(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ea6265b1db07ae1bbb678e497bcafcf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21630859375, 0.07568359375, 0.39794921875, 0.390380859375, 0.33349609375, 0.18701171875, 0.442626953125, 0.20166015625, 0.08233642578125, 0.399658203125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2314f008fb71541bfeffad22d234e8da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09855187684297562, 0.17898355424404144, 0.27262961864471436, 0.37336286902427673, 0.03465258330106735, 0.26318371295928955, 0.07030263543128967, 0.01884189061820507, 0.39575469493865967, 0.46820035576820374, 0.20145553350448608, 0.0656031146645546, 0.35514411330223083, 0.11798461526632309, 0.33134809136390686, 0.000417544215451926, 0.1712382435798645, 0.3918308913707733, 0.43713268637657166, 0.049981098622083664, 0.020619235932826996, 0.30099648237228394, 0.16291478276252747, 0.12238109111785889], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd9667b26a0ca9f1132e0f62abc75973(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33056640625, 0.01091766357421875, 0.332275390625, 0.1866455078125, 0.209716796875, 0.453857421875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_17891957112386b62bd55365629fe27e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c97e623509268f91f66b728b4c7ad30d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_17891957112386b62bd55365629fe27e
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2aa9d2b8adce9c96d6b9a24ac268231d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2880859375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_044b430a3824f3e6286db64e13750537(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_702b811ba27e7472fdcbb23ff2946810(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_044b430a3824f3e6286db64e13750537
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e49a05e50602220d235f0b2709bf5f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1726822555065155, 0.19210737943649292, 0.08505305647850037], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1baf16c734b3234338eb37536ba5cf21(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22216796875, 0.1439208984375, 0.40380859375, 0.02337646484375, 0.0986328125, 0.12200927734375, 0.138671875, 0.0133514404296875, 0.1800537109375, 0.4453125, 0.335693359375, 0.37158203125, 0.396728515625, 0.222412109375, 0.269775390625, 0.322509765625, 0.46435546875, 0.0208587646484375, 0.022216796875, 0.34765625, 0.06341552734375, 0.08905029296875, 0.395263671875, 0.266357421875, 0.4501953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_be518b7e3de955eef05f038300ab76e8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72b94e22cce68cfb62b4d42fcd0603c7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0146636962890625, 0.426513671875, 0.251220703125, 0.428466796875, 0.322998046875, 0.432861328125, 0.2587890625, 0.2418212890625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9149a8fafea67b2350eb7659ef88af59(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2410888671875, 0.1982421875, 0.203125, 0.457275390625, 0.1466064453125, 0.44482421875, 0.17919921875, 0.329833984375, 0.296630859375, 0.006763458251953125, 0.292236328125, 0.33251953125, 0.47509765625, 0.300048828125, 0.436767578125, 0.488525390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_984aecc184cdb5cc0754362942bb8d3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16162109375, 0.269775390625, 0.4853515625, 0.208740234375, 0.188232421875, 0.348388671875, 0.2374267578125, 0.292724609375, 0.10882568359375, 0.35546875, 0.0968017578125, 0.100830078125, 0.060638427734375, 0.092041015625, 0.384521484375, 0.1617431640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_103e4e3c5362f10343b998157992113f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.058876123279333115, 0.08804743736982346, 0.04865235835313797, 0.4662303328514099, 0.2588375210762024, 0.20467627048492432], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cc47c39d73e583c5b5a4d87c858c29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_218a92015d08bec28d6ee570a89983ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2607421875, 0.255126953125, 0.140625, 0.234619140625, 0.0006880760192871094, 0.1544189453125, 0.03460693359375, 0.1221923828125, 0.480712890625, 0.169189453125, 0.3427734375, 0.12188720703125, 0.0101318359375, 0.199951171875, 0.083984375, 0.4873046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a6853aa1afbe5e812fca1b36183eedca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27392578125, 0.0301361083984375, 0.038177490234375, 0.48779296875, 0.4599609375, 0.330078125, 0.361083984375, 0.2071533203125, 0.301025390625, 0.06939697265625, 0.271240234375, 0.42431640625, 0.33837890625, 0.3037109375, 0.12158203125, 0.1170654296875, 0.373779296875, 0.34228515625, 0.488525390625, 0.24658203125, 0.379150390625, 0.13525390625, 0.36865234375, 0.07684326171875, 0.380615234375, 0.1741943359375, 0.26416015625, 0.3349609375, 0.359130859375, 0.2308349609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c24cbb9708084a40d3494a8cbd5afe3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49560546875, 0.153076171875, 0.062255859375, 0.358642578125, 0.12103271484375, 0.156494140625, 0.40478515625, 0.003078460693359375, 0.09161376953125, 0.0136260986328125, 0.2327880859375, 0.47705078125, 0.07366943359375, 0.12841796875, 0.030303955078125, 0.08587646484375, 0.14501953125, 0.233642578125, 0.29248046875, 0.419189453125, 0.10760498046875, 0.28759765625, 0.12103271484375, 0.1636962890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a14e1f98657e5574d8bd9a7d324838b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a2999db644a51a70ea5e154c2fdcd71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75fcbdc811abdfe6a4bd72db18847b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_624ca05450e2608c45cb025d17a6356c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1986083984375, 0.3681640625, 0.044647216796875, 0.2298583984375, 0.1689453125, 0.308837890625, 0.271240234375, 0.40625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5dd060d9c4ac36aedfbb77b34405bb4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22626429796218872, 0.18169951438903809, 0.4627794027328491, 0.43197405338287354, 0.238718181848526, 0.025716280564665794, 0.3558969795703888, 0.3713977038860321, 0.0462348572909832, 0.3726799488067627, 0.24316956102848053, 0.3427755534648895, 0.28466537594795227, 0.42424318194389343, 0.36571794748306274, 0.11533794552087784], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90e55147a27526d6e1fdc837e7a44e65(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039312832057476044, 0.3505461513996124, 0.0823906660079956, 0.23238268494606018, 0.09928932040929794, 0.38565194606781006, 0.3002760410308838, 0.08475074172019958, 0.4176454246044159, 0.18529200553894043, 0.01190099772065878, 0.3183773159980774, 0.37133073806762695, 0.4877539873123169, 0.2313109189271927, 0.4198286235332489], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c9a410452b3fdcbcc1c8069f7ad79c3f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00522613525390625, 0.4697265625, 0.29248046875, 0.11083984375, 0.1431884765625, 0.3974609375, 0.45458984375, 0.192138671875, 0.1317138671875, 0.327880859375, 0.0936279296875, 0.26025390625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98b89d5ced35010bf29d6208fb20a6d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039337158203125, 0.3623046875, 0.456298828125, 0.11553955078125, 0.4248046875, 0.1944580078125, 0.1529541015625, 0.388427734375, 0.187744140625, 0.28369140625, 0.0908203125, 0.20751953125, 0.2105712890625, 0.267578125, 0.39013671875, 0.0006809234619140625, 0.01456451416015625, 0.447998046875, 0.488037109375, 0.44189453125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6196bfdebd70d4203b1e688760782ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.246826171875, 0.15478515625, 0.2091064453125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4971bab03a28e3e0ca8a338f8521d071(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec861b6039ca88c66446d20b49908174(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39372333884239197, 0.39551055431365967, 0.3224802315235138, 0.138197124004364, 0.35864901542663574, 0.11406319588422775, 0.15872642397880554, 0.22514475882053375, 0.11721676588058472, 0.46439144015312195, 0.19778691232204437, 0.02472361922264099, 0.04364723339676857, 0.3214206099510193, 0.3121805191040039, 0.015474884770810604, 0.31554868817329407, 0.08845536410808563], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a84f072bb9f77813936ff11ca412c5a2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.156005859375, 0.499267578125, 0.12939453125, 0.45068359375, 0.29248046875, 0.425537109375, 0.416259765625, 0.1400146484375, 0.379150390625, 0.016510009765625, 0.391845703125, 0.1756591796875, 0.0251922607421875, 0.22900390625, 0.0926513671875, 0.05291748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fc6b52bb4c990849a058b4e459608ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd2cb4290d95910762c4c4024dddd86f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb6c4d314fe075a47b4aa61af2446d22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16552734375, 0.28173828125, 0.49365234375, 0.0158843994140625, 0.0855712890625, 0.487060546875, 0.35107421875, 0.23046875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5809707cc680ede9c89a4a10501c20b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1279296875, 0.0222320556640625, 0.2724609375, 0.0112152099609375, 0.488525390625, 0.45947265625, 0.155029296875, 0.4873046875, 0.1575927734375, 0.338134765625, 0.133544921875, 0.35107421875, 0.480712890625, 0.356689453125, 0.4794921875, 0.435791015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28b388c88284d3356d0a1b4f12649ed4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07170356065034866, 0.056355178356170654, 0.24233244359493256, 0.31496477127075195, 0.4235159158706665, 0.2989380955696106], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a85e5a981375775fb5a7bdf5e0896de3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.346897155046463, 0.10669180005788803, 0.08156057447195053, 0.22730770707130432, 0.34414029121398926, 0.16028523445129395, 0.19985540211200714, 0.37574970722198486, 0.4005981981754303, 0.25683721899986267, 0.23966918885707855, 0.012383860535919666, 0.09272781014442444, 0.46686506271362305, 0.040224336087703705, 0.3484654128551483], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2eaaa449d6b6ace273021321e02888dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30974146723747253, 0.023353416472673416, 0.3111039698123932, 0.0792580097913742, 0.05386682599782944, 0.21881645917892456, 0.2700696885585785, 0.2960132360458374, 0.07470999658107758, 0.10414686053991318, 0.28217294812202454, 0.37683871388435364, 0.14694428443908691, 0.24222449958324432, 0.329196572303772, 0.2888522744178772], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_419a74532010012c46332724e51727ed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38525390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_675ac781163081ac7d1e7785b5b3b457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52e6223eaea5679d50365260f81192ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_675ac781163081ac7d1e7785b5b3b457
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db7f8934439263137331f07bb061f9fc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.446044921875, 0.413818359375, 0.334228515625, 0.47998046875, 0.077392578125, 0.38623046875, 0.111572265625, 0.34912109375, 0.39697265625, 0.239990234375, 0.462158203125, 0.439453125, 0.032806396484375, 0.3994140625, 0.0115509033203125, 0.2230224609375, 0.14404296875, 0.016510009765625, 0.050262451171875, 0.467041015625, 0.4921875, 0.458740234375, 0.363037109375, 0.120361328125, 0.4892578125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_27f075f974b410ea1f3c65884435561b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10896414518356323, 0.1878582090139389], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3ee87c90242fc61da24bcfbac242272(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15468855202198029, 0.05078984797000885, 0.14039358496665955, 0.313007116317749, 0.3371872007846832, 0.25520798563957214, 0.4755997657775879, 0.4608812928199768, 0.2767086923122406, 0.12829966843128204, 0.23878860473632812, 0.10811809450387955, 0.49461156129837036, 0.2790481448173523, 0.3689902126789093, 0.04698967933654785], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fba68e146819173c75568dbea1901cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5076eb879ecd5ba451f9cdf3c634a18c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06442104279994965, 0.07619056850671768, 0.2906387150287628, 0.22380518913269043, 0.2376055121421814, 0.10294672846794128, 0.013311872258782387, 0.2358311414718628, 0.3100046217441559, 0.06572031229734421, 0.030475201085209846, 0.3864244222640991, 0.33658257126808167, 0.07150879502296448], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28765fd0a28522a3585ff7ec70a16bab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08257151395082474, 0.33029988408088684, 0.1569770872592926, 0.332670122385025, 0.19236798584461212, 0.12451979517936707, 0.12980186939239502, 0.35158053040504456, 0.4060297906398773, 0.07061488926410675], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_26bc0f8ea82d6394473d81687b359304(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22866028547286987, 0.2789444625377655, 0.3631126582622528, 0.3001634478569031, 0.14482291042804718, 0.34947535395622253, 0.15169548988342285, 0.11254822462797165], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a59c62acec8b11bb11867e9ee12f8f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2327880859375, 0.04522705078125, 0.036102294921875, 0.153564453125, 0.1590576171875, 0.193359375, 0.471435546875, 0.29443359375, 0.455078125, 0.1402587890625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5ead841357e8ca51f57be566c10861f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4867d2ba1a42406557cea8b81eb4f7da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5ead841357e8ca51f57be566c10861f
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52f51e21e13f697968dd85e97172f23a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d0f14e710044dd0cfd1261319d8042b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1378173828125, 0.0107879638671875, 0.00939178466796875, 0.4462890625, 0.49755859375, 0.28955078125, 0.4560546875, 0.468017578125, 0.10284423828125, 0.480224609375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50fb9a08e44eb74438ab36bffbeb8499(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.352294921875, 0.180419921875, 0.261474609375, 0.18310546875, 0.317626953125, 0.375732421875, 0.27099609375, 0.3173828125, 0.2296142578125, 0.305419921875, 0.36279296875, 0.384521484375, 0.045196533203125, 0.08648681640625, 0.277099609375, 0.474853515625, 0.2442626953125, 0.11724853515625, 0.242919921875, 0.33154296875, 0.40966796875, 0.478759765625, 0.2958984375, 0.017547607421875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06526e97547c276697dddd3a7960dc84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43cfd72bbaa1a6929e1eae5c8e0915b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06526e97547c276697dddd3a7960dc84
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b47258cebfec73c6678570433b2c29f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3310546875, 0.2176513671875, 0.1915283203125, 0.11517333984375, 0.07733154296875, 0.14306640625, 0.228515625, 0.062225341796875, 0.40966796875, 0.165283203125, 0.3466796875, 0.4033203125, 0.1788330078125, 0.1929931640625, 0.11590576171875, 0.337646484375, 0.1962890625, 0.0660400390625, 0.30908203125, 0.401123046875, 0.491455078125, 0.178466796875, 0.32275390625, 0.2861328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75f03c897655542e5790d1ee2e3852f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d370303e1d33c2d8b6f14ff60aa222a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75f03c897655542e5790d1ee2e3852f3
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02d4df60b84ba01c09a52806460c0176(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.303955078125, 0.163818359375, 0.425537109375, 0.1153564453125, 0.2122802734375, 0.285400390625, 0.18603515625, 0.0357666015625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d55ff5a0f6e6d9c0391a409950da5377(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.245849609375, 0.1043701171875, 0.2373046875, 0.42724609375, 0.0972900390625, 0.060150146484375, 0.368896484375, 0.4833984375, 0.47412109375, 0.47119140625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_edf92e99ca84d8c72550511a951b893d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02532958984375, 0.0125274658203125, 0.369873046875, 0.23876953125, 0.486083984375, 0.36279296875, 0.003387451171875, 0.367919921875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81860008c923a4e3db6b1dec282f94ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6e1ef82d48d86257748b602b68ba68b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.091947540640831, 0.14810487627983093, 0.44346022605895996, 0.02711016871035099, 0.14967751502990723, 0.3462389409542084, 0.29386529326438904, 0.3473074734210968, 0.20914866030216217, 0.1671091765165329, 0.23809057474136353, 0.2085852473974228, 0.42946967482566833, 0.36648696660995483, 0.15829548239707947, 0.03289682790637016, 0.2633858919143677, 0.33211079239845276, 0.3095134496688843, 0.4674302935600281, 0.4003198444843292, 0.28993135690689087, 0.14060454070568085, 0.379323810338974, 0.2276090532541275, 0.06827808171510696, 0.37167221307754517], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a0c9f56f0498b8e8ef4b74e8c3542b37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9650e0e03ba132d978beacb0daa67054(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e15a01facc154874b53aef2c984f543(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25048828125, 0.379150390625, 0.330810546875, 0.1163330078125, 0.2027587890625, 0.041595458984375, 0.2401123046875, 0.0401611328125, 0.222900390625, 0.35693359375, 0.48974609375, 0.2183837890625, 0.009674072265625, 0.49365234375, 0.007549285888671875, 0.086181640625, 0.37451171875, 0.00492095947265625, 0.21142578125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73889d0f3e0a33eb45b18a5dc50b5d66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6d021d91f7811013c15e196ea119243(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34fd68fe4d45e4bd0b8c7f77696a119c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10589599609375, 0.3173828125, 0.25048828125, 0.300537109375, 0.335205078125, 0.2225341796875, 0.1483154296875, 0.478759765625, 0.01041412353515625, 0.396240234375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad7f5a9bb428610ec35388ce66d820b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07379150390625, 0.433837890625, 0.44140625, 0.29833984375, 0.420166015625, 0.416015625, 0.11029052734375, 0.006847381591796875, 0.0210723876953125, 0.486572265625, 0.08087158203125, 0.2490234375, 0.0066986083984375, 0.052947998046875, 0.2030029296875, 0.266357421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ffdd7b59ec43a01486dab897c5f17d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2783203125, 0.0672607421875, 0.092529296875, 0.17138671875, 0.492919921875, 0.276123046875, 0.27685546875, 0.145263671875, 0.10540771484375, 0.295654296875, 0.2086181640625, 0.00024771690368652344, 0.284912109375, 0.14697265625, 0.426513671875, 0.046417236328125, 0.04864501953125, 0.371337890625, 0.2044677734375, 0.1676025390625, 0.08782958984375, 0.390869140625, 0.01543426513671875, 0.3544921875, 0.0941162109375, 0.3388671875, 0.07525634765625, 0.269775390625, 0.0821533203125, 0.192138671875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3998d6627cfd676ef9861834ee2c627f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49267578125, 0.306640625, 0.310302734375, 0.407470703125, 0.27197265625, 0.345703125, 0.313720703125, 0.2032470703125, 0.07208251953125, 0.345947265625, 0.1658935546875, 0.00347137451171875, 0.040985107421875, 0.07196044921875, 0.36376953125, 0.403076171875, 0.16796875, 0.314208984375, 0.02783203125, 0.0218505859375, 0.203369140625, 0.26220703125, 0.4384765625, 0.1759033203125, 0.0033664703369140625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae47a834d06adaaaeba65d45347b373e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46dd01a152b5548d94603558c46d911d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae47a834d06adaaaeba65d45347b373e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_79063872800319097ea23e6b6c9d920b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.484619140625, 0.1575927734375, 0.3916015625, 0.463623046875, 0.43115234375, 0.422607421875, 0.446533203125, 0.0457763671875, 0.29736328125, 0.3896484375, 0.07745361328125, 0.461669921875, 0.364990234375, 0.26708984375, 0.09503173828125, 0.180908203125, 0.2939453125, 0.171142578125, 0.36962890625, 0.206787109375, 0.37744140625, 0.3681640625, 0.0145416259765625, 0.1524658203125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a0ba8b9c624afdc42c5d3a7f75cf5da2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26860788464546204, 0.4934837818145752, 0.31672096252441406, 0.4090528190135956, 0.41677072644233704, 0.29252636432647705], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee53303c54a660605505c257944f1f42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a87fce7fddbcdde1b1a186f27701f451(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.354736328125, 0.130859375, 0.10980224609375, 0.096923828125, 0.1221923828125, 0.381591796875, 0.36865234375, 0.1573486328125, 0.08087158203125, 0.0262298583984375, 0.19873046875, 0.480712890625, 0.408203125, 0.397216796875, 0.343994140625, 0.125244140625, 0.317138671875, 0.337158203125, 0.047607421875, 0.1302490234375, 0.259765625, 0.38330078125, 0.270263671875, 0.0288543701171875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aed4ff7e7704de9311c713743a5c11b2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05426025390625, 0.024139404296875, 0.36767578125, 0.22509765625, 0.031005859375, 0.47705078125, 0.2435302734375, 0.408203125, 0.1031494140625, 0.1678466796875, 0.270263671875, 0.35302734375, 0.2578125, 0.45068359375, 0.25439453125, 0.38671875, 0.301513671875, 0.10565185546875, 0.09405517578125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_587029707a1b2b2617b64b03c8ab67c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1750577837228775, 0.06195017695426941, 0.23855742812156677, 0.10248661041259766, 0.4634048640727997, 0.25582775473594666, 0.18644198775291443, 0.40988245606422424, 0.43302980065345764, 0.48521310091018677, 0.13302816450595856, 0.14356482028961182, 0.0485602430999279, 0.01921967603266239, 0.08638188987970352, 0.10892196744680405], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_66fde8df17055027a31657399c6b94e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87041aec12985f589da822a5eeda0a4b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_66fde8df17055027a31657399c6b94e4
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d89155a6d285a1cfd47a625136b107cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28954342007637024, 0.1826300323009491, 0.3997430205345154, 0.03457857668399811, 0.47094786167144775, 0.37426578998565674], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aae0179776e1323257c7e97374014087(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16064453125, 0.448974609375, 0.384765625, 0.290283203125, 0.154541015625, 0.208984375, 0.038421630859375, 0.2469482421875, 0.441650390625, 0.28125, 0.40869140625, 0.48828125, 0.067626953125, 0.335205078125, 0.296142578125, 0.02508544921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81be25b7d9d1ea3f9e7a9967e67a00e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.416259765625, 0.11724853515625, 0.3642578125, 0.2174072265625, 0.483642578125, 0.11785888671875, 0.3896484375, 0.212890625, 0.363525390625, 0.0233306884765625, 0.0001766681671142578, 0.082275390625, 0.179931640625, 0.07293701171875, 0.489013671875, 0.4580078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4113e7fbb00d578dc0836a4b07dd2ca0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2958d89fe34de2fdd330504b1c7ed10(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0e9d0082ab42b4c78dd1701157dbde30(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4236397df62d77091b6386d02a171e83(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0e9d0082ab42b4c78dd1701157dbde30
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24be68ada55ec8ca13a86f1d105e41c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28662109375, 0.31396484375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e2255b1b3452ac37d3693f4a81c6d71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4892961382865906, 0.35506895184516907, 0.006733131129294634, 0.42819830775260925, 0.3906494379043579, 0.05698934197425842, 0.12634049355983734, 0.016185631975531578, 0.15609878301620483, 0.3786836266517639, 0.19320808351039886, 0.09331826120615005, 0.09933343529701233, 0.3334301710128784, 0.062133919447660446, 0.19849997758865356], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_000989294cc6292eeb88200cb887ab38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa07935ee51c9691258c16905ef29166(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_000989294cc6292eeb88200cb887ab38
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7f70294fa5fff56b108df0bc56a7a094(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327880859375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d8ecd24614754a894302b6cc2d7f78a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a36644d7d9f0d2ea6f778b96b81806(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43ce333e1e389a001f677225484ad744(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3773758113384247, 0.09757360070943832, 0.14370138943195343, 0.4526299834251404, 0.009378336369991302, 0.17499473690986633, 0.3361395299434662, 0.015278471633791924, 0.3163664937019348, 0.3281579315662384, 0.49192941188812256, 0.20194554328918457, 0.1467057168483734, 0.05212119221687317, 0.240960955619812, 0.05849432200193405], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_743a88ecabf91a89b54ae16929bcdf27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1142578125, 0.460693359375, 0.3115234375, 0.262939453125, 0.054840087890625, 0.2401123046875, 0.412353515625, 0.425048828125, 0.1783447265625, 0.33740234375, 0.336181640625, 0.030731201171875, 0.00859832763671875, 0.1275634765625, 0.07598876953125, 0.204833984375, 0.4873046875, 0.1453857421875, 0.04888916015625, 0.203125, 0.361083984375, 0.267822265625, 0.479736328125, 0.08721923828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ab444417b16d447a45fab5f1c19d092(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.345703125, 0.12213134765625, 0.276123046875, 0.023101806640625, 0.41015625, 0.2391357421875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e253029bff9cc107d647ed2ec92fcacf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32763671875, 0.37353515625, 0.434814453125, 0.4912109375, 0.37744140625, 0.0894775390625, 0.0020046234130859375, 0.0034027099609375, 0.42041015625, 0.269287109375, 0.397216796875, 0.207763671875, 0.10321044921875, 0.13916015625, 0.2247314453125, 0.1705322265625, 0.0423583984375, 0.263427734375], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0531980b7f2a44fd37edc3a6f3232eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e78b0b4a6a4eca7fe6be705dda535b36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4012564420700073, 0.2678757607936859, 0.0760287269949913, 0.14945264160633087, 0.32274264097213745, 0.1073988750576973, 0.1691553145647049, 0.12598125636577606, 0.40382784605026245, 0.2999268174171448, 0.1352199763059616, 0.21069233119487762, 0.3932651877403259, 0.16661135852336884, 0.2991139888763428, 0.36867454648017883, 0.0711916908621788, 0.4063724875450134, 0.36820411682128906, 0.41633254289627075, 0.2814807593822479, 0.4234825372695923, 0.024675484746694565, 0.19758747518062592], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_11ed43669b2877f5881331f756b03f4e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_345999a5def47a500d524aa0dc80301c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_11ed43669b2877f5881331f756b03f4e
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b26155d88be5f124e076756ce7f379a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04855239391326904, 0.30772337317466736, 0.25025486946105957, 0.3850443363189697, 0.444939523935318, 0.029127715155482292, 0.21653728187084198, 0.31607499718666077], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d45d3ff32da694a7536669747888d7e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.272216796875, 0.330322265625, 0.488525390625, 0.13818359375, 0.26611328125, 0.10369873046875, 0.16162109375, 0.2049560546875, 0.411376953125, 0.2459716796875, 0.07220458984375, 0.161865234375, 0.2220458984375, 0.032135009765625, 0.376220703125, 0.1824951171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7bbaf84bb9b6923b958c6d8a16b94fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4619140625, 0.1337890625, 0.163818359375, 0.07427978515625, 0.35400390625, 0.186767578125, 0.43505859375, 0.1978759765625, 0.39111328125, 0.043792724609375, 0.397216796875, 0.0799560546875, 0.09075927734375, 0.174072265625, 0.2919921875, 0.45166015625, 0.07989501953125, 0.042816162109375, 0.46875, 0.1663818359375, 0.477783203125, 0.09417724609375, 0.11529541015625, 0.095703125, 0.2822265625, 0.352294921875, 0.463134765625, 0.195556640625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_020d7b247e0628fd2837c66e664f96be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54a34a9cb23b9de2e8ee998d94f104b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_020d7b247e0628fd2837c66e664f96be
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a25d4d1f41757cecc73029762c87cf5b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.008890597149729729, 0.2701863944530487, 0.399176687002182, 0.4784175753593445, 0.38879260420799255, 0.19587808847427368, 0.30498120188713074, 0.021336020901799202, 0.2215113490819931, 0.15722666680812836, 0.4140157401561737, 0.28655368089675903, 0.04142260178923607, 0.29402559995651245, 0.273064523935318, 0.35552218556404114, 0.2863222658634186, 0.13478511571884155, 0.18910935521125793, 0.18139107525348663, 0.05268580839037895, 0.02302098460495472, 0.06123300641775131, 0.45400241017341614, 0.033429279923439026, 0.07814735919237137, 0.18662653863430023, 0.19428600370883942], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3397131bfef993c59e49896230b8bb36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.292724609375, 0.076416015625, 0.1251220703125, 0.2283935546875, 0.374755859375, 0.453369140625, 0.4130859375, 0.041015625, 0.1807861328125, 0.03131103515625, 0.48486328125, 0.3876953125, 0.213623046875, 0.250244140625, 0.454345703125, 0.0035457611083984375, 0.381103515625, 0.22265625, 0.323974609375, 0.4951171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78384d8b05cea2564efa766830ccb387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.164306640625, 0.20068359375, 0.042724609375, 0.48486328125, 0.370849609375, 0.359619140625, 0.05560302734375, 0.2333984375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40845a12f69a4015053ee4d634276944(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_631ab03f309f35a398e91877813f735a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40845a12f69a4015053ee4d634276944
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8b20a54f128a94b59f5f2303e683ca8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee1a30993ad69fb578499feebf8d52dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.046619612723588943, 0.36074307560920715, 0.1368611752986908, 0.08959367126226425, 0.3649575710296631, 0.020658118650317192, 0.4333539605140686, 0.4733664095401764, 0.3324120044708252, 0.4939935505390167, 0.17411433160305023, 0.33039572834968567, 0.08109614998102188, 0.24609221518039703, 0.4205683171749115, 0.2662409245967865], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81ed496657b89839d6b6f7aba2029eee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47098708152770996, 0.011034931056201458, 0.3466640114784241, 0.3167663514614105, 0.32977980375289917, 0.15227721631526947, 0.24959419667720795, 0.10165771096944809, 0.20038281381130219, 0.20017109811306, 0.342969685792923, 0.4273511469364166, 0.43680620193481445, 0.13506725430488586, 0.1517568826675415, 0.41486304998397827], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a856fc63a3a8ba8e4ae320e6d2561ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3388671875, 0.048980712890625, 0.1605224609375, 0.2052001953125, 0.437255859375, 0.0312042236328125, 0.37646484375, 0.269287109375, 0.0125274658203125, 0.3505859375, 0.396240234375, 0.200439453125, 0.3203125, 0.388427734375, 0.007808685302734375, 0.296142578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_706dad09c4df59b9ae8c83771b59662a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4169921875, 0.2139892578125, 0.03564453125, 0.2135009765625, 0.06329345703125, 0.05084228515625, 0.1053466796875, 0.45947265625, 0.06268310546875, 0.3173828125, 0.4287109375, 0.22216796875, 0.07562255859375, 0.019805908203125, 0.497802734375, 0.21484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_28328fab5925173473a90c5618c8b7bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5cd2f37d1246fed00ad8a1139cabd7e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_28328fab5925173473a90c5618c8b7bf
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3d91ae0fd146d7cd0c6cf0c4c20dc46(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11310172826051712, 0.45892533659935, 0.17238950729370117, 0.3749266564846039, 0.08221401274204254, 0.4081345498561859, 0.19659733772277832, 0.30083999037742615], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae71f8866702fe8cf836b1226efadd73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13147161900997162, 0.29045942425727844, 0.3858269453048706, 0.13589529693126678, 0.3898252248764038, 0.4524357318878174, 0.03560706973075867, 0.10897208750247955, 0.3621788024902344, 0.22689078748226166, 0.18564781546592712, 0.4787554144859314, 0.021624630317091942, 0.3423904478549957, 0.07802366465330124, 0.2355167418718338, 0.09350384026765823, 0.05510491505265236, 0.33735743165016174, 0.44733235239982605, 0.35333251953125, 0.47843796014785767, 0.15519170463085175, 0.3355149030685425], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_82a02ef20679b6e351879ebde270eb6d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03997802734375, 0.0880126953125, 0.457763671875, 0.2685546875, 0.08941650390625, 0.02447509765625, 0.444580078125, 0.290771484375, 0.233642578125, 0.2301025390625, 0.353759765625, 0.363037109375, 0.46923828125, 0.07659912109375, 0.0191650390625, 0.46142578125, 0.0692138671875, 0.20703125, 0.487060546875, 0.451904296875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83a831c45cd4f1a3399a7ce8440e8c77(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28a62869b8b3c0e9629ad961972e92d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.371337890625, 0.2197265625, 0.350830078125, 0.1234130859375, 0.385009765625, 0.455810546875, 0.269775390625, 0.39599609375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_350d688e4c2db5dcaa5e030b66909457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55303686d08886bb356b7d14832db8fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_350d688e4c2db5dcaa5e030b66909457
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7c799526ffe398cb0148ebb84076066f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32e4f5b70a67c7ddfdbe0746eea0ba22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7c799526ffe398cb0148ebb84076066f
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e09ec87e17da4a30184f1acb99641eba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08031198382377625], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39d034ee1c9102b923e43dd7e39c2983(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e472ec793c5dd2f902855bcaa8c2f05b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.146240234375, 0.18701171875, 0.462646484375, 0.141357421875, 0.314697265625, 0.1007080078125, 0.34326171875, 0.426025390625, 0.4169921875, 0.337646484375, 0.25634765625, 0.49853515625, 0.00543212890625, 0.280029296875, 0.342529296875, 0.07666015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8fbb3f564804e969da86a4841a1300b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e7e1dc6abb86236780ecfb41f906037(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8fbb3f564804e969da86a4841a1300b9
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c460e4d5290fe082f236dc9a780e3a3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b32c2635666ff416001e253517efccc6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11859130859375, 0.127197265625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_94712ea9541aa8936495e80f602ef7ce(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b80c8c51963f704e03b61ad985cf000f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_94712ea9541aa8936495e80f602ef7ce
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4342ab76a0f9232311a9459f75701a38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18940988183021545, 0.3345530331134796], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b3a502b92e4befac19c16f260197d00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37451171875, 0.4296875, 0.41015625, 0.3154296875, 0.2412109375, 0.0738525390625, 0.10614013671875, 0.221435546875, 0.11798095703125, 0.3369140625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f41a921ba3594d28007470791cfaca56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19957417249679565, 0.3338392376899719, 0.12323947250843048, 0.08974853157997131, 0.07236465811729431, 0.39009004831314087, 0.3417682945728302, 0.22965997457504272], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb4088d45c1ad189a6cdac0dfb131da5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.295166015625, 0.4384765625, 0.251953125, 0.4267578125, 0.0304718017578125, 0.1326904296875, 0.426513671875, 0.348388671875, 0.393798828125, 0.1326904296875, 0.420166015625, 0.148193359375, 0.0175323486328125, 0.25927734375, 0.1658935546875, 0.42529296875, 0.1802978515625, 0.39404296875, 0.357177734375, 0.44580078125, 0.1768798828125, 0.4638671875, 0.1490478515625, 0.155029296875, 0.1422119140625, 0.2147216796875, 0.140869140625, 0.07379150390625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c4a9a5fde2d51c170295b49adb0ed15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02e2d3ebcbe7b81753af0354e250cb1c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31528669595718384, 0.40821653604507446, 0.03869497403502464], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_acbb5fdf4bcc24afabf759afbbe411e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13280437886714935, 0.44952887296676636, 0.22603054344654083, 0.08228059113025665, 0.31241628527641296, 0.4709804654121399, 0.488486647605896, 0.07182814180850983, 0.02070740982890129, 0.08594901859760284, 0.4001072347164154, 0.04747257009148598, 0.06080010160803795, 0.11170574277639389, 0.4401686489582062, 0.46119239926338196], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38e78dcb6e7ed11f0562df601b78ef98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34764572978019714, 0.19224317371845245, 0.4386850595474243, 0.4262404441833496, 0.21516290307044983, 0.27567335963249207], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2768a665403d090df11de74e3e503cb4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.394775390625, 0.00971221923828125, 0.406494140625, 0.150146484375, 0.389892578125, 0.280029296875, 0.0743408203125, 0.111328125, 0.425048828125, 0.183349609375, 0.1356201171875, 0.287841796875, 0.39453125, 0.251708984375, 0.186767578125, 0.12408447265625, 0.1165771484375, 0.340576171875, 0.03216552734375, 0.095458984375, 0.497802734375, 0.2054443359375, 0.05426025390625, 0.07379150390625, 0.474609375, 0.1678466796875, 0.02801513671875, 0.375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1afff34b4d293a55decf8b869daa40c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68052952a611e99ca683b7fc1fbe587(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e43351706ff533d341c8e970dc21ad2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_866f37723b2b9391d3b9bb996994d395(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e43351706ff533d341c8e970dc21ad2
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_954460fa04a5b95b655397933eee61f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11357088387012482, 0.009080272167921066, 0.48947975039482117, 0.08285826444625854, 0.06639191508293152, 0.31635841727256775, 0.09397243708372116, 0.3415262699127197, 0.09794243425130844, 0.37008702754974365, 0.18777553737163544, 0.34967848658561707, 0.3457534611225128, 0.311435729265213, 0.1559544801712036, 0.23297037184238434, 0.2703244090080261, 0.4524071514606476, 0.001941309543326497, 0.19773055613040924, 0.39949384331703186, 0.014016528613865376, 0.1170378103852272, 0.46226149797439575, 0.1914275884628296, 0.3369865417480469, 0.19157174229621887], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e744bb23825681d908e64970b603532(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1426457b2f4a8aece2fe2d98d2df8816(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e744bb23825681d908e64970b603532
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38f679e0f8c722fe16804bf1a9baab22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.159423828125, 0.431640625, 0.23046875, 0.47265625, 0.10406494140625, 0.387939453125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51a36582f20d2c824477283af6cb8adc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_addeabd1e4d0c22ca60b9c471db87265(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51a36582f20d2c824477283af6cb8adc
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7784521636d083617a52a51a363c7c8b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4721583425998688], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_74991643e0417d8b4c82d236b953b6f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24656784534454346, 0.045484140515327454, 0.08666922152042389, 0.004208211787045002, 0.4351097643375397, 0.14060638844966888, 0.13977183401584625, 0.037034835666418076, 0.41126662492752075, 0.3486928641796112, 0.3024536669254303, 0.061112694442272186, 0.22275854647159576, 0.12471555918455124, 0.368723064661026, 0.4364420771598816], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5acd7d79b6086f349c9dffdd55837d33(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03817953169345856, 0.4206847548484802, 0.1592172086238861, 0.08232222497463226, 0.26850080490112305, 0.23410725593566895, 0.11579608917236328, 0.4714295268058777, 0.4984944760799408, 0.4830073118209839, 0.43696147203445435, 0.251321405172348, 0.19748269021511078, 0.1905142366886139, 0.01673699915409088, 0.024221181869506836, 0.22672130167484283, 0.33522018790245056, 0.29292985796928406], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c00f960cafbc1b9fdb9e52451723ca2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.260986328125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc1d1197dc2edd395c1cff8464c63a69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16187536716461182, 0.02900010719895363, 0.16715523600578308, 0.026465067639946938, 0.19572071731090546, 0.13332675397396088, 0.23686236143112183, 0.25772491097450256, 0.2000093311071396, 0.4759334325790405, 0.036151591688394547, 0.09300220012664795, 0.1575464904308319, 0.06970380246639252, 0.29703912138938904, 0.28132086992263794], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e967c15549961c2a50748d3c449b662(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36956775188446045, 0.4939093589782715, 0.4668015241622925, 0.27071142196655273, 0.17651855945587158, 0.17330288887023926, 0.32717540860176086, 0.16497644782066345, 0.48370787501335144, 0.3925163149833679, 0.04250407591462135, 0.33322057127952576, 0.28948974609375, 0.33110612630844116, 0.48736169934272766, 0.280597984790802], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8b1cc6392b8f91e9be2684c8dc626087(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13671875, 0.348876953125, 0.32568359375, 0.47021484375, 0.177978515625, 0.358154296875, 0.36474609375, 0.4267578125, 0.263671875, 0.3544921875, 0.149658203125, 0.37548828125, 0.421142578125, 0.038818359375, 0.403076171875, 0.3310546875, 0.492919921875, 0.4130859375, 0.412353515625, 0.287109375, 0.01464080810546875, 0.288818359375, 0.342041015625, 0.456787109375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a3efd1eba188622703132514b11f137(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.300537109375, 0.39013671875, 0.4052734375, 0.152587890625, 0.43310546875, 0.486328125, 0.08624267578125, 0.445556640625, 0.08319091796875, 0.194580078125, 0.410400390625, 0.264404296875, 0.376220703125, 0.0100250244140625, 0.01361846923828125, 0.4892578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f3aa70374690bb5ce1e1b88b21059f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3251953125, 0.43310546875, 0.46240234375, 0.3369140625, 0.00177001953125, 0.2332763671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4bae6b6b23d68d792585e63fa42f16cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f146b5c72bee851ca1f5c678352c3aad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0216217041015625, 0.0970458984375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c117ba52c8ad52964e879bb4028b0332(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36648204922676086, 0.47146907448768616, 0.36818426847457886, 0.10211846977472305, 0.3418410122394562, 0.039228688925504684, 0.29997509717941284, 0.33282139897346497, 0.30157503485679626, 0.49614670872688293, 0.12683989107608795, 0.26497238874435425, 0.4911029040813446, 0.16057336330413818, 0.014660751447081566, 0.4336623549461365, 0.44949790835380554, 0.28251832723617554, 0.33314070105552673, 0.45915377140045166, 0.21087698638439178, 0.4353991746902466, 0.4063725173473358, 0.045833609998226166], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faf960d28c2b6f7ac40b0fdde1fe6d40(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_084687eb7bbdc8b2c7bf74410fff3a15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47988951206207275, 0.3481069803237915, 0.4787140488624573, 0.2749752998352051, 0.42570462822914124, 0.06513956189155579, 0.3138599693775177, 0.1424020677804947, 0.41751453280448914, 0.2970864772796631, 0.40286386013031006, 0.02811705507338047, 0.44205227494239807, 0.006388514302670956], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_be38ef510bb333055620a3a6df99f9ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13705779612064362], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7d58e576012041a41642f2fa5fee1c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4720309ac3af363853f2752a77971ab9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12030029296875, 0.42919921875, 0.357421875, 0.467529296875, 0.456298828125, 0.34326171875, 0.2210693359375, 0.1356201171875, 0.36572265625, 0.334716796875, 0.043121337890625, 0.155029296875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b945941bfeee6dc3d34737c2bf3d4f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1083984375, 0.36376953125, 0.3359375, 0.20458984375, 0.210693359375, 0.274658203125, 0.305908203125, 0.232666015625, 0.499267578125, 0.1954345703125, 0.416259765625, 0.3203125, 0.1060791015625, 0.1864013671875, 0.2288818359375, 0.147705078125, 0.1876220703125, 0.048980712890625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e71f8875b74e10b78d5daeb006d325ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07585839927196503, 0.406572163105011, 0.02044341154396534, 0.34728410840034485, 0.03146800398826599, 0.4422660768032074, 0.43010929226875305, 0.0489620715379715, 0.3875536322593689, 0.37052714824676514, 0.13454470038414001, 0.04929817467927933, 0.4819476306438446, 0.10174358636140823, 0.25688135623931885, 0.44785037636756897], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a7f449863ebf05b0288ede43944d502(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a66994c8cfb055e8cafee820dfe48e66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a7f449863ebf05b0288ede43944d502
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19ffa6060b3fe43bffc1bccecbdbdc01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5cedcb2a1aa932921a4b3f83bb900ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4508272111415863, 0.4954409897327423, 0.09740038961172104, 0.2103249430656433, 0.24163928627967834, 0.4899272918701172, 0.4956696927547455, 0.3917706310749054, 0.25528162717819214, 0.147888645529747, 0.26580026745796204, 0.42671993374824524, 0.009636222384870052, 0.17078040540218353, 0.18841984868049622, 0.4519394338130951, 0.25752291083335876, 0.06335783749818802, 0.175167977809906, 0.1439533680677414, 0.15772028267383575, 0.18474596738815308, 0.187144935131073, 0.17622187733650208, 0.035767219960689545], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09bd694118bfa8b6d1a3a22249d6906a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02227783203125, 0.07171630859375, 0.1800537109375, 0.4638671875, 0.26708984375, 0.478515625, 0.3193359375, 0.222900390625, 0.449462890625, 0.38720703125, 0.180908203125, 0.119384765625, 0.1444091796875, 0.306396484375, 0.4228515625, 0.12322998046875, 0.11492919921875, 0.18798828125, 0.128173828125, 0.368408203125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_afb451e8d7989324fe3639d66c4931d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09905476868152618, 0.08927779644727707, 0.30016082525253296, 0.48613113164901733, 0.4549948275089264, 0.10469949245452881, 0.19992223381996155, 0.3643496632575989, 0.21042080223560333, 0.18489357829093933, 0.40963584184646606, 0.41245830059051514, 0.3341999053955078, 0.22477319836616516, 0.4272212088108063, 0.36768415570259094], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_658d5fc6dd2ee2b851c9792194803914(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07ca3489ca1b2728667c846695c1d1a5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_658d5fc6dd2ee2b851c9792194803914
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da258cdd39f9da7785c01115aba677ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2315673828125, 0.1634521484375, 0.076416015625, 0.382568359375, 0.428955078125, 0.278564453125, 0.336669921875, 0.3037109375, 0.234619140625, 0.04998779296875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c346522997b0c61a4ba33c5238d7a73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38232421875, 0.1163330078125, 0.4375, 0.15478515625, 0.2169189453125, 0.351806640625, 0.10247802734375, 0.1998291015625, 0.234375, 0.25732421875, 0.25341796875, 0.411376953125, 0.2454833984375, 0.177001953125, 0.25439453125, 0.08355712890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14624256417a43228ec531fb6c33ae03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5f6c501af1f629be34dfbfa20d09202(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14624256417a43228ec531fb6c33ae03
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c758142b688e418a38d0ed83fa2c0359(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2139434814453125, 0.09025169909000397, 0.24105601012706757, 0.03881563991308212, 0.22487123310565948, 0.31466400623321533, 0.3569912016391754, 0.14438661932945251, 0.33678749203681946, 0.006314309313893318, 0.04825013875961304, 0.08330419659614563, 0.43341225385665894, 0.29005739092826843, 0.4288305938243866, 0.37647098302841187, 0.35989683866500854, 0.30881455540657043, 0.20083434879779816, 0.4532231390476227, 0.37024593353271484, 0.3089168071746826, 0.008482069708406925, 0.2732997238636017], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a0077d5c32b4e36850eac0d383185e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1dce7872f4c994ef385ef00d8536881f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a0077d5c32b4e36850eac0d383185e58
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_17843938c40132ece73c401244faf64c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00925445556640625, 0.09637451171875, 0.394287109375, 0.393310546875, 0.429931640625, 0.2379150390625, 0.336669921875, 0.08355712890625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_711d60a93bf7ab4e239841e7554498e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3681640625, 0.301025390625, 0.28515625, 0.210693359375, 0.28759765625, 0.40576171875, 0.37548828125, 0.47998046875, 0.0718994140625, 0.421875, 0.431640625, 0.04278564453125, 0.221923828125, 0.02972412109375, 0.1302490234375, 0.389892578125, 0.209716796875, 0.06475830078125, 0.36572265625, 0.240478515625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c68927d4554a70fa564d01057689302(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11541748046875, 0.40625, 0.2088623046875, 0.3662109375, 0.1607666015625, 0.36865234375, 0.3203125, 0.03363037109375, 0.1363525390625, 0.386962890625, 0.36083984375, 0.2880859375, 0.1685791015625, 0.362060546875, 0.357421875, 0.1746826171875, 0.00534820556640625, 0.20947265625, 0.373046875, 0.00750732421875, 0.12744140625, 0.0943603515625, 0.417724609375, 0.396728515625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4aa1d77a759a1933b9763d656250d0e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3702150583267212, 0.42213618755340576, 0.37100860476493835, 0.16371291875839233, 0.29672345519065857, 0.17424163222312927, 0.2585812509059906, 0.4468275308609009, 0.1501677930355072, 0.022354476153850555, 0.33103761076927185, 0.23631006479263306, 0.035423193126916885, 0.3635772168636322, 0.26224562525749207, 0.4064749777317047], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_549a0e9d6f3b3949e8e6c820bec9073b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1719970703125, 0.1641845703125, 0.093017578125, 0.036163330078125, 0.389404296875, 0.4052734375, 0.37109375, 0.279541015625, 0.194091796875, 0.285400390625, 0.1336669921875, 0.026763916015625, 0.102783203125, 0.2880859375, 0.373779296875, 0.447998046875, 0.115966796875, 0.264892578125, 0.12493896484375, 0.03216552734375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ddcf46207123fdd8da77e7b04588ba9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2296142578125, 0.311767578125, 0.337158203125, 0.1971435546875, 0.377197265625, 0.4267578125, 0.168212890625, 0.06787109375, 0.278076171875, 0.34716796875, 0.259521484375, 0.4248046875, 0.2381591796875, 0.187255859375, 0.13427734375, 0.1357421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dcff5e89684b344afe8c0f0736b88e60(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28829479217529297, 0.4718381464481354, 0.3745342791080475, 0.4069829285144806, 0.21420034766197205, 0.33471962809562683], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de1e42ef2c4bf147bf0168ec5ad8670d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2326047420501709, 0.3073127865791321, 0.1567959487438202, 0.48032981157302856, 0.07893956452608109, 0.49268636107444763, 0.07218028604984283, 0.08204304426908493, 0.21736478805541992, 0.014151533134281635, 0.20168007910251617, 0.01982266455888748, 0.4629850685596466, 0.2984108328819275, 0.3930363953113556, 0.46602344512939453, 0.07081801444292068, 0.31681323051452637, 0.0245878417044878, 0.3383208215236664, 0.4705226421356201, 0.11535211652517319, 0.4378550946712494, 0.2962978780269623, 0.19923219084739685, 0.21585458517074585, 0.26688486337661743, 0.23830629885196686, 0.06384061276912689, 0.4954627752304077], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4915fdb1f8eef3138aefc4f531585b1a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4150390625, 0.2164306640625, 0.118896484375, 0.09210205078125, 0.455810546875, 0.31494140625, 0.2401123046875, 0.358154296875, 0.1949462890625, 0.229736328125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55e388459031975127d4bad51abeb989(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37742117047309875, 0.2989486753940582, 0.4611561894416809, 0.20694242417812347, 0.1579381227493286, 0.3164350390434265, 0.43614766001701355, 0.27811071276664734, 0.23413002490997314, 0.4515962302684784, 0.012487872503697872, 0.39293497800827026, 0.048062268644571304, 0.45195069909095764, 0.48309484124183655, 0.3814442455768585, 0.35643815994262695, 0.054413843899965286, 0.3169906437397003, 0.11381059885025024], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db039da0bbb390665fe8128e78be4dc1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08776268362998962, 0.0449388287961483, 0.11602173745632172], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f04a19d9475d0ae51b8ae8787a38504a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fab7087e75b97586eb69d0aebc2b8935(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23388671875, 0.022918701171875, 0.380859375, 0.37060546875, 0.30078125, 0.267578125, 0.1077880859375, 0.0297393798828125, 0.025299072265625, 0.30419921875, 0.291748046875, 0.32763671875, 0.409423828125, 0.038482666015625, 0.1632080078125, 0.164306640625, 0.137451171875, 0.2352294921875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d36f23fc6ace38fcf685d8168c5d3343(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41015625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_558f43e5fd1bc28a6737687d66dc1e62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0870433896780014, 0.4934428334236145, 0.4021000266075134, 0.4601212441921234, 0.04839523881673813, 0.3288993239402771, 0.21583224833011627, 0.1935098022222519, 0.049084439873695374, 0.4102949798107147, 0.2278461903333664, 0.3861950635910034, 0.3144370913505554, 0.08601986616849899, 0.3719145655632019, 0.0027410779148340225, 0.0631076917052269, 0.1582830548286438, 0.20906955003738403, 0.05311333388090134, 0.051185380667448044, 0.38212791085243225, 0.05099580064415932, 0.20566406846046448], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e7602e062bca274f91aeee2295c61c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1712392270565033, 0.3112501800060272, 0.35512277483940125, 0.18770980834960938, 0.07823210954666138, 0.33138585090637207, 0.467612087726593, 0.09104224294424057, 0.28367772698402405, 0.2524486780166626, 0.27582234144210815, 0.15422877669334412, 0.3619326949119568, 0.15569251775741577, 0.42182600498199463, 0.024217713624238968, 0.0070198336616158485, 0.3864477276802063], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9446d421ebcff9eb2c81f197775fa84(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46795305609703064, 0.011317248456180096, 0.23156902194023132, 0.15241119265556335, 0.43749892711639404, 0.2955414652824402, 0.4700022339820862, 0.19776995480060577, 0.2747645676136017, 0.2739701271057129, 0.4967723786830902, 0.03458918258547783, 0.2574545741081238, 0.011361716315150261, 0.2910802662372589, 0.12309473007917404, 0.30494847893714905, 0.15801119804382324, 0.3970167338848114, 0.4831017851829529, 0.21984536945819855, 0.019955545663833618, 0.39003145694732666, 0.3694833219051361], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7cb1f8ec16af98a599235f222bf50709(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03155517578125, 0.050323486328125, 0.10577392578125, 0.478271484375, 0.038421630859375, 0.06787109375, 0.2227783203125, 0.386474609375, 0.212158203125, 0.438232421875, 0.2230224609375, 0.184326171875, 0.260986328125, 0.282958984375, 0.06951904296875], dtype='float16').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98705b5ffcc84bed2e349ec1f301eed0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.376220703125, 0.01125335693359375, 0.1290283203125, 0.10107421875, 0.131103515625, 0.272705078125, 0.2255859375, 0.186767578125, 0.4765625, 0.385986328125, 0.43505859375, 0.482666015625, 0.0496826171875, 0.014251708984375, 0.453125, 0.08154296875, 0.3994140625, 0.2479248046875, 0.185546875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0689e17bc0e29ee272fbba00102ed3e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016665510833263397, 0.3774878680706024, 0.45941296219825745, 0.36997345089912415, 0.4689483642578125, 0.19248650968074799, 0.38020333647727966, 0.43020132184028625, 0.11409205198287964, 0.4911719560623169, 0.4499187171459198, 0.3434053957462311, 0.12978368997573853, 0.15630283951759338, 0.007014165166765451, 0.440627783536911], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dfcc17555845ca325c2b327086f5675d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.126953125, 0.14892578125, 0.1123046875, 0.32080078125, 0.277099609375, 0.1776123046875, 0.34619140625, 0.038604736328125, 0.092529296875, 0.3251953125, 0.06744384765625, 0.036346435546875, 0.2490234375, 0.30029296875, 0.06829833984375, 0.37890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69f24bcff300e051624f7e93999e3905(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8d2f9237c82cb1b4938424dfb01e456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69f24bcff300e051624f7e93999e3905
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58db493654bbf2ccb3b929e8e346b194(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.427734375, 0.05908203125, 0.25927734375, 0.337158203125, 0.25439453125, 0.1722412109375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_937dadbbdccdba30067b84c16aaa5c28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3630797863006592, 0.30346399545669556, 0.0965011790394783, 0.18260104954242706, 0.08745942264795303, 0.06993754953145981, 0.031012283638119698, 0.3174581527709961, 0.46059438586235046, 0.41361403465270996], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a5cd96de91231c8b2d769d0344b10ba1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3369140625, 0.29443359375, 0.38427734375, 0.062408447265625, 0.3876953125, 0.476318359375, 0.1143798828125, 0.421875, 0.411376953125, 0.217529296875, 0.07940673828125, 0.0755615234375, 0.19189453125, 0.39404296875, 0.34130859375, 0.3115234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3575826d50cfec17a29ba15d02dff4b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21761657297611237, 0.4710249602794647, 0.08776799589395523, 0.28327855467796326, 0.2766954302787781, 0.46420761942863464, 0.4429542124271393, 0.2054373025894165, 0.20844662189483643, 0.13638648390769958, 0.4446812868118286, 0.1677548885345459, 0.08862481266260147, 0.4053942561149597, 0.02937992848455906, 0.4047880470752716, 0.12783420085906982, 0.25896376371383667, 0.23754313588142395, 0.32882577180862427, 0.02225431054830551, 0.10626959800720215, 0.039588864892721176, 0.28402599692344666], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9411124562f91c321ef4cad55b3e5f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09365340322256088, 0.020882897078990936, 0.30299875140190125, 0.3581470251083374, 0.4941698908805847, 0.40037697553634644, 0.42361053824424744, 0.33449509739875793, 0.21039554476737976, 0.24242600798606873, 0.40729859471321106, 0.2803369462490082, 0.4127223789691925, 0.12498593330383301, 0.1655048280954361, 0.2171228528022766], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef4bab3e8b47189a9be38b7083b35900(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3833984136581421, 0.38703933358192444, 0.3174671530723572, 0.02402455359697342], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c12668d6f18a2e8597330e88178476e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14087575674057007, 0.09752211719751358, 0.26719167828559875, 0.34760162234306335, 0.37170907855033875, 0.048627182841300964, 0.17319466173648834, 0.10602503269910812, 0.299142062664032, 0.013749307952821255, 0.36338311433792114, 0.12039603292942047, 0.02245231717824936, 0.009156684391200542, 0.09895998984575272, 0.09722639620304108], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_51b253f22e24645b18d160e8b3a60ea3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25048828125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e24840f09a591e4246d7ece94291ea55(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1426253467798233, 0.4435489773750305, 0.05574354529380798, 0.10082845389842987, 0.1539749801158905, 0.33219894766807556, 0.019108954817056656, 0.36793503165245056, 0.09309157729148865, 0.03436391055583954, 0.07488607615232468, 0.08595167845487595, 0.04449755698442459, 0.2032676637172699, 0.26297178864479065, 0.25655749440193176, 0.31992432475090027, 0.20484746992588043, 0.4397542178630829, 0.06380155682563782], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cad27af0da31942759552cda1797e23a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22189955413341522], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e0ee4db21d34c052ea0f4822863a8e5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.395751953125, 0.37158203125, 0.434814453125, 0.392578125, 0.00992584228515625, 0.0928955078125, 0.26806640625, 0.1552734375, 0.3974609375, 0.299072265625, 0.437744140625, 0.315185546875, 0.274169921875, 0.190185546875, 0.08258056640625, 0.443359375, 0.0093536376953125, 0.1475830078125, 0.160888671875, 0.256103515625, 0.1280517578125, 0.037078857421875, 0.0797119140625, 0.05145263671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22c6ab46bde2fb607ac7cb2fe1c17b2f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.021209716796875, 0.32861328125, 0.262451171875, 0.286376953125, 0.11016845703125, 0.049530029296875, 0.022552490234375, 0.06439208984375, 0.3623046875, 0.216552734375, 0.11248779296875, 0.1070556640625, 0.1180419921875, 0.28076171875, 0.49609375, 0.485595703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bd7cec65e494e45f25848a5ba6fe04f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4305300712585449, 0.3002670109272003, 0.47580549120903015, 0.23295290768146515, 0.10439591854810715, 0.19968962669372559, 0.41215264797210693, 0.4208153784275055, 0.187204509973526, 0.18663646280765533, 0.3859651982784271, 0.12225861847400665, 0.40669265389442444, 0.17045068740844727, 0.44196948409080505, 0.43446245789527893, 0.45904818177223206, 0.459689199924469, 0.2577245533466339, 0.2420257329940796, 0.4496705234050751, 0.0488189235329628, 0.13498125970363617, 0.20690155029296875, 0.3718787431716919], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff21f04216eaae7ca4f9832715a51f24(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52d3bda87be6903dba61d2dbc8f7365e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4296875, 0.10546875, 0.371337890625, 0.1502685546875, 0.447509765625, 0.26220703125, 0.424560546875, 0.375244140625, 0.107666015625, 0.039276123046875, 0.0292205810546875, 0.29443359375, 0.0030269622802734375, 0.4384765625, 0.004886627197265625, 0.08447265625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07067414ee43aa4c0ebf00b7fac784e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.132080078125, 0.1611328125, 0.1197509765625, 0.07415771484375, 0.394287109375, 0.493896484375, 0.45654296875, 0.01531219482421875, 0.05224609375, 0.411865234375, 0.336181640625, 0.15771484375, 0.411865234375, 0.43701171875, 0.2391357421875, 0.280029296875, 0.23388671875, 0.1544189453125, 0.0263214111328125, 0.07708740234375, 0.12939453125, 0.414794921875, 0.488037109375, 0.2325439453125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e05668d55638e884ec4b89a01c78e06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.280029296875, 0.08599853515625, 0.036590576171875, 0.1649169921875, 0.0275726318359375, 0.277099609375, 0.19189453125, 0.1630859375, 0.2783203125, 0.13134765625, 0.337890625, 0.352294921875, 0.366943359375, 0.07806396484375, 0.1016845703125, 0.253173828125, 0.2734375, 0.42236328125, 0.251220703125, 0.1776123046875, 0.4140625, 0.480712890625, 0.13671875, 0.345947265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dece25dcb83f5ce48a401997a4404666(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.270751953125, 0.438720703125, 0.224609375, 0.218505859375, 0.439208984375, 0.422607421875, 0.231201171875, 0.494140625, 0.439697265625, 0.005889892578125, 0.417724609375, 0.41162109375, 0.025543212890625, 0.465087890625, 0.263427734375, 0.3681640625, 0.388916015625, 0.04034423828125, 0.09210205078125, 0.093994140625, 0.016204833984375, 0.332275390625, 0.33056640625, 0.372314453125, 0.1688232421875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c45638301a94c7de5636e67946d53e7c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ae83da67cf7bf19af200be4e7d32e35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c45638301a94c7de5636e67946d53e7c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58f7017b1fb5d314c355d257ee2a30af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07879638671875, 0.3291015625, 0.2440185546875, 0.2666015625, 0.10430908203125, 0.36279296875, 0.458984375, 0.2060546875, 0.230712890625, 0.431640625, 0.032684326171875, 0.1287841796875, 0.044097900390625, 0.1307373046875, 0.494384765625, 0.1689453125, 0.3564453125, 0.41015625, 0.01401519775390625, 0.38427734375, 0.288330078125, 0.406982421875, 0.43359375, 0.335693359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c280a7eeb8ace5e91dfe3ba2fc03f6c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32962659001350403, 0.13567712903022766, 0.3039896488189697, 0.017089802771806717, 0.3227505385875702, 0.22872397303581238, 0.3095281720161438, 0.17784452438354492], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4147ffb4065d8eb27a683c63d70a18d6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3622458279132843, 0.1757630854845047, 0.48009803891181946, 0.209505096077919, 0.2796361744403839, 0.2734540104866028, 0.2734384536743164, 0.011024227365851402, 0.268640398979187, 0.2953067719936371, 0.12283419072628021, 0.19551897048950195, 0.41425031423568726, 0.2254122793674469, 0.10984767973423004, 0.10405410081148148, 0.12133421003818512, 0.2439509630203247, 0.3352557420730591, 0.0009116711444221437, 0.3420238196849823, 0.41757991909980774, 0.022224079817533493, 0.27482327818870544, 0.2741718888282776, 0.1448204219341278, 0.27518075704574585, 0.42506396770477295], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42ccfe968735c7cdfd675b50522371b3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32017624378204346, 0.18403354287147522, 0.15782299637794495, 0.42059826850891113, 0.2962539494037628, 0.36504489183425903, 0.2074495553970337, 0.3076251447200775, 0.44464167952537537, 0.4967811107635498, 0.039418112486600876, 0.32442706823349, 0.12631186842918396, 0.12607286870479584, 0.35448724031448364, 0.17344418168067932, 0.06239613890647888, 0.4690121114253998, 0.0272661279886961, 0.1245494931936264, 0.011952613480389118, 0.49638524651527405, 0.03224114328622818, 0.00250729126855731, 0.17209601402282715, 0.34957367181777954, 0.2323186695575714, 0.17208737134933472], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb5d595f2406e5c6865a5eea3ea96484(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1adf10e36d1bcc3b54119235b81275b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3056640625, 0.395751953125, 0.2467041015625, 0.1781005859375, 0.2080078125, 0.1417236328125, 0.122802734375, 0.304443359375, 0.365478515625, 0.426513671875, 0.236572265625, 0.373779296875, 0.17822265625, 0.375, 0.12158203125, 0.0278778076171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de8e79fdc71dd95f17be73b9b719b6e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4638671875, 0.07916259765625, 0.313232421875, 0.296142578125, 0.45361328125, 0.218994140625, 0.2301025390625, 0.36572265625, 0.1453857421875, 0.32958984375, 0.0079803466796875, 0.443359375, 0.3642578125, 0.3076171875, 0.43359375, 0.2939453125, 0.197021484375, 0.127197265625, 0.155029296875, 0.386474609375, 0.452880859375, 0.315673828125, 0.2325439453125, 0.1776123046875, 0.0987548828125, 0.357421875, 0.12457275390625, 0.263916015625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12f0c4e52b93b538b4c8c9370c1021fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4c528c6129faaaf8592afe3a5e39cbb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17565636336803436, 0.13324353098869324, 0.23556871712207794, 0.11180637031793594, 0.21494321525096893, 0.20275315642356873, 0.4010474681854248, 0.23739595711231232, 0.21381504833698273, 0.44835397601127625, 0.3357185125350952, 0.23479793965816498, 0.16481587290763855, 0.03403547406196594, 0.06355904787778854, 0.3632146120071411, 0.08201977610588074, 0.18763567507266998, 0.15541329979896545, 0.45740023255348206, 0.3607213795185089, 0.21036337316036224, 0.40609049797058105, 0.4842072129249573], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77dd55d81b6d60fa6ba8d2178d9414c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4735952317714691, 0.05091310292482376, 0.09468799084424973, 0.3325001299381256, 0.28398656845092773, 0.3797680735588074, 0.3971150815486908, 0.46577250957489014, 0.3206663727760315, 0.11589069664478302, 0.07233070582151413, 0.06812036037445068, 0.07473732531070709, 0.2676847577095032, 0.4475102722644806, 0.03295319527387619, 0.1505538821220398, 0.22027035057544708, 0.08455030620098114, 0.25707462430000305, 0.33073604106903076, 0.4252733290195465, 0.09613856673240662, 0.35238420963287354], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7c0d00538e474e8159ed0da7977468b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.067138671875, 0.1630859375, 0.1474609375, 0.291259765625, 0.335205078125, 0.126953125, 0.02093505859375, 0.32373046875, 0.2073974609375, 0.044952392578125, 0.0001049041748046875, 0.367431640625, 0.32958984375, 0.0017881393432617188, 0.01119232177734375, 0.019195556640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5b00529380152a357077010e856bb9a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.421142578125, 0.492919921875, 0.129638671875, 0.1876220703125, 0.404052734375, 0.01922607421875, 0.300537109375, 0.26513671875, 0.418701171875, 0.2861328125, 0.08526611328125, 0.261474609375, 0.49853515625, 0.3857421875, 0.2027587890625, 0.32177734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c2802ee6e8e16a5388d9d667c83cd70(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3197736442089081, 0.16242657601833344, 0.030578218400478363, 0.49826478958129883, 0.459328293800354, 0.42597174644470215, 0.2840466797351837, 0.07100093364715576], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f881a1723484fc4daae518d1979fe4bd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.339111328125, 0.171630859375, 0.026123046875, 0.1531982421875, 0.0101318359375, 0.062042236328125, 0.017333984375, 0.002025604248046875, 0.1619873046875, 0.2783203125, 0.1171875, 0.18115234375, 0.23779296875, 0.04705810546875, 0.15869140625, 0.055145263671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78be90690f4d0d6865975a13e19b042a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d24ff4c689dfbfefdb9f345ab917a19b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2257540225982666, 0.09295482188463211, 0.38323235511779785, 0.07909043878316879, 0.33387869596481323, 0.03440294414758682, 0.18804188072681427, 0.2917407155036926, 0.4781714975833893, 0.1174091026186943, 0.45225998759269714, 0.314965158700943, 0.12393530458211899, 0.2702549993991852, 0.17346404492855072, 0.22403180599212646], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48c32937efed6b4bb52712dafded33f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06453804671764374, 0.22664575278759003, 0.03426147997379303, 0.27193692326545715, 0.1559160053730011, 0.4033445417881012, 0.26065197587013245, 0.10837781429290771, 0.34077298641204834, 0.32695168256759644], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f4285b5c12e897bb44986ddf6ef187a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7557757cab64030110328d4fcd9e6d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21391478180885315], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d8f191d0725e81ab6d45dd7faa05f3f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.169677734375, 0.024688720703125, 0.286865234375, 0.181396484375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_307abfb526388c69ea629b37336dcf28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_032cd125a4f8b7c9f71b838a01afb5a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4356600344181061, 0.4465019404888153, 0.45230647921562195, 0.36357319355010986, 0.4135817587375641, 0.16911068558692932, 0.25663354992866516, 0.3971746563911438, 0.16309195756912231, 0.01620424911379814, 0.26046985387802124, 0.3973093628883362, 0.4802510440349579, 0.0043780868873000145, 0.4736136198043823, 0.07029016315937042, 0.15904439985752106, 0.09331579506397247, 0.24084167182445526, 0.4755370318889618], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1519a446773a54a64272fcbe3dd3698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5a01e9b436a1f6ebadd671bd8682e98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20481769740581512, 0.1912686675786972, 0.4054698646068573, 0.11994129419326782, 0.46571430563926697, 0.19768007099628448, 0.28442084789276123, 0.0100177563726902, 0.19292357563972473, 0.43798547983169556, 0.20954924821853638, 0.08079636096954346, 0.0693327933549881, 0.025125598534941673, 0.007673020474612713, 0.33769872784614563], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bd7639a6321504414364382d62dae91(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.447265625, 0.058349609375, 0.1376953125, 0.449462890625, 0.472900390625, 0.119873046875, 0.06292724609375, 0.32470703125, 0.2176513671875, 0.3779296875, 0.07843017578125, 0.1248779296875, 0.1490478515625, 0.370361328125, 0.4638671875, 0.411376953125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_503b68e6eb03751017ca5540f82319a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0687255859375, 0.15869140625, 0.319580078125, 0.438232421875, 0.445068359375, 0.060211181640625, 0.43310546875, 0.196533203125, 0.287109375, 0.13427734375, 0.1849365234375, 0.37353515625, 0.280517578125, 0.04412841796875, 0.0767822265625, 0.2489013671875, 0.1871337890625, 0.367431640625, 0.25, 0.14892578125, 0.46484375, 0.0191192626953125, 0.0302581787109375, 0.294677734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c0238458cebd8fbe69a239485b3ba43(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.052093505859375, 0.405517578125, 0.404541015625, 0.13134765625, 0.333251953125, 0.265869140625, 0.3193359375, 0.31982421875, 0.11260986328125, 0.044158935546875, 0.302490234375, 0.3916015625, 0.2210693359375, 0.017913818359375, 0.2030029296875, 0.00043892860412597656, 0.31787109375, 0.45654296875, 0.354248046875, 0.05792236328125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc5cd733159ed79f3fc5b785e2580218(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22232678532600403, 0.12288061529397964, 0.21285653114318848, 0.2516457736492157, 0.06680552661418915, 0.33420678973197937, 0.25701549649238586, 0.326876163482666, 0.46729421615600586, 0.3976430892944336, 0.21225935220718384, 0.025633618235588074, 0.4700140953063965, 0.11371169239282608, 0.3869360387325287, 0.4724494218826294, 0.08683298528194427, 0.47443583607673645, 0.25797101855278015, 0.22336874902248383, 0.49094057083129883, 0.06457160413265228, 0.2866867780685425, 0.3902905285358429], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_300380de755e3c071f389576c4ceebc2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_394feea024cfab9d87b74ba3626234dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_300380de755e3c071f389576c4ceebc2
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7091f837f0ff8b9a3c530498d99c9c6a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17315524816513062, 0.20158882439136505, 0.23434914648532867, 0.24587604403495789, 0.40769797563552856, 0.14365598559379578, 0.1768021136522293, 0.10398240387439728, 0.006829364690929651, 0.2583009898662567, 0.08943825960159302, 0.24397079646587372, 0.30740657448768616, 0.4858699440956116, 0.32049697637557983, 0.1745566576719284, 0.21659669280052185, 0.1279488354921341, 0.16677387058734894, 0.3454732894897461, 0.4940218925476074, 0.14108429849147797, 0.21863916516304016, 0.10344108939170837, 0.2346770167350769, 0.10951413959264755, 0.1446681171655655, 0.2341463267803192], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_875759aa2b6dd7982048ca8382987f08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.491943359375, 0.09716796875, 0.476318359375, 0.1126708984375, 0.168212890625, 0.219482421875, 0.1981201171875, 0.2305908203125, 0.3056640625, 0.2138671875, 0.2457275390625, 0.04864501953125, 0.196533203125, 0.443603515625, 0.42333984375, 0.327880859375, 0.0258636474609375, 0.425048828125, 0.40771484375, 0.328857421875, 0.2225341796875, 0.300048828125, 0.01479339599609375, 0.42626953125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02e80a21fd1f341984808e551d21eb13(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0777587890625, 0.478271484375, 0.403076171875, 0.359130859375, 0.400634765625, 0.300537109375, 0.35595703125, 0.384521484375, 0.18798828125, 0.046661376953125, 0.1988525390625, 0.338623046875, 0.42578125, 0.232177734375, 0.26953125, 0.087890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a0d8029e6326e98e50d766662a50acf0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4308830797672272, 0.41537514328956604, 0.39811447262763977, 0.29343560338020325, 0.14757680892944336, 0.2626277804374695, 0.2206019163131714, 0.4073760211467743, 0.06095521152019501, 0.10782334208488464, 0.20496025681495667, 0.12915052473545074, 0.3286523222923279, 0.2219945639371872, 0.47139039635658264, 0.02922828122973442], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32daa0b58ecb85531aa5d607b4f7cef0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.036834716796875, 0.3896484375, 0.424072265625, 0.156982421875, 0.248291015625, 0.222900390625, 0.1044921875, 0.02197265625, 0.1273193359375, 0.1146240234375, 0.25634765625, 0.1728515625, 0.1463623046875, 0.1575927734375, 0.25830078125, 0.43408203125, 0.212646484375, 0.2332763671875, 0.346923828125, 0.04931640625, 0.34521484375, 0.368896484375, 0.427001953125, 0.353759765625, 0.36083984375, 0.1519775390625, 0.472412109375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69b892783c91e76422e13114ead53397(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c72a932085a2184db07de3a959bfcf00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69b892783c91e76422e13114ead53397
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_960de5d220750f42472a1f90364b2332(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20650231838226318, 0.30309364199638367], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_94e1cfae264835b8a0978812d7513249(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08789823204278946, 0.09480113536119461, 0.38837572932243347, 0.25614315271377563, 0.09628894180059433, 0.19233213365077972, 0.4239768981933594, 0.246416836977005, 0.10161040723323822, 0.3596040606498718, 0.27276912331581116, 0.34372496604919434, 0.3809317350387573, 0.24770992994308472, 0.2734394073486328, 0.31455308198928833], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e237f515c0e9d0ac048c56d5b7ca3555(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09203975647687912, 0.4466280937194824, 0.23959675431251526, 0.09418195486068726, 0.21899843215942383, 0.2871187925338745, 0.3798769414424896, 0.4430478811264038, 0.05165648087859154, 0.32069411873817444, 0.3131090998649597, 0.2472071647644043, 0.16957837343215942, 0.278344064950943, 0.4871661067008972, 0.40830230712890625], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1f3df5ef13f060335af94b8a362c7fb0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1605224609375, 0.458984375, 0.0936279296875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c775255fad4c7785d460278f5b85078c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.026329634711146355, 0.14102491736412048, 0.34593281149864197, 0.46759843826293945, 0.471499502658844, 0.469028502702713, 0.20283332467079163, 0.29122602939605713, 0.42913371324539185, 0.03325195237994194, 0.2073410600423813, 0.19046984612941742, 0.33069536089897156, 0.18918170034885406, 0.28581175208091736, 0.12947848439216614], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1045583f0833f49af4f1a839f9a36889(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41294845938682556, 0.38731861114501953, 0.19174674153327942, 0.017686519771814346, 0.38049009442329407, 0.2028520554304123, 0.24787521362304688, 0.44811537861824036, 0.33211660385131836, 0.41878044605255127, 0.025900203734636307, 0.013189578428864479, 0.10577481240034103, 0.19055163860321045, 0.4826202392578125, 0.09808030724525452], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4e7dc1893dd64a751617605c975127f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07562255859375, 0.059173583984375, 0.26904296875, 0.051422119140625, 0.348388671875, 0.150634765625, 0.281494140625, 0.2471923828125, 0.1546630859375, 0.2437744140625, 0.016937255859375, 0.2481689453125, 0.31103515625, 0.1678466796875, 0.01416015625, 0.3369140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a100ce18432eb5f6836f57c4b8ce38c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_efbf56a3e9cd7841346c6d77fb3bf6be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4892578125, 0.1956787109375, 0.247802734375, 0.4990234375, 0.006519317626953125, 0.359375, 0.07220458984375, 0.4560546875, 0.388427734375, 0.0274200439453125, 0.37158203125, 0.30615234375, 0.3134765625, 0.07904052734375, 0.303466796875, 0.221435546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02c1996e748a2eca1032e1c0ade2eb0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07856889814138412, 0.19414405524730682, 0.31241512298583984, 0.1033751592040062, 0.11563032865524292, 0.46455803513526917, 0.07121587544679642, 0.16171933710575104, 0.28313156962394714, 0.2601550221443176], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_205c35ec83fafc58b49094560587160a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37060546875, 0.1800537109375, 0.29833984375, 0.08917236328125, 0.1099853515625, 0.12384033203125, 0.2418212890625, 0.48291015625, 0.300537109375, 0.497802734375, 0.35595703125, 0.4970703125, 0.484130859375, 0.09161376953125, 0.1881103515625, 0.2861328125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2795199214e5398dc5c62ccf3fe7942d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39599609375, 0.315185546875, 0.223876953125, 0.43017578125, 0.151611328125, 0.1539306640625, 0.314697265625, 0.36865234375, 0.31591796875, 0.10302734375, 0.495849609375, 0.02691650390625, 0.359130859375, 0.374755859375, 0.401611328125, 0.258544921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78610de2c6de7a74882b221d0c638da8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_218748785eb6b5cfbf0fd0484738ea97(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78610de2c6de7a74882b221d0c638da8
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2695203cb97c03083cc3efd5b2d0e03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25871a094bb00968229bb8a79a88f3d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4512035548686981, 0.40589576959609985, 0.24796760082244873, 0.30423638224601746, 0.025867806747555733, 0.24421705305576324, 0.365726500749588, 0.12055147439241409, 0.1775698959827423, 0.419143944978714], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e7ec068d454657897b2f2395bca48c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.282958984375, 0.463134765625, 0.271728515625, 0.0634765625, 0.359375, 0.2042236328125, 0.1864013671875, 0.39111328125, 0.08148193359375, 0.3388671875, 0.157958984375, 0.366943359375, 0.170166015625, 0.07452392578125, 0.0609130859375, 0.3564453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb19daacf3c237eb53adecf6a69f7c4a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42822265625, 0.0823974609375, 0.12261962890625, 0.2137451171875, 0.492919921875, 0.126708984375, 0.196044921875, 0.2218017578125, 0.302001953125, 0.40234375, 0.0016012191772460938, 0.333984375, 0.294921875, 0.173583984375, 0.057403564453125, 0.447998046875, 0.38916015625, 0.326416015625, 0.171875, 0.035308837890625, 0.016021728515625, 0.003147125244140625, 0.419921875, 0.2337646484375, 0.232666015625, 0.33154296875, 0.20556640625], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f54bd719de9227aad3dd7bd7211355ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06418580561876297, 0.12616804242134094, 0.2405916452407837, 0.26687678694725037, 0.4801732897758484, 0.013775501400232315, 0.32461339235305786, 0.36604011058807373, 0.27695220708847046, 0.11836595088243484], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac5630f58e2fcd027cda6509277c5070(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.313232421875, 0.307373046875, 0.19482421875, 0.063232421875, 0.038360595703125, 0.292236328125, 0.2398681640625, 0.2352294921875, 0.306640625, 0.01544189453125, 0.300537109375, 0.25244140625, 0.353515625, 0.2939453125, 0.375, 0.163330078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62327ec6f124187c995425b0a7798670(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18355554342269897, 0.1707753837108612, 0.14700153470039368, 0.24312210083007812, 0.3311583399772644, 0.03632381930947304, 0.17338550090789795, 0.3753844201564789, 0.34478604793548584, 0.17243380844593048, 0.13839223980903625, 0.2621935307979584, 0.18615318834781647, 0.2835629880428314, 0.450065940618515, 0.33163467049598694], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f885b53443ba3bbb9d34f82dc5aa5a85(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09115853905677795], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_731368416622bb883988fa0e412d4506(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd3f53e495d00914a272952247b50dbd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25113311409950256, 0.1594313234090805, 0.2974771559238434, 0.03864235430955887, 0.3981446921825409, 0.27787941694259644, 0.2884638011455536, 0.18318159878253937, 0.15629036724567413, 0.1563306301832199, 0.18309514224529266, 0.15389123558998108, 0.3580666780471802, 0.4162798821926117, 0.3098166882991791, 0.015827789902687073, 0.44138267636299133, 0.34367746114730835, 0.4161577522754669, 0.11784607172012329], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2cd575cff59c5abdddc48813519ba15a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_929e464880853bada3717612d336b864(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2cd575cff59c5abdddc48813519ba15a
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_639cee938ffbd5d7c8fe8d15994795fc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.439208984375, 0.3583984375, 0.23193359375, 0.37060546875, 0.27294921875, 0.253662109375, 0.34716796875, 0.314208984375, 0.11224365234375, 0.2529296875, 0.1571044921875, 0.464599609375, 0.41845703125, 0.3046875, 0.422119140625, 0.43603515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3cdcadce9a1421d90bbbbcfcee814147(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2593696713447571, 0.36999571323394775, 0.37208276987075806, 0.03592558205127716, 0.12645341455936432, 0.19006724655628204, 0.09152057021856308, 0.2807011604309082, 0.23166565597057343, 0.24698887765407562, 0.10902008414268494, 0.037080660462379456, 0.22383037209510803, 0.037284187972545624, 0.1540995091199875, 0.22440963983535767, 0.37103602290153503, 0.2571510076522827, 0.21482454240322113, 0.3865079879760742, 0.39936363697052, 0.18581081926822662, 0.0989677831530571, 0.32770514488220215, 0.495628297328949, 0.3328361511230469, 0.02633819170296192, 0.33840858936309814, 0.2544446885585785, 0.42689579725265503], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_edd63374a42e468eae177d4cccbc117c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12739543616771698, 0.36878013610839844, 0.3261675238609314, 0.3930642306804657, 0.446527361869812, 0.21535064280033112, 0.45718294382095337, 0.3667491376399994, 0.4383220076560974, 0.01960577256977558, 0.17374223470687866, 0.3447355031967163, 0.143856018781662, 0.48629453778266907, 0.24705925583839417, 0.22919049859046936, 0.42598965764045715, 0.42243558168411255, 0.16820648312568665, 0.07655678689479828, 0.3542274832725525, 0.07063931971788406, 0.17551222443580627, 0.18242758512496948, 0.04256570339202881], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8bfecfb84a1990649a16f9f886d96347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12113615870475769, 0.12451749294996262, 0.18811050057411194, 0.4011334776878357, 0.45412352681159973, 0.07362492382526398, 0.275531530380249, 0.34766829013824463, 0.16920417547225952, 0.47123584151268005, 0.3633914589881897, 0.28336840867996216, 0.41673463582992554, 0.13806629180908203, 0.44484034180641174, 0.3569018244743347], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1ba8daaaedef5288118e0174add64d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48388671875, 0.1514892578125, 0.27734375, 0.223388671875, 0.0692138671875, 0.33984375, 0.186279296875, 0.216064453125, 0.497314453125, 0.03753662109375, 0.0276641845703125, 0.42724609375, 0.0406494140625, 0.058563232421875, 0.169677734375, 0.11962890625, 0.17724609375, 0.288818359375, 0.0413818359375, 0.2626953125, 0.344970703125, 0.41552734375, 0.005603790283203125, 0.074462890625, 0.310546875, 0.437255859375, 0.07464599609375, 0.2496337890625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0700eac203d701461995d025885211bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_443e6825f04920e270d9c0b1f6a31538(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0700eac203d701461995d025885211bf
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b5d1f4e639f69af2c527c877b556c58(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.435470849275589, 0.2548137605190277, 0.4465238153934479, 0.39765453338623047, 0.4523126780986786, 0.23284421861171722, 0.14763636887073517, 0.39386531710624695, 0.2395678013563156, 0.29813632369041443, 0.2688347399234772, 0.14367341995239258, 0.05671073868870735, 0.3043653964996338], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0daab5e1bb6fceb6802670f2eb17f6c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016292113810777664, 0.22837617993354797, 0.42114946246147156, 0.26578405499458313, 0.4150521457195282, 0.3125505745410919, 0.005435185041278601, 0.47702181339263916, 0.30356377363204956, 0.2912529706954956, 0.23797398805618286, 0.303535521030426, 0.027706723660230637, 0.19005709886550903, 0.11026342213153839, 0.2955667972564697, 0.2386852502822876, 0.47416913509368896, 0.08366546034812927, 0.41132688522338867, 0.3219718933105469, 0.4064600467681885, 0.36182793974876404, 0.27889567613601685], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e468693251542ebeb3cacdfab564ed19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.207275390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f4c3ec95c80eeaa5328e114301a901f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.056671142578125, 0.31396484375, 0.0039215087890625, 0.3359375, 0.49072265625, 0.307861328125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68acf9210086cc372fdf6a7c810ce0f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17892907559871674, 0.4377363920211792, 0.4735428988933563, 0.47907230257987976, 0.08681732416152954, 0.2666325867176056, 0.4477110803127289, 0.21083636581897736, 0.49356168508529663, 0.10740722715854645, 0.25624167919158936, 0.35244905948638916, 0.2690311372280121, 0.2265404909849167, 0.42363736033439636, 0.3780990540981293], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_45d0f84e5630d090282ff45b2f982f74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f30f63c78156fe15afdfa251604523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_45d0f84e5630d090282ff45b2f982f74
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0fca07ef8e856b1ae79e83400dbd413(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1123046875, 0.35107421875, 0.286865234375, 0.36572265625, 0.48828125, 0.010711669921875, 0.2362060546875, 0.4541015625, 0.10418701171875, 0.30908203125, 0.03717041015625, 0.0872802734375, 0.1282958984375, 0.129638671875, 0.281982421875, 0.369873046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f6b90ce480affbcda0c26116496dbd8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13267900049686432, 0.2502121031284332, 0.13158322870731354, 0.49575260281562805, 0.3883240222930908, 0.0196791123598814, 0.15827906131744385, 0.11161261051893234, 0.41673120856285095, 0.04591088742017746, 0.31641703844070435, 0.27148133516311646, 0.059149421751499176, 0.1687668412923813, 0.061815835535526276, 0.009075661189854145, 0.13068236410617828, 0.40930765867233276, 0.17526952922344208, 0.4005633294582367, 0.25359663367271423, 0.4044250249862671, 0.4368533790111542, 0.17958006262779236], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b562c62659a6024f52b5ff0e2d6e65ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4328659176826477, 0.1976557821035385, 0.20820261538028717, 0.04707787185907364, 0.07838103920221329, 0.039800263941287994, 0.07209520787000656, 0.3180831968784332, 0.1283712387084961, 0.17435120046138763, 0.4653402864933014, 0.2989802658557892, 0.36888837814331055, 0.16586516797542572, 0.4010978043079376, 0.17696544528007507, 0.00013677816605195403, 0.4961218535900116, 0.264521986246109, 0.38772040605545044], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3042df514838262ec56e42131166384(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1385498046875, 0.039398193359375, 0.20458984375, 0.0477294921875, 0.46728515625, 0.483154296875, 0.1253662109375, 0.40771484375, 0.1942138671875, 0.26708984375, 0.166748046875, 0.430419921875, 0.484619140625, 0.091064453125, 0.28857421875, 0.11474609375, 0.4990234375, 0.1627197265625, 0.0980224609375, 0.091552734375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bf6f4a236e50566608bc9fd078dd9639(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29721128940582275, 0.08573918044567108, 0.34270021319389343, 0.19585846364498138, 0.37513867020606995, 0.039834391325712204, 0.02717653475701809, 0.2572111189365387, 0.3300969898700714, 0.3996923863887787, 0.282376766204834, 0.08517459034919739, 0.2423529177904129, 0.4404947757720947, 0.4626045525074005, 0.327546626329422, 0.38434305787086487, 0.3826623558998108, 0.10637929290533066, 0.20770123600959778, 0.43307724595069885, 0.3718745708465576, 0.45678701996803284, 0.37378284335136414], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2281137feb381f315fbc90d405534d45(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10870361328125, 0.126953125, 0.267578125, 0.312744140625, 0.389404296875, 0.08953857421875, 0.244873046875, 0.0687255859375, 0.27392578125, 0.1265869140625, 0.246826171875, 0.036102294921875, 0.32763671875, 0.12396240234375, 0.09649658203125, 0.431640625, 0.0222625732421875, 0.439453125, 0.469482421875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e7fdb495d3398777ffd38f7e9591bdd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45850929617881775, 0.15216149389743805, 0.18269266188144684, 0.33746886253356934, 0.43490859866142273, 0.4833777844905853, 0.27559852600097656, 0.3906378448009491, 0.33708062767982483, 0.05011682212352753], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_33243fd5c5d4dbcad21902059c7c7eb3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.025976216420531273, 0.1811176985502243, 0.25859829783439636, 0.181845560669899, 0.46100035309791565, 0.38788947463035583, 0.16091924905776978, 0.40657728910446167, 0.44437822699546814, 0.099190853536129, 0.48668432235717773, 0.32756227254867554, 0.31643763184547424, 0.3144035041332245, 0.31884339451789856, 0.34114938974380493, 0.3772571086883545, 0.4725266695022583, 0.27363449335098267, 0.04635583609342575], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f7be7f1bd3c06141cc7116d66c25f6ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.334716796875, 0.2939453125, 0.402587890625, 0.1319580078125, 0.396240234375, 0.25341796875, 0.408935546875, 0.032012939453125, 0.441650390625, 0.396240234375, 0.455810546875, 0.262939453125, 0.1695556640625, 0.44140625, 0.43798828125, 0.427734375, 0.48193359375, 0.312744140625, 0.1998291015625, 0.321533203125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19ae4d80219e7e34fd60b7a317b2af80(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12353515625, 0.22705078125, 0.0872802734375, 0.0289459228515625, 0.20751953125, 0.2122802734375, 0.3134765625, 0.07208251953125, 0.3671875, 0.092041015625, 0.0767822265625, 0.2344970703125, 0.369140625, 0.312744140625, 0.46923828125, 0.41552734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c0b123f599443a1361728bbe4b8d972c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25183650851249695, 0.3683272898197174, 0.07195103168487549, 0.20779912173748016, 0.03841919079422951, 0.0506119579076767], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_715e4223a71a61071d7d83d058169546(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4204571843147278, 0.4477470815181732, 0.3872949481010437, 0.4579141139984131, 0.4515588581562042, 0.30081906914711, 0.32324087619781494, 0.4883183240890503, 0.04138459265232086, 0.30751848220825195, 0.050267014652490616, 0.1382015198469162, 0.22878503799438477, 0.3502681255340576, 0.12324751913547516, 0.23755988478660583], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b859927b31cb02314545c050df9c81c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_47df43346bcbe90f8184410d8416f21e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37548828125, 0.149658203125, 0.2763671875, 0.222412109375, 0.438720703125, 0.09771728515625, 0.290771484375, 0.10345458984375, 0.123046875, 0.10540771484375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02c86b0a94a095940549cdeddcd9e557(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3045617938041687, 0.30609792470932007, 0.10754981637001038, 0.3098863363265991, 0.22881783545017242, 0.06626611202955246], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_452fbbf31c548e992065d7275794a877(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.373779296875, 0.426513671875, 0.415771484375, 0.2332763671875, 0.336669921875, 0.0021114349365234375, 0.146728515625, 0.16015625, 0.147705078125, 0.271484375, 0.286376953125, 0.08953857421875, 0.1689453125, 0.36865234375], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7c4b575c35bf24fff0e7dd9853d0ed8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05759161710739136, 0.3082084357738495, 0.07639067620038986, 0.25833138823509216, 0.31136584281921387, 0.07998935133218765, 0.1165180504322052, 0.43210500478744507], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d34419b10154503618d535025369b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1104736328125, 0.1849365234375, 0.33837890625, 0.167724609375, 0.1307373046875, 0.430419921875, 0.3818359375, 0.08331298828125, 0.465576171875, 0.258056640625, 0.31298828125, 0.4912109375, 0.209228515625, 0.2939453125, 0.173583984375, 0.01233673095703125, 0.49560546875, 0.437255859375, 0.302490234375, 0.33056640625, 0.266845703125, 0.01142120361328125, 0.2359619140625, 0.2354736328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf0704221805286d51da82ea6044a7ff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d48ec4098dfa2e3049d3a7aec9c1644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf0704221805286d51da82ea6044a7ff
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53736879c88e2100fb705e29b9c3fd52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e5517fd2ef87341634c6e8797dec0ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53736879c88e2100fb705e29b9c3fd52
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a3308bd034a345507735b4f595f9839(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.024444580078125, 0.34619140625, 0.363037109375], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b785cfb76bdccbddfc63488ab78faadf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3451264202594757, 0.4750030040740967, 0.05222498998045921, 0.046696871519088745, 0.4858923554420471, 0.4996383786201477, 0.369416207075119, 0.3913848400115967, 0.08827166259288788, 0.07924925535917282, 0.0676104798913002, 0.20062187314033508, 0.013878695666790009, 0.43523889780044556, 0.056877389550209045, 0.1401996910572052], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a316317fc4f9523ad0ccd7a6fcffa621(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32568359375, 0.0633544921875, 0.364013671875, 0.273681640625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2cf5ca91b0a25e47e2adc98ffef2a0b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1082763671875, 0.11993408203125, 0.469970703125, 0.41845703125, 0.361328125, 0.1898193359375, 0.382080078125, 0.2330322265625, 0.052947998046875, 0.484375, 0.43798828125, 0.160888671875, 0.1231689453125, 0.285400390625, 0.12841796875, 0.344970703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d43e5a78620cf1c24677b04ad97dd2da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.047210693359375, 0.47607421875, 0.0869140625, 0.2288818359375, 0.0255584716796875, 0.23681640625, 0.058563232421875, 0.183349609375, 0.388671875, 0.1405029296875, 0.234130859375, 0.40625, 0.372314453125, 0.386474609375, 0.0230560302734375, 0.34033203125, 0.34033203125, 0.0009908676147460938, 0.03033447265625, 0.040374755859375, 0.02484130859375, 0.345703125, 0.36767578125, 0.142578125, 0.19384765625, 0.057220458984375, 0.263916015625, 0.3828125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_463a7e8d6a467a88babe4516d1cc0503(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10883225500583649, 0.308821439743042, 0.1826607882976532, 0.34783652424812317, 0.16097310185432434, 0.13303300738334656, 0.3504296839237213, 0.25251615047454834, 0.2548622190952301, 0.06407765299081802, 0.12250393629074097, 0.12193672358989716, 0.41381266713142395, 0.026944801211357117, 0.20284537971019745, 0.15732139348983765, 0.3620356321334839, 0.47442561388015747, 0.4467479884624481, 0.022216588258743286, 0.4264320433139801, 0.027911020442843437, 0.22951644659042358, 0.34117698669433594], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90b3a206583c4b5ff8ba8ed95aa99ff8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2800120413303375, 0.24188725650310516, 0.3100605309009552, 0.03158726915717125], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66cf0858d46664b4bc87590cbd52c52d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20337744057178497], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e944766883120ad853d3fd096d95d587(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31129847ccf4267ad8e6b7b2aff689b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e944766883120ad853d3fd096d95d587
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06793212890625, 0.12841796875, 0.18359375, 0.1083984375, 0.303466796875, 0.01800537109375, 0.404052734375, 0.10150146484375, 0.0197601318359375, 0.0791015625, 0.12054443359375, 0.03173828125, 0.0156402587890625, 0.28955078125, 0.258544921875, 0.480224609375, 0.32470703125], dtype='float16').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1d6c8575640e7086dee5c5cdcec908f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0146331787109375, 0.1783447265625, 0.316162109375, 0.1668701171875, 0.349853515625, 0.0028514862060546875, 0.01097869873046875, 0.1297607421875, 0.12274169921875, 0.36328125, 0.36669921875, 0.236572265625, 0.25390625, 0.130859375, 0.384033203125, 0.328857421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_04ed4f3e29a6885e261a8a3957772fe1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.145751953125, 0.134765625, 0.409912109375, 0.04345703125, 0.294677734375, 0.2198486328125, 0.07049560546875, 0.3505859375, 0.2493896484375, 0.282958984375, 0.11712646484375, 0.2132568359375], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55c28ab81ef1220c71ddbe00f7b8b94e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2716437578201294, 0.0726253092288971, 0.4862951934337616, 0.20693831145763397, 0.4208139479160309, 0.49808886647224426, 0.3274492919445038, 0.02847883850336075, 0.17646589875221252, 0.2773386836051941, 0.23866862058639526, 0.33257126808166504, 0.37739551067352295, 0.23128734529018402, 0.4949747323989868, 0.027488622814416885, 0.21252062916755676, 0.24205994606018066, 0.23170216381549835, 0.04109397530555725, 0.07683355361223221, 0.4868326485157013, 0.1533975452184677, 0.04920041188597679, 0.4004163146018982, 0.26399561762809753, 0.4509325623512268, 0.48849231004714966, 0.1302395761013031, 0.4424005448818207], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d7ff053c574c1dee9da92d2d6760d1a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06556959450244904, 0.0784941092133522, 0.45371541380882263, 0.0992833822965622, 0.1244591623544693, 0.23123522102832794, 0.2954060733318329, 0.27495554089546204, 0.46390199661254883, 0.34881845116615295, 0.16893541812896729, 0.18694713711738586, 0.23900476098060608, 0.042727962136268616, 0.03660894185304642, 0.4486128091812134], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b85fe66b065bd5d8f9c213f1ad90281(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41499099135398865, 0.248371884226799, 0.444778174161911, 0.008735359646379948, 0.08584162592887878, 0.06373827159404755], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d07a7dec43c9c68947ff6a352711fd8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3124919831752777, 0.11246941238641739, 0.06723134964704514, 0.3367818593978882, 0.43511658906936646, 0.2107851654291153, 0.03012041375041008, 0.06454958766698837, 0.4309367835521698, 0.20840896666049957, 0.4509548544883728, 0.23929651081562042, 0.06007954105734825, 0.49463027715682983, 0.3669438660144806, 0.020189646631479263, 0.24781665205955505, 0.16910603642463684, 0.37600016593933105, 0.2598952651023865], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_15cdcc23ef3a673215a4e0e9b81f8c85(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44849610328674316, 0.2602355480194092, 0.27569499611854553, 0.2874789535999298, 0.1519981324672699, 0.04023103788495064, 0.27367421984672546, 0.41072478890419006, 0.3135759234428406, 0.14755526185035706, 0.20482301712036133, 0.07295674085617065, 0.4324685335159302, 0.049341924488544464, 0.3799106478691101, 0.2075079083442688, 0.2632400095462799, 0.2370462864637375, 0.3949269652366638, 0.20977552235126495, 0.1544753462076187, 0.3249239921569824, 0.10600017011165619, 0.37238553166389465], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3bb71d77b887dff1af0c44148fc1fd27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03344925120472908, 0.17678548395633698, 0.2142362892627716, 0.4417390525341034, 0.41047772765159607, 0.41846325993537903, 0.23256048560142517, 0.41116824746131897, 0.31878554821014404, 0.14464299380779266, 0.32595598697662354, 0.39244991540908813, 0.2578315734863281, 0.2592051923274994, 0.3409772515296936, 0.3157503008842468, 0.4462065100669861, 0.37186533212661743, 0.024854399263858795, 0.4600306749343872, 0.059189941734075546, 0.06783302873373032, 0.027934197336435318, 0.15292246639728546], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee64821d89dd1867d8fde30aa40ae496(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_747e40a04a974f725a4d3115d3e13b99(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12333108484745026], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63c20edc22104c35a10c4349adfa72e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10163779556751251, 0.15649475157260895, 0.13670065999031067, 0.31907540559768677, 0.0007575617055408657, 0.08559896051883698, 0.25171738862991333, 0.10674498975276947, 0.37145888805389404, 0.18365800380706787, 0.0957423523068428, 0.17928798496723175, 0.36660197377204895, 0.3463228940963745, 0.3653974235057831, 0.14475175738334656], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39a81f5a614f977bdc3626cc767f1df0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4519418478012085, 0.20528768002986908, 0.0006530486862175167, 0.14574848115444183, 0.01479645911604166, 0.062372948974370956, 0.45873934030532837, 0.004400588572025299, 0.27453774213790894, 0.21554790437221527, 0.05008561164140701, 0.051718343049287796, 0.4087519347667694, 0.027851037681102753], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d63bcf327929b2e73403b75e606ca9a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37269216775894165, 0.13082222640514374, 0.4234631657600403, 0.3796687424182892, 0.31087300181388855, 0.3212036192417145, 0.025502728298306465, 0.09418396651744843, 0.05731512978672981, 0.15360954403877258, 0.06954212486743927, 0.30443060398101807, 0.20393171906471252, 0.06093883514404297, 0.2233622968196869, 0.09963742643594742], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ef3147589c01fa4b2cfcdbab938f142(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30984336137771606, 0.33841946721076965, 0.13061031699180603, 0.3522598147392273, 0.012873799540102482, 0.21008409559726715, 0.3269597291946411, 0.3973621428012848, 0.22136190533638, 0.07714759558439255, 0.24043869972229004, 0.25202351808547974, 0.14652951061725616, 0.16038216650485992, 0.4871581792831421, 0.3974510729312897, 0.1668277531862259, 0.1670297533273697, 0.3516834080219269, 0.03794731944799423, 0.11389114707708359, 0.04185266047716141, 0.31587356328964233, 0.09314235299825668], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f070e056c0cb4db7f3a98bf4453855d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.014404296875, 0.437744140625, 0.1407470703125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_708de7d39b54c42a7d5bd43645032dd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5ece06a19e33a2000a5c4595c164f93(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48a96ce6677152b622d8af5907a5fe2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5ece06a19e33a2000a5c4595c164f93
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e1126424cff97826ac7062283b9e522(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29898616671562195, 0.021274350583553314, 0.21759283542633057, 0.29928210377693176, 0.04727115482091904, 0.23517729341983795, 0.12024497985839844, 0.3282112777233124, 0.416446715593338, 0.029503053054213524, 0.4339963495731354, 0.4558742940425873, 0.23250211775302887, 0.17726261913776398, 0.20889993011951447, 0.3916657269001007], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e0c0fd6ca61aaac738ed1fced2f93f00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3109583854675293, 0.38415151834487915, 0.08201174437999725, 0.07079772651195526, 0.45049890875816345, 0.04119015485048294, 0.04676448926329613, 0.32187628746032715, 0.2891707420349121, 0.15220847725868225, 0.39681223034858704, 0.022968467324972153, 0.3488946259021759, 0.19790498912334442, 0.24095012247562408, 0.4791901409626007, 0.054639723151922226, 0.403633713722229, 0.36287927627563477, 0.3987249732017517], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bcb8dc05049da043c925e0def558249b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48095703125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_935620b4dbd7ca17d7dd34c95946d451(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.426513671875, 0.1273193359375, 0.2037353515625, 0.10455322265625, 0.25439453125, 0.2381591796875, 0.12420654296875, 0.19970703125, 0.2325439453125, 0.0125732421875, 0.21142578125, 0.086669921875, 0.371826171875, 0.358642578125, 0.3466796875, 0.392333984375, 0.0268707275390625, 0.455078125, 0.280517578125, 0.10400390625, 0.217041015625, 0.005584716796875, 4.881620407104492e-05, 0.2841796875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_061b93377e65fae661ec2339bfe692de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2060008943080902, 0.42448416352272034, 0.1669875979423523, 0.24937750399112701, 0.39127522706985474, 0.47805532813072205, 0.13283243775367737, 0.4763721823692322, 0.1037934422492981, 0.10693605244159698, 0.23999394476413727, 0.4727954864501953, 0.13171641528606415, 0.04928448796272278, 0.10724318772554398, 0.1285599321126938, 0.4312399923801422, 0.30345451831817627, 0.3888985216617584], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f5b9308516a40dd7544461a59c9610(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c15b23ba14ec2c8f2a07dc084b58712b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04309404268860817, 0.45601344108581543, 0.17610152065753937, 0.19784466922283173, 0.37844792008399963, 0.16744202375411987, 0.19654805958271027, 0.20499026775360107, 0.4975054860115051, 0.017945563420653343, 0.20278988778591156, 0.4089013338088989, 0.20612111687660217, 0.2837524116039276, 0.19713234901428223, 0.09438768029212952, 0.4254591464996338, 0.05837153270840645, 0.40146660804748535, 0.22280274331569672], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95879a5db928e1187d88893fed235f71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44497278332710266], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ccc7fa8958dc23e53e4de15b94a2579a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43408203125, 0.327880859375, 0.3291015625, 0.49560546875, 0.468017578125, 0.400634765625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4953a554d32a4f5343a902be7a911fcb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.090087890625, 0.1624755859375, 0.015869140625, 0.451171875, 0.2034912109375, 0.2015380859375, 0.283447265625, 0.440185546875, 0.427001953125, 0.0892333984375, 0.294677734375, 0.154541015625, 0.31298828125, 0.0999755859375, 0.493408203125, 0.1094970703125, 0.066162109375, 0.32177734375, 0.2060546875, 0.394287109375, 0.08416748046875, 0.417724609375, 0.4033203125, 0.2213134765625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_558dc60567a0201fdfd3648de801a8ca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07598876953125, 0.39501953125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b280c40ef26c2dc305205e203965ec87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f2c865490521d0387fc1b2c07241f0b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ca4e84139288794605d4681f757c437f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2061023861169815, 0.04828666150569916, 0.3050777018070221, 0.1422627568244934, 0.16069865226745605, 0.10180944949388504, 0.456746906042099, 0.16916564106941223, 0.37827253341674805, 0.31004196405410767, 0.21511632204055786, 0.18442344665527344, 0.28559404611587524, 0.37703824043273926, 0.16122163832187653, 0.30642780661582947], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6baaacb34c2051f4b7209dce88d76a8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04975898563861847, 0.4908040761947632, 0.16262470185756683, 0.09010694921016693, 0.44554293155670166, 0.24791795015335083, 0.14826761186122894, 0.24174869060516357, 0.2352515310049057, 0.10660258680582047, 0.2639338970184326, 0.40247324109077454, 0.49432915449142456, 0.4291478395462036, 0.14457446336746216, 0.0652879998087883, 0.32623371481895447, 0.37733641266822815, 0.2331298142671585, 0.11013193428516388, 0.20248888432979584, 0.4050210118293762, 0.03000127710402012, 0.4509982466697693, 0.11239025741815567, 0.23257113993167877, 0.10646878927946091, 0.3685283362865448, 0.13312003016471863, 0.2485290765762329], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65d72ca0243b1ed52d8745f28725599f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15771484375, 0.457763671875, 0.351318359375, 0.48681640625, 0.29736328125, 0.2376708984375, 0.2122802734375, 0.2578125, 0.0076141357421875, 0.2022705078125, 0.069091796875, 0.43798828125, 0.44091796875, 0.456787109375, 0.31982421875, 0.4052734375, 0.09857177734375, 0.399169921875, 0.08782958984375, 0.26416015625, 0.024169921875, 0.187255859375, 0.460205078125, 0.2354736328125, 0.038665771484375, 0.469482421875, 0.34716796875, 0.429931640625, 0.463134765625, 0.36474609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd3a6ecaea4cda9eeec535b8fda7057e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08885566145181656, 0.4397639334201813, 0.06829658895730972, 0.1294243186712265, 0.18282420933246613, 0.02849576622247696, 0.45300087332725525, 0.2756745219230652, 0.0180098544806242, 0.24665044248104095, 0.31424468755722046, 0.16519632935523987, 0.22045907378196716, 0.29784828424453735, 0.4855191111564636, 0.13039511442184448], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9a36723a9a7269d15a879d6ec80aa63(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2337646484375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_839b912645fee4754704153cc12936a2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3693576753139496, 0.35309720039367676, 0.3936445116996765, 0.20160800218582153, 0.04954984784126282, 0.2636876404285431, 0.18705183267593384, 0.0730733573436737, 0.41042372584342957, 0.347911536693573, 0.012039507739245892, 0.059706009924411774, 0.428608238697052, 0.40035802125930786, 0.42538461089134216, 0.4103330969810486], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f8d3e9d3fb99ebcb7489c26bf47c81b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4187770187854767, 0.2829981744289398, 0.37116047739982605, 0.2878150939941406, 0.2527622580528259, 0.11917425692081451, 0.1400054395198822, 0.3567032217979431, 0.3327818214893341, 0.30638405680656433, 0.23760470747947693, 0.41165003180503845, 0.08846054971218109, 0.4880158007144928, 0.4321911633014679, 0.1848296970129013, 0.13969038426876068, 0.3422788977622986, 0.43605613708496094, 0.05298953875899315, 0.28527969121932983, 0.12083838880062103, 0.15757887065410614, 0.11242815852165222], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d93e655e64188a30f07c8d62b94d8b6f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3021668791770935, 0.23496775329113007, 0.012179698795080185, 0.4895114004611969, 0.4592464864253998, 0.4921810030937195, 0.07672906666994095, 0.28910908102989197, 0.4423511326313019, 0.07814154028892517, 0.3530955910682678, 0.34283170104026794, 0.06536955386400223, 0.14511889219284058, 0.20446129143238068, 0.44435712695121765], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c6d82506b7fdd04da6159eb801bdc3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48974609375, 0.080078125, 0.0168914794921875, 0.287109375, 0.499267578125, 0.125732421875, 0.048492431640625, 0.344970703125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6488f3154a25b24714682d7ced21ff35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1728515625, 0.031463623046875, 0.2066650390625, 0.1611328125, 0.492431640625, 0.172119140625, 0.25390625, 0.3896484375, 0.1907958984375, 0.41796875, 0.330810546875, 0.343505859375, 0.493896484375, 0.14990234375, 0.2491455078125, 0.39599609375, 0.0157012939453125, 0.335205078125, 0.189453125, 0.43115234375, 0.06378173828125, 0.312255859375, 0.43310546875, 0.26025390625, 0.0132293701171875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e81b740aca0d2de4118366b2f073c7ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18588925898075104, 0.2125140130519867, 0.2623502016067505, 0.11852426081895828, 0.24724288284778595, 0.11884838342666626, 0.1598840206861496, 0.12731613218784332, 0.048050690442323685, 0.11399983614683151, 0.42104974389076233, 0.012807046994566917, 0.18496648967266083, 0.2869814932346344, 0.4879293143749237, 0.17454372346401215, 0.4557083547115326, 0.003013208508491516, 0.18624061346054077, 0.21920683979988098, 0.013763930648565292, 0.13712887465953827, 0.39718735218048096, 0.08037738502025604], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_427e188db9c10482da7d7d425d8ebce2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3311527371406555], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_57311055b6987423b6158f7f18312709(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4169921875, 0.1165771484375, 0.08099365234375, 0.2110595703125, 0.440673828125, 0.2080078125, 0.27880859375, 0.252685546875, 0.42578125, 0.228515625, 0.19189453125, 0.0243988037109375, 0.486328125, 0.1112060546875, 0.00850677490234375, 0.11492919921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4dfeddc959811cc67a4b26f20105dfe7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14447909593582153, 0.22504933178424835, 0.3170582950115204, 0.3930477797985077, 0.017891723662614822, 0.316068172454834, 0.2987266778945923, 0.3961745500564575, 0.06389523297548294, 0.31363779306411743, 0.3010728061199188, 0.1526363492012024, 0.24591869115829468, 0.4579363465309143, 0.040433719754219055, 0.09831644594669342, 0.12079289555549622, 0.18953156471252441, 0.44472023844718933, 0.40810245275497437, 0.4983845353126526, 0.0743153840303421, 0.09344536811113358, 0.17137886583805084, 0.1177227720618248], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8691bbc27aabe3b3658570f9d5895932(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b375570a5ae54a82d1d5d3b5f09747f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8691bbc27aabe3b3658570f9d5895932
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2214794c643a789449fae8dd35feb671(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2903561592102051, 0.4833151400089264, 0.2322826087474823, 0.2563211917877197, 0.11915948987007141, 0.4669284224510193, 0.3455449044704437, 0.3407857120037079, 0.17749932408332825, 0.22497323155403137, 0.17287345230579376, 0.33694562315940857, 0.3125898241996765, 0.19170179963111877, 0.45389774441719055, 0.119353748857975, 0.41297677159309387, 0.47987037897109985, 0.28110089898109436], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a49fa40a3a8a50c8253199be8fcf18e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb4c4fdf62af5661d0f02256e20222a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1319580078125, 0.1822509765625, 0.391357421875, 0.434814453125, 0.08905029296875, 0.302001953125, 0.09124755859375, 0.42578125, 0.165283203125, 0.21826171875, 0.1715087890625, 0.3251953125, 0.44921875, 0.473388671875, 0.36865234375, 0.145751953125, 0.46142578125, 0.1583251953125, 0.330078125, 0.35791015625, 0.453369140625, 0.472900390625, 0.3740234375, 0.319091796875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_956e6a11bf67fbfc16e5621a84aa0182(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e24656ec8491358406281a111df6a8be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.396728515625, 0.07342529296875, 0.0269927978515625, 0.13134765625, 0.33935546875, 0.337158203125, 0.265869140625, 0.287353515625, 0.069580078125, 0.03167724609375, 0.2384033203125, 0.0533447265625, 0.1746826171875, 0.2216796875, 0.31787109375, 0.4951171875, 0.0526123046875, 0.0023174285888671875, 0.1204833984375, 0.143798828125, 0.259521484375, 0.282958984375, 0.483154296875, 0.1876220703125, 0.1260986328125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8767e91221af282dfe7f8ccca36a9307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7e578c766ab7c0c9766296259fedc3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8767e91221af282dfe7f8ccca36a9307
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a6a099854b33575dd9f19670b0d50d96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.297607421875, 0.404541015625, 0.07244873046875, 0.0391845703125, 0.274169921875, 0.2025146484375, 0.344970703125, 0.427001953125, 0.2344970703125, 0.434326171875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ff90bd29558a20a3c847760fd68cea7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.353759765625, 0.2459716796875, 0.357177734375, 0.144775390625, 0.0018548965454101562, 0.0850830078125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59695889e938e95ae834f5a94b2d562e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44116708636283875, 0.40889668464660645, 0.02812843583524227, 0.3930607736110687, 0.31480786204338074, 0.07763650268316269, 0.31899508833885193, 0.09109745174646378, 0.22430607676506042, 0.3885725736618042, 0.21393707394599915], dtype='float32').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c5051b63602724dd4be4d308d7db6fbd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05923925340175629, 0.1768149733543396, 0.3694913387298584, 0.128473162651062, 0.4603976011276245, 0.3921877145767212, 0.14668366312980652, 0.11923635751008987, 0.18382875621318817, 0.05135209858417511, 0.12223318964242935, 0.36389943957328796, 0.2431967854499817, 0.46152615547180176, 0.391181617975235, 0.18864759802818298, 0.18462835252285004, 0.29742738604545593, 0.4260246157646179, 0.15612390637397766, 0.2972465455532074, 0.48653313517570496, 0.2462243139743805, 0.00594351114705205, 0.2713284194469452, 0.23612156510353088, 0.31463029980659485, 0.12836973369121552], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83255a00849e3f44bad5d98dd430e480(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.225830078125, 0.2333984375, 0.3056640625, 0.252197265625, 0.033203125, 0.1275634765625, 0.2156982421875, 0.233642578125, 0.376220703125, 0.3046875, 0.3779296875, 0.46875, 0.0902099609375, 0.344970703125, 0.484130859375, 0.1397705078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3b5f5b340d4250fa98990146de30045(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04534541442990303, 0.47259265184402466, 0.4801519811153412, 0.1709805727005005, 0.30601370334625244, 0.3871726393699646, 0.12454281002283096, 0.49868565797805786, 0.4107637405395508, 0.18647050857543945, 0.49557551741600037, 0.42865386605262756, 0.0723130851984024, 0.48291337490081787, 0.25623732805252075, 0.12259140610694885, 0.2600233256816864, 0.3285447359085083, 0.4765965938568115, 0.060102008283138275], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ea054b600101b9911993e6f9bda6b06c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34228515625, 0.01021575927734375, 0.2254638671875, 0.234130859375, 0.46142578125, 0.00787353515625, 0.40283203125, 0.05645751953125, 0.318115234375, 0.4931640625, 0.2509765625, 0.035736083984375, 0.1832275390625, 0.373779296875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07341c333131b9f9a2d063cfdf50610c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.188720703125, 0.2298583984375, 0.177001953125, 0.326416015625, 0.067138671875, 0.0035839080810546875, 0.1993408203125, 0.1470947265625, 0.09521484375, 0.343994140625, 0.3427734375, 0.364990234375, 0.2056884765625, 0.483642578125, 0.054840087890625, 0.2113037109375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f290afff2995d709e6a877a96649870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49036532640457153, 0.14243312180042267, 0.178157240152359, 0.48577257990837097, 0.4695263206958771, 0.2156452089548111, 0.04455922916531563, 0.19136318564414978, 0.2841203510761261, 0.22167374193668365], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8918c1987962cf03c7e7c4c10397d4d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.363525390625, 0.329345703125, 0.474853515625, 0.10986328125, 0.1234130859375, 0.423583984375, 0.2626953125, 0.03515625, 0.41748046875, 0.370361328125, 0.30419921875, 0.345458984375, 0.1790771484375, 0.2237548828125, 0.051361083984375, 0.049713134765625, 0.2261962890625, 0.085693359375, 0.1201171875, 0.058746337890625, 0.31591796875, 0.358642578125, 0.22021484375, 0.459228515625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c789c65473dae7567c7bbbae7b44ed06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a4669374975354d2cb97d26aed373ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95cf2c755a667a4dac63c73f692c50d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a4669374975354d2cb97d26aed373ae
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd8241c566a455047884655bcd747773(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_067cad2cc557d137932e69220dc5a827(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4506d9aeb3a28a29e2cb1587f35b41e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_067cad2cc557d137932e69220dc5a827
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1792260855436325, 0.13918139040470123, 0.2516741156578064, 0.3452916741371155, 0.32142558693885803, 0.3696487843990326, 0.07694660872220993, 0.4141967296600342, 0.3817516267299652, 0.4759345054626465, 0.3158552348613739, 0.16224990785121918, 0.1976056545972824, 0.2905207574367523, 0.19288380444049835, 0.13570372760295868, 0.2069540023803711], dtype='float32').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07d71ad66b970d00844d98715eabdb80(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2528766393661499, 0.01319445762783289, 0.1347966194152832, 0.326980322599411, 0.44216403365135193, 0.2123897671699524, 0.16473816335201263, 0.36606186628341675, 0.06853391230106354, 0.1442202776670456, 0.32457512617111206, 0.3685743808746338, 0.22366195917129517, 0.30054911971092224, 0.21726712584495544, 0.2081817239522934, 0.3098437786102295, 0.42409786581993103, 0.34008732438087463, 0.12253466248512268, 0.06900083273649216, 0.013699175789952278, 0.3705541491508484, 0.4264310896396637, 0.007122363895177841, 0.3046925365924835, 0.21796275675296783, 0.3248489201068878, 0.3187479078769684, 0.4829891622066498], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8474c3a8b6bb4492b0d4a5768e7ae2f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2759634256362915, 0.03284356743097305, 0.3799794614315033, 0.22464632987976074, 0.08961459994316101, 0.35879677534103394, 0.42266321182250977, 0.1492169052362442, 0.029323048889636993, 0.028298374265432358, 0.4936501383781433, 0.09756864607334137, 0.02911563776433468, 0.10771647095680237, 0.3544699549674988, 0.36280059814453125], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_26e692bb753cd0c365fd32d94a2ed04a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06549072265625, 0.3525390625, 0.045745849609375, 0.44189453125, 0.260498046875, 0.334716796875, 0.1483154296875, 0.416015625, 0.142333984375, 0.11883544921875, 0.0022182464599609375, 0.12408447265625, 0.2015380859375, 0.4287109375, 0.1588134765625, 0.12249755859375, 0.414794921875, 0.2108154296875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8f91de5bbd73bbbd4a4d92929aa5c93d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1476035714149475, 0.14151084423065186, 0.33640044927597046, 0.10651013255119324, 0.28939417004585266, 0.44316622614860535, 0.2950211763381958, 0.20208388566970825, 0.14122223854064941, 0.46274298429489136, 0.26988622546195984, 0.004286782816052437, 0.3396480679512024, 0.04291490837931633, 0.06438133120536804, 0.26473137736320496], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e89193a235071e5fbe4dcd8a58a4ec3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40640297532081604, 0.003012178000062704, 0.0544479638338089, 0.26876506209373474, 0.24308110773563385, 0.32421550154685974, 0.4004487693309784, 0.007629780098795891, 0.1516123265028, 0.03853696212172508, 0.3468465507030487, 0.16120436787605286, 0.3941349685192108, 0.28477808833122253, 0.22165453433990479, 0.30354511737823486, 0.26373958587646484, 0.02893599309027195, 0.27925923466682434, 0.4214251935482025], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5473c06a15f064c740e0d45940b21495(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.308837890625, 0.1214599609375, 0.345703125, 0.07781982421875, 0.09735107421875, 0.2291259765625, 0.051849365234375, 0.4755859375, 0.08209228515625, 0.423583984375, 0.325439453125, 0.359130859375, 0.461181640625, 0.3017578125, 0.14794921875, 0.0689697265625, 0.2169189453125, 0.330810546875, 0.2783203125, 0.0396728515625, 0.300537109375, 0.296875, 0.0860595703125, 0.1883544921875, 0.2366943359375, 0.35400390625, 0.234619140625, 0.1461181640625, 0.024566650390625, 0.0623779296875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_507e117a86c0cddb0e79c20aa00548e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3895246088504791, 0.20630668103694916, 0.22987528145313263, 0.24017423391342163, 0.2504362165927887, 0.42547139525413513, 0.14037665724754333, 0.2367844581604004, 0.1927136778831482, 0.48346370458602905, 0.169182687997818, 0.14922548830509186], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b5d357b7ac4f97170c5fa18a48076dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09516860544681549, 0.158018559217453, 0.12226242572069168, 0.0032951098401099443, 0.24931861460208893, 0.06142815202474594, 0.3429765999317169, 0.04913937672972679, 0.18652240931987762, 0.3902023136615753, 0.3836876153945923, 0.11451846361160278, 0.43264326453208923, 0.145572692155838, 0.29727494716644287, 0.24010494351387024, 0.18243691325187683, 0.4674111306667328, 0.32357919216156006, 0.2617691457271576, 0.42897316813468933, 0.22587311267852783, 0.14048728346824646, 0.059548571705818176, 0.3178457021713257], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0356dd56499d6913e3eaadea95eabf15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05089497193694115, 0.21279683709144592, 0.32038214802742004, 0.19295606017112732, 0.24335287511348724, 0.14944078028202057, 0.025347460061311722, 0.04282352700829506, 0.08726457506418228, 0.45063260197639465], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28c66677b3cd70aef83d23165a3aa2e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.343505859375, 0.25732421875, 0.410400390625, 0.310791015625, 0.11529541015625, 0.295166015625, 0.3974609375, 0.1669921875, 0.09576416015625, 0.276123046875, 0.279052734375, 0.199462890625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6a821a31d0f97cf6ab5cd526e2daecc2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1120399460196495, 0.3474172353744507, 0.15735717117786407, 0.3697643280029297, 0.34664151072502136, 0.30928316712379456, 0.4105094075202942, 0.11123371124267578, 0.2315872311592102, 0.172934427857399, 0.12260999530553818, 0.4645058512687683, 0.13603155314922333, 0.19490033388137817], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c87658c88b38be3d08317dd10ad5566(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.496826171875, 0.422607421875, 0.151123046875, 0.25732421875, 0.0908203125, 0.05877685546875, 0.381591796875, 0.10198974609375, 0.2626953125, 0.387939453125, 0.257568359375, 0.2841796875, 0.347900390625, 0.331787109375, 0.306884765625, 0.4521484375, 0.261962890625, 0.0897216796875, 0.25537109375, 0.1871337890625, 0.1380615234375, 0.41259765625, 0.2958984375, 0.1383056640625, 0.1817626953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ebe5a62631a2ce47f189bf98882c779c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04530304670333862], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91daf7a0acc785b0c0a8cbaf1fbf1ecd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28857421875, 0.028106689453125, 0.462646484375, 0.458984375, 0.462158203125, 0.287353515625, 0.329833984375, 0.25634765625, 0.048828125, 0.098388671875, 0.250244140625, 0.4052734375, 0.31494140625, 0.4951171875, 0.471923828125, 0.38671875, 0.08990478515625, 0.1697998046875, 0.344970703125, 0.1690673828125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e468529f1535a33c9409f2054bb424c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.131103515625, 0.292724609375, 0.43115234375, 0.347412109375, 0.342041015625, 0.26953125, 0.40576171875, 0.331298828125, 0.41064453125, 0.415283203125, 0.188232421875, 0.061859130859375, 0.03564453125, 0.08172607421875, 0.24169921875, 0.27099609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa3e5a59561ffba1574e9a31768bfe2f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3270117938518524, 0.4867347180843353, 0.46729177236557007, 0.1354755014181137, 0.07636743038892746, 0.17689982056617737, 0.3347795009613037, 0.41432487964630127, 0.3976559638977051, 0.23028461635112762, 0.407785028219223, 0.45293477177619934, 0.17699076235294342, 0.10015202313661575, 0.36339429020881653, 0.1229977011680603, 0.49008676409721375, 0.20174619555473328, 0.28449374437332153, 0.313273549079895, 0.4673372209072113, 0.12436692416667938, 0.17414650321006775, 0.48879507184028625, 0.19504141807556152], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69c120559a5528899d9a34be44c654fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.014034343883395195, 0.09423190355300903, 0.3318938910961151, 0.23576472699642181, 0.4084778130054474, 0.3950774073600769, 0.019787130877375603, 0.2387574464082718, 0.07712026685476303, 0.41271698474884033, 0.10666175931692123, 0.046121224761009216, 0.41473665833473206, 0.3758322596549988, 0.033527128398418427, 0.2082725167274475], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d83717fefe3323e619653c548a5d17c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac0fdfed1e22dd9d77cd3630f2759bf1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45328786969184875], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45e3fbfbb5fab77261d59bcb371f4097(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03369140625, 0.3466796875, 0.2203369140625, 0.362548828125, 0.425537109375, 0.26904296875, 0.09051513671875, 0.443359375, 0.465576171875, 0.28515625, 0.466796875, 0.1728515625, 0.452880859375, 0.10516357421875, 0.4365234375, 0.174072265625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9653ad2224548621d0cb88ec428e9fc7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12230055779218674, 0.22031430900096893, 0.11279567331075668, 0.3567119240760803, 0.011588364839553833, 0.49916917085647583, 0.20431026816368103, 0.17021861672401428, 0.4467928409576416, 0.3560864329338074, 0.1913692206144333, 0.26538145542144775, 0.37491756677627563, 0.205098494887352, 0.1481393724679947, 0.03187604993581772, 0.3908768594264984, 0.4883589744567871, 0.08411958813667297, 0.20407547056674957, 0.056282270699739456, 0.14804981648921967, 0.06224924325942993, 0.20641884207725525], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc8e60b0ece2bf29b47edccdea1bad6d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0020352473948150873, 0.4049672484397888, 0.11921612173318863, 0.1354224532842636, 0.4394870698451996, 0.14782263338565826, 0.3816812336444855, 0.04940801486372948, 0.07313185185194016, 0.0656333714723587, 0.4157913625240326, 0.4662075340747833, 0.4148538410663605, 0.020161686465144157, 0.17740686237812042, 0.34023451805114746, 0.2478485405445099, 0.4539189040660858, 0.28967857360839844, 0.12145377695560455, 0.07453906536102295, 0.31932199001312256, 0.4248674511909485, 0.22710493206977844], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5268dff20576ed027f7a9fd3789f3d58(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.436767578125, 0.2236328125, 0.1573486328125, 0.42333984375, 0.1839599609375, 0.017578125, 0.1060791015625, 0.410888671875, 0.3017578125, 0.1334228515625, 0.3232421875, 0.298583984375, 0.01253509521484375, 0.343994140625, 0.132568359375, 0.0112762451171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45ad1f214b5e262b1605e2c7f4ebd0cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0602402500808239, 0.29499492049217224, 0.3697721064090729, 0.3320830166339874, 0.3222048282623291, 0.3079124093055725, 0.31388768553733826, 0.30659112334251404, 0.48348382115364075, 0.17624956369400024, 0.16577211022377014, 0.28978875279426575, 0.38498416543006897, 0.3803572356700897, 0.16228875517845154, 0.2733428180217743], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1bb3be9e1bc95ffe3679761078ea42ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17161455750465393, 0.11233289539813995, 0.40130725502967834, 0.3434206247329712, 0.20405937731266022, 0.07219839096069336, 0.029960468411445618, 0.2860744297504425, 0.11314631998538971, 0.16043469309806824, 0.04398154467344284, 0.3305460512638092, 0.030189303681254387, 0.017295528203248978, 0.17534032464027405, 0.45854437351226807], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa33550678e7d176397be08588d3336c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2078772634267807, 0.4042624533176422, 0.24823467433452606, 0.46231386065483093, 0.018580639734864235, 0.12272965908050537, 0.09207439422607422, 0.27508270740509033, 0.45164263248443604, 0.30256935954093933, 0.0958193987607956, 0.37354278564453125, 0.13097868859767914, 0.16490109264850616, 0.11811018735170364, 0.15278221666812897, 0.039145879447460175, 0.10233785957098007, 0.3620475232601166], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_430cb8689432b82249feb78a64447c14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09874746948480606, 0.21546392142772675, 0.24905610084533691, 0.10570976138114929, 0.35769373178482056, 0.09203951805830002, 0.36837875843048096, 0.27206969261169434, 0.22875727713108063, 0.34876030683517456, 0.02921927534043789, 0.3211933672428131, 0.4145130217075348, 0.1859903782606125], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ccc32bca7f9304e49d7626693d202143(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66bc82dc2ba0ab6f47a5bc2f0b176f41(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32373046875, 0.097900390625, 0.1617431640625, 0.361083984375, 0.472412109375, 0.1942138671875, 0.218017578125, 0.12274169921875, 0.070556640625, 0.331298828125, 0.177001953125, 0.048065185546875, 0.305419921875, 0.25537109375, 0.470703125, 0.16943359375, 0.045867919921875, 0.47265625, 0.45703125, 0.115478515625, 0.4140625, 0.1351318359375, 0.4443359375, 0.09783935546875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aaed42b003bf6ee52ef9df438b009531(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.419677734375, 0.375732421875, 0.28515625, 0.378173828125, 0.224365234375, 0.2440185546875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6395c4a83a0011ad8a25f96004faf4cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3063647150993347, 0.04492325708270073, 0.06120064854621887, 0.4482630789279938, 0.3733324706554413, 0.15297608077526093], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2be89ff6b6703bbc1dec274fb473f163(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03753662109375, 0.0213470458984375, 0.4716796875, 0.2015380859375, 0.130859375, 0.422607421875, 0.2308349609375, 0.265380859375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e1cc6651c752728788c1294b8e678e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29248046875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_80011ae3c9947884462af788cf7935fa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3173828125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e810b695e928546ef689bd49067b8f28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1734619140625, 0.408935546875, 0.07305908203125, 0.365478515625, 0.368408203125, 0.47021484375, 0.0849609375, 0.11981201171875, 0.466064453125, 0.357177734375, 0.3662109375, 0.344970703125, 0.36181640625, 0.1929931640625, 0.448486328125, 0.351318359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff99e0435bce53ae9f6e50ba2e145073(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.252685546875, 0.0828857421875, 0.172607421875, 0.260986328125, 0.388671875, 0.443603515625, 0.477294921875, 0.2325439453125, 0.12420654296875, 0.488037109375, 0.27587890625, 0.0823974609375, 0.495849609375, 0.1029052734375, 0.48486328125, 0.425537109375, 0.2412109375, 0.11761474609375, 0.4033203125, 0.02850341796875, 0.062347412109375, 0.376220703125, 0.39794921875, 0.09649658203125, 0.03759765625, 0.390380859375, 0.457763671875, 0.360595703125, 0.0853271484375, 0.167724609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78592e8ffafc624a8525332c0b300e4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d48d50520936e5613dbfcc6cc7f16d7d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78592e8ffafc624a8525332c0b300e4b
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_51c09fae2455981eea2e5f8673f607f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3639836609363556, 0.33055195212364197, 0.0883852019906044, 0.36858639121055603, 0.25664037466049194, 0.33002910017967224, 0.006736708804965019, 0.4338807165622711, 0.09026733040809631, 0.3126683235168457, 0.4741456210613251, 0.01523067057132721, 0.3642289936542511, 0.4447554051876068, 0.06674132496118546, 0.47780272364616394], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_466ebd3999499ea16265d555fbf6f553(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46380922198295593, 0.337340384721756, 0.1216869205236435, 0.2604825496673584, 0.13053859770298004, 0.2941421866416931], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25de37d09b738f7a8bc2ee9e5d452b4b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36962890625, 0.134521484375, 0.146240234375, 0.2783203125, 0.380615234375, 0.480224609375, 0.4599609375, 0.33447265625, 0.07305908203125, 0.25244140625, 0.080810546875, 0.188232421875, 0.052276611328125, 0.1883544921875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1425a890bc7c9490999db054c6340b4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.006244659423828125, 0.1390380859375, 0.1304931640625, 0.0948486328125, 0.42041015625, 0.0382080078125, 0.2127685546875, 0.040069580078125, 0.306396484375, 0.0213775634765625, 0.1842041015625, 0.321533203125, 0.1435546875, 0.279296875, 0.139404296875, 0.497802734375, 0.16455078125, 0.309326171875, 0.283203125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44e592225ca5862e283b56e79e4d954e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1375732421875, 0.01085662841796875, 0.052764892578125, 0.294677734375, 0.004253387451171875, 0.36962890625, 0.03814697265625, 0.02886962890625, 0.1591796875, 0.26806640625, 0.01654052734375, 0.166259765625, 0.044891357421875, 0.1072998046875, 0.385986328125, 0.1185302734375, 0.42626953125, 0.391845703125, 0.00933837890625, 0.045928955078125, 0.269287109375, 0.372802734375, 0.08673095703125, 0.2529296875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ab22a2a41c29a742e2068924a415d54(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.421648234128952, 0.16332495212554932, 0.38413432240486145, 0.17126722633838654, 0.326000839471817, 0.3583829700946808, 0.49039530754089355, 0.26249241828918457, 0.0617416687309742, 0.30237317085266113, 0.04925020411610603, 0.16611160337924957, 0.08055400848388672, 0.1993781328201294, 0.30379071831703186, 0.32753586769104004, 0.4219426214694977, 0.0503096729516983], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44b36923e4001160e6926c50c14ccfb8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48190417885780334, 0.150840625166893, 0.37229618430137634, 0.061028823256492615, 0.0834222212433815, 0.27323395013809204, 0.4131709635257721, 0.18018028140068054, 0.03736897185444832, 0.2728430926799774, 0.3493002653121948, 0.12659509479999542, 0.14551489055156708, 0.020430371165275574, 0.01824762672185898, 0.10558316111564636, 0.1040106862783432, 0.3082506060600281, 0.1218951866030693, 0.49063271284103394, 0.4016207456588745, 0.2568642795085907, 0.45274582505226135, 0.018215686082839966], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b28db5105fe0f37f3b20d2d826623f19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2935b7835b0caa3991aa089c9bdd3273(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00421142578125, 0.406982421875, 0.19091796875, 0.11627197265625, 0.06671142578125, 0.423828125, 0.007701873779296875, 0.381591796875, 0.45947265625, 0.351806640625, 0.0966796875, 0.47998046875, 0.11822509765625, 0.07647705078125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d4008d0a13fc90c563a49b14cb4675c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0197601318359375, 0.2037353515625, 0.429931640625, 0.1558837890625, 0.1995849609375, 0.442626953125, 0.340576171875, 0.191162109375, 0.380126953125, 0.2646484375, 0.1624755859375, 0.12042236328125], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39dfa68603b06171b6a9e2792b32616f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08184814453125, 0.178955078125, 0.283203125, 0.46533203125, 0.0677490234375, 0.038970947265625, 0.3095703125, 0.1585693359375, 0.1578369140625, 0.417236328125, 0.373779296875, 0.492919921875, 0.0347900390625, 0.477783203125, 0.1619873046875, 0.2197265625, 0.04559326171875, 0.2330322265625, 0.223876953125, 0.134765625, 0.292724609375, 0.10308837890625, 0.0015954971313476562, 0.04571533203125, 0.045135498046875, 0.1182861328125, 0.373291015625, 0.227783203125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b2f464cdc66fdec094272df965b5f31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.440395325422287, 0.3323647379875183, 0.11606577783823013, 0.35740652680397034, 0.3818260431289673, 0.1817195862531662, 0.34079062938690186, 0.20306694507598877, 0.38271674513816833, 0.15491148829460144, 0.2564544677734375, 0.4506362974643707, 0.3284822702407837, 0.4683775007724762, 0.07013379782438278, 0.04167868569493294, 0.4690592288970947, 0.16718128323554993, 0.45682957768440247, 0.1317501664161682, 0.25598669052124023, 0.10527023673057556, 0.33512306213378906, 0.2776833772659302, 0.09230446070432663], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6722b6b1bfc176f1a339f7162dd3f577(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.203857421875, 0.27734375, 0.13671875, 0.34423828125, 0.486572265625, 0.2340087890625, 0.491455078125, 0.134765625, 0.08209228515625, 0.09869384765625, 0.07122802734375, 0.260009765625, 0.1728515625, 0.11553955078125, 0.29150390625, 0.08868408203125, 0.036865234375, 0.1773681640625, 0.326171875, 0.1517333984375, 0.2100830078125, 0.09674072265625, 0.0399169921875, 0.478271484375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9046cfbd633f09787a32b86d058cc07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_08f3ae8884b52e49e969a83489687ab8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9046cfbd633f09787a32b86d058cc07
    def get_inputs(self):
        return [
            paddle.uniform([1, 8, 3, 224, 224], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 224, 224], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7210b72570b15ba395a4594719e85c34(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358642578125, 0.1063232421875, 0.44921875, 0.1849365234375, 0.2274169921875, 0.1131591796875, 0.30859375, 0.1290283203125, 0.050445556640625, 0.44970703125, 0.283447265625, 0.287841796875, 0.367431640625, 0.385498046875, 0.1937255859375, 0.2000732421875, 0.2440185546875, 0.05560302734375, 0.302001953125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f47cb9f1885d02f1355f709a35d541a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2819414436817169, 0.21774157881736755, 0.45421597361564636, 0.14419867098331451, 0.2572818100452423, 0.336924284696579, 0.25014570355415344, 0.33306431770324707, 0.0013256845995783806, 0.051385048776865005, 0.4289449453353882, 0.42168334126472473, 0.2802979052066803, 0.04459093138575554, 0.14432311058044434, 0.07771943509578705, 0.01375393383204937, 0.294950008392334, 0.3606240153312683], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8bf1a0f4cf53d1ff0a3e466b775e6b15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45263671875, 0.092041015625, 0.05535888671875, 0.4033203125, 0.1240234375, 0.10308837890625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06f6eb40da86b955e9cde4158dfee2a3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07696533203125, 0.142578125, 0.006473541259765625, 0.312744140625, 0.0966796875, 0.04180908203125, 0.1451416015625, 0.1744384765625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7f3df0b56c7d569aa8d9c690fef7ed53(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47983840107917786, 0.3436623811721802, 0.49584129452705383, 0.023087384179234505, 0.4528786242008209, 0.06472095102071762, 0.22064778208732605, 0.08493155986070633, 0.2578336298465729, 0.3624224364757538, 0.19485622644424438, 0.45607414841651917, 0.19000297784805298, 0.06775977462530136, 0.39861369132995605, 0.25590410828590393, 0.43037551641464233, 0.30613186955451965, 0.299980491399765, 0.02743113972246647, 0.13335244357585907, 0.14166656136512756, 0.4903416931629181, 0.2773354947566986], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d65fc3b535a614bf7ba889d61fffb07d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07970688492059708, 0.4332345426082611, 0.0023336894810199738, 0.4985203444957733, 0.2315712422132492, 0.025256255641579628], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7a8d02c7a767d62170ef8d2537a824a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33544921875, 0.416259765625, 0.07171630859375, 0.275634765625, 0.342529296875, 0.1270751953125, 0.03863525390625, 0.388427734375, 0.047271728515625, 0.25390625, 0.3720703125, 0.15673828125, 0.289794921875, 0.406005859375, 0.132568359375, 0.0887451171875, 0.1661376953125, 0.1043701171875, 0.07415771484375, 0.14111328125, 0.41259765625, 0.02593994140625, 0.49560546875, 0.154296875, 0.2098388671875, 0.2421875, 0.044189453125, 0.00785064697265625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e12d7aef4c5bb9b53f90a0d90aa613b7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4761146306991577, 0.06737438589334488, 0.27801579236984253, 0.18490709364414215, 0.4664938449859619, 0.3739866316318512, 0.1355750411748886, 0.043245963752269745, 0.0638510063290596, 0.10013531893491745, 0.08436442166566849, 0.27660053968429565, 0.2655121386051178, 0.437418133020401, 0.15186341106891632, 0.348021000623703, 0.16681261360645294, 0.3699112832546234, 0.18371932208538055, 0.2723098695278168, 0.0458793081343174, 0.044506460428237915, 0.0547175407409668, 0.4702809453010559, 0.020296873524785042], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_700c9ca71252f2b97610d7b9c52a5e57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.134521484375, 0.02642822265625, 0.161865234375, 0.338134765625, 0.053375244140625, 0.490966796875, 0.385986328125, 0.1397705078125, 0.03851318359375, 0.44189453125, 0.236328125, 0.443115234375, 0.11688232421875, 0.2958984375, 0.279052734375, 0.140625, 0.4248046875, 0.2484130859375, 0.13134765625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e89c1a4654305df730ae67505f687f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.289794921875, 0.479736328125, 0.4794921875, 0.312744140625, 0.021453857421875, 0.1253662109375, 0.451171875, 0.253662109375, 0.13916015625, 0.000946044921875, 0.0230712890625, 0.3271484375, 0.317626953125, 0.15380859375, 0.36083984375, 0.090087890625, 0.07513427734375, 0.400634765625, 0.45361328125, 0.046234130859375, 0.317138671875, 0.464599609375, 0.2149658203125, 0.08673095703125, 0.1295166015625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9654e87a4e4b9402c570501f25b7d4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09019967913627625, 0.4519723653793335, 0.23683197796344757, 0.15745903551578522, 0.11812447011470795, 0.3207441568374634, 0.1202796995639801, 0.051676195114851], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00890478c6b71fff726a9a4cc8b3d061(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3125, 0.4111328125, 0.44873046875, 0.2442626953125, 0.12091064453125, 0.31396484375, 0.1278076171875, 0.484130859375, 0.125244140625, 0.1417236328125, 0.037811279296875, 0.35302734375, 0.11749267578125, 0.1322021484375, 0.498291015625, 0.06854248046875, 0.2003173828125, 0.2410888671875, 0.031494140625, 0.36767578125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d8db8259d6aabbe2c0cced48a6c7795(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06980956345796585, 0.007656154688447714, 0.38505610823631287, 0.04543229937553406, 0.29254114627838135, 0.46372976899147034], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2522824646df40a9a5ae3d7d3808ab88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0970458984375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_182da03b49d0318ef7caae5290ae12e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016082763671875, 0.44921875, 0.381103515625, 0.303955078125, 0.442626953125, 0.2135009765625, 0.484619140625, 0.1396484375, 0.2225341796875, 0.054718017578125, 0.278564453125, 0.306640625, 0.39404296875, 0.117919921875, 0.2183837890625, 0.108154296875, 0.429443359375, 0.07330322265625, 0.431884765625, 0.0498046875, 0.0236053466796875, 0.333984375, 0.4501953125, 0.1334228515625, 0.168212890625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a75b1013a77ab8c1129211042aa5c149(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1705322265625, 0.412353515625, 0.41162109375, 0.42626953125, 0.3447265625, 0.29345703125, 0.418212890625, 0.371826171875, 0.40380859375, 0.25048828125, 0.1812744140625, 0.0195159912109375, 0.1923828125, 0.08990478515625, 0.403076171875, 0.2529296875, 0.487060546875, 0.37841796875, 0.048919677734375, 0.2666015625, 0.2401123046875, 0.421630859375, 0.416748046875, 0.02203369140625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c04a15fd54c0c5e2f0e258c7354e096d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1724744737148285, 0.037624187767505646, 0.2733626067638397, 0.410227507352829, 0.3646295666694641, 0.39908987283706665, 0.038344480097293854, 0.41730138659477234, 0.12586143612861633, 0.03380759060382843, 0.481781929731369, 0.22366853058338165, 0.1871427595615387, 0.4168210029602051, 0.025473153218626976, 0.08512790501117706], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d2be9c979abf5313fd2622d580724e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34764301776885986, 0.4718550145626068, 0.3910321295261383, 0.35229986906051636, 0.2894871234893799, 0.28341439366340637, 0.16003544628620148, 0.32223576307296753, 0.30607327818870544, 0.2418695092201233, 0.03247862309217453, 0.31344202160835266], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68d86b63e4e11042d1d20f9704f03016(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.389404296875, 0.11810302734375, 0.44580078125, 0.0016040802001953125, 0.0936279296875, 0.346923828125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b3230111d3aee57d79788d57cb99159(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ab43d7e073db67176a4fe7cd500fa8f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b3230111d3aee57d79788d57cb99159
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e914c4b109ac1d9eb667bb4227f35981(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4287109375, 0.33203125, 0.2308349609375, 0.47607421875, 0.499755859375, 0.073486328125, 0.049530029296875, 0.229248046875, 0.4033203125, 0.39990234375, 0.114990234375, 0.089111328125, 0.042724609375, 0.3447265625, 0.01715087890625, 0.365966796875, 0.48291015625, 0.04296875, 0.29638671875, 0.0859375, 0.251953125, 0.01309967041015625, 0.11236572265625, 0.057098388671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42e143eae0143fbf2bb7ada29c736236(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.462646484375, 0.1712646484375, 0.1292724609375, 0.4658203125, 0.10015869140625, 0.332763671875, 0.3125, 0.013641357421875, 0.038970947265625, 0.281494140625, 0.3857421875, 0.2034912109375, 0.269287109375, 0.00832366943359375, 0.25927734375, 0.14013671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2fa0f9bac2603954345e5793f40e36d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18888990581035614, 0.40581071376800537, 0.28803879022598267, 0.2908206880092621, 0.40493783354759216, 0.09780456125736237, 0.29469090700149536, 0.2620690166950226, 0.4849998950958252, 0.444098562002182, 0.24941329658031464, 0.29262199997901917, 0.2912331223487854, 0.47589007019996643, 0.018077341839671135, 0.2484981268644333, 0.01646401360630989, 0.4415944218635559, 0.12480401992797852, 0.3476956784725189, 0.3239511549472809, 0.04753515124320984, 0.4729578197002411, 0.13414610922336578, 0.4432474374771118, 0.02938803657889366, 0.18608522415161133, 0.3757748305797577, 0.187188521027565, 0.2897741198539734], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b95024d5f691233cc9bedec332bac07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_daeb1353f697d4d8ee3157bead8c6701(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b95024d5f691233cc9bedec332bac07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71781ebabfebd7eb837115f8c4a46803(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16785039007663727, 0.39706215262413025, 0.081473708152771, 0.31678447127342224, 0.2742161452770233, 0.44891780614852905, 0.033029504120349884, 0.34963157773017883, 0.20819678902626038, 0.03825771063566208, 0.49684950709342957, 0.3807002604007721, 0.4254787862300873, 0.10140236467123032, 0.1037534698843956, 0.23922878503799438, 0.2591868042945862, 0.20824672281742096, 0.1993400603532791, 0.45886972546577454, 0.45577290654182434, 0.2206004559993744, 0.33635812997817993, 0.06969760358333588, 0.4019593894481659, 0.37598830461502075, 0.2785349488258362], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4683be28beb80016350990dbcaf95e55(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16366328299045563, 0.41358834505081177, 0.15676525235176086, 0.23824456334114075], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48776fadf97d6f37d068ca0e2ec328d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.298095703125, 0.12646484375, 0.2142333984375, 0.228271484375, 0.0070953369140625, 0.0265960693359375, 0.25, 0.06982421875, 0.1156005859375, 0.268798828125, 0.111572265625, 0.175537109375, 0.43994140625, 0.08184814453125, 0.2423095703125, 0.4404296875, 0.256591796875, 0.4990234375, 0.429443359375, 0.07952880859375, 0.496826171875, 0.186767578125, 0.410888671875, 0.0121917724609375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_40419c7aafba716ca0296e78c4a87c0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.455078125, 0.43603515625, 0.002223968505859375, 0.418212890625, 0.4228515625, 0.447021484375, 0.08868408203125, 0.0056304931640625, 0.23828125, 0.2073974609375, 0.20654296875, 0.1466064453125, 0.41552734375, 0.37841796875, 0.1046142578125, 0.438720703125, 0.126708984375, 0.058990478515625, 0.03692626953125, 0.3662109375, 0.0601806640625, 0.09771728515625, 0.1990966796875, 0.348388671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b54062f06301fc41a8e0e9c347a9077(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40863701701164246, 0.18067385256290436, 0.3314780294895172, 0.411893367767334, 0.408578097820282, 0.006583865731954575, 0.06777048110961914, 0.36051255464553833, 0.09468931704759598, 0.41677162051200867, 0.2055692821741104, 0.3587036728858948, 0.20892053842544556, 0.20504455268383026, 0.32739439606666565, 0.37343481183052063, 0.4994308054447174, 0.23175133764743805, 0.15897850692272186, 0.23158423602581024, 0.11302387714385986, 0.02154671400785446, 0.2607508897781372, 0.28738880157470703, 0.21328365802764893], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c9d778db602ef01f257804549c01050(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327392578125, 0.313720703125, 0.1334228515625, 0.387451171875, 0.478759765625, 0.11431884765625, 0.0032901763916015625, 0.387451171875, 0.3759765625, 0.03515625, 0.38671875, 0.1995849609375, 0.287109375, 0.4365234375, 0.353271484375, 0.030303955078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d75e1976db09e50c8b926c41ad03115c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4599609375, 0.37646484375, 0.379638671875, 0.2919921875, 0.414306640625, 0.1981201171875, 0.165283203125, 0.413818359375, 0.131103515625, 0.2498779296875, 0.1285400390625, 0.3427734375, 0.29931640625, 0.3251953125, 0.48291015625, 0.3203125, 0.3486328125, 0.478515625, 0.1339111328125, 0.08941650390625, 0.11712646484375, 0.1138916015625, 0.06842041015625, 0.24951171875, 0.425048828125, 0.121826171875, 0.139404296875, 0.08917236328125, 0.25146484375, 0.0364990234375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d03d9e6c94f474d58a37b0693df5374(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.284557968378067, 0.3849438428878784], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d69fcc4a7f3446abd6dcf6c5a7fdf524(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1107170507311821, 0.2146105319261551, 0.3335481286048889, 0.24561083316802979, 0.2487792670726776, 0.18210287392139435, 0.09873326122760773, 0.39623144268989563, 0.2529643177986145, 0.2363380640745163, 0.47207748889923096, 0.350117027759552, 0.2778918147087097, 0.3768419623374939, 0.27207857370376587, 0.38653674721717834, 0.3729383945465088, 0.12011837959289551, 0.2522147595882416, 0.08485201746225357, 0.36246728897094727, 0.17335203289985657, 0.35434022545814514, 0.4944768249988556, 0.1082303449511528], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef6c415f1215acbbb8b073377b3bc08c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3376973569393158, 0.4792925715446472, 0.4748590886592865, 0.025982744991779327, 0.0346035398542881, 0.11475642025470734, 0.33875221014022827, 0.22651340067386627, 0.4448382258415222, 0.35822802782058716, 0.39576035737991333, 0.11553839594125748, 0.29374247789382935, 0.31506258249282837, 0.02641982212662697, 0.10975698381662369, 0.30857768654823303, 0.4864804446697235, 0.011217058636248112, 0.0323651097714901, 0.48175838589668274, 0.3939070999622345, 0.392124205827713, 0.4577716290950775, 0.18319982290267944, 0.12505608797073364, 0.4339706301689148, 0.26765087246894836], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_781c01b507f729ca7ec7ddfb105c25bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47684502601623535, 0.3354444205760956, 0.4091434180736542, 0.20580409467220306, 0.47122156620025635, 0.4027637243270874, 0.012139768339693546, 0.10971371829509735, 0.473923921585083, 0.14608053863048553, 0.23406772315502167, 0.27860021591186523, 0.19913411140441895, 0.21134230494499207, 0.07100895047187805, 0.1322706788778305, 0.3168961703777313, 0.0003270656452514231, 0.39053329825401306, 0.38704124093055725, 0.3218771517276764, 0.16818849742412567, 0.2141251564025879, 0.027718085795640945], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9033157e7bfcc3ac370762db31b0892d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039276123046875, 0.458740234375, 0.053955078125, 0.45458984375, 0.435791015625, 0.3359375, 0.004436492919921875, 0.2198486328125, 0.47119140625, 0.2447509765625, 0.2301025390625, 0.302978515625, 0.299560546875, 0.0953369140625, 0.318359375, 0.28369140625, 0.026947021484375, 0.372802734375, 0.246826171875, 0.10894775390625, 0.412841796875, 0.043365478515625, 0.466064453125, 0.10577392578125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b87d340fc497c350fefe7903860770d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04689919203519821, 0.33582568168640137, 0.15208426117897034, 0.03334885835647583, 0.13898152112960815, 0.16542239487171173, 0.38341858983039856, 0.19855351746082306, 0.449811190366745, 0.1209566742181778, 0.1512276828289032, 0.4711734652519226, 0.2531746029853821, 0.20701205730438232, 0.4472639262676239], dtype='float32').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_73348ee52662eb3cd42534d1697d67e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ef4312c7c08adaee4ea8f82d2d0a91c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_73348ee52662eb3cd42534d1697d67e4
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15185365080833435, 0.4389134347438812, 0.2702150046825409, 0.2379055619239807, 0.18676693737506866, 0.255058616399765, 0.04989549145102501], dtype='float32').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8041cffe064f009a92358c4a4b5b5f2f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1859130859375, 0.1396484375, 0.3125, 0.492919921875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb2c16fbc4ddad61bb6bce701b22c958(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48681640625, 0.1990966796875, 0.07275390625, 0.2359619140625, 0.222900390625, 0.47705078125, 0.343017578125, 0.0157012939453125, 0.21142578125, 0.3388671875, 0.27392578125, 0.1126708984375, 0.140380859375, 0.09832763671875, 0.27490234375, 0.381103515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb4f6ee3de01bd814f552a6d85d729e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f6a851ed3d5b81e3b297ff74f29a53d2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25537109375, 0.2666015625, 0.1923828125, 0.14501953125, 0.277587890625, 0.2471923828125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c65cf009b9de8efce9668028d181e4a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3470328152179718, 0.33911675214767456, 0.43238478899002075, 0.011248046532273293, 0.3962067663669586, 0.2830522358417511, 0.325203001499176, 0.41810163855552673], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e692a75b58ddef618f5e7cebd3a08419(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3994140625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6f8610dedbd86099190071dd8de14c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4a0098aaf2358d23db4fb77abfaa0d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6f8610dedbd86099190071dd8de14c8b
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df7339978207b900f3ad9570fc311692(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a90d9cb6eb2175fb92342421defe99d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df7339978207b900f3ad9570fc311692
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d920ece792fe1c507bff8af682113ff3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbd3aeb0c38758804f67d745a64232be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d920ece792fe1c507bff8af682113ff3
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9fe3d204669e773ccfa2d558a08706c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ece2919536ae0172a3c47d1c13a0850(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c34f96949dd554c857b67f1590cc019(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad6281e844088fcef025fa5cfb73402f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c34f96949dd554c857b67f1590cc019
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38ffdd04fba913e3645cadf6e82a66cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8b6e2b845c1303e121c89d64f7f1c6d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84caa862a28ca76747da1d52496056cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b6e2b845c1303e121c89d64f7f1c6d
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b323fa790003ba2374ea92122a7648e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aea4c82d1095f2d6307f87ef6e819ba8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b323fa790003ba2374ea92122a7648e2
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3deef7ce55df14091bd0f69ecf9ed4a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_590b776ac6411426b1b7d195238cc930(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc87dfbf59f9460b76b1837aa1cba6eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_590b776ac6411426b1b7d195238cc930
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10d867209e276180edb4ec78ad7178cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_432d1ebffffa755e49510ed60359a1b6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0789cc5e675726f3f1e91ff1f1360959(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3759765625, 0.424072265625, 0.449462890625, 0.0924072265625, 0.2191162109375, 0.28515625, 0.03338623046875, 0.43310546875, 0.335205078125, 0.4365234375, 0.275390625, 0.30517578125, 0.1539306640625, 0.403076171875, 0.24169921875, 0.385009765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88df5e4cb2d1bb7057159c657167165c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0351c58076303cd37c154517e1f6d9b1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3965635895729065, 0.16649548709392548, 0.07379059493541718, 0.28799471259117126, 0.07671383768320084, 0.30779895186424255, 0.43640223145484924, 0.09340911358594894, 0.44809794425964355, 0.29580754041671753, 0.28075507283210754, 0.17665840685367584, 0.1403399109840393, 0.2733430862426758, 0.11324454843997955, 0.05740761756896973], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12a47130cc30746386ca79ed37757e08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0ec5d97b7dde4b94156985566db3079(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d774f2c411227a48ca3762b29ac90db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0ec5d97b7dde4b94156985566db3079
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b7646da19f75e214a5656fc8f79e163(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62341c630bc5fb1b1161047edcd20254(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b7646da19f75e214a5656fc8f79e163
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ec75e0a1eac60570675662167fc12e2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ec47bd98ac432c65daee0242b7b66aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ec75e0a1eac60570675662167fc12e2e
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df31c92b16b89bfe93d32d8431a0373f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24e22a46762822f55396db1ab857f972(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.004421700723469257, 0.17597493529319763, 0.20536407828330994, 0.12479618191719055, 0.31193476915359497, 0.4078334867954254, 0.0485972985625267, 0.318244606256485, 0.20698998868465424, 0.22152984142303467, 0.30241134762763977, 0.20769068598747253, 0.17816577851772308, 0.008036965504288673, 0.3837926387786865, 0.12541545927524567], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83dcd5fab93bb5f84a76a64310af0f44(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2197076678276062, 0.0940999910235405, 0.11066421121358871, 0.22640207409858704, 0.11810009926557541, 0.3645334541797638, 0.15809446573257446, 0.05676616355776787, 0.21948941051959991, 0.2263626754283905, 0.17605148255825043, 0.26195064187049866, 0.13877326250076294, 0.2215796262025833, 0.04470398649573326, 0.1336459070444107], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f023ced072d2f471e4a0a8570ca5a102(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.438720703125, 0.460205078125, 0.2459716796875, 0.09722900390625, 0.27685546875, 0.26904296875, 0.345458984375, 0.10101318359375, 0.232177734375, 0.216552734375, 0.09783935546875, 0.2486572265625, 0.0176239013671875, 0.45849609375, 0.203857421875, 0.318115234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ca960dc3c6de5aaa288fcbdc5d72339(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2494c54ef94d2dfde06c2fbc02c9e3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0ba4caa14fcac619aedbe54f4b95ffa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99db288df05fe60e2ba2083c833c3832(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5980dd3150a72753bf57580b2adb7ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99db288df05fe60e2ba2083c833c3832
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53fda62ef123d2a8eef234ce21380e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44990f0c5021549153b6934ce2d94a88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8d7f61e4503b0744a9ec2601321a934(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41283097863197327, 0.039540309458971024, 0.3393658697605133, 0.4357337951660156, 0.39555251598358154, 0.17265549302101135, 0.13145001232624054, 0.0489308126270771, 0.26320314407348633, 0.3439194858074188, 0.27374768257141113, 0.4526122212409973, 0.14021317660808563, 0.27623000741004944, 0.04560655727982521, 0.48507118225097656, 0.33947816491127014, 0.06395615637302399, 0.2987542152404785, 0.03583494946360588], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b6de5479dfd25b7f72ad11f4c39fd4a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_098a3ee94b6d533e7330524d22c827d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39c230be945281668f6f15091a83830d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_098a3ee94b6d533e7330524d22c827d6
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c63579fb15baf02867c878fcb9a7047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7a920522a38c0eca0a1f29da0c36b441(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11322021484375, 0.41552734375, 0.348876953125, 0.1533203125, 0.040618896484375, 0.0869140625, 0.11541748046875, 0.3154296875, 0.265625, 0.1796875, 0.31494140625, 0.0631103515625, 0.06353759765625, 0.01372528076171875, 0.255126953125, 0.29248046875, 0.40234375, 0.0204010009765625, 0.427490234375, 0.322265625, 0.370361328125, 0.2012939453125, 0.296875, 0.135986328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6658b3440b5d14e7f6f2f5bfbe6169c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1436767578125, 0.415771484375, 0.11724853515625, 0.0029354095458984375, 0.080322265625, 0.198974609375, 0.1046142578125, 0.408935546875, 0.2115478515625, 0.364501953125, 0.047454833984375, 0.269287109375, 0.477783203125, 0.105712890625, 0.29296875, 0.1409912109375, 0.385009765625, 0.292236328125, 0.4892578125, 0.314697265625, 0.37060546875, 0.354736328125, 0.438232421875, 0.382080078125, 0.29833984375, 0.455078125, 0.37255859375, 0.09124755859375, 0.493408203125, 0.478271484375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8991a76fda54945be8e52371ed78d619(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ebd43d618bf1fd2f4c22fdaed0b2efb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8991a76fda54945be8e52371ed78d619
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d833ddeb5fb9006394c9bc92da9c97d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2288818359375, 0.3662109375, 0.31103515625, 0.2415771484375, 0.322021484375, 0.1295166015625, 0.309814453125, 0.390625, 0.0167236328125, 0.49462890625, 0.435791015625, 0.2666015625, 0.1776123046875, 0.34619140625, 0.342529296875, 0.366943359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d8d3a8b9f64d7a3230fa7435759c2f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14461e8370acd22916b1fd1b276296b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77b24f1107af22aa9a5c0c6be7c8bac4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14461e8370acd22916b1fd1b276296b8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d780af52c8e1efef99794179a2a19b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_264d8b735ff5563a1bcfcc0d574b5216(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27512243390083313, 0.12792038917541504, 0.4424717128276825, 0.01762736216187477, 0.18235895037651062, 0.262273907661438, 0.3703030049800873, 0.4140661656856537, 0.16937898099422455, 0.4702371656894684, 0.3926743268966675, 0.26980847120285034, 0.11969484388828278, 0.3669740855693817, 0.19235126674175262, 0.3662109076976776, 0.3443688154220581, 0.33828720450401306, 0.06299235671758652, 0.4461681842803955, 0.11929910629987717, 0.25478121638298035, 0.21362519264221191, 0.23096798360347748], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b752edbcdf8035fddd6b7e752cd702db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d00d214de24836ff01c88f3cd35b698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d55e15a7824c4568ce536ba9218b649d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a16aa590a5209e043dec72f269a26b15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d55e15a7824c4568ce536ba9218b649d
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9474d0c396e1c3653c19f71e073595d3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f811c567f8cd54d87c2a0559fa5ad19c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9474d0c396e1c3653c19f71e073595d3
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_932705cbd1e4d97aa9c055b6a1f9d156(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4e19a10a04b542f3b1b602a14162fd7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3894188404083252, 0.10100984573364258, 0.15461990237236023, 0.12252016365528107, 0.49874627590179443, 0.2167384773492813, 0.312262624502182, 0.22780504822731018, 0.18858683109283447, 0.23878243565559387, 0.12526704370975494, 0.08298668265342712, 0.012588167563080788, 0.07618390768766403, 0.1616743952035904, 0.2550129294395447, 0.04985056817531586, 0.3654599189758301, 0.3870098292827606], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9234c05eb679f10226c37a6045040d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6bf3f3703bf1c8d2d909a5d7046f18d5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d6efce4517a206081b1f5b0de8cdec0f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6bf3f3703bf1c8d2d909a5d7046f18d5
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5afc82ef84e0ebcb51a71a125e74aa36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b348e8000ef970ecd9caafceb501b8db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_779698d6e4e98b7800d4f2d1b2d42a50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b348e8000ef970ecd9caafceb501b8db
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e7ca7b0a56773b8a0d16a1549497593(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3019236922264099, 0.4000304937362671, 0.30721884965896606, 0.23254337906837463, 0.3165130019187927, 0.0046506840735673904, 0.29266828298568726, 0.24605120718479156, 0.45917004346847534, 0.35807517170906067, 0.4773777425289154, 0.1580287218093872, 0.16692239046096802, 0.07836787402629852, 0.2783706486225128, 0.09936483204364777], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ebd282ab24ff5b7a740b3bb29266af5b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06641124933958054, 0.2291320562362671, 0.29542556405067444, 0.08626353740692139, 0.1479022204875946, 0.3210790455341339, 0.2838164269924164, 0.05478566884994507, 0.2834378778934479, 0.04665027931332588, 0.0899965763092041, 0.24612689018249512, 0.10560344904661179, 0.12056343257427216, 0.08719367533922195, 0.1902407705783844], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_220e088420c2368699fe83426ee21471(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d1946e9638695901df4a8160c5ce284(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12610386312007904, 0.46161559224128723, 0.1611277312040329, 0.00017604202730581164, 0.4493936598300934, 0.03547762706875801, 0.4633723795413971, 0.19782070815563202, 0.2897692620754242, 0.2394517958164215, 0.20263709127902985, 0.4281943738460541, 0.2172703593969345, 0.3084319829940796, 0.35721078515052795, 0.10594075173139572, 0.4198846220970154, 0.2274494767189026, 0.494407594203949, 0.43359866738319397, 0.4165443778038025, 0.04102635756134987, 0.16366709768772125, 0.30164405703544617], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9671dd47f3820cadf432b99d5bade88f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c23017e48d87261907de5766eca4633b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9671dd47f3820cadf432b99d5bade88f
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cccb2b9e947e032b6f30d953e24d25f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5947308f7c3db5a3d07029893c7127cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cacb44bfec0254417b6ef3865acea244(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5947308f7c3db5a3d07029893c7127cc
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5614ac4cc7552548d9023b50584fb9f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33349403738975525, 0.061475999653339386, 0.1446361094713211, 0.28618475794792175, 0.12243352830410004, 0.33812767267227173, 0.4382650852203369, 0.40651509165763855, 0.2290334552526474, 0.12596729397773743, 0.26169684529304504, 0.45532581210136414, 0.48429644107818604, 0.3303384482860565, 0.244485005736351, 0.1755862683057785], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c288a7d6e0fc0512734edc18119549f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7616d2cee120f5113b6c5adc6035553d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bf40baaa08e4e06fc435f9ebee3e5450(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13002093136310577], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06727e7110b2fb06d07f55af090095f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1720eff484050980ab133cefbca4a66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06727e7110b2fb06d07f55af090095f5
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d1707636fc1992c60fc4b126594f20d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a41f7b425d76aa21c6862f902ea64547(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_35fae243d8722e86177d2f50c36b9364(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3694b5d09971621b33543f9dfa42f43e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1116943359375, 0.00763702392578125, 0.47119140625, 0.0291900634765625, 0.379638671875, 0.307861328125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7a3c72cdeba48056b0cfeafc264fcb5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2568359375, 0.052947998046875, 0.1668701171875, 0.333984375, 0.09735107421875, 0.285888671875, 0.332275390625, 0.1600341796875, 0.1923828125, 0.332275390625, 0.39794921875, 0.377197265625, 0.04620361328125, 0.441162109375], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f6b08814f42b084d49c25b88f2e04d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.494140625, 0.194580078125, 0.296630859375, 0.11419677734375, 0.3310546875, 0.361328125, 0.117431640625, 0.43701171875, 0.2025146484375, 0.292236328125, 0.06927490234375, 0.438720703125, 0.1002197265625, 0.463134765625, 0.200439453125, 0.053924560546875, 0.1605224609375, 0.267822265625, 0.241455078125, 0.35107421875, 0.262451171875, 0.2091064453125, 0.25634765625, 0.28125, 0.34130859375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c747bd01cd8378ce8a693ddbda8fee44(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20556640625, 0.2193603515625, 0.33984375, 0.14208984375, 0.1768798828125, 0.3193359375, 0.036407470703125, 0.035919189453125, 0.369140625, 0.328125, 0.3544921875, 0.48876953125, 0.399169921875, 0.2568359375, 0.14794921875, 0.2142333984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4900a0c2868c8a032a3f30202a08b119(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22998046875, 0.44677734375, 0.211669921875, 0.393310546875, 0.3486328125, 0.339599609375, 0.061676025390625, 0.0845947265625, 0.177490234375, 0.247314453125, 0.12060546875, 0.37109375, 0.41162109375, 0.1424560546875, 0.0828857421875, 0.1591796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ab46e74a457c2ab795438c143e341af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23646527528762817, 0.4714430570602417, 0.48234114050865173, 0.43704953789711], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e43c881316d43fba0ff5d2190338ac8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01cd3be3df1b95e2174d692aed82e0b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7168368fc2d9714a65f7f1529a86c458(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84d7eeaea21d47d5fd6f6754573f6cc8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2022705078125, 0.326904296875, 0.306884765625, 0.473388671875, 0.11907958984375, 0.03692626953125, 0.4267578125, 0.46484375, 0.1953125, 0.427978515625, 0.474365234375, 0.41650390625, 0.0283355712890625, 0.3974609375, 0.12109375, 0.1832275390625, 0.06048583984375, 0.18212890625, 0.12310791015625, 0.08807373046875, 0.298095703125, 0.431396484375, 0.244140625, 0.025238037109375, 0.07940673828125, 0.33984375, 0.362548828125], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f103316df6090d2d4303c927f0c2a85f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76ea3314d569a76d36722658f96fd141(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f103316df6090d2d4303c927f0c2a85f
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5147afb4ff3b5e53aab3132b75820df9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84657006b49db68421fe88ca30911f2e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26181328296661377, 0.4423964023590088, 0.09003488719463348, 0.2405611127614975, 0.18720677495002747, 0.48757433891296387, 0.0010617857333272696, 0.46161365509033203, 0.10970127582550049, 0.24957135319709778, 0.37561923265457153, 0.22928854823112488], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7177845c8997a43ca5c5283e068fdb97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b94ccdd48ed42d43e965155df43bb200(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7177845c8997a43ca5c5283e068fdb97
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36cf7a11860d4c701b234dc8c5b5e622(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87d7367db3f0872195622d445d1b86fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da6b520b98d0b887dce2a538218534fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7169113b05c0edd385d9b15c9d73c523(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e04b0c95d411c4f2f6b7e2bec50b617(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7169113b05c0edd385d9b15c9d73c523
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5476921f0c75fb1ad3fb59253e0d9546(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.418212890625, 0.3134765625, 0.1951904296875, 0.373291015625, 0.11871337890625, 0.2352294921875, 0.307373046875, 0.25537109375, 0.16943359375, 0.1756591796875, 0.3330078125, 0.263671875, 0.05047607421875, 0.232177734375, 0.27294921875, 0.1375732421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0296f854bdc7fe23a13230a9d667cde9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a224222de31045650e13d1ae36bee221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd781ee82bc35e3eeca67e5ddc2fc3f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a224222de31045650e13d1ae36bee221
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_329b83ebf2d1f91a56e544e87399c338(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.298095703125, 0.05755615234375, 0.0869140625, 0.30517578125, 0.06561279296875, 0.39990234375, 0.1341552734375, 0.2100830078125, 0.1812744140625, 0.063720703125, 0.49609375, 0.373779296875, 0.005535125732421875, 0.154296875, 0.09759521484375, 0.06976318359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12e4a05f1c212d2ce9cbdb010657701c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26673170924186707, 0.33619824051856995, 0.23490464687347412, 0.4631482660770416, 0.33310529589653015, 0.47378894686698914, 0.15110087394714355, 0.30556023120880127, 0.05249704420566559, 0.3681011199951172, 0.2835218608379364, 0.35620245337486267, 0.05388675630092621, 0.38299286365509033, 0.04699891060590744, 0.15700028836727142, 0.12087077647447586, 0.29220467805862427], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d998f2cd40a8024820d62ca84b907e16(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3560616672039032, 0.2095300853252411, 0.3891250789165497, 0.43306705355644226, 0.12464017421007156, 0.4789709746837616, 0.08137708902359009, 0.4434288740158081, 0.24031749367713928, 0.01829671673476696, 0.34163612127304077, 0.48411035537719727, 0.46548786759376526, 0.01731858029961586, 0.2915875315666199, 0.10715289413928986, 0.09877210110425949, 0.3220957815647125, 0.20352065563201904, 0.3885257840156555, 0.3594505190849304, 0.28211548924446106, 0.48636704683303833, 0.453302800655365, 0.25123873353004456, 0.17658761143684387, 0.17935825884342194, 0.05496516823768616, 0.1810137927532196, 0.04874764010310173], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ff470d8f8e2350fe419dacf3e6760b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7e4645932acd54522d946af4b54e5c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ff470d8f8e2350fe419dacf3e6760b9
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d74df22576e624dd1ea85f77250ab9d1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aa9323c25f5f180f881e1dd9d1182c55(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d74df22576e624dd1ea85f77250ab9d1
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1dd96cb971b8e10d4659701fdf39eda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.432373046875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_719b0fe264e9986f5e8aa4b075fc6377(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_111d43f9efa9c16b156439ac6d03e962(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b289257a058ceff484837745ac146c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_111d43f9efa9c16b156439ac6d03e962
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_70753a573fb661b5515b7c5d9f7a389b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43798184394836426, 0.2930348515510559, 0.3648661971092224], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59a9ffbc0f293949ddca76dbae04f527(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73449a55bf1bf903887c6421070a4f6d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.038864411413669586, 0.0490422360599041, 0.18228362500667572, 0.0801665335893631, 0.41187217831611633, 0.03117341175675392, 0.44322630763053894, 0.3286488950252533, 0.09001012146472931, 0.429853618144989, 0.36779195070266724, 0.49537304043769836], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d4bb0a090ee2d4e65d2df7c97153b209(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3649376630783081, 0.3182789087295532, 0.003096494125202298, 0.4252881705760956, 0.4244883954524994, 0.17893552780151367, 0.16353555023670197, 0.4295688271522522, 0.0718536302447319, 0.0013103079982101917, 0.16936978697776794, 0.054996248334646225], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9da1f4e651b8d4b8df0024d193669eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38874295353889465, 0.004369879141449928, 0.3584657609462738, 0.4828575551509857, 0.018445264548063278, 0.4775507152080536, 0.10245124995708466, 0.006617730483412743, 0.2563771605491638, 0.3027958869934082], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b8c28fdd955d604bef1f1d41340cccd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.252575546503067], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5db465215de4e34831330dc6300f5205(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_be30d0b5aa1cea188f81f9c89dd2f92d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5db465215de4e34831330dc6300f5205
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5df760ccdebd0f3592363617cc655f09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc4cc8cd8b7973c6f06905a9fa039485(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81ab9a45d90879bbf6e0f712103c9456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53e7ab23444f18826f8fd999dab59d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfbed30f5b203c10dfb7823d12f2e55c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37353515625, 0.446044921875, 0.1312255859375, 0.2308349609375, 0.0276031494140625, 0.260986328125, 0.282470703125, 0.1551513671875, 0.270751953125, 0.1275634765625, 0.4052734375, 0.493408203125, 0.212890625, 0.045166015625, 0.283447265625, 0.30859375, 0.245849609375, 0.03521728515625, 0.09417724609375, 0.2509765625, 0.376708984375, 0.06622314453125, 0.47216796875, 0.02642822265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_677b2d18106da6f8007af1fe6ba77bc7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21826171875, 0.498046875, 0.455810546875, 0.424072265625, 0.0008997917175292969, 0.453369140625, 0.368896484375, 0.320068359375, 0.136474609375, 0.205810546875, 0.1602783203125, 0.40185546875, 0.431396484375, 0.12030029296875, 0.310791015625, 0.438720703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e24341cdd0c386828737cb259fa3c958(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b085891b19d3d45d1a9cc3176c13e875(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e24341cdd0c386828737cb259fa3c958
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_34238d17a0ce790d55cc788aa535a511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bcab1049b0eb911bbe69f691f8b019c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_34238d17a0ce790d55cc788aa535a511
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a5b5d2ad923413904741dfdc1001e9b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47098591923713684, 0.35439878702163696, 0.17596761882305145, 0.019175970926880836, 0.1525845229625702, 0.18393287062644958, 0.18585413694381714, 0.008959345519542694, 0.3822980225086212, 0.19156776368618011, 0.2607671618461609, 0.4079239070415497, 0.041039396077394485, 0.45814064145088196, 0.4298044741153717, 0.3845875859260559, 0.45272496342658997, 0.10343587398529053, 0.0373367965221405, 0.11673267185688019, 0.03910137340426445, 0.05783708766102791, 0.31797677278518677, 0.12481418997049332, 0.06783298403024673], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_811037475b19a96c723ef9f47073d2cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1ab4f1a6db4efe81d1675ce8e0e7d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_811037475b19a96c723ef9f47073d2cf
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09d9468b0f5529995a93ae84a633eb63(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3118382692337036, 0.476834774017334, 0.41617006063461304, 0.4541412889957428, 0.3700210750102997, 0.35176101326942444, 0.42455676198005676, 0.1454135626554489, 0.3874279856681824, 0.1193205863237381, 0.01966509409248829, 0.0183724332600832, 0.008873376995325089, 0.3260855972766876, 0.3801661729812622, 0.31015273928642273], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc4c033a88ea5573c0a226f00da8cd37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33870020508766174, 0.16588453948497772, 0.12573391199111938, 0.20760057866573334, 0.17005209624767303, 0.42553144693374634, 0.2415975034236908, 0.1384803056716919, 0.4347679316997528, 0.21357835829257965, 0.38772282004356384, 0.2906855046749115, 0.43399348855018616, 0.3838852047920227, 0.3205482065677643, 0.19369186460971832, 0.39680030941963196, 0.19692528247833252, 0.32312455773353577, 0.3674499988555908, 0.0027382157277315855, 0.03001539595425129, 0.16547393798828125, 0.43786460161209106, 0.03359595686197281, 0.1607382893562317, 0.43003565073013306, 0.3938737213611603, 0.2809458374977112, 0.3065425455570221], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d1464b59103b0857baa69ef938270cf6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6819e26fed3f8f0e48d6b8e511514e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d1464b59103b0857baa69ef938270cf6
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4e5cb28274a2b002e8d99847231742cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8264b1d3ed817d239351497be6bca90f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.351318359375, 0.492431640625, 0.0206298828125, 0.10321044921875, 0.331298828125, 0.46142578125, 0.3720703125, 0.433349609375, 0.349365234375, 0.2266845703125, 0.495849609375, 0.46533203125, 0.36572265625, 0.2218017578125, 0.4306640625, 0.380126953125, 0.35498046875, 0.302001953125, 0.366943359375, 0.1944580078125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_431e70038afcb099313ca852cc6865c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.451904296875, 0.43212890625, 0.4658203125, 0.308837890625, 0.1798095703125, 0.0863037109375, 0.271728515625, 0.0567626953125, 0.31689453125, 0.00820159912109375, 0.1376953125, 0.1026611328125, 0.015716552734375, 0.1622314453125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6685177a2d227b4aa49816b83a71d5ef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ad940dc72940fc947dbf8e38c01dea2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6685177a2d227b4aa49816b83a71d5ef
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d2e67002f56c540e0958789f2d5654f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4671209454536438, 0.2251543402671814, 0.4250906705856323, 0.39441433548927307, 0.1344204694032669, 0.03540319204330444, 0.38906610012054443, 0.3486629128456116], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e276ec6b67226e55f70976b34a1d3294(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d251a6dc3f84f7cb8787b32e60c873aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09417724609375, 0.2342529296875, 0.456298828125, 0.09649658203125, 0.430908203125, 0.2344970703125, 0.07830810546875, 0.0222625732421875, 0.29931640625, 0.08099365234375, 0.1358642578125, 0.368896484375, 0.02197265625, 0.20556640625, 0.1632080078125, 0.40966796875, 0.46435546875, 0.1942138671875, 0.39111328125, 0.40771484375, 0.0753173828125, 0.46875, 0.32958984375, 0.33203125, 0.162841796875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_59233f0b453f269ed765a9ed50178ce3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f20da9eba8a4343cd0943fc9d4bc473b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_59233f0b453f269ed765a9ed50178ce3
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88caf10fd8864d43290106db80951116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_369561123a893250bd0e421a93c848be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb173633bb497f7769e4e9a3d8307f07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_369561123a893250bd0e421a93c848be
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffa44aebafa9baf44c3cf6d046479275(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3008420169353485, 0.4357687830924988], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfb0b9904cb08ce3eacfb06c26495592(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39540478587150574, 0.11833180487155914, 0.10366180539131165, 0.40017983317375183, 0.18330904841423035, 0.14188891649246216, 0.35045334696769714, 0.4245442748069763, 0.3238358199596405, 0.4984823167324066, 0.26580387353897095, 0.08523941040039062, 0.08193923532962799, 0.39671388268470764, 0.2955469787120819, 0.15158149600028992, 0.30495601892471313, 0.30528533458709717, 0.40660321712493896], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b51f4103ad731cb4282427990b531df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2294921875, 0.417236328125, 0.4970703125, 0.46240234375, 0.2498779296875, 0.47705078125, 0.22216796875, 0.354736328125, 0.408447265625, 0.184326171875, 0.37646484375, 0.41357421875, 0.1318359375, 0.17333984375, 0.263916015625, 0.04364013671875, 0.00551605224609375, 0.051513671875, 0.1573486328125, 0.3623046875, 0.32958984375, 0.217529296875, 0.199951171875, 0.22900390625, 0.47900390625, 0.3447265625, 0.146728515625, 0.490234375, 0.09295654296875, 0.057525634765625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ce9436932e0c11290f846aa6172f96d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a46953ad63ba00eb14b9319905af7a33(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24960996210575104, 0.030962742865085602, 0.3021920323371887, 0.12914583086967468, 0.20016483962535858, 0.25015243887901306, 0.3075847029685974, 0.32225698232650757], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66985daeb65ed5ac9ee64add901d4cd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13602489233016968, 0.12101531028747559, 0.35582345724105835, 0.18086431920528412, 0.11917001754045486, 0.3423732817173004, 0.00036523566814139485, 0.118374302983284, 0.13627508282661438, 0.3434959352016449, 0.3980211019515991, 0.0057599423453211784, 0.18060798943042755, 0.2299971580505371, 0.03654582053422928, 0.36827918887138367, 0.2954116761684418, 0.46519601345062256, 0.17039798200130463, 0.3454940915107727, 0.16581937670707703, 0.419410765171051, 0.06311380863189697, 0.210301011800766], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_43b9f6546658842e4b05b14487bc284a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c26fb2567e24d297fb755e3a6e8b2822(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_43b9f6546658842e4b05b14487bc284a
    def get_inputs(self):
        return [
            paddle.to_tensor([92], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ac892fa08e60debd21479537ff734ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28037112951278687, 0.022466987371444702, 0.41314592957496643, 0.3632659316062927, 0.24874696135520935, 0.0844167023897171, 0.4211007356643677, 0.041788022965192795, 0.43050822615623474, 0.27345341444015503, 0.4168657064437866, 0.26226603984832764, 0.3338208794593811, 0.41490018367767334, 0.47231325507164, 0.007184204179793596], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c8572d1dafcaf21656860d793deee13(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08331298828125, 0.034759521484375, 0.467041015625, 0.2607421875, 0.369384765625, 0.49755859375, 0.2978515625, 0.296630859375, 0.119873046875, 0.25244140625, 0.357666015625, 0.00125885009765625, 0.478759765625, 0.001739501953125, 0.2734375, 0.081298828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06710df14faf6cc083ff73c4e6443f94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdf52523857bc908b41702df1e2bd09f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06710df14faf6cc083ff73c4e6443f94
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_98fe80f164803e504d36b49d6f728999(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_384a6159f151f806c563364f93ccccba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_98fe80f164803e504d36b49d6f728999
    def get_inputs(self):
        return [
            paddle.to_tensor([0.140139639377594], dtype='float32').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6388565d3a8dd7f57531e8189fad763d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d318cad6fc0ea88abd2b6aa3a2c24340(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6388565d3a8dd7f57531e8189fad763d
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a3077ef04081cdb5f9b27dde2460554a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09285256266593933, 0.04720509797334671, 0.27809950709342957], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e55190ca20138f0a1dd70ebf5cd64844(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_971951aa7272a56ee1a48824b6e0d2a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4886557459831238, 0.3545139729976654, 0.2045636773109436, 0.4043283462524414, 0.45497390627861023, 0.2792987823486328, 0.3562948703765869, 0.0005845262785442173, 0.37880653142929077, 0.3412620425224304, 0.40791618824005127, 0.47825008630752563, 0.41908180713653564, 0.12655209004878998, 0.4811266362667084, 0.2703104019165039, 0.3968386948108673, 0.19475723803043365, 0.419820100069046, 0.3930110037326813], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25e9e590a38db5a588ded3a43a86617f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9ab673e2630f52b34b577b7acca8128(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25e9e590a38db5a588ded3a43a86617f
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c3dcac2c8035fe08076823493696330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a5230f8caab6de9b6840085fd44447(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c3dcac2c8035fe08076823493696330
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9df161e3f3e88246764c408dfc295be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e4c6dcf11c9305d0758ab1f6aa5761f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1177978515625, 0.10736083984375, 0.17626953125, 0.047332763671875, 0.46435546875, 0.3310546875, 0.04241943359375, 0.2359619140625, 0.3115234375, 0.39111328125, 0.2196044921875, 0.49658203125, 0.1343994140625, 0.32861328125, 0.360107421875, 0.154052734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a24364aae8d71b2b024cf3245f26a97d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1414794921875, 0.253173828125, 0.151123046875, 0.06689453125, 0.2025146484375, 0.470458984375, 0.327880859375, 0.0174102783203125, 0.11859130859375, 0.261962890625, 0.07928466796875, 0.11572265625, 0.380615234375, 0.252685546875, 0.240234375, 0.1397705078125, 0.126953125, 0.126708984375, 0.1995849609375, 0.171142578125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab0cb8a80d1a66cd012199224946361d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9998e089d40ae6e811d6bc14ce6413c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0535888671875, 0.1917724609375, 0.254150390625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7133472473d07411ff66264e2bb09093(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468391090631485, 0.3508916199207306, 0.36763519048690796, 0.3091651201248169, 0.37929531931877136, 0.4816274046897888, 0.10513675212860107, 0.07238780707120895, 0.2638873755931854, 0.2625063359737396, 0.012437134981155396, 0.4584621787071228, 0.4890022277832031, 0.0282514039427042, 0.21094346046447754, 0.26508551836013794], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3447767ce135bd2773e0723b2c3f256(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.393310546875, 0.480224609375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a20912bb4145a7f4e6b0f1d37013fe10(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb1cabf04a7bc70ebf0dfa496a17d367(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a20912bb4145a7f4e6b0f1d37013fe10
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48828125, 0.415283203125, 0.020263671875, 0.4541015625, 0.495361328125, 0.34130859375, 0.19140625], dtype='float16').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f749b7d976a9adbbe11646cf09d7e03d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.233642578125, 0.3505859375, 0.1788330078125, 0.1861572265625, 0.46728515625, 0.468994140625, 0.336181640625, 0.2403564453125, 0.051666259765625, 0.449951171875, 0.460693359375, 0.479248046875, 0.373291015625, 0.332275390625, 0.0079193115234375, 0.01538848876953125, 0.457763671875, 0.043792724609375, 0.47265625, 0.00487518310546875, 0.1412353515625, 0.1654052734375, 0.41357421875, 0.284423828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb1e61d8ac4d1b56b81c22dcb76fe275(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49018847942352295, 0.025257214903831482, 0.1941780000925064, 0.37934407591819763, 0.19437652826309204, 0.4412555992603302, 0.40530335903167725, 0.022242598235607147, 0.3021165132522583, 0.41730591654777527, 0.4131968915462494, 0.024683574214577675, 0.3507847785949707, 0.04569891840219498, 0.06424988061189651, 0.14624761044979095], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdda2790ac7c375ae63e8efd200f2896(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7badad8a5ddd89fd177e73978c6af29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1007080078125, 0.2421875, 0.420166015625, 0.2303466796875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_291ac5550146552163cd1b127f4bd7da(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b76ec861c0ad372c0e24f4044818a36b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.363130122423172, 0.3123685419559479, 0.3303300142288208, 0.02128687873482704, 0.4536930322647095, 0.29163452982902527, 0.21618984639644623, 0.09881718456745148, 0.35866427421569824, 0.004350031726062298, 0.2366943061351776, 0.4003368020057678, 0.4704836905002594, 0.26907190680503845, 0.10419546812772751, 0.37342292070388794, 0.2044810950756073, 0.19878405332565308, 0.3988046646118164, 0.16727255284786224, 0.3269178867340088, 0.32195356488227844, 0.48339763283729553, 0.21697895228862762, 0.19777652621269226, 0.4953179657459259, 0.4471351206302643, 0.17073051631450653], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90f4006f573e7094188b3fe8be25017e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03717041015625, 0.049591064453125, 0.475341796875, 0.08807373046875, 0.0252532958984375, 0.283935546875, 0.233154296875, 0.10943603515625, 0.323486328125, 0.493408203125, 0.098388671875, 0.47607421875, 0.0367431640625, 0.438720703125, 0.47216796875, 0.46923828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_032ba71a62ba39f84b1d3588af5c2a49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4007340967655182, 0.4053456783294678, 0.03762775659561157, 0.24753904342651367, 0.2628130614757538, 0.06615635007619858, 0.40845054388046265, 0.26592645049095154, 0.49703067541122437, 0.1181400865316391, 0.40714797377586365, 0.4359591007232666, 0.16269198060035706, 0.3944888114929199, 0.44129377603530884, 0.05856374651193619, 0.20254851877689362, 0.3460010588169098, 0.21231405436992645, 0.1788606345653534, 0.3675380349159241, 0.05950087308883667, 0.3548378050327301, 0.25916630029678345, 0.0514812134206295, 0.01688418537378311, 0.1441701054573059, 0.2888532876968384], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04ecb9020941b54b8b86341675a90bc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_35f632eac1f6f0be8a2ddd55f1066c06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04ecb9020941b54b8b86341675a90bc0
    def get_inputs(self):
        return [
            paddle.to_tensor([0.427490234375, 0.0250091552734375, 0.043182373046875, 0.2939453125, 0.1524658203125, 0.41796875, 0.1768798828125, 0.287841796875, 0.22119140625, 0.456298828125, 0.05609130859375], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_acf09fee27dbafa396ad4c4e54095384(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21630859375, 0.07568359375, 0.39794921875, 0.390380859375, 0.33349609375, 0.18701171875, 0.442626953125, 0.20166015625, 0.08233642578125, 0.399658203125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4b0343940d46ccc787f4b5cfd8d84221(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09855187684297562, 0.17898355424404144, 0.27262961864471436, 0.37336286902427673, 0.03465258330106735, 0.26318371295928955, 0.07030263543128967, 0.01884189061820507, 0.39575469493865967, 0.46820035576820374, 0.20145553350448608, 0.0656031146645546, 0.35514411330223083, 0.11798461526632309, 0.33134809136390686, 0.000417544215451926, 0.1712382435798645, 0.3918308913707733, 0.43713268637657166, 0.049981098622083664, 0.020619235932826996, 0.30099648237228394, 0.16291478276252747, 0.12238109111785889], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1a904fcbd00b6acfcc362f0a3e3dbd9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33056640625, 0.01091766357421875, 0.332275390625, 0.1866455078125, 0.209716796875, 0.453857421875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96d116b534285f736434e079b250c07b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e026f8b025f799475ae2d6b0836d4e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2880859375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fba6d5beb48a497b4250dfb2c1f647bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f7953b23e1121162e16939db147269fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1726822555065155, 0.19210737943649292, 0.08505305647850037], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_276364fe3c7eb18b5670efd7e904bfae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22216796875, 0.1439208984375, 0.40380859375, 0.02337646484375, 0.0986328125, 0.12200927734375, 0.138671875, 0.0133514404296875, 0.1800537109375, 0.4453125, 0.335693359375, 0.37158203125, 0.396728515625, 0.222412109375, 0.269775390625, 0.322509765625, 0.46435546875, 0.0208587646484375, 0.022216796875, 0.34765625, 0.06341552734375, 0.08905029296875, 0.395263671875, 0.266357421875, 0.4501953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ce10168742728fe448a89e717ce79ae2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0146636962890625, 0.426513671875, 0.251220703125, 0.428466796875, 0.322998046875, 0.432861328125, 0.2587890625, 0.2418212890625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4810a472681ba528e0562efc4535343(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2410888671875, 0.1982421875, 0.203125, 0.457275390625, 0.1466064453125, 0.44482421875, 0.17919921875, 0.329833984375, 0.296630859375, 0.006763458251953125, 0.292236328125, 0.33251953125, 0.47509765625, 0.300048828125, 0.436767578125, 0.488525390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4692f83ae02c634af64f0afacd705429(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16162109375, 0.269775390625, 0.4853515625, 0.208740234375, 0.188232421875, 0.348388671875, 0.2374267578125, 0.292724609375, 0.10882568359375, 0.35546875, 0.0968017578125, 0.100830078125, 0.060638427734375, 0.092041015625, 0.384521484375, 0.1617431640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4f7276facc935cf22ae28cf447fc9045(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.058876123279333115, 0.08804743736982346, 0.04865235835313797, 0.4662303328514099, 0.2588375210762024, 0.20467627048492432], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f6988adcd86bb52bda84375788fac524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2836a7c2a45ba80e537659b19a0887e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f6988adcd86bb52bda84375788fac524
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_653a5e319a9f0802df9e6f063b087679(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2607421875, 0.255126953125, 0.140625, 0.234619140625, 0.0006880760192871094, 0.1544189453125, 0.03460693359375, 0.1221923828125, 0.480712890625, 0.169189453125, 0.3427734375, 0.12188720703125, 0.0101318359375, 0.199951171875, 0.083984375, 0.4873046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dea3b204f29aaefdbb6edcdb0a76b5a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27392578125, 0.0301361083984375, 0.038177490234375, 0.48779296875, 0.4599609375, 0.330078125, 0.361083984375, 0.2071533203125, 0.301025390625, 0.06939697265625, 0.271240234375, 0.42431640625, 0.33837890625, 0.3037109375, 0.12158203125, 0.1170654296875, 0.373779296875, 0.34228515625, 0.488525390625, 0.24658203125, 0.379150390625, 0.13525390625, 0.36865234375, 0.07684326171875, 0.380615234375, 0.1741943359375, 0.26416015625, 0.3349609375, 0.359130859375, 0.2308349609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_627936dd2faccc8f0a6a525c9ba8d7e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49560546875, 0.153076171875, 0.062255859375, 0.358642578125, 0.12103271484375, 0.156494140625, 0.40478515625, 0.003078460693359375, 0.09161376953125, 0.0136260986328125, 0.2327880859375, 0.47705078125, 0.07366943359375, 0.12841796875, 0.030303955078125, 0.08587646484375, 0.14501953125, 0.233642578125, 0.29248046875, 0.419189453125, 0.10760498046875, 0.28759765625, 0.12103271484375, 0.1636962890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c0171da79c971803bc2291f5e0fd104(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46e6c7ee377f5859c47ecfd24f38da79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c0171da79c971803bc2291f5e0fd104
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6765253200d7c0118c082ef2d30068ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9160e85b57c47fc4d4d1fb6901aa3347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06906b6f29b9a7967ae5b7d8c8632b6f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1986083984375, 0.3681640625, 0.044647216796875, 0.2298583984375, 0.1689453125, 0.308837890625, 0.271240234375, 0.40625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5e7ba64b2127058395f26a428c9bcb79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22626429796218872, 0.18169951438903809, 0.4627794027328491, 0.43197405338287354, 0.238718181848526, 0.025716280564665794, 0.3558969795703888, 0.3713977038860321, 0.0462348572909832, 0.3726799488067627, 0.24316956102848053, 0.3427755534648895, 0.28466537594795227, 0.42424318194389343, 0.36571794748306274, 0.11533794552087784], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2f0e4b771b38691e9023b938c6354b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039312832057476044, 0.3505461513996124, 0.0823906660079956, 0.23238268494606018, 0.09928932040929794, 0.38565194606781006, 0.3002760410308838, 0.08475074172019958, 0.4176454246044159, 0.18529200553894043, 0.01190099772065878, 0.3183773159980774, 0.37133073806762695, 0.4877539873123169, 0.2313109189271927, 0.4198286235332489], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51bf8263e6facdc374376d337e40606f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e26eb7793d01eda8d237dcf75b0b44af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00522613525390625, 0.4697265625, 0.29248046875, 0.11083984375, 0.1431884765625, 0.3974609375, 0.45458984375, 0.192138671875, 0.1317138671875, 0.327880859375, 0.0936279296875, 0.26025390625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b67d94cb15f513d31b3b1fecb6ff4389(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039337158203125, 0.3623046875, 0.456298828125, 0.11553955078125, 0.4248046875, 0.1944580078125, 0.1529541015625, 0.388427734375, 0.187744140625, 0.28369140625, 0.0908203125, 0.20751953125, 0.2105712890625, 0.267578125, 0.39013671875, 0.0006809234619140625, 0.01456451416015625, 0.447998046875, 0.488037109375, 0.44189453125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7e8168902d5ecc959a65b5f98fd58cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.246826171875, 0.15478515625, 0.2091064453125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ada830fbd3a30e3b77b0c821c0b94f85(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1653eb355a4439271dd55f7d72bb1852(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39372333884239197, 0.39551055431365967, 0.3224802315235138, 0.138197124004364, 0.35864901542663574, 0.11406319588422775, 0.15872642397880554, 0.22514475882053375, 0.11721676588058472, 0.46439144015312195, 0.19778691232204437, 0.02472361922264099, 0.04364723339676857, 0.3214206099510193, 0.3121805191040039, 0.015474884770810604, 0.31554868817329407, 0.08845536410808563], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4e6f6270d0a4ac35497dde5d4bb5ce7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.156005859375, 0.499267578125, 0.12939453125, 0.45068359375, 0.29248046875, 0.425537109375, 0.416259765625, 0.1400146484375, 0.379150390625, 0.016510009765625, 0.391845703125, 0.1756591796875, 0.0251922607421875, 0.22900390625, 0.0926513671875, 0.05291748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e8da62c0b3b86604e20ffc701398757(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af43144cb9497fa7fc8daabbb976dabe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc9ac3ad336f4c13aba141bb1b475b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16552734375, 0.28173828125, 0.49365234375, 0.0158843994140625, 0.0855712890625, 0.487060546875, 0.35107421875, 0.23046875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b436bb4894c809d0888dcaed9c01a2e9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1279296875, 0.0222320556640625, 0.2724609375, 0.0112152099609375, 0.488525390625, 0.45947265625, 0.155029296875, 0.4873046875, 0.1575927734375, 0.338134765625, 0.133544921875, 0.35107421875, 0.480712890625, 0.356689453125, 0.4794921875, 0.435791015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ceae8f1bc40701d60b160e118e9af3cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07170356065034866, 0.056355178356170654, 0.24233244359493256, 0.31496477127075195, 0.4235159158706665, 0.2989380955696106], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_604b7f40104a774c4d9dc097172e2771(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.346897155046463, 0.10669180005788803, 0.08156057447195053, 0.22730770707130432, 0.34414029121398926, 0.16028523445129395, 0.19985540211200714, 0.37574970722198486, 0.4005981981754303, 0.25683721899986267, 0.23966918885707855, 0.012383860535919666, 0.09272781014442444, 0.46686506271362305, 0.040224336087703705, 0.3484654128551483], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9157835b2b9b5ed4799cd8db013c0aac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30974146723747253, 0.023353416472673416, 0.3111039698123932, 0.0792580097913742, 0.05386682599782944, 0.21881645917892456, 0.2700696885585785, 0.2960132360458374, 0.07470999658107758, 0.10414686053991318, 0.28217294812202454, 0.37683871388435364, 0.14694428443908691, 0.24222449958324432, 0.329196572303772, 0.2888522744178772], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ee3cbdea389cb9d82cf91366ea8b631(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38525390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adde2f5281fed82c137e00d8c83a1d27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2ea764af754e4676f54d6e88d450c8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.446044921875, 0.413818359375, 0.334228515625, 0.47998046875, 0.077392578125, 0.38623046875, 0.111572265625, 0.34912109375, 0.39697265625, 0.239990234375, 0.462158203125, 0.439453125, 0.032806396484375, 0.3994140625, 0.0115509033203125, 0.2230224609375, 0.14404296875, 0.016510009765625, 0.050262451171875, 0.467041015625, 0.4921875, 0.458740234375, 0.363037109375, 0.120361328125, 0.4892578125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ce733e15cfaa4833f7b372d4e8c6577(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10896414518356323, 0.1878582090139389], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1377032dd6a4f8594826f25b5d93f01e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15468855202198029, 0.05078984797000885, 0.14039358496665955, 0.313007116317749, 0.3371872007846832, 0.25520798563957214, 0.4755997657775879, 0.4608812928199768, 0.2767086923122406, 0.12829966843128204, 0.23878860473632812, 0.10811809450387955, 0.49461156129837036, 0.2790481448173523, 0.3689902126789093, 0.04698967933654785], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8d5cf4af68db796e013543629413259b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_425c4cd9316e5168e28a2f03e33b4b45(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06442104279994965, 0.07619056850671768, 0.2906387150287628, 0.22380518913269043, 0.2376055121421814, 0.10294672846794128, 0.013311872258782387, 0.2358311414718628, 0.3100046217441559, 0.06572031229734421, 0.030475201085209846, 0.3864244222640991, 0.33658257126808167, 0.07150879502296448], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b86ef4d2e9b0568e5117aa90ad32d62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08257151395082474, 0.33029988408088684, 0.1569770872592926, 0.332670122385025, 0.19236798584461212, 0.12451979517936707, 0.12980186939239502, 0.35158053040504456, 0.4060297906398773, 0.07061488926410675], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d65b577a56fd35511a5491f1b2a120cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22866028547286987, 0.2789444625377655, 0.3631126582622528, 0.3001634478569031, 0.14482291042804718, 0.34947535395622253, 0.15169548988342285, 0.11254822462797165], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c089ea5df73754923dd8c868634b620(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2327880859375, 0.04522705078125, 0.036102294921875, 0.153564453125, 0.1590576171875, 0.193359375, 0.471435546875, 0.29443359375, 0.455078125, 0.1402587890625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71984068057d651d9aa5ad377ab88f9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b057cae5486d8cc9fa3baccdc6de2d2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_43b9f6546658842e4b05b14487bc284a
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4136f4c4b5059a310b1c59455f47913(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1378173828125, 0.0107879638671875, 0.00939178466796875, 0.4462890625, 0.49755859375, 0.28955078125, 0.4560546875, 0.468017578125, 0.10284423828125, 0.480224609375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_afabdd9536d10633e672c8c373db3d86(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.352294921875, 0.180419921875, 0.261474609375, 0.18310546875, 0.317626953125, 0.375732421875, 0.27099609375, 0.3173828125, 0.2296142578125, 0.305419921875, 0.36279296875, 0.384521484375, 0.045196533203125, 0.08648681640625, 0.277099609375, 0.474853515625, 0.2442626953125, 0.11724853515625, 0.242919921875, 0.33154296875, 0.40966796875, 0.478759765625, 0.2958984375, 0.017547607421875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7a2c37763cd54738516fce73184f2a2b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77059dbe1533cc02e97a36af52b462c5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7a2c37763cd54738516fce73184f2a2b
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7eed45f5fa36da8d258af98f577a05b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3310546875, 0.2176513671875, 0.1915283203125, 0.11517333984375, 0.07733154296875, 0.14306640625, 0.228515625, 0.062225341796875, 0.40966796875, 0.165283203125, 0.3466796875, 0.4033203125, 0.1788330078125, 0.1929931640625, 0.11590576171875, 0.337646484375, 0.1962890625, 0.0660400390625, 0.30908203125, 0.401123046875, 0.491455078125, 0.178466796875, 0.32275390625, 0.2861328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3f380390162d404d1c4b19a90eb3870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_70613c884b0d6d9740e3f09587ee332d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.303955078125, 0.163818359375, 0.425537109375, 0.1153564453125, 0.2122802734375, 0.285400390625, 0.18603515625, 0.0357666015625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28f51273ae3b30124f6454a273250ea5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.245849609375, 0.1043701171875, 0.2373046875, 0.42724609375, 0.0972900390625, 0.060150146484375, 0.368896484375, 0.4833984375, 0.47412109375, 0.47119140625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab0463680ad6d756872a424369217c52(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02532958984375, 0.0125274658203125, 0.369873046875, 0.23876953125, 0.486083984375, 0.36279296875, 0.003387451171875, 0.367919921875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_57f49d28787da8a67945b8ee9089f420(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45dcbac5cf7d774f090fe0e5a58f1b8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_57f49d28787da8a67945b8ee9089f420
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cce3548625175c370c2fad79f491191f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_57fa35907469edaa3ab91266e859cc89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.091947540640831, 0.14810487627983093, 0.44346022605895996, 0.02711016871035099, 0.14967751502990723, 0.3462389409542084, 0.29386529326438904, 0.3473074734210968, 0.20914866030216217, 0.1671091765165329, 0.23809057474136353, 0.2085852473974228, 0.42946967482566833, 0.36648696660995483, 0.15829548239707947, 0.03289682790637016, 0.2633858919143677, 0.33211079239845276, 0.3095134496688843, 0.4674302935600281, 0.4003198444843292, 0.28993135690689087, 0.14060454070568085, 0.379323810338974, 0.2276090532541275, 0.06827808171510696, 0.37167221307754517], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c760df10fab723f31b4a3d805cec3b20(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1e088d2d22111966a0190fc703a01c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c760df10fab723f31b4a3d805cec3b20
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09ec929904b91ebcf32aee64164d26e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25048828125, 0.379150390625, 0.330810546875, 0.1163330078125, 0.2027587890625, 0.041595458984375, 0.2401123046875, 0.0401611328125, 0.222900390625, 0.35693359375, 0.48974609375, 0.2183837890625, 0.009674072265625, 0.49365234375, 0.007549285888671875, 0.086181640625, 0.37451171875, 0.00492095947265625, 0.21142578125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a7bccc9c8b855cb5bc7157c4c22e5ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac2e38a178e2560d0a1c47dfeac28fb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86682abadcb2591c5cbcddf421e9f50b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10589599609375, 0.3173828125, 0.25048828125, 0.300537109375, 0.335205078125, 0.2225341796875, 0.1483154296875, 0.478759765625, 0.01041412353515625, 0.396240234375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c18b3ee0af58f63e51d8da6c5d80a76a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07379150390625, 0.433837890625, 0.44140625, 0.29833984375, 0.420166015625, 0.416015625, 0.11029052734375, 0.006847381591796875, 0.0210723876953125, 0.486572265625, 0.08087158203125, 0.2490234375, 0.0066986083984375, 0.052947998046875, 0.2030029296875, 0.266357421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5dd0f02ece955fd1f77eb2b9f4a504c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2783203125, 0.0672607421875, 0.092529296875, 0.17138671875, 0.492919921875, 0.276123046875, 0.27685546875, 0.145263671875, 0.10540771484375, 0.295654296875, 0.2086181640625, 0.00024771690368652344, 0.284912109375, 0.14697265625, 0.426513671875, 0.046417236328125, 0.04864501953125, 0.371337890625, 0.2044677734375, 0.1676025390625, 0.08782958984375, 0.390869140625, 0.01543426513671875, 0.3544921875, 0.0941162109375, 0.3388671875, 0.07525634765625, 0.269775390625, 0.0821533203125, 0.192138671875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_069eb9232c4fec917b8a8d912b69ee5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49267578125, 0.306640625, 0.310302734375, 0.407470703125, 0.27197265625, 0.345703125, 0.313720703125, 0.2032470703125, 0.07208251953125, 0.345947265625, 0.1658935546875, 0.00347137451171875, 0.040985107421875, 0.07196044921875, 0.36376953125, 0.403076171875, 0.16796875, 0.314208984375, 0.02783203125, 0.0218505859375, 0.203369140625, 0.26220703125, 0.4384765625, 0.1759033203125, 0.0033664703369140625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_547329b19c13cdf6bec73f50f5be1786(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc1d4e3578beb8580ecd2d67f01f2d1e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.484619140625, 0.1575927734375, 0.3916015625, 0.463623046875, 0.43115234375, 0.422607421875, 0.446533203125, 0.0457763671875, 0.29736328125, 0.3896484375, 0.07745361328125, 0.461669921875, 0.364990234375, 0.26708984375, 0.09503173828125, 0.180908203125, 0.2939453125, 0.171142578125, 0.36962890625, 0.206787109375, 0.37744140625, 0.3681640625, 0.0145416259765625, 0.1524658203125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9835d60416af05eb78b064785e27a62e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26860788464546204, 0.4934837818145752, 0.31672096252441406, 0.4090528190135956, 0.41677072644233704, 0.29252636432647705], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a632d479d42bf90421b2f92e73060116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1eff7822526437c3e23c2cae4c9fbe53(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.354736328125, 0.130859375, 0.10980224609375, 0.096923828125, 0.1221923828125, 0.381591796875, 0.36865234375, 0.1573486328125, 0.08087158203125, 0.0262298583984375, 0.19873046875, 0.480712890625, 0.408203125, 0.397216796875, 0.343994140625, 0.125244140625, 0.317138671875, 0.337158203125, 0.047607421875, 0.1302490234375, 0.259765625, 0.38330078125, 0.270263671875, 0.0288543701171875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98349ff7db9f873680c8375544103088(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05426025390625, 0.024139404296875, 0.36767578125, 0.22509765625, 0.031005859375, 0.47705078125, 0.2435302734375, 0.408203125, 0.1031494140625, 0.1678466796875, 0.270263671875, 0.35302734375, 0.2578125, 0.45068359375, 0.25439453125, 0.38671875, 0.301513671875, 0.10565185546875, 0.09405517578125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e5bf708ca66de3c9e0d038f18541083(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1750577837228775, 0.06195017695426941, 0.23855742812156677, 0.10248661041259766, 0.4634048640727997, 0.25582775473594666, 0.18644198775291443, 0.40988245606422424, 0.43302980065345764, 0.48521310091018677, 0.13302816450595856, 0.14356482028961182, 0.0485602430999279, 0.01921967603266239, 0.08638188987970352, 0.10892196744680405], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b5dc8790f7a4ea4ab5c07baedca5d4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_486903b3906fa02bb089af8359834af3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28954342007637024, 0.1826300323009491, 0.3997430205345154, 0.03457857668399811, 0.47094786167144775, 0.37426578998565674], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5d22da376126d3f48d61e0f2d604f02(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16064453125, 0.448974609375, 0.384765625, 0.290283203125, 0.154541015625, 0.208984375, 0.038421630859375, 0.2469482421875, 0.441650390625, 0.28125, 0.40869140625, 0.48828125, 0.067626953125, 0.335205078125, 0.296142578125, 0.02508544921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a946068d2bf9959e3006d4965b918d3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.416259765625, 0.11724853515625, 0.3642578125, 0.2174072265625, 0.483642578125, 0.11785888671875, 0.3896484375, 0.212890625, 0.363525390625, 0.0233306884765625, 0.0001766681671142578, 0.082275390625, 0.179931640625, 0.07293701171875, 0.489013671875, 0.4580078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21eaadd0fddc7fca9b3d5664bec48149(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6dc25886605f6c99e5333e88315bbedf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73df0e3ae62a6655704f9b68999ec0fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6dc25886605f6c99e5333e88315bbedf
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2067060b8f5d4bfb20e44a8e186033d1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a093fcbdd21f6dc8b201fdcd80c5da09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2067060b8f5d4bfb20e44a8e186033d1
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5992934e0aa6318ba5e253de20d654b7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28662109375, 0.31396484375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6728e80ce1534903c483433c2e865632(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4892961382865906, 0.35506895184516907, 0.006733131129294634, 0.42819830775260925, 0.3906494379043579, 0.05698934197425842, 0.12634049355983734, 0.016185631975531578, 0.15609878301620483, 0.3786836266517639, 0.19320808351039886, 0.09331826120615005, 0.09933343529701233, 0.3334301710128784, 0.062133919447660446, 0.19849997758865356], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bfca4bd32cbc4ec1edcec3c482924c22(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a5711ffec13ae94b37bb59e0900d1b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bfca4bd32cbc4ec1edcec3c482924c22
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e1fb345968cf3735d9c451794299012(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327880859375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65ddb5a68ed3ca140581c7279499fede(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7128015721b168549497631acf9e448(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5ece0acae22299f5857b6b1f15491eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7128015721b168549497631acf9e448
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_776f979a1ebb63bad48500890fc492d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3773758113384247, 0.09757360070943832, 0.14370138943195343, 0.4526299834251404, 0.009378336369991302, 0.17499473690986633, 0.3361395299434662, 0.015278471633791924, 0.3163664937019348, 0.3281579315662384, 0.49192941188812256, 0.20194554328918457, 0.1467057168483734, 0.05212119221687317, 0.240960955619812, 0.05849432200193405], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_570df8862b2ff328ac4cdccae5a742e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1142578125, 0.460693359375, 0.3115234375, 0.262939453125, 0.054840087890625, 0.2401123046875, 0.412353515625, 0.425048828125, 0.1783447265625, 0.33740234375, 0.336181640625, 0.030731201171875, 0.00859832763671875, 0.1275634765625, 0.07598876953125, 0.204833984375, 0.4873046875, 0.1453857421875, 0.04888916015625, 0.203125, 0.361083984375, 0.267822265625, 0.479736328125, 0.08721923828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_732306cd9d43e8725cc8bb563a4562a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.345703125, 0.12213134765625, 0.276123046875, 0.023101806640625, 0.41015625, 0.2391357421875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_30bee08710449fc1b91a095ffc39b038(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86375ed10a5b7f8ad5ecac1aa34c9449(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_30bee08710449fc1b91a095ffc39b038
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32763671875, 0.37353515625, 0.434814453125, 0.4912109375, 0.37744140625, 0.0894775390625, 0.0020046234130859375, 0.0034027099609375, 0.42041015625, 0.269287109375, 0.397216796875, 0.207763671875, 0.10321044921875, 0.13916015625, 0.2247314453125, 0.1705322265625, 0.0423583984375, 0.263427734375], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fb096a8cfe2c4e417c05d0c2183173e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2869c90ecd3065282b2bacf44a26a7e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fb096a8cfe2c4e417c05d0c2183173e3
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3566b9572ecb263c4053c6bedfc112cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4012564420700073, 0.2678757607936859, 0.0760287269949913, 0.14945264160633087, 0.32274264097213745, 0.1073988750576973, 0.1691553145647049, 0.12598125636577606, 0.40382784605026245, 0.2999268174171448, 0.1352199763059616, 0.21069233119487762, 0.3932651877403259, 0.16661135852336884, 0.2991139888763428, 0.36867454648017883, 0.0711916908621788, 0.4063724875450134, 0.36820411682128906, 0.41633254289627075, 0.2814807593822479, 0.4234825372695923, 0.024675484746694565, 0.19758747518062592], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25d5833cc87e7cd60e62371003a5acb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_966b91ba5475ce4cad0f29d7b36ac00b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25d5833cc87e7cd60e62371003a5acb8
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb081757762657b9311b272e694c2bf6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04855239391326904, 0.30772337317466736, 0.25025486946105957, 0.3850443363189697, 0.444939523935318, 0.029127715155482292, 0.21653728187084198, 0.31607499718666077], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d99bb904be38ca8ea76ce976e2dd52f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.272216796875, 0.330322265625, 0.488525390625, 0.13818359375, 0.26611328125, 0.10369873046875, 0.16162109375, 0.2049560546875, 0.411376953125, 0.2459716796875, 0.07220458984375, 0.161865234375, 0.2220458984375, 0.032135009765625, 0.376220703125, 0.1824951171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fbd2e3a46bbec04cfa78787a4959e5c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4619140625, 0.1337890625, 0.163818359375, 0.07427978515625, 0.35400390625, 0.186767578125, 0.43505859375, 0.1978759765625, 0.39111328125, 0.043792724609375, 0.397216796875, 0.0799560546875, 0.09075927734375, 0.174072265625, 0.2919921875, 0.45166015625, 0.07989501953125, 0.042816162109375, 0.46875, 0.1663818359375, 0.477783203125, 0.09417724609375, 0.11529541015625, 0.095703125, 0.2822265625, 0.352294921875, 0.463134765625, 0.195556640625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_20cf577b1e96f3ddcb3dcaa7353fbc22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_093695f985a20fe5ff010ff17e309b18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.008890597149729729, 0.2701863944530487, 0.399176687002182, 0.4784175753593445, 0.38879260420799255, 0.19587808847427368, 0.30498120188713074, 0.021336020901799202, 0.2215113490819931, 0.15722666680812836, 0.4140157401561737, 0.28655368089675903, 0.04142260178923607, 0.29402559995651245, 0.273064523935318, 0.35552218556404114, 0.2863222658634186, 0.13478511571884155, 0.18910935521125793, 0.18139107525348663, 0.05268580839037895, 0.02302098460495472, 0.06123300641775131, 0.45400241017341614, 0.033429279923439026, 0.07814735919237137, 0.18662653863430023, 0.19428600370883942], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_add5634efb8c25726e7d4c09bfaa1fa6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.292724609375, 0.076416015625, 0.1251220703125, 0.2283935546875, 0.374755859375, 0.453369140625, 0.4130859375, 0.041015625, 0.1807861328125, 0.03131103515625, 0.48486328125, 0.3876953125, 0.213623046875, 0.250244140625, 0.454345703125, 0.0035457611083984375, 0.381103515625, 0.22265625, 0.323974609375, 0.4951171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5e4092dcc1ec09c1803b477a7da7bf6b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.164306640625, 0.20068359375, 0.042724609375, 0.48486328125, 0.370849609375, 0.359619140625, 0.05560302734375, 0.2333984375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a78a9c91d25d66008423e7d82e44a14(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ac88cf68cf5ce9d78c84347e7d7adeb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a78a9c91d25d66008423e7d82e44a14
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_358228dfcad02c78d06faa8f561bccc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b010893aee798d3462fd68432f22b644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_358228dfcad02c78d06faa8f561bccc0
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a26f67a0a21aeb0950822e8c1f902754(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.046619612723588943, 0.36074307560920715, 0.1368611752986908, 0.08959367126226425, 0.3649575710296631, 0.020658118650317192, 0.4333539605140686, 0.4733664095401764, 0.3324120044708252, 0.4939935505390167, 0.17411433160305023, 0.33039572834968567, 0.08109614998102188, 0.24609221518039703, 0.4205683171749115, 0.2662409245967865], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9833066ff17ec8b4f5c49d97b1d8c4e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47098708152770996, 0.011034931056201458, 0.3466640114784241, 0.3167663514614105, 0.32977980375289917, 0.15227721631526947, 0.24959419667720795, 0.10165771096944809, 0.20038281381130219, 0.20017109811306, 0.342969685792923, 0.4273511469364166, 0.43680620193481445, 0.13506725430488586, 0.1517568826675415, 0.41486304998397827], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7908523a440b25ed6a5dc9c8fe609937(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3388671875, 0.048980712890625, 0.1605224609375, 0.2052001953125, 0.437255859375, 0.0312042236328125, 0.37646484375, 0.269287109375, 0.0125274658203125, 0.3505859375, 0.396240234375, 0.200439453125, 0.3203125, 0.388427734375, 0.007808685302734375, 0.296142578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6194adbee9cfc383b4d07913d5066476(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4169921875, 0.2139892578125, 0.03564453125, 0.2135009765625, 0.06329345703125, 0.05084228515625, 0.1053466796875, 0.45947265625, 0.06268310546875, 0.3173828125, 0.4287109375, 0.22216796875, 0.07562255859375, 0.019805908203125, 0.497802734375, 0.21484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2543ee47a748e0f2ccaa520de6fdfc96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_415f9df706282926e3c59e230880253b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11310172826051712, 0.45892533659935, 0.17238950729370117, 0.3749266564846039, 0.08221401274204254, 0.4081345498561859, 0.19659733772277832, 0.30083999037742615], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f00c3bfcc73319b91dcf9f18a030f83f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13147161900997162, 0.29045942425727844, 0.3858269453048706, 0.13589529693126678, 0.3898252248764038, 0.4524357318878174, 0.03560706973075867, 0.10897208750247955, 0.3621788024902344, 0.22689078748226166, 0.18564781546592712, 0.4787554144859314, 0.021624630317091942, 0.3423904478549957, 0.07802366465330124, 0.2355167418718338, 0.09350384026765823, 0.05510491505265236, 0.33735743165016174, 0.44733235239982605, 0.35333251953125, 0.47843796014785767, 0.15519170463085175, 0.3355149030685425], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b865a5ce0daca2e2c08c87ba6677101c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03997802734375, 0.0880126953125, 0.457763671875, 0.2685546875, 0.08941650390625, 0.02447509765625, 0.444580078125, 0.290771484375, 0.233642578125, 0.2301025390625, 0.353759765625, 0.363037109375, 0.46923828125, 0.07659912109375, 0.0191650390625, 0.46142578125, 0.0692138671875, 0.20703125, 0.487060546875, 0.451904296875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd2e9266af049333222abbc5369b00ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b98de0d3712b895adbb1d9a5951db194(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.371337890625, 0.2197265625, 0.350830078125, 0.1234130859375, 0.385009765625, 0.455810546875, 0.269775390625, 0.39599609375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_989c252fd4794966f21dbb118705a92a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_945a298059d8d55c8cc1ba9f04c38bb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_989c252fd4794966f21dbb118705a92a
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_536e240cab5d453a371bd948242247ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87d480356534f823d7d324837460c4df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08031198382377625], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6dac7f00c569c0c6e01d62bdc071eeac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0cde584f953236f51e1a96e3b1f51dda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.146240234375, 0.18701171875, 0.462646484375, 0.141357421875, 0.314697265625, 0.1007080078125, 0.34326171875, 0.426025390625, 0.4169921875, 0.337646484375, 0.25634765625, 0.49853515625, 0.00543212890625, 0.280029296875, 0.342529296875, 0.07666015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_024e0d162516e413a3b18d806e6b5c57(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77dfd02fb9c93e0dace3aa7f138069ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_024e0d162516e413a3b18d806e6b5c57
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a746b54a7f4970d06a52d3361ee4ee61(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2376953661441803, 0.05076483264565468, 0.26436442136764526, 0.3860611915588379, 0.0019470604602247477, 0.2918049991130829, 0.06929466873407364, 0.2424599528312683, 0.15733209252357483, 0.14768165349960327, 0.1105569452047348, 0.48925498127937317, 0.4484557509422302, 0.28925836086273193, 0.1597607433795929, 0.17494158446788788, 0.25309616327285767, 0.10787418484687805, 0.4318227469921112, 0.08376122266054153, 0.4344007670879364, 0.09708096832036972, 0.12155608087778091, 0.33946043252944946], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75eb645c86bbc33a7a9af2320ca8edbc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11859130859375, 0.127197265625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b902f5db1dcced054fd69912f2f4f7af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d022413b63e5511cddd556516e986052(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18940988183021545, 0.3345530331134796], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb133c56f72d9e651ae2badd5086f93d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37451171875, 0.4296875, 0.41015625, 0.3154296875, 0.2412109375, 0.0738525390625, 0.10614013671875, 0.221435546875, 0.11798095703125, 0.3369140625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_efac575941d066e426b279f71f3b3aba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19957417249679565, 0.3338392376899719, 0.12323947250843048, 0.08974853157997131, 0.07236465811729431, 0.39009004831314087, 0.3417682945728302, 0.22965997457504272], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_be54dc2e782ef9659d67e5c5b50dc7dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.295166015625, 0.4384765625, 0.251953125, 0.4267578125, 0.0304718017578125, 0.1326904296875, 0.426513671875, 0.348388671875, 0.393798828125, 0.1326904296875, 0.420166015625, 0.148193359375, 0.0175323486328125, 0.25927734375, 0.1658935546875, 0.42529296875, 0.1802978515625, 0.39404296875, 0.357177734375, 0.44580078125, 0.1768798828125, 0.4638671875, 0.1490478515625, 0.155029296875, 0.1422119140625, 0.2147216796875, 0.140869140625, 0.07379150390625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bf07801a793b77edadba595542a9761(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2a90514f4adb7b44b91749f4e041f47(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bf07801a793b77edadba595542a9761
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bb8783b5cc078909b3f066b47360008(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31528669595718384, 0.40821653604507446, 0.03869497403502464], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07ae6a1e3ba244d572aef39e9fd4d3c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13280437886714935, 0.44952887296676636, 0.22603054344654083, 0.08228059113025665, 0.31241628527641296, 0.4709804654121399, 0.488486647605896, 0.07182814180850983, 0.02070740982890129, 0.08594901859760284, 0.4001072347164154, 0.04747257009148598, 0.06080010160803795, 0.11170574277639389, 0.4401686489582062, 0.46119239926338196], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2489826ed451cdaed76307077f5b6edf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34764572978019714, 0.19224317371845245, 0.4386850595474243, 0.4262404441833496, 0.21516290307044983, 0.27567335963249207], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_676918480dcfe114db684ec9120e3c81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.394775390625, 0.00971221923828125, 0.406494140625, 0.150146484375, 0.389892578125, 0.280029296875, 0.0743408203125, 0.111328125, 0.425048828125, 0.183349609375, 0.1356201171875, 0.287841796875, 0.39453125, 0.251708984375, 0.186767578125, 0.12408447265625, 0.1165771484375, 0.340576171875, 0.03216552734375, 0.095458984375, 0.497802734375, 0.2054443359375, 0.05426025390625, 0.07379150390625, 0.474609375, 0.1678466796875, 0.02801513671875, 0.375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6225ef866b48cd44bfa043c3c1745598(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0c75bd441700c68ce2d731248d27487a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09cf30699a5929633ad13c0db0e3425f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0c75bd441700c68ce2d731248d27487a
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_108a9c741ab184c41ad6619ca78c2020(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_431a33accbb4f4ca5fdbe45313433b87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_108a9c741ab184c41ad6619ca78c2020
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d6e511db3bfab3701a4d11f2b74a7d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11357088387012482, 0.009080272167921066, 0.48947975039482117, 0.08285826444625854, 0.06639191508293152, 0.31635841727256775, 0.09397243708372116, 0.3415262699127197, 0.09794243425130844, 0.37008702754974365, 0.18777553737163544, 0.34967848658561707, 0.3457534611225128, 0.311435729265213, 0.1559544801712036, 0.23297037184238434, 0.2703244090080261, 0.4524071514606476, 0.001941309543326497, 0.19773055613040924, 0.39949384331703186, 0.014016528613865376, 0.1170378103852272, 0.46226149797439575, 0.1914275884628296, 0.3369865417480469, 0.19157174229621887], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a23f2bef8fad1b5b35138be32eb0206(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa779386832a769449575feb11344b54(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.159423828125, 0.431640625, 0.23046875, 0.47265625, 0.10406494140625, 0.387939453125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0763e581a71952f12e0f524c50e88710(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb836f63a8e1752ff7e8d6a6ad96bbe7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4721583425998688], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_575c2be3aaa2934fb5a29fd24d6c4bae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24656784534454346, 0.045484140515327454, 0.08666922152042389, 0.004208211787045002, 0.4351097643375397, 0.14060638844966888, 0.13977183401584625, 0.037034835666418076, 0.41126662492752075, 0.3486928641796112, 0.3024536669254303, 0.061112694442272186, 0.22275854647159576, 0.12471555918455124, 0.368723064661026, 0.4364420771598816], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66f72b75b47ab6648c63cf2fc8cde609(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03817953169345856, 0.4206847548484802, 0.1592172086238861, 0.08232222497463226, 0.26850080490112305, 0.23410725593566895, 0.11579608917236328, 0.4714295268058777, 0.4984944760799408, 0.4830073118209839, 0.43696147203445435, 0.251321405172348, 0.19748269021511078, 0.1905142366886139, 0.01673699915409088, 0.024221181869506836, 0.22672130167484283, 0.33522018790245056, 0.29292985796928406], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3478a85699e79cfe5480464e92c184d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.260986328125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7de8ce55a1ae458daf9312c78de265cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16187536716461182, 0.02900010719895363, 0.16715523600578308, 0.026465067639946938, 0.19572071731090546, 0.13332675397396088, 0.23686236143112183, 0.25772491097450256, 0.2000093311071396, 0.4759334325790405, 0.036151591688394547, 0.09300220012664795, 0.1575464904308319, 0.06970380246639252, 0.29703912138938904, 0.28132086992263794], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55c1fd71fe0e4580c767a4c697ee3fda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36956775188446045, 0.4939093589782715, 0.4668015241622925, 0.27071142196655273, 0.17651855945587158, 0.17330288887023926, 0.32717540860176086, 0.16497644782066345, 0.48370787501335144, 0.3925163149833679, 0.04250407591462135, 0.33322057127952576, 0.28948974609375, 0.33110612630844116, 0.48736169934272766, 0.280597984790802], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96116753387ebd77b1b2404d06098c7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13671875, 0.348876953125, 0.32568359375, 0.47021484375, 0.177978515625, 0.358154296875, 0.36474609375, 0.4267578125, 0.263671875, 0.3544921875, 0.149658203125, 0.37548828125, 0.421142578125, 0.038818359375, 0.403076171875, 0.3310546875, 0.492919921875, 0.4130859375, 0.412353515625, 0.287109375, 0.01464080810546875, 0.288818359375, 0.342041015625, 0.456787109375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39285bccb4b4efc5d480e95bbfc408a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.300537109375, 0.39013671875, 0.4052734375, 0.152587890625, 0.43310546875, 0.486328125, 0.08624267578125, 0.445556640625, 0.08319091796875, 0.194580078125, 0.410400390625, 0.264404296875, 0.376220703125, 0.0100250244140625, 0.01361846923828125, 0.4892578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53bbe3be381ff0f606396d11aeb1b517(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3251953125, 0.43310546875, 0.46240234375, 0.3369140625, 0.00177001953125, 0.2332763671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_23058785eccb6a6caa30b5b3fddf4c4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3782880a6a915fa984cb08a9bc84926b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_23058785eccb6a6caa30b5b3fddf4c4b
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5eb138ca6cee6b999c0ae0d75a07e401(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0216217041015625, 0.0970458984375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d50c1d49b006f6ef66bcc9cb20a09a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36648204922676086, 0.47146907448768616, 0.36818426847457886, 0.10211846977472305, 0.3418410122394562, 0.039228688925504684, 0.29997509717941284, 0.33282139897346497, 0.30157503485679626, 0.49614670872688293, 0.12683989107608795, 0.26497238874435425, 0.4911029040813446, 0.16057336330413818, 0.014660751447081566, 0.4336623549461365, 0.44949790835380554, 0.28251832723617554, 0.33314070105552673, 0.45915377140045166, 0.21087698638439178, 0.4353991746902466, 0.4063725173473358, 0.045833609998226166], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb537e74c4cbba91aa3f14df65d42d81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4cf856bf15199971975c1cf7088b500(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47988951206207275, 0.3481069803237915, 0.4787140488624573, 0.2749752998352051, 0.42570462822914124, 0.06513956189155579, 0.3138599693775177, 0.1424020677804947, 0.41751453280448914, 0.2970864772796631, 0.40286386013031006, 0.02811705507338047, 0.44205227494239807, 0.006388514302670956], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8dc12f2a7dc52581792d77067829d43e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13705779612064362], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f9591a0aaf515741e8968b77e8500202(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ef928b84a28df20982e43fead5e64aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f9591a0aaf515741e8968b77e8500202
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19235fc7e63479d6aacbdb9c288d2c02(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12030029296875, 0.42919921875, 0.357421875, 0.467529296875, 0.456298828125, 0.34326171875, 0.2210693359375, 0.1356201171875, 0.36572265625, 0.334716796875, 0.043121337890625, 0.155029296875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_70d06a9477f1407911d0a670c1f9f954(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_30bee08710449fc1b91a095ffc39b038
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1083984375, 0.36376953125, 0.3359375, 0.20458984375, 0.210693359375, 0.274658203125, 0.305908203125, 0.232666015625, 0.499267578125, 0.1954345703125, 0.416259765625, 0.3203125, 0.1060791015625, 0.1864013671875, 0.2288818359375, 0.147705078125, 0.1876220703125, 0.048980712890625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab8433a84875c853e45074708a34469f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07585839927196503, 0.406572163105011, 0.02044341154396534, 0.34728410840034485, 0.03146800398826599, 0.4422660768032074, 0.43010929226875305, 0.0489620715379715, 0.3875536322593689, 0.37052714824676514, 0.13454470038414001, 0.04929817467927933, 0.4819476306438446, 0.10174358636140823, 0.25688135623931885, 0.44785037636756897], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab0a039ec87dc9bb062df2e2a98f4b01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_396aabe45bd0843436abef9b507ac5b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39db26cd7f03a76138753964e5b993b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_396aabe45bd0843436abef9b507ac5b9
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f8c5b299f179d7cce36c4ca47129838(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4508272111415863, 0.4954409897327423, 0.09740038961172104, 0.2103249430656433, 0.24163928627967834, 0.4899272918701172, 0.4956696927547455, 0.3917706310749054, 0.25528162717819214, 0.147888645529747, 0.26580026745796204, 0.42671993374824524, 0.009636222384870052, 0.17078040540218353, 0.18841984868049622, 0.4519394338130951, 0.25752291083335876, 0.06335783749818802, 0.175167977809906, 0.1439533680677414, 0.15772028267383575, 0.18474596738815308, 0.187144935131073, 0.17622187733650208, 0.035767219960689545], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_723aec41d8c8e7932b0beac3882bc702(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02227783203125, 0.07171630859375, 0.1800537109375, 0.4638671875, 0.26708984375, 0.478515625, 0.3193359375, 0.222900390625, 0.449462890625, 0.38720703125, 0.180908203125, 0.119384765625, 0.1444091796875, 0.306396484375, 0.4228515625, 0.12322998046875, 0.11492919921875, 0.18798828125, 0.128173828125, 0.368408203125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c32ea488b0b5e451b0c44f46a2038b49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09905476868152618, 0.08927779644727707, 0.30016082525253296, 0.48613113164901733, 0.4549948275089264, 0.10469949245452881, 0.19992223381996155, 0.3643496632575989, 0.21042080223560333, 0.18489357829093933, 0.40963584184646606, 0.41245830059051514, 0.3341999053955078, 0.22477319836616516, 0.4272212088108063, 0.36768415570259094], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44587888091f1c5cd9aa2b4cb52a51ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a932ab6923f9624bf3df99ab3d7e4edd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2315673828125, 0.1634521484375, 0.076416015625, 0.382568359375, 0.428955078125, 0.278564453125, 0.336669921875, 0.3037109375, 0.234619140625, 0.04998779296875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb7eec3c311a816933ae97b274778d19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38232421875, 0.1163330078125, 0.4375, 0.15478515625, 0.2169189453125, 0.351806640625, 0.10247802734375, 0.1998291015625, 0.234375, 0.25732421875, 0.25341796875, 0.411376953125, 0.2454833984375, 0.177001953125, 0.25439453125, 0.08355712890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_126127298a872858242ef92a6d59a455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1fed42ac7bace8d3316ab2b1f19b1da5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_126127298a872858242ef92a6d59a455
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5a46b8d4a18b4eb0d42ccfa91182348(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2139434814453125, 0.09025169909000397, 0.24105601012706757, 0.03881563991308212, 0.22487123310565948, 0.31466400623321533, 0.3569912016391754, 0.14438661932945251, 0.33678749203681946, 0.006314309313893318, 0.04825013875961304, 0.08330419659614563, 0.43341225385665894, 0.29005739092826843, 0.4288305938243866, 0.37647098302841187, 0.35989683866500854, 0.30881455540657043, 0.20083434879779816, 0.4532231390476227, 0.37024593353271484, 0.3089168071746826, 0.008482069708406925, 0.2732997238636017], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f3441b84666245f38033554359bde822(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bb135cf48c1f1568d6909255367f818(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f3441b84666245f38033554359bde822
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2427818d77b8ba8433539e5745a5bf6c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00925445556640625, 0.09637451171875, 0.394287109375, 0.393310546875, 0.429931640625, 0.2379150390625, 0.336669921875, 0.08355712890625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01d4339b46aa4e6a7668878a67ef5d09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3681640625, 0.301025390625, 0.28515625, 0.210693359375, 0.28759765625, 0.40576171875, 0.37548828125, 0.47998046875, 0.0718994140625, 0.421875, 0.431640625, 0.04278564453125, 0.221923828125, 0.02972412109375, 0.1302490234375, 0.389892578125, 0.209716796875, 0.06475830078125, 0.36572265625, 0.240478515625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31ae6be5693511e2aee4cda3d050c71f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11541748046875, 0.40625, 0.2088623046875, 0.3662109375, 0.1607666015625, 0.36865234375, 0.3203125, 0.03363037109375, 0.1363525390625, 0.386962890625, 0.36083984375, 0.2880859375, 0.1685791015625, 0.362060546875, 0.357421875, 0.1746826171875, 0.00534820556640625, 0.20947265625, 0.373046875, 0.00750732421875, 0.12744140625, 0.0943603515625, 0.417724609375, 0.396728515625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_47971da3ab5f7f75fb61c7241d947d1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3702150583267212, 0.42213618755340576, 0.37100860476493835, 0.16371291875839233, 0.29672345519065857, 0.17424163222312927, 0.2585812509059906, 0.4468275308609009, 0.1501677930355072, 0.022354476153850555, 0.33103761076927185, 0.23631006479263306, 0.035423193126916885, 0.3635772168636322, 0.26224562525749207, 0.4064749777317047], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_119c16999c93fabda8da23140846dfcd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1719970703125, 0.1641845703125, 0.093017578125, 0.036163330078125, 0.389404296875, 0.4052734375, 0.37109375, 0.279541015625, 0.194091796875, 0.285400390625, 0.1336669921875, 0.026763916015625, 0.102783203125, 0.2880859375, 0.373779296875, 0.447998046875, 0.115966796875, 0.264892578125, 0.12493896484375, 0.03216552734375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc322aee2370429abaef33e252f05ac2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2296142578125, 0.311767578125, 0.337158203125, 0.1971435546875, 0.377197265625, 0.4267578125, 0.168212890625, 0.06787109375, 0.278076171875, 0.34716796875, 0.259521484375, 0.4248046875, 0.2381591796875, 0.187255859375, 0.13427734375, 0.1357421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd9ee3ad38f1c333ce0cf335868deded(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28829479217529297, 0.4718381464481354, 0.3745342791080475, 0.4069829285144806, 0.21420034766197205, 0.33471962809562683], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a26e1de0407e314850f6b6c6b500fd13(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2326047420501709, 0.3073127865791321, 0.1567959487438202, 0.48032981157302856, 0.07893956452608109, 0.49268636107444763, 0.07218028604984283, 0.08204304426908493, 0.21736478805541992, 0.014151533134281635, 0.20168007910251617, 0.01982266455888748, 0.4629850685596466, 0.2984108328819275, 0.3930363953113556, 0.46602344512939453, 0.07081801444292068, 0.31681323051452637, 0.0245878417044878, 0.3383208215236664, 0.4705226421356201, 0.11535211652517319, 0.4378550946712494, 0.2962978780269623, 0.19923219084739685, 0.21585458517074585, 0.26688486337661743, 0.23830629885196686, 0.06384061276912689, 0.4954627752304077], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f0f7385e55b352eca9c44304f8a8d9a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4150390625, 0.2164306640625, 0.118896484375, 0.09210205078125, 0.455810546875, 0.31494140625, 0.2401123046875, 0.358154296875, 0.1949462890625, 0.229736328125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ad5475207b7e93b4d933625a03168b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37742117047309875, 0.2989486753940582, 0.4611561894416809, 0.20694242417812347, 0.1579381227493286, 0.3164350390434265, 0.43614766001701355, 0.27811071276664734, 0.23413002490997314, 0.4515962302684784, 0.012487872503697872, 0.39293497800827026, 0.048062268644571304, 0.45195069909095764, 0.48309484124183655, 0.3814442455768585, 0.35643815994262695, 0.054413843899965286, 0.3169906437397003, 0.11381059885025024], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_861df022d738cb30f26ccff859dc9d7e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08776268362998962, 0.0449388287961483, 0.11602173745632172], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b78f81ca5f45bac85ba448da918e1637(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9639858b17d30594db9948459f11c138(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b78f81ca5f45bac85ba448da918e1637
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b406f75e1ab42071fe3510639f28669(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_30bee08710449fc1b91a095ffc39b038
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23388671875, 0.022918701171875, 0.380859375, 0.37060546875, 0.30078125, 0.267578125, 0.1077880859375, 0.0297393798828125, 0.025299072265625, 0.30419921875, 0.291748046875, 0.32763671875, 0.409423828125, 0.038482666015625, 0.1632080078125, 0.164306640625, 0.137451171875, 0.2352294921875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_27fa94be0df30533f89f7959c13025db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41015625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9360d8aa84e677f4b55e338e3b904759(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0870433896780014, 0.4934428334236145, 0.4021000266075134, 0.4601212441921234, 0.04839523881673813, 0.3288993239402771, 0.21583224833011627, 0.1935098022222519, 0.049084439873695374, 0.4102949798107147, 0.2278461903333664, 0.3861950635910034, 0.3144370913505554, 0.08601986616849899, 0.3719145655632019, 0.0027410779148340225, 0.0631076917052269, 0.1582830548286438, 0.20906955003738403, 0.05311333388090134, 0.051185380667448044, 0.38212791085243225, 0.05099580064415932, 0.20566406846046448], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9c53f7937bbd7290f6fe3fa7b9d2880(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1712392270565033, 0.3112501800060272, 0.35512277483940125, 0.18770980834960938, 0.07823210954666138, 0.33138585090637207, 0.467612087726593, 0.09104224294424057, 0.28367772698402405, 0.2524486780166626, 0.27582234144210815, 0.15422877669334412, 0.3619326949119568, 0.15569251775741577, 0.42182600498199463, 0.024217713624238968, 0.0070198336616158485, 0.3864477276802063], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_94ebf915128ab2d4b0af288390722361(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46795305609703064, 0.011317248456180096, 0.23156902194023132, 0.15241119265556335, 0.43749892711639404, 0.2955414652824402, 0.4700022339820862, 0.19776995480060577, 0.2747645676136017, 0.2739701271057129, 0.4967723786830902, 0.03458918258547783, 0.2574545741081238, 0.011361716315150261, 0.2910802662372589, 0.12309473007917404, 0.30494847893714905, 0.15801119804382324, 0.3970167338848114, 0.4831017851829529, 0.21984536945819855, 0.019955545663833618, 0.39003145694732666, 0.3694833219051361], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2663d99f6f518ce36630a9f9f35802e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f5018c3b931b8d045ddfe018d136019(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2663d99f6f518ce36630a9f9f35802e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03155517578125, 0.050323486328125, 0.10577392578125, 0.478271484375, 0.038421630859375, 0.06787109375, 0.2227783203125, 0.386474609375, 0.212158203125, 0.438232421875, 0.2230224609375, 0.184326171875, 0.260986328125, 0.282958984375, 0.06951904296875], dtype='float16').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10612b00e13ff290b8ef3337b646919a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.376220703125, 0.01125335693359375, 0.1290283203125, 0.10107421875, 0.131103515625, 0.272705078125, 0.2255859375, 0.186767578125, 0.4765625, 0.385986328125, 0.43505859375, 0.482666015625, 0.0496826171875, 0.014251708984375, 0.453125, 0.08154296875, 0.3994140625, 0.2479248046875, 0.185546875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53383a787fd7aeb488af74279edd598d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016665510833263397, 0.3774878680706024, 0.45941296219825745, 0.36997345089912415, 0.4689483642578125, 0.19248650968074799, 0.38020333647727966, 0.43020132184028625, 0.11409205198287964, 0.4911719560623169, 0.4499187171459198, 0.3434053957462311, 0.12978368997573853, 0.15630283951759338, 0.007014165166765451, 0.440627783536911], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38839af6c1b6bd9cbb72c8cb5a78bae2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.126953125, 0.14892578125, 0.1123046875, 0.32080078125, 0.277099609375, 0.1776123046875, 0.34619140625, 0.038604736328125, 0.092529296875, 0.3251953125, 0.06744384765625, 0.036346435546875, 0.2490234375, 0.30029296875, 0.06829833984375, 0.37890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3468905893d8fe3274d16d1a50655fdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d57e4c21f45512f7d789e24c00bc5223(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.427734375, 0.05908203125, 0.25927734375, 0.337158203125, 0.25439453125, 0.1722412109375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41bd043593773b8f3853f0570f602251(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3630797863006592, 0.30346399545669556, 0.0965011790394783, 0.18260104954242706, 0.08745942264795303, 0.06993754953145981, 0.031012283638119698, 0.3174581527709961, 0.46059438586235046, 0.41361403465270996], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43162a57007f54c0475aa9cea7722ed9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3369140625, 0.29443359375, 0.38427734375, 0.062408447265625, 0.3876953125, 0.476318359375, 0.1143798828125, 0.421875, 0.411376953125, 0.217529296875, 0.07940673828125, 0.0755615234375, 0.19189453125, 0.39404296875, 0.34130859375, 0.3115234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c3ee0d1cbe4360efa023f53f4cc3aed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21761657297611237, 0.4710249602794647, 0.08776799589395523, 0.28327855467796326, 0.2766954302787781, 0.46420761942863464, 0.4429542124271393, 0.2054373025894165, 0.20844662189483643, 0.13638648390769958, 0.4446812868118286, 0.1677548885345459, 0.08862481266260147, 0.4053942561149597, 0.02937992848455906, 0.4047880470752716, 0.12783420085906982, 0.25896376371383667, 0.23754313588142395, 0.32882577180862427, 0.02225431054830551, 0.10626959800720215, 0.039588864892721176, 0.28402599692344666], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98c01bae13d7e36260aa97de2a54a38f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09365340322256088, 0.020882897078990936, 0.30299875140190125, 0.3581470251083374, 0.4941698908805847, 0.40037697553634644, 0.42361053824424744, 0.33449509739875793, 0.21039554476737976, 0.24242600798606873, 0.40729859471321106, 0.2803369462490082, 0.4127223789691925, 0.12498593330383301, 0.1655048280954361, 0.2171228528022766], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98a5698dc82f4f1a4eef74534015df25(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3833984136581421, 0.38703933358192444, 0.3174671530723572, 0.02402455359697342], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42c31d160dcad50d54e607198fa5167b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14087575674057007, 0.09752211719751358, 0.26719167828559875, 0.34760162234306335, 0.37170907855033875, 0.048627182841300964, 0.17319466173648834, 0.10602503269910812, 0.299142062664032, 0.013749307952821255, 0.36338311433792114, 0.12039603292942047, 0.02245231717824936, 0.009156684391200542, 0.09895998984575272, 0.09722639620304108], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3dfefc053d820feb412c1758d0c64645(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25048828125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e78bd38f646139f1ed424563182abfe7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1426253467798233, 0.4435489773750305, 0.05574354529380798, 0.10082845389842987, 0.1539749801158905, 0.33219894766807556, 0.019108954817056656, 0.36793503165245056, 0.09309157729148865, 0.03436391055583954, 0.07488607615232468, 0.08595167845487595, 0.04449755698442459, 0.2032676637172699, 0.26297178864479065, 0.25655749440193176, 0.31992432475090027, 0.20484746992588043, 0.4397542178630829, 0.06380155682563782], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d926b02f35e27bcad567f197e42f730(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22189955413341522], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ff69eeb3d2905721f3360ba7d216656(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.395751953125, 0.37158203125, 0.434814453125, 0.392578125, 0.00992584228515625, 0.0928955078125, 0.26806640625, 0.1552734375, 0.3974609375, 0.299072265625, 0.437744140625, 0.315185546875, 0.274169921875, 0.190185546875, 0.08258056640625, 0.443359375, 0.0093536376953125, 0.1475830078125, 0.160888671875, 0.256103515625, 0.1280517578125, 0.037078857421875, 0.0797119140625, 0.05145263671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6520fb53e25471c07128e1f49fc79d49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.021209716796875, 0.32861328125, 0.262451171875, 0.286376953125, 0.11016845703125, 0.049530029296875, 0.022552490234375, 0.06439208984375, 0.3623046875, 0.216552734375, 0.11248779296875, 0.1070556640625, 0.1180419921875, 0.28076171875, 0.49609375, 0.485595703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9da82d33de07768ce345eee0ee8445e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4305300712585449, 0.3002670109272003, 0.47580549120903015, 0.23295290768146515, 0.10439591854810715, 0.19968962669372559, 0.41215264797210693, 0.4208153784275055, 0.187204509973526, 0.18663646280765533, 0.3859651982784271, 0.12225861847400665, 0.40669265389442444, 0.17045068740844727, 0.44196948409080505, 0.43446245789527893, 0.45904818177223206, 0.459689199924469, 0.2577245533466339, 0.2420257329940796, 0.4496705234050751, 0.0488189235329628, 0.13498125970363617, 0.20690155029296875, 0.3718787431716919], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae0b114246e4452c66d62ae5df5c6846(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3501ecdc59ffeffad16c082107542c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4296875, 0.10546875, 0.371337890625, 0.1502685546875, 0.447509765625, 0.26220703125, 0.424560546875, 0.375244140625, 0.107666015625, 0.039276123046875, 0.0292205810546875, 0.29443359375, 0.0030269622802734375, 0.4384765625, 0.004886627197265625, 0.08447265625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61ac15a8fecfeeab316ef6ee4a7f042f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.132080078125, 0.1611328125, 0.1197509765625, 0.07415771484375, 0.394287109375, 0.493896484375, 0.45654296875, 0.01531219482421875, 0.05224609375, 0.411865234375, 0.336181640625, 0.15771484375, 0.411865234375, 0.43701171875, 0.2391357421875, 0.280029296875, 0.23388671875, 0.1544189453125, 0.0263214111328125, 0.07708740234375, 0.12939453125, 0.414794921875, 0.488037109375, 0.2325439453125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1920edb05c9dfa0fede652635c1dcd2a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.280029296875, 0.08599853515625, 0.036590576171875, 0.1649169921875, 0.0275726318359375, 0.277099609375, 0.19189453125, 0.1630859375, 0.2783203125, 0.13134765625, 0.337890625, 0.352294921875, 0.366943359375, 0.07806396484375, 0.1016845703125, 0.253173828125, 0.2734375, 0.42236328125, 0.251220703125, 0.1776123046875, 0.4140625, 0.480712890625, 0.13671875, 0.345947265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_abef86efa6df25e495807a0880150096(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.270751953125, 0.438720703125, 0.224609375, 0.218505859375, 0.439208984375, 0.422607421875, 0.231201171875, 0.494140625, 0.439697265625, 0.005889892578125, 0.417724609375, 0.41162109375, 0.025543212890625, 0.465087890625, 0.263427734375, 0.3681640625, 0.388916015625, 0.04034423828125, 0.09210205078125, 0.093994140625, 0.016204833984375, 0.332275390625, 0.33056640625, 0.372314453125, 0.1688232421875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbeaa8fd06d8d5cd37523d9e3d528f89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aea4d89b1ef3a27e0c9e334339074214(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07879638671875, 0.3291015625, 0.2440185546875, 0.2666015625, 0.10430908203125, 0.36279296875, 0.458984375, 0.2060546875, 0.230712890625, 0.431640625, 0.032684326171875, 0.1287841796875, 0.044097900390625, 0.1307373046875, 0.494384765625, 0.1689453125, 0.3564453125, 0.41015625, 0.01401519775390625, 0.38427734375, 0.288330078125, 0.406982421875, 0.43359375, 0.335693359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbb12f600644e629b891f76aca7630e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32962659001350403, 0.13567712903022766, 0.3039896488189697, 0.017089802771806717, 0.3227505385875702, 0.22872397303581238, 0.3095281720161438, 0.17784452438354492], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a40cfa3ace0a160ed8c5c7395fa52cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3622458279132843, 0.1757630854845047, 0.48009803891181946, 0.209505096077919, 0.2796361744403839, 0.2734540104866028, 0.2734384536743164, 0.011024227365851402, 0.268640398979187, 0.2953067719936371, 0.12283419072628021, 0.19551897048950195, 0.41425031423568726, 0.2254122793674469, 0.10984767973423004, 0.10405410081148148, 0.12133421003818512, 0.2439509630203247, 0.3352557420730591, 0.0009116711444221437, 0.3420238196849823, 0.41757991909980774, 0.022224079817533493, 0.27482327818870544, 0.2741718888282776, 0.1448204219341278, 0.27518075704574585, 0.42506396770477295], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6cae228ade2fa401d3f95ad926fc4f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32017624378204346, 0.18403354287147522, 0.15782299637794495, 0.42059826850891113, 0.2962539494037628, 0.36504489183425903, 0.2074495553970337, 0.3076251447200775, 0.44464167952537537, 0.4967811107635498, 0.039418112486600876, 0.32442706823349, 0.12631186842918396, 0.12607286870479584, 0.35448724031448364, 0.17344418168067932, 0.06239613890647888, 0.4690121114253998, 0.0272661279886961, 0.1245494931936264, 0.011952613480389118, 0.49638524651527405, 0.03224114328622818, 0.00250729126855731, 0.17209601402282715, 0.34957367181777954, 0.2323186695575714, 0.17208737134933472], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfc8689a095e89666d64c858d6f5eecf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06808ecd253682a658d711a0dc76d7fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3056640625, 0.395751953125, 0.2467041015625, 0.1781005859375, 0.2080078125, 0.1417236328125, 0.122802734375, 0.304443359375, 0.365478515625, 0.426513671875, 0.236572265625, 0.373779296875, 0.17822265625, 0.375, 0.12158203125, 0.0278778076171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b1145646d30e3192ffe8369ab547002(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4638671875, 0.07916259765625, 0.313232421875, 0.296142578125, 0.45361328125, 0.218994140625, 0.2301025390625, 0.36572265625, 0.1453857421875, 0.32958984375, 0.0079803466796875, 0.443359375, 0.3642578125, 0.3076171875, 0.43359375, 0.2939453125, 0.197021484375, 0.127197265625, 0.155029296875, 0.386474609375, 0.452880859375, 0.315673828125, 0.2325439453125, 0.1776123046875, 0.0987548828125, 0.357421875, 0.12457275390625, 0.263916015625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_03f501535c8e6a2fdd956cd0332efb52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9bfef8fc25cd8b3c7643203ce104161(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_03f501535c8e6a2fdd956cd0332efb52
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b3ca0c84a69e96242198b78822f95eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17565636336803436, 0.13324353098869324, 0.23556871712207794, 0.11180637031793594, 0.21494321525096893, 0.20275315642356873, 0.4010474681854248, 0.23739595711231232, 0.21381504833698273, 0.44835397601127625, 0.3357185125350952, 0.23479793965816498, 0.16481587290763855, 0.03403547406196594, 0.06355904787778854, 0.3632146120071411, 0.08201977610588074, 0.18763567507266998, 0.15541329979896545, 0.45740023255348206, 0.3607213795185089, 0.21036337316036224, 0.40609049797058105, 0.4842072129249573], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5d5a1f7b560287eec99137e1047c033(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4735952317714691, 0.05091310292482376, 0.09468799084424973, 0.3325001299381256, 0.28398656845092773, 0.3797680735588074, 0.3971150815486908, 0.46577250957489014, 0.3206663727760315, 0.11589069664478302, 0.07233070582151413, 0.06812036037445068, 0.07473732531070709, 0.2676847577095032, 0.4475102722644806, 0.03295319527387619, 0.1505538821220398, 0.22027035057544708, 0.08455030620098114, 0.25707462430000305, 0.33073604106903076, 0.4252733290195465, 0.09613856673240662, 0.35238420963287354], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de479c2a34536b91d7941fa0e63d4a3c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.067138671875, 0.1630859375, 0.1474609375, 0.291259765625, 0.335205078125, 0.126953125, 0.02093505859375, 0.32373046875, 0.2073974609375, 0.044952392578125, 0.0001049041748046875, 0.367431640625, 0.32958984375, 0.0017881393432617188, 0.01119232177734375, 0.019195556640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc869e8a4d2ca251f64f75c57c3dabf9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.421142578125, 0.492919921875, 0.129638671875, 0.1876220703125, 0.404052734375, 0.01922607421875, 0.300537109375, 0.26513671875, 0.418701171875, 0.2861328125, 0.08526611328125, 0.261474609375, 0.49853515625, 0.3857421875, 0.2027587890625, 0.32177734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9a810c9a78b6a7cf1da874e4957167a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3197736442089081, 0.16242657601833344, 0.030578218400478363, 0.49826478958129883, 0.459328293800354, 0.42597174644470215, 0.2840466797351837, 0.07100093364715576], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9483719cc628be03ab01651a9c90422(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.339111328125, 0.171630859375, 0.026123046875, 0.1531982421875, 0.0101318359375, 0.062042236328125, 0.017333984375, 0.002025604248046875, 0.1619873046875, 0.2783203125, 0.1171875, 0.18115234375, 0.23779296875, 0.04705810546875, 0.15869140625, 0.055145263671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da65682b4c59605c3aa383b20cd4fcb9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bf1e1634c36e5ef5dd76bb58c7ad0d5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2257540225982666, 0.09295482188463211, 0.38323235511779785, 0.07909043878316879, 0.33387869596481323, 0.03440294414758682, 0.18804188072681427, 0.2917407155036926, 0.4781714975833893, 0.1174091026186943, 0.45225998759269714, 0.314965158700943, 0.12393530458211899, 0.2702549993991852, 0.17346404492855072, 0.22403180599212646], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8dae64009debf92c85c4698b99caa7f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06453804671764374, 0.22664575278759003, 0.03426147997379303, 0.27193692326545715, 0.1559160053730011, 0.4033445417881012, 0.26065197587013245, 0.10837781429290771, 0.34077298641204834, 0.32695168256759644], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e61599c28ab4f77eb5904d59eef0ba8d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b2702b0e89c945b7bed81f2d918e0eab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21391478180885315], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ab25a3e2e94aa7f2cc1b2c3e2da1639(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.169677734375, 0.024688720703125, 0.286865234375, 0.181396484375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a6eeb081cd5c582e1d58ca7d275a607(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36c558c503da7bbf10ed4e88f5072d3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4356600344181061, 0.4465019404888153, 0.45230647921562195, 0.36357319355010986, 0.4135817587375641, 0.16911068558692932, 0.25663354992866516, 0.3971746563911438, 0.16309195756912231, 0.01620424911379814, 0.26046985387802124, 0.3973093628883362, 0.4802510440349579, 0.0043780868873000145, 0.4736136198043823, 0.07029016315937042, 0.15904439985752106, 0.09331579506397247, 0.24084167182445526, 0.4755370318889618], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_140157323802807a893bfdff45660fab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75a543643012e8f8e5ad1d8cb18a233a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_140157323802807a893bfdff45660fab
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_29ca71dfca9f72cd881e9d22baeadfa9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20481769740581512, 0.1912686675786972, 0.4054698646068573, 0.11994129419326782, 0.46571430563926697, 0.19768007099628448, 0.28442084789276123, 0.0100177563726902, 0.19292357563972473, 0.43798547983169556, 0.20954924821853638, 0.08079636096954346, 0.0693327933549881, 0.025125598534941673, 0.007673020474612713, 0.33769872784614563], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da433bf77085effe68f5e6fff80a91dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.447265625, 0.058349609375, 0.1376953125, 0.449462890625, 0.472900390625, 0.119873046875, 0.06292724609375, 0.32470703125, 0.2176513671875, 0.3779296875, 0.07843017578125, 0.1248779296875, 0.1490478515625, 0.370361328125, 0.4638671875, 0.411376953125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_80d1489fff38b6898845fb46834cfef8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0687255859375, 0.15869140625, 0.319580078125, 0.438232421875, 0.445068359375, 0.060211181640625, 0.43310546875, 0.196533203125, 0.287109375, 0.13427734375, 0.1849365234375, 0.37353515625, 0.280517578125, 0.04412841796875, 0.0767822265625, 0.2489013671875, 0.1871337890625, 0.367431640625, 0.25, 0.14892578125, 0.46484375, 0.0191192626953125, 0.0302581787109375, 0.294677734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_47dc1e18a7dad2a12ecb5ead09729a1f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.052093505859375, 0.405517578125, 0.404541015625, 0.13134765625, 0.333251953125, 0.265869140625, 0.3193359375, 0.31982421875, 0.11260986328125, 0.044158935546875, 0.302490234375, 0.3916015625, 0.2210693359375, 0.017913818359375, 0.2030029296875, 0.00043892860412597656, 0.31787109375, 0.45654296875, 0.354248046875, 0.05792236328125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f69ed6bb5b9f523417768478ed0744b3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22232678532600403, 0.12288061529397964, 0.21285653114318848, 0.2516457736492157, 0.06680552661418915, 0.33420678973197937, 0.25701549649238586, 0.326876163482666, 0.46729421615600586, 0.3976430892944336, 0.21225935220718384, 0.025633618235588074, 0.4700140953063965, 0.11371169239282608, 0.3869360387325287, 0.4724494218826294, 0.08683298528194427, 0.47443583607673645, 0.25797101855278015, 0.22336874902248383, 0.49094057083129883, 0.06457160413265228, 0.2866867780685425, 0.3902905285358429], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ece0433b9d0463882aef95d09fc590c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a124dabfc0fade8db140e9cdaaa6add(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ece0433b9d0463882aef95d09fc590c9
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2debbc17b023e7a4d429522062c94680(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17315524816513062, 0.20158882439136505, 0.23434914648532867, 0.24587604403495789, 0.40769797563552856, 0.14365598559379578, 0.1768021136522293, 0.10398240387439728, 0.006829364690929651, 0.2583009898662567, 0.08943825960159302, 0.24397079646587372, 0.30740657448768616, 0.4858699440956116, 0.32049697637557983, 0.1745566576719284, 0.21659669280052185, 0.1279488354921341, 0.16677387058734894, 0.3454732894897461, 0.4940218925476074, 0.14108429849147797, 0.21863916516304016, 0.10344108939170837, 0.2346770167350769, 0.10951413959264755, 0.1446681171655655, 0.2341463267803192], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c1d3625c209ffead216d29970aaf5b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.491943359375, 0.09716796875, 0.476318359375, 0.1126708984375, 0.168212890625, 0.219482421875, 0.1981201171875, 0.2305908203125, 0.3056640625, 0.2138671875, 0.2457275390625, 0.04864501953125, 0.196533203125, 0.443603515625, 0.42333984375, 0.327880859375, 0.0258636474609375, 0.425048828125, 0.40771484375, 0.328857421875, 0.2225341796875, 0.300048828125, 0.01479339599609375, 0.42626953125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c46c1a2acb7e545f636d4148b022ac8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0777587890625, 0.478271484375, 0.403076171875, 0.359130859375, 0.400634765625, 0.300537109375, 0.35595703125, 0.384521484375, 0.18798828125, 0.046661376953125, 0.1988525390625, 0.338623046875, 0.42578125, 0.232177734375, 0.26953125, 0.087890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8f85251c37791bdc49f88a4a3abb7bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4308830797672272, 0.41537514328956604, 0.39811447262763977, 0.29343560338020325, 0.14757680892944336, 0.2626277804374695, 0.2206019163131714, 0.4073760211467743, 0.06095521152019501, 0.10782334208488464, 0.20496025681495667, 0.12915052473545074, 0.3286523222923279, 0.2219945639371872, 0.47139039635658264, 0.02922828122973442], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_776f1bd072e6fdb54227e391ef0ef598(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.036834716796875, 0.3896484375, 0.424072265625, 0.156982421875, 0.248291015625, 0.222900390625, 0.1044921875, 0.02197265625, 0.1273193359375, 0.1146240234375, 0.25634765625, 0.1728515625, 0.1463623046875, 0.1575927734375, 0.25830078125, 0.43408203125, 0.212646484375, 0.2332763671875, 0.346923828125, 0.04931640625, 0.34521484375, 0.368896484375, 0.427001953125, 0.353759765625, 0.36083984375, 0.1519775390625, 0.472412109375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db2c637356ff6a9907ed3be79e224d4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_020a18598495e0a7b266d5dcf037f817(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20650231838226318, 0.30309364199638367], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9605f5bfac75fcb5db5987093b63228f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08789823204278946, 0.09480113536119461, 0.38837572932243347, 0.25614315271377563, 0.09628894180059433, 0.19233213365077972, 0.4239768981933594, 0.246416836977005, 0.10161040723323822, 0.3596040606498718, 0.27276912331581116, 0.34372496604919434, 0.3809317350387573, 0.24770992994308472, 0.2734394073486328, 0.31455308198928833], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2e79b0b320ae1e3d1e223b032f6f672(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09203975647687912, 0.4466280937194824, 0.23959675431251526, 0.09418195486068726, 0.21899843215942383, 0.2871187925338745, 0.3798769414424896, 0.4430478811264038, 0.05165648087859154, 0.32069411873817444, 0.3131090998649597, 0.2472071647644043, 0.16957837343215942, 0.278344064950943, 0.4871661067008972, 0.40830230712890625], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_efa87e9158718d6c17cf97f6add9c998(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1605224609375, 0.458984375, 0.0936279296875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb6697fae08c834848b629d3934554b2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.026329634711146355, 0.14102491736412048, 0.34593281149864197, 0.46759843826293945, 0.471499502658844, 0.469028502702713, 0.20283332467079163, 0.29122602939605713, 0.42913371324539185, 0.03325195237994194, 0.2073410600423813, 0.19046984612941742, 0.33069536089897156, 0.18918170034885406, 0.28581175208091736, 0.12947848439216614], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b2aa11fe849637073b9ccb8a95c09491(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41294845938682556, 0.38731861114501953, 0.19174674153327942, 0.017686519771814346, 0.38049009442329407, 0.2028520554304123, 0.24787521362304688, 0.44811537861824036, 0.33211660385131836, 0.41878044605255127, 0.025900203734636307, 0.013189578428864479, 0.10577481240034103, 0.19055163860321045, 0.4826202392578125, 0.09808030724525452], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5e96ba4d707034fc786443fc38c159e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07562255859375, 0.059173583984375, 0.26904296875, 0.051422119140625, 0.348388671875, 0.150634765625, 0.281494140625, 0.2471923828125, 0.1546630859375, 0.2437744140625, 0.016937255859375, 0.2481689453125, 0.31103515625, 0.1678466796875, 0.01416015625, 0.3369140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a295be2984591cf007a4bd85ef764481(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bcd82410a28796183db9ea69d3e8d640(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4892578125, 0.1956787109375, 0.247802734375, 0.4990234375, 0.006519317626953125, 0.359375, 0.07220458984375, 0.4560546875, 0.388427734375, 0.0274200439453125, 0.37158203125, 0.30615234375, 0.3134765625, 0.07904052734375, 0.303466796875, 0.221435546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_368704c4789809680c4aa5ca37724705(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07856889814138412, 0.19414405524730682, 0.31241512298583984, 0.1033751592040062, 0.11563032865524292, 0.46455803513526917, 0.07121587544679642, 0.16171933710575104, 0.28313156962394714, 0.2601550221443176], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51d77708cd805a065f550aceb87c3831(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_1de039c1dcaf14b4b27c085ecc75a49b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_ba32a88792bcda1e7debf247a6100264(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_02134e8293b2caa197d34ecd0c82b64f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_401eed822e3968c75ff4dfebd8abb5f1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_daf6c28a06badd2166429e2f551d1511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a1c66f1f6b160866c0ff226076740be5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_457c1034fbf71b1c3753cc85023ec7f6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_01d6f22d794f4695de99a51464761ec1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_61b22eaa0d4eecdb76251ee9ed5109bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bc64d890c7f2b9184b1110ca90dd51c4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_cfeb4be0a2311f05e35675e78886e60e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_8ff280ddb62c53196715d5d0eea5e0aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_64da93602daa6cf543369e73e795beae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_20d78d7a552b39362498c0e5aba7f2e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_5fc57627e042ca460d92274720bc6a98(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_76507a1b521dcfd5642848299dc9dd1b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_054bec9c87d83a07587fa079a7032b0b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_701427004926d049986cfd5fffdbec2f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_05d07a396d2d518c1f9f355cb5ae2309(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_35af1cac4b0f73665144f4f598fee6f0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4e7d488259349ce2de4748cbb5aca91b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_5151870a8a25b2b6b00e2d50620190a6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a0ca5377ce1eae493dce3069e6a9146b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_01807d8175f7ba75ae4ff375f6b085c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_87451d4417be6571e9462c24b340c576(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_f28dd262e7e08b340552622aea2227df(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_d0a4c7ff355bcc25bacb885fd898a425(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 8, 3, 224, 224], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_42829ccaaeb262da62067e363b816f25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_0469ed37c14d545e4e8b93cf7d234bae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_06ba996a6b88813331f493a40b5ea446(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_86b6f9266468fc57624ac1a7a8325dda(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_83346459f3d31a00e5264c469259215f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None




if __name__ == '__main__':
    unittest.main()