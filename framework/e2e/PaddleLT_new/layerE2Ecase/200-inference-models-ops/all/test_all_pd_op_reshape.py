import os
os.environ['FLAGS_cinn_new_group_scheduler'] = '1'
os.environ['FLAGS_group_schedule_tiling_first'] = '1'
os.environ['FLAGS_enable_pir_api'] = '1'
os.environ['FLAGS_cinn_bucket_compile'] = '1'
import sys
import unittest
import numpy as np
from dataclasses import dataclass
import typing as t
import itertools

@dataclass
class Stage:
    name: str
    env_vars: t.Dict[str, str]

cinn_stages = [
    Stage(
        name="dynamic_to_static",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=False,
            FLAGS_prim_enable_dynamic=False,
        ),
    ),
    Stage(
        name="prim",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
        ),
    ),
    Stage(
        name="infer_symbolic",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=False,
            FLAGS_check_infer_symbolic=True,
        ),
    ),
	Stage(
        name="frontend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=True,
        ), 
    ),
    Stage(
        name="backend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=False,
        ), 
    ),
]

def GetCinnStageByName(name):
    for stage in cinn_stages:
        if stage.name == name:
            return stage
    return None

def GetCurrentCinnStage():
    name = os.getenv('PADDLE_DEBUG_CINN_STAGE_NAME')
    if name is None:
        return None
    stage_names = [stage.name for stage in cinn_stages]
    assert name in stage_names, (
        f"PADDLE_DEBUG_CINN_STAGE_NAME should be in {stage_names}"
    )
    return GetCinnStageByName(name)

def GetPrevCinnStage(stage):
    for i in range(1, len(cinn_stages)):
        if stage is cinn_stages[i]:
            return cinn_stages[i - 1]
    return None

def IsCinnStageEnableDiff():
    value = os.getenv('PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF')
    enabled = value in {
        '1',
        'true',
        'True',
    }
    if enabled:
        assert GetCurrentCinnStage() is not None
    return enabled

def GetExitCodeAndStdErr(cmd, env):
    env = {
        k:v
        for k, v in env.items()
        if v is not None
    }
    import subprocess
    result = subprocess.run(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        env=env,
    )
    return result.returncode, result.stderr

def GetStageExitCodeAndStdErr(stage):
    return GetExitCodeAndStdErr(
        [sys.executable, __file__],
        env=dict(
            PADDLE_DEBUG_CINN_STAGE_NAME=stage.name,
            PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF='0',
            PYTHONPATH=os.getenv('PYTHONPATH'),
            ATHENA_ENABLE_TRY_RUN="False",
        ),
    )

def AthenaTryRunEnabled():
    return os.getenv('ATHENA_ENABLE_TRY_RUN') not in {
        "0",
        "False",
        "false",
        "OFF"
    }

def GetNeedSkipAndSkipMessage():
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    if not IsCinnStageEnableDiff():
        return False, ""
    last_stage = GetPrevCinnStage(current_stage)
    if last_stage is None:
        return False, ""
    exitcode, stderr = GetStageExitCodeAndStdErr(last_stage)
    if exitcode != 0:
        return True, "last stage failed."
    return False, ""

def GetCurrentStageTryRunExitCodeAndStdErr():
    if not AthenaTryRunEnabled():
        return False, ""
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    return GetStageExitCodeAndStdErr(current_stage)

def SetDefaultEnv(**env_var2value):
    for env_var, value in env_var2value.items():
        if os.getenv(env_var) is None:
            os.environ[env_var] = str(value)

SetDefaultEnv(
    PADDLE_DEBUG_CINN_STAGE_NAME="backend",
    PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF=False,
    PADDLE_DEBUG_ENABLE_CINN=True,
    FLAGS_enable_pir_api=True,
    FLAGS_prim_all=True,
    FLAGS_prim_enable_dynamic=True,
    FLAGS_use_cinn=False,
    FLAGS_check_infer_symbolic=False,
    FLAGS_enable_fusion_fallback=False,
)

import paddle

def SetEnvVar(env_var2value):
    for env_var, value in env_var2value.items():
        os.environ[env_var] = str(value)
    paddle.set_flags({
        env_var:value
        for env_var, value in env_var2value.items()
        if env_var.startswith('FLAGS_')
    })

if GetCurrentCinnStage() is not None:
    SetEnvVar(GetCurrentCinnStage().env_vars)

def GetEnvVarEnableJit():
    enable_jit = os.getenv('PADDLE_DEBUG_ENABLE_JIT')
    return enable_jit not in {
        "0",
        "False",
        "false",
        "OFF",
    }

def GetEnvVarEnableCinn():
    enable_cinn = os.getenv('PADDLE_DEBUG_ENABLE_CINN')
    if enable_cinn is None:
        return True
    return enable_cinn not in {
        "0",
        "False",
        "false",
        "OFF",
    }


def GetTolerance(dtype):
    if dtype == np.float16:
        return GetFloat16Tolerance()
    if dtype == np.float32:
        return GetFloat32Tolerance()
    return 1e-6

def GetFloat16Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT16_TOL'))
    except:
        return 1e-3

def GetFloat32Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT32_TOL'))
    except:
        return 1e-6

def IsInteger(dtype):
    return np.dtype(dtype).char in np.typecodes['AllInteger']

def ApplyToStatic(net, use_cinn):
    build_strategy = paddle.static.BuildStrategy()
    build_strategy.build_cinn_pass = use_cinn
    return paddle.jit.to_static(
        net,
        input_spec=net.get_input_spec(),
        build_strategy=build_strategy,
        full_graph=True,
    )

class InstanceTrait:

    @classmethod
    def instance(cls):
        if cls.instance_ is None:
            cls.instance_ = cls()
        return cls.instance_

    @classmethod
    def static_instance_with_cinn(cls):
        if cls.static_instance_with_cinn_ is None:
            cls.static_instance_with_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=True
            )
        return cls.static_instance_with_cinn_

    @classmethod
    def static_instance_without_cinn(cls):
        if cls.static_instance_without_cinn_ is None:
            cls.static_instance_without_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=False
            )
        return cls.static_instance_without_cinn_


class CinnTestBase:

    def setUp(self):
        paddle.seed(2024)
        self.prepare_data()

    def _test_entry(self):
        dy_outs = self.train(use_cinn=False)
        cinn_outs = self.train(use_cinn=GetEnvVarEnableCinn())

        for cinn_out, dy_out in zip(cinn_outs, dy_outs):
          if type(cinn_out) is list and type(dy_out) is list:
            for x, y in zip(cinn_out, dy_out):
              self.assert_all_close(x, y)
          else:
            self.assert_all_close(cinn_out, dy_out)

    def train(self, use_cinn):
        if GetEnvVarEnableJit():
            net = self.prepare_static_net(use_cinn)
        else:
            net = self.prepare_net()
        paddle.seed(2024)
        out = net(*self.inputs)
        return out
    
    def prepare_data(self):
        self.inputs = self.get_inputs()
        for input in self.inputs:
            input.stop_gradient = True

    def prepare_net(self):
        return self.get_test_class().instance()

    def prepare_static_net(self, use_cinn):
        if use_cinn:
            return self.get_test_class().static_instance_with_cinn()
        else:
            return self.get_test_class().static_instance_without_cinn()

    def assert_all_close(self, x, y):
        if (hasattr(x, "numpy") and hasattr(y, "numpy")):
            x_numpy = x.numpy()
            y_numpy = y.numpy()
            assert x_numpy.dtype == y_numpy.dtype
            if IsInteger(x_numpy.dtype):
                np.testing.assert_equal(x_numpy, y_numpy)
            else:
                tol = GetTolerance(x_numpy.dtype)
                np.testing.assert_allclose(x_numpy, y_numpy, atol=tol, rtol=tol)
        else:
            assert x == y





need_skip, skip_message = GetNeedSkipAndSkipMessage()
try_run_exit_code, try_run_stderr = GetCurrentStageTryRunExitCodeAndStdErr()
class TestTryRun(unittest.TestCase):
    def test_panic(self):
        if not AthenaTryRunEnabled():
            return
        if try_run_exit_code == 0:
            # All unittest cases passed.
            return
        if try_run_exit_code > 0:
            # program failed but not panic.
            return
        # program panicked.
        kOutputLimit = 65536
        message = try_run_stderr[-kOutputLimit:]
        raise RuntimeError(f"panicked. last {kOutputLimit} characters of stderr: \n{message}")
class PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a0b65ecd4fd986024e93753bfd3c82c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_136f8d9a810061abc4321e742542cb26(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c32436b694f42b1a17e3dfad481e623(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_136f8d9a810061abc4321e742542cb26
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e95260de6333db167b544fa6886878d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5cb566008637fe80b0257fecbd0657c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e95260de6333db167b544fa6886878d
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c6e486a5615fb35f59ab84c186179de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5019dfac401ad8840745540dde57a5a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c6e486a5615fb35f59ab84c186179de
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d20619502e57f68fea535ebaca4b9970(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f46c2b4ddf325ecbdfb086bde22ac83d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d20619502e57f68fea535ebaca4b9970
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c380f56e3c450ff942683a9fb13de58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e83534141c8cc4427a62dd619a32ec5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18291451036930084, 0.3035469055175781, 0.026936113834381104, 0.2519782781600952, 0.3944492042064667, 0.20137469470500946, 0.10282574594020844, 0.3635231852531433, 0.25519078969955444, 0.4530221223831177, 0.4746520221233368, 0.4190441370010376, 0.3034053444862366, 0.2735334038734436, 0.2111344337463379, 0.357038676738739, 0.4500555992126465, 0.30653348565101624, 0.3321927487850189, 0.3613084852695465, 0.47046470642089844, 0.1462101936340332, 0.39867261052131653, 0.2764774560928345, 0.059124905616045], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83bfc3ef07cbea4746117e48369e2470(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a6d051dfa976c5a12f3f3fac97617f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83bfc3ef07cbea4746117e48369e2470
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9962276da9ce745db32c85ab2c856c4a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ed42ede22da9d554c959704486bb590(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9962276da9ce745db32c85ab2c856c4a
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_742a8da1082951ba5d819c21526364ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c439972e18bdb8018d317ea937bd48fa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02579524926841259, 0.38501209020614624, 0.1889687031507492, 0.45836323499679565, 0.10457545518875122, 0.4068089723587036, 0.06637822836637497, 0.424407422542572, 0.19786173105239868, 0.19620783627033234, 0.4522016942501068, 0.0333816222846508, 0.40889257192611694, 0.09080152958631516, 0.4245973825454712, 0.2629433870315552, 0.4794588088989258, 0.18178725242614746, 0.4040032625198364], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1788bee2b0184e6648ed4065d195f60c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1dab80e2a68dc29685d19543500b12d8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f83fa518685c319f171748be0913ad7c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1dab80e2a68dc29685d19543500b12d8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8907027e1722275a0f8ac1bd491d6529(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6aca1ae391a7fd9925f852a33ddbbbc1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8907027e1722275a0f8ac1bd491d6529
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bc3590e2fec111ee40dbbd6f525cc31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43312329053878784, 0.20628297328948975, 0.418617844581604, 0.4114833474159241, 0.26785460114479065, 0.2784983813762665, 0.11433491110801697, 0.33971282839775085, 0.23181745409965515, 0.05368794873356819, 0.483640193939209, 0.39558738470077515, 0.07014324516057968, 0.39575669169425964, 0.2769564390182495, 0.07925598323345184], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76fd18bf5f4404db65736c706e655b76(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba62f05a9a4f63835115ed202eb9e5cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76fd18bf5f4404db65736c706e655b76
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9473ff95a700fcaf4beefe79ef7556f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34814453125, 0.362060546875, 0.109619140625, 0.0223236083984375, 0.2039794921875, 0.403076171875, 0.358154296875, 0.171142578125, 0.2880859375, 0.480224609375, 0.0745849609375, 0.09088134765625, 0.0635986328125, 0.272705078125, 0.208984375, 0.2032470703125, 0.022857666015625, 0.055511474609375, 0.06353759765625, 0.26806640625, 0.078125, 0.442626953125, 0.11138916015625, 0.1640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f49d8cb88e0c825acc2d12f6c90e3bbc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_731368416622bb883988fa0e412d4506(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3959c93179c104dabc01a5615673b38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75f03c897655542e5790d1ee2e3852f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d370303e1d33c2d8b6f14ff60aa222a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75f03c897655542e5790d1ee2e3852f3
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c10de201bce3f87606322999496df08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08d927ff4613402ffcc261794c20b188(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7c9ac871ab02fb823de50e41e3ff898c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.483154296875, 0.171630859375, 0.04754638671875, 0.474609375, 0.494873046875, 0.266357421875, 0.294189453125, 0.2919921875, 0.3798828125, 0.0972900390625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6295a2dc69caca65eba56abec5ec0683(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e314b283c1db135c580f5cb24ea10501(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05296126380562782], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a95afc5eb47d95b3bebf49e9f7e01db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d8157971fc7e20d1a1649847b17550f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_038213beec76a1408bdf9fbe222504a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.418212890625, 0.1434326171875, 0.07830810546875, 0.003276824951171875, 0.328857421875, 0.474609375, 0.060394287109375, 0.466796875, 0.31201171875, 0.282958984375, 0.450439453125, 0.410400390625, 0.298583984375, 0.1923828125, 0.484619140625, 0.404052734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8ccac1805637a4eb070b3c73cef73435(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_702fd3fe99190f3216909718a02b69b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1925048828125, 0.01230621337890625, 0.223876953125, 0.238037109375, 0.46484375, 0.1590576171875, 0.371337890625, 0.368896484375, 0.389892578125, 0.438720703125, 0.2462158203125, 0.07611083984375, 0.0950927734375, 0.2276611328125, 0.44775390625, 0.43359375, 0.379638671875, 0.1751708984375, 0.375732421875, 0.1610107421875, 0.08465576171875, 0.296142578125, 0.3349609375, 0.256103515625, 0.2802734375, 0.1259765625, 0.429443359375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_222c339fd4d1817a73fb27e327413387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_074002d010dc476fb4f6b1fde317a10f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2958d89fe34de2fdd330504b1c7ed10(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e429ba311317de0da7ead611ca98ed0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3430ff81f66cc4a5356a89e385f3f645(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e429ba311317de0da7ead611ca98ed0
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36593d9b098b0e4cc5f51beb60666b8e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7f928de2838bc37868bf977a3ac7a18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36593d9b098b0e4cc5f51beb60666b8e
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_be518b7e3de955eef05f038300ab76e8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83d2cb2fe6d8d5e4841cd3c3c5238439(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.301513671875, 0.1312255859375, 0.218505859375, 0.02325439453125, 0.060699462890625, 0.36181640625, 0.262451171875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_040e6fbfa405b001dba7b80ea22e51c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dddae32fb10aa2967df8285de100133a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_454acca9b203c0b4e82d33fdd727940f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dddae32fb10aa2967df8285de100133a
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_47366ba000dea28308771433e1cd6306(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91520cd20b279a31055bb1bc3b3afa8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_47366ba000dea28308771433e1cd6306
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b17ac827aa037e3c431fa3f354115491(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8fbb3f564804e969da86a4841a1300b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e7e1dc6abb86236780ecfb41f906037(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8fbb3f564804e969da86a4841a1300b9
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78be90690f4d0d6865975a13e19b042a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31232cbdee9766d4562a30dbd94eef49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b48f8ad897df4cf019c174ded30d3056(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d5915752baf0e0dafc1d62c6e4e9288(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48f9b993ff699180fbc23cc191e20a8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1207025b2416dc423736d9776a3021f7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93f067a2008ed5a9e4398890d89ecfa8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1207025b2416dc423736d9776a3021f7
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb79a8da4ed06f10f9e0fb5cc066cfcf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18733452260494232, 0.25191304087638855, 0.35940858721733093, 0.00043852481758221984, 0.11381598562002182, 0.2001674473285675, 0.3827745020389557, 0.41419345140457153, 0.33842283487319946, 0.015114710666239262, 0.2581409513950348, 0.3901658356189728, 0.4600610136985779, 0.35008689761161804, 0.09955694526433945, 0.3685397803783417], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25ddcaf81ae82ccc95ba700078014547(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50555aa884615f115f03d6c2684c33e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1259765625, 0.435791015625, 0.11773681640625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faf960d28c2b6f7ac40b0fdde1fe6d40(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf7e9b59f3e4618e1c91821b9bcd5142(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0047d47e5f8e9adc1e42d4bd90c82c64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_310618c00d619831e3f82c908e2c517a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_823a5987e415ca2993342734e38f41d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_310618c00d619831e3f82c908e2c517a
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_136f9de743f8cd6514c5ad7ef296b734(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06463623046875, 0.09796142578125, 0.07440185546875, 0.470458984375, 0.32373046875, 0.2626953125, 0.2939453125, 0.32568359375, 0.364013671875, 0.260986328125, 0.243896484375, 0.299560546875, 0.498291015625, 0.43115234375, 0.232666015625, 0.053680419921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9861411da0db0a223b8486db4e5b4ccf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25235193967819214, 0.2712599039077759, 0.09252461791038513, 0.2633594274520874, 0.37259939312934875, 0.4846327006816864, 0.18577077984809875, 0.2541946470737457, 0.3442111313343048, 0.15095315873622894, 0.08905867487192154, 0.03433840349316597, 0.3295449912548065, 0.413299024105072, 0.320849746465683, 0.2845191955566406, 0.4732842445373535, 0.16982224583625793], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19ffa6060b3fe43bffc1bccecbdbdc01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e5262ed39ae5effcb6cff9d9e541323(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2227cee3ce662454cb2aa3c20ef844cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09932190179824829, 0.424435555934906, 0.034339796751737595, 0.24100741744041443, 0.3689596354961395, 0.03460724279284477, 0.0422622486948967, 0.1026613861322403, 0.19067461788654327, 0.42651796340942383, 0.39218536019325256, 0.28667086362838745, 0.40787237882614136, 0.17563055455684662, 0.27813220024108887, 0.14385195076465607], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e43351706ff533d341c8e970dc21ad2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_866f37723b2b9391d3b9bb996994d395(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e43351706ff533d341c8e970dc21ad2
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14624256417a43228ec531fb6c33ae03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5f6c501af1f629be34dfbfa20d09202(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14624256417a43228ec531fb6c33ae03
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a25012271013c707e989467c0afcc341(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.410888671875, 0.208984375, 0.49853515625, 0.1683349609375, 0.343505859375, 0.26318359375, 0.400634765625, 0.2474365234375, 0.007415771484375, 0.10430908203125, 0.1883544921875, 0.310791015625, 0.2188720703125, 0.283935546875, 0.0140838623046875, 0.04168701171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bf040c42c110f06580de753ad0cf330c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.353759765625, 0.0266876220703125, 0.4677734375, 0.198974609375, 0.07794189453125, 0.284912109375, 0.33642578125, 0.0292510986328125, 0.423583984375, 0.456787109375, 0.324951171875, 0.477294921875, 0.246826171875, 0.47802734375, 0.15380859375, 0.415283203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f7e827b9b7117308ba73755c5e0645da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2827167212963104, 0.1460980921983719, 0.48890337347984314, 0.3590873181819916, 0.0016528572887182236, 0.3176818788051605, 0.09210792183876038, 0.17044053971767426, 0.36875736713409424, 0.2898408770561218, 0.3790476620197296, 0.2170645147562027, 0.4126947522163391, 0.4370417594909668, 0.37326905131340027, 0.10164368897676468], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7872bb5d5bd139750fed1830f3f860f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58f84d1d360fefd7f1ae4b2c98684591(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_13a6402fe9abbf5115466a5568661351(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2e39ab61ef39bf6e8f0e0f1a7b33c6b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04633340239524841, 0.2763908803462982, 0.05956445634365082, 0.290038138628006, 0.02418147772550583, 0.06853634864091873, 0.2993963658809662, 0.33478066325187683, 0.08380088955163956, 0.16890133917331696, 0.16148604452610016, 0.1292809247970581, 0.10296912491321564, 0.4830781817436218, 0.4289471209049225, 0.16481782495975494, 0.3369666337966919, 0.1412191092967987, 0.0949479267001152, 0.33591389656066895, 0.23549504578113556, 0.0575437992811203, 0.27842384576797485, 0.3945409059524536, 0.12341222167015076, 0.427221417427063, 0.38704705238342285, 0.3526488244533539, 0.3272470533847809, 0.44674867391586304], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_986e6baa848d2c75ea089102e8497d84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_104f4bfe7eacd7010083733b0824b859(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_986e6baa848d2c75ea089102e8497d84
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68052952a611e99ca683b7fc1fbe587(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a7703647190228da56677428840df221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a332fe32ef5d9c267f89a22a5636c229(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a7703647190228da56677428840df221
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cac42a93549f9f5e140adc06880552ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bfb0dad73133a77dc9aaa14cac8b229(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27912670373916626, 0.38359206914901733, 0.2833196818828583, 0.08588898926973343, 0.34292587637901306, 0.2889240086078644, 0.3116629123687744, 0.058854661881923676, 0.16009396314620972, 0.34928613901138306], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f32e94b8f70ba0b1d3a2c8634fabe74(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.031970828771591187, 0.004637714009732008], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03923b79135553a6189902b803aa0f84(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.443359375, 0.126953125, 0.0167999267578125, 0.03692626953125, 0.1522216796875, 0.0823974609375, 0.255126953125, 0.1829833984375, 0.422607421875, 0.493896484375, 0.11102294921875, 0.40478515625, 0.043731689453125, 0.13671875, 0.407958984375, 0.3837890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_11ed43669b2877f5881331f756b03f4e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_345999a5def47a500d524aa0dc80301c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_11ed43669b2877f5881331f756b03f4e
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6c7aba6b5335f4bd83f94ebbc5e0deb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1afff34b4d293a55decf8b869daa40c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed62f7e4e4ce11f311803887a3e2f95a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1435ec68106ada9b09690ff610301a0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f209034d026402df7c7a6baa6608b033(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1435ec68106ada9b09690ff610301a0a
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45cedefbdb4bbe5d90e1454b2561033d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4947257936000824, 0.2863576412200928, 0.18011827766895294, 0.1364462822675705, 0.3281257748603821, 0.295189768075943, 0.0010756151750683784, 0.08715932071208954, 0.020758945494890213, 0.3706705570220947, 0.007648928090929985, 0.00359436497092247, 0.32664361596107483, 0.12367403507232666, 0.09700686484575272, 0.26494646072387695], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22a13fcfc74c8cccef0dab82a210552e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8cdea709eddc63702971fff8c93601f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_abedf525d66d7a21464eb53e395aad91(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8cdea709eddc63702971fff8c93601f3
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44ed7e9c1b2e986829d77ad7118b865a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36669921875, 0.1109619140625, 0.01727294921875, 0.275390625, 0.0009465217590332031, 0.2489013671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e98217e940a7afa4f84e5f0c0659f4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1094202995300293, 0.4039173424243927, 0.03815341740846634, 0.27441444993019104, 0.4654683470726013, 0.48071298003196716, 0.20636418461799622, 0.18817946314811707, 0.02482413314282894, 0.48569366335868835, 0.4803788959980011, 0.42912566661834717, 0.3340972065925598, 0.2249375432729721, 0.2730973958969116, 0.037615466862916946, 0.37924033403396606, 0.33678555488586426, 0.14314520359039307], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bdacde2836f98446b9906b50142ce07c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba2e2861851cf732031cab97c0a25e69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bdacde2836f98446b9906b50142ce07c
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d04f33b4d6324f50fa4ba9ce9016df76(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.463623046875, 0.331787109375, 0.045684814453125, 0.462646484375, 0.1741943359375, 0.193359375, 0.0443115234375, 0.437744140625, 0.169189453125, 0.061004638671875, 0.403076171875, 0.230224609375, 0.1707763671875, 0.28125, 0.0718994140625, 0.1754150390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df799e00f127b4c3ad1a650bc974527e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4783e4b44e267157676985eef807dfd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df799e00f127b4c3ad1a650bc974527e
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_761cd746dab3f6a818f48e4e4c80ca82(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16357421875, 0.36083984375, 0.15087890625, 0.41015625, 0.48779296875, 0.415771484375, 0.207763671875, 0.290283203125, 0.0157928466796875, 0.379638671875, 0.20263671875, 0.412841796875, 0.4609375, 0.255126953125, 0.281005859375, 0.1507568359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_191dc03200364a7a8918b252bce8eee8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24dacbf470eb9896f6ebdb40b8cec6f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.483642578125, 0.275390625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e99a811badcd3d2de972defb4c946c86(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48388671875, 0.1595458984375, 0.178466796875, 0.259033203125, 0.250244140625, 0.328857421875, 0.10699462890625, 0.431884765625, 0.32421875, 0.002864837646484375, 0.10992431640625, 0.47900390625, 0.39013671875, 0.370849609375, 0.151611328125, 0.03570556640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_064c55c9db61dd2826504c03a7b3196f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc83b346411f5b614cd0430827bafd7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_064c55c9db61dd2826504c03a7b3196f
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2864e061d373c1f57649883b519d2d25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8d4398dd34f7e9193cad0c48addc178(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2864e061d373c1f57649883b519d2d25
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_933fea61dfeffca4aa2b18f903778a3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.393798828125, 0.32958984375, 0.4892578125, 0.19677734375, 0.3935546875, 0.334228515625, 0.1611328125, 0.005710601806640625, 0.390625, 0.00940704345703125, 0.2357177734375, 0.373291015625, 0.429931640625, 0.445556640625, 0.058624267578125, 0.2318115234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e68510681db2a8aa8a014825039bf95(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.285888671875, 0.1458740234375, 0.2421875, 0.318603515625, 0.272705078125, 0.0718994140625, 0.2305908203125, 0.1624755859375, 0.03643798828125, 0.11199951171875, 0.045013427734375, 0.12066650390625, 0.417724609375, 0.315185546875, 0.020477294921875, 0.1978759765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bb48ed47d99105fb3876eb192ed56704(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8415d2bc894ea3989dd098e5171f09d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bb48ed47d99105fb3876eb192ed56704
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b859927b31cb02314545c050df9c81c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c93c029299aa022f8886ec9ab549638b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45868635177612305], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_77a643f7378d55f0f985cd226f1364aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3bdcaf5b6d6c0e81e03bfd4e4348c4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_77a643f7378d55f0f985cd226f1364aa
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_020d7b247e0628fd2837c66e664f96be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54a34a9cb23b9de2e8ee998d94f104b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_020d7b247e0628fd2837c66e664f96be
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_061ea1a545e58f525f09bad4f3abed42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8b94dd95189364001a79065ef3b68b2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd43d8461de28a14e66e29336b4efb18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42864733934402466, 0.1616930216550827, 0.396443635225296, 0.0978492796421051, 0.48646247386932373, 0.2718261480331421, 0.3799389898777008, 0.1674438714981079, 0.4164768159389496, 0.04496917128562927, 0.40005674958229065, 0.46812090277671814, 0.05431952700018883, 0.4721566140651703, 0.050512708723545074, 0.4704916775226593, 0.3699737787246704, 0.14421483874320984, 0.29332736134529114, 0.25203633308410645, 0.39408019185066223, 0.2542564570903778, 0.2677474617958069, 0.291912317276001], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2695203cb97c03083cc3efd5b2d0e03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c45638301a94c7de5636e67946d53e7c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ae83da67cf7bf19af200be4e7d32e35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c45638301a94c7de5636e67946d53e7c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c3f2554b0d2e33dc87eb61efe4e2e57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2472eea88fe3c81e57447e1b911e32d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6057848124af261980c9f37e5d79c5ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2472eea88fe3c81e57447e1b911e32d6
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfa7d0a930a96a795dddc4b53bf763c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c485ec025d6486261cccbc00e5629efc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25bd063daed0e2f412e215aeb00b42a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c485ec025d6486261cccbc00e5629efc
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_132914313b4beaeeba646a557449adcd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.475830078125, 0.01450347900390625, 0.2431640625, 0.416259765625, 0.05255126953125, 0.3798828125, 0.279541015625, 0.288818359375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ce1e06113650f2a1d6a3efeba4c429e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.458984375, 0.280517578125, 0.15234375, 0.47509765625, 0.47216796875, 0.08209228515625, 0.455810546875, 0.051910400390625, 0.46728515625, 0.3779296875, 0.0836181640625, 0.24169921875, 0.49658203125, 0.484619140625, 0.1881103515625, 0.33056640625, 0.41015625, 0.3037109375, 0.373046875, 0.375244140625, 0.111083984375, 0.289306640625, 0.3974609375, 0.151123046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5ead841357e8ca51f57be566c10861f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4867d2ba1a42406557cea8b81eb4f7da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5ead841357e8ca51f57be566c10861f
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d8ecd24614754a894302b6cc2d7f78a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52828b3ee07cfbca61a6de8cffe68213(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4d330a83e6c72ad2a5f4a32ba301273(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95685e6323a00153addc64f5593bba33(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08150164783000946, 0.4643172025680542, 0.2329191416501999, 0.21496804058551788, 0.4765164256095886, 0.27203449606895447, 0.2423301786184311, 0.2827720642089844], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_571262eab28888f34b54ca498376e3da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1512451171875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8b1c81a29ff1837b92ba367349eaf49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07099159061908722, 0.47701865434646606, 0.378887802362442, 0.05643812194466591, 0.22401393949985504, 0.05149221420288086], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_209804910a7e121e0147cb9b27884896(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8152c810c9148e484cb2102cdbddda56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_209804910a7e121e0147cb9b27884896
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ccc32bca7f9304e49d7626693d202143(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81860008c923a4e3db6b1dec282f94ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4506d7b50329fce3d573b3e13065738e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc308227cf2ab27925d4c3e12732c6f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.296142578125, 0.271240234375, 0.2149658203125, 0.1356201171875, 0.1483154296875, 0.426513671875, 0.2022705078125, 0.15234375, 0.09521484375, 0.0016374588012695312, 0.44287109375, 0.45458984375, 0.2568359375, 0.11920166015625, 0.364501953125, 0.24951171875, 0.49560546875, 0.463134765625, 0.1925048828125, 0.04949951171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faad70cf18affedd64b7596c522ae1f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64edb4d01d9b5264eacbee672737212d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bcae23a36ecd856b8c09dd15abeea689(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.424282968044281, 0.269639253616333, 0.15399278700351715, 0.4082469642162323, 0.16469520330429077, 0.026887943968176842, 0.08627719432115555, 0.012700735591351986, 0.2793358564376831, 0.08477328717708588, 0.08458876609802246, 0.10390394181013107, 0.40070220828056335, 0.004687492735683918, 0.15735532343387604, 0.05431859567761421, 0.03928541764616966, 0.23126113414764404, 0.09835069626569748, 0.24386970698833466, 0.003850273322314024, 0.3046182096004486, 0.12424851953983307, 0.29008617997169495, 0.2608024775981903, 0.10609594732522964, 0.11866165697574615, 0.48893260955810547], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_718c3e444121decbd9f78df9778884d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3273971676826477, 0.25154727697372437, 0.4870568811893463, 0.03438321873545647, 0.363834410905838, 0.13639959692955017, 0.4592944383621216, 0.10812781006097794, 0.22023941576480865, 0.3982807695865631, 0.42258214950561523, 0.48433175683021545, 0.3303219974040985, 0.41584888100624084, 0.493854284286499, 0.4427362382411957, 0.47406911849975586, 0.01801912672817707, 0.3775861859321594], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_121635fe7bfdaf912d8ddc0c36cb2371(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03539612144231796], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a2999db644a51a70ea5e154c2fdcd71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7b3891b0cd3f2e3908e6851ad990291e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba5745202c2e120747d3ef9da67176ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7b3891b0cd3f2e3908e6851ad990291e
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_56d15c7701954747083eaa309d460f5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e95ef843643e8ae38693ac5780b094df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_56d15c7701954747083eaa309d460f5f
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a71e281d1a632c811fc160624fbe2bb1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.025888098403811455, 0.11869237571954727, 0.3614635765552521, 0.277105450630188, 0.3469439446926117, 0.09231001883745193, 0.25674769282341003, 0.19433318078517914, 0.2919524013996124, 0.44098398089408875, 0.4346822500228882, 0.35799485445022583, 0.3913831114768982, 0.43857020139694214, 0.2298736721277237, 0.052817557007074356], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd9698960f711fd83cf41e717523f669(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3374020457267761, 0.36334702372550964, 0.4960505962371826, 0.08091750741004944], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00c9d853b6577daefce666ddb4d240df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358642578125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73889d0f3e0a33eb45b18a5dc50b5d66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9046cfbd633f09787a32b86d058cc07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_08f3ae8884b52e49e969a83489687ab8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9046cfbd633f09787a32b86d058cc07
    def get_inputs(self):
        return [
            paddle.uniform([1, 8, 3, 224, 224], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 224, 224], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_426704bfaf0d22ebb7acc3fb551b2d2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38022148609161377, 0.06220271810889244, 0.10625962167978287, 0.2526179552078247, 0.3225085735321045, 0.011072153225541115, 0.2868107259273529, 0.29241254925727844, 0.40275081992149353, 0.4597267210483551, 0.34074074029922485, 0.10791793465614319, 0.013744639232754707, 0.16066372394561768, 0.40367287397384644, 0.07482536137104034, 0.09061535447835922, 0.24658483266830444, 0.42018944025039673, 0.010396039113402367, 0.1751263439655304, 0.44517892599105835, 0.05233616754412651, 0.1337147355079651], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcabcab139b242ad1c233087264f27f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53eb78a0a0c5832adff1796f5d578454(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.294921875, 0.47705078125, 0.393798828125, 0.00212860107421875, 0.1263427734375, 0.2322998046875, 0.20703125, 0.320068359375, 0.1513671875, 0.046875, 0.4765625, 0.382080078125, 0.299072265625, 0.2479248046875, 0.177734375, 0.314208984375, 0.0222625732421875, 0.392333984375, 0.2734375, 0.3173828125, 0.369384765625, 0.25244140625, 0.491455078125, 0.07867431640625, 0.473876953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4cdd46db1d9685e6158b2ba901bf2e64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0187127236276865, 0.44822877645492554, 0.07667835801839828, 0.09181522578001022, 0.40684840083122253, 0.2127314656972885, 0.4435398578643799, 0.49230051040649414, 0.29390019178390503, 0.18928535282611847, 0.32623517513275146, 0.06043224036693573, 0.45018985867500305, 0.3557693660259247, 0.47814008593559265, 0.3330612778663635], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48a3ed87bf12c24b91e142861b0a6d55(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38380545377731323, 0.07097826153039932, 0.04632808640599251, 0.06650540232658386, 0.17473933100700378, 0.4912809729576111, 0.10069865733385086, 0.10089176148176193, 0.10716110467910767, 0.22188761830329895, 0.12654273211956024], dtype='float32').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2c11f347654121d6936dc449fc5175bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7fcdc4d8c28e638b61f5bc62ea9040b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2c11f347654121d6936dc449fc5175bf
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c997f59fbbac3608bd6b60d6c6b31a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10931396484375, 0.351318359375, 0.371826171875, 0.1771240234375, 0.0872802734375, 0.190185546875, 0.401611328125, 0.3896484375, 0.308349609375, 0.18212890625, 0.4228515625, 0.03033447265625, 0.3818359375, 0.005695343017578125, 0.176513671875, 0.41748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14a663b47a645c507ecff59d9c20c9d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3232421875, 0.07061767578125, 0.498291015625, 0.1748046875, 0.322265625, 0.2286376953125, 0.491943359375, 0.470458984375, 0.298583984375, 0.0367431640625, 0.277099609375, 0.1383056640625, 0.09259033203125, 0.0789794921875, 0.10858154296875, 0.12255859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b85e7697baf171672f1af4432c123d6b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45458984375, 0.320068359375, 0.27783203125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c914f77cb4cd4f30656ce45197773da3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31689453125, 0.146240234375, 0.1434326171875, 0.498046875, 0.270263671875, 0.4189453125, 0.367431640625, 0.34033203125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4113e7fbb00d578dc0836a4b07dd2ca0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db6184ed61ded621b833b77869e791d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22634173929691315, 0.34366998076438904, 0.4153388738632202, 0.2805233895778656, 0.23028476536273956, 0.4763565957546234, 0.04194972664117813, 0.09801184386014938, 0.15770553052425385, 0.44493812322616577, 0.2944021224975586, 0.36853283643722534, 0.45124533772468567, 0.49936386942863464, 0.15903112292289734, 0.2517830431461334], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f03a8d3924845c19fc33960a3a00973a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e0344b52d837681882e4199a13e7c917(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2857321798801422, 0.49156033992767334, 0.3239683210849762, 0.10873421281576157, 0.42966243624687195, 0.244066521525383, 0.22909203171730042, 0.3417036235332489, 0.24992498755455017, 0.43440595269203186, 0.3508921265602112, 0.011716669425368309], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d670895b0c9c3bc69ef90141b6123dfa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b59d39446bc2b93bab4502a6e93f6dda(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d662d34aa5b97ba57f76bda05ca574e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b59d39446bc2b93bab4502a6e93f6dda
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac0a036812ca0ea260b99de7fd9ebd59(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.011306099593639374, 0.13868938386440277, 0.21062326431274414, 0.23319575190544128, 0.36702772974967957, 0.11543446779251099, 0.19123575091362, 0.45269811153411865, 0.22507984936237335, 0.4248649775981903, 0.05357291176915169, 0.4610290229320526, 0.05281106010079384, 0.28350862860679626, 0.19223836064338684, 0.4672662317752838, 0.11709333211183548, 0.4147082269191742, 0.459883451461792, 0.3583517074584961], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f6bfcee480e21d2a3d957d2e70577dec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327392578125, 0.2763671875, 0.284423828125, 0.471923828125, 0.09619140625, 0.21875, 0.226806640625, 0.345458984375, 0.032928466796875, 0.1710205078125, 0.334716796875, 0.397216796875, 0.1337890625, 0.454345703125, 0.027923583984375, 0.2420654296875, 0.46875, 0.0102081298828125, 0.45654296875, 0.080810546875, 0.277099609375, 0.28955078125, 0.488525390625, 0.402099609375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_725ff1e86ae30fe25a0c50d836df4803(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028106689453125, 0.23779296875, 0.0736083984375, 0.364013671875, 0.170166015625, 0.03857421875, 0.1922607421875, 0.10638427734375, 0.051239013671875, 0.07659912109375, 0.34326171875, 0.016815185546875, 0.37158203125, 0.2978515625, 0.29345703125, 0.19091796875, 0.15625, 0.0282745361328125, 0.3994140625, 0.40966796875, 0.003734588623046875, 0.318603515625, 0.380859375, 0.168212890625, 0.2296142578125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_485fde2a855a501cfd62b11c124ea268(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364990234375, 0.369873046875, 0.072998046875, 0.3125, 0.46533203125, 0.38330078125, 0.034912109375, 0.09185791015625, 0.417236328125, 0.342529296875, 0.0258941650390625, 0.22216796875, 0.0655517578125, 0.341796875, 0.22802734375, 0.03955078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83a831c45cd4f1a3399a7ce8440e8c77(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8691bbc27aabe3b3658570f9d5895932(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b375570a5ae54a82d1d5d3b5f09747f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8691bbc27aabe3b3658570f9d5895932
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d6a7a729fd148e1eed6b324aa7923a4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48810073733329773, 0.2552131712436676, 0.2549103796482086, 0.20862028002738953, 0.23464933037757874, 0.2504408359527588, 0.05344777554273605, 0.3791288733482361, 0.11741341650485992, 0.19766218960285187, 0.12188516557216644, 0.3352797329425812, 0.003107596654444933, 0.3215459883213043, 0.08826801925897598, 0.0019917984027415514, 0.4375867247581482, 0.054181549698114395, 0.15228651463985443, 0.4850197732448578, 0.16351665556430817, 0.08029700815677643, 0.49079492688179016, 0.4583042562007904], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69f24bcff300e051624f7e93999e3905(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8d2f9237c82cb1b4938424dfb01e456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69f24bcff300e051624f7e93999e3905
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f774c9f6768bbcbdc3b87310992e3c53(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44871869683265686, 0.3259098529815674, 0.25761494040489197, 0.2937397360801697], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59ac9e16162b2984d8b22c6cb439fdec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0975341796875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc437807b9581f5c34929b2fd4f2c805(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04962158203125, 0.431884765625, 0.2003173828125, 0.262451171875, 0.358154296875, 0.369140625, 0.130615234375, 0.102783203125, 0.05535888671875, 0.382080078125, 0.2254638671875, 0.137451171875, 0.41796875, 0.372314453125, 0.2169189453125, 0.06298828125, 0.0010271072387695312, 0.08026123046875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3608d2c0b7c4a582aebfc1a1b3456cb1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4808763265609741, 0.2565974295139313, 0.06770607084035873, 0.08800578862428665, 0.11735966801643372, 0.1409294456243515, 0.4159088134765625, 0.37482139468193054, 0.4690919518470764, 0.46267879009246826, 0.24352310597896576, 0.2195252776145935, 0.0004881272907368839, 0.12729962170124054, 0.39983949065208435, 0.15640458464622498, 0.25959256291389465, 0.1844794899225235, 0.09919491410255432], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e82be1ad100ab56abbd6e696d9be304c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a1c8b6c42952fc8c03d0a3fa2679752(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e82be1ad100ab56abbd6e696d9be304c
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ad4fb6d6584d2ca0cc968006fe0c45a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3488764464855194, 0.24750803411006927, 0.3474583923816681, 0.46554797887802124, 0.03167708218097687, 0.12898413836956024, 0.0951509028673172, 0.23443037271499634, 0.0857844427227974, 0.24272197484970093, 0.39940521121025085, 0.39625808596611023, 0.3735162913799286, 0.445389062166214, 0.3675914704799652, 0.4236076772212982], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_51549b4ecd47f6e712c2731dcc58a82c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29541015625, 0.132080078125, 0.307373046875, 0.499755859375, 0.302490234375, 0.0267181396484375, 0.456298828125, 0.069580078125, 0.10662841796875, 0.229736328125, 0.45068359375, 0.34619140625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3ddf5c52668f3048ba1b409c501aa49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4709426760673523, 0.04656822234392166, 0.372962087392807, 0.24637606739997864, 0.3289940059185028, 0.44953200221061707, 0.4519873559474945, 0.04871923476457596, 0.43872490525245667, 0.0665464773774147, 0.28885141015052795, 0.19449007511138916, 0.21138548851013184, 0.05731293559074402, 0.28858959674835205, 0.04346508905291557], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ebdb5783568edf40fb923e81cea17c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44021692872047424, 0.3238399028778076, 0.3690930902957916, 0.2581387758255005, 0.17296600341796875, 0.19347892701625824, 0.3608105182647705, 0.3749103546142578, 0.12081769853830338, 0.20286044478416443, 0.22779905796051025, 0.3383842706680298, 0.05641060322523117, 0.2467598170042038, 0.3697271943092346, 0.11736176908016205, 0.35313984751701355, 0.4121881127357483, 0.4320179522037506, 0.34768056869506836, 0.330233097076416, 0.35706451535224915, 0.3776037096977234, 0.3030603528022766], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9eba52afced381b57408fbebc16773bf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.054412841796875, 0.46044921875, 0.477783203125, 0.075927734375, 0.4013671875, 0.00733184814453125, 0.07684326171875, 0.04681396484375, 0.1805419921875, 0.04913330078125, 0.427490234375, 0.16015625, 0.360107421875, 0.1434326171875, 0.07843017578125, 0.474853515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a0077d5c32b4e36850eac0d383185e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1dce7872f4c994ef385ef00d8536881f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a0077d5c32b4e36850eac0d383185e58
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a36644d7d9f0d2ea6f778b96b81806(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6d021d91f7811013c15e196ea119243(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66e348fe65a00fd8e5ce7952b5f7f3c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.321044921875, 0.235107421875, 0.09222412109375, 0.43310546875, 0.254638671875, 0.1944580078125, 0.130615234375, 0.24267578125, 0.200927734375, 0.2239990234375, 0.1845703125, 0.155029296875, 0.365478515625, 0.498046875, 0.476806640625, 0.082275390625, 0.1290283203125, 0.4814453125, 0.2406005859375, 0.370849609375, 0.07550048828125, 0.1181640625, 0.3408203125, 0.29296875, 0.3173828125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_012f19189650dad87be60335a3a8882e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf702b38aa41f3678653bf8125370408(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10717423260211945, 0.22233670949935913, 0.2740926146507263, 0.3274760842323303, 0.3223201334476471, 0.35951465368270874, 0.1703212708234787, 0.23431898653507233, 0.22923234105110168, 0.1291184276342392, 0.48198723793029785, 0.12152867019176483, 0.3315896987915039, 0.3849262595176697, 0.251085489988327, 0.20987676084041595, 0.09462448209524155, 0.23462526500225067, 0.20599599182605743, 0.08970127254724503, 0.0646105632185936, 0.314055472612381, 0.05997798219323158, 0.4204089641571045], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68fe02061acb1bcd0eada7622c7172b1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.042999267578125, 0.033203125, 0.2225341796875, 0.490478515625, 0.331298828125, 0.44140625, 0.401611328125, 0.294921875, 0.04241943359375, 0.2734375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c8563dfe534a55ef02ff023029bebdec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0711669921875, 0.283203125, 0.267578125, 0.489990234375, 0.390380859375, 0.309814453125, 0.42236328125, 0.40771484375, 0.4111328125, 0.1419677734375, 0.44775390625, 0.44287109375, 0.0880126953125, 0.304931640625, 0.3740234375, 0.34619140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9158178635d00f98addd45ce5c6227f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2257080078125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d3731d8cb0bebb0ea955a1c4b0eed17(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08306416124105453, 0.006745439954102039, 0.338731050491333, 0.45018866658210754, 0.32444438338279724, 0.4525500535964966, 0.03356468677520752, 0.3505265414714813, 0.33186349272727966, 0.3293270468711853, 0.01647958718240261, 0.30371490120887756, 0.35965967178344727, 0.35396701097488403, 0.22384139895439148, 0.30781084299087524], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_74a98b3a12940c22ab47394b1cec252e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41056206822395325, 0.3457649052143097, 0.21590232849121094, 0.40622445940971375, 0.24569573998451233, 0.24851270020008087, 0.15997855365276337, 0.46524760127067566, 0.4503934979438782, 0.09887241572141647, 0.28594231605529785, 0.44787758588790894, 0.03630899265408516, 0.32790258526802063, 0.2589792013168335, 0.40614238381385803, 0.1749841868877411, 0.02372552827000618, 0.2969772517681122, 0.2923278510570526, 0.09102901071310043, 0.49519672989845276, 0.11261167377233505, 0.05704060196876526, 0.3137737810611725, 0.27073487639427185, 0.42421263456344604, 0.17392921447753906, 0.2004852592945099, 0.47337302565574646], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b37c1bc8280ea559160b53ba7ddd1017(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26828545331954956, 0.442525714635849, 0.08029067516326904, 0.47622913122177124, 0.27187618613243103, 0.06104002892971039, 0.43951743841171265, 0.035648126155138016, 0.18089400231838226, 0.4375378489494324, 0.24226026237010956, 0.3871653378009796, 0.11214075982570648, 0.27540114521980286, 0.466325581073761, 0.27495822310447693], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b4174b493df146938adc6266158c123(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2558009624481201, 0.2545585632324219, 0.1971062421798706, 0.43876051902770996, 0.4555601477622986, 0.314766526222229], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5aee15b64fc9652a6e232cac60451d09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.333740234375, 0.26806640625, 0.2481689453125, 0.425048828125, 0.07037353515625, 0.0043487548828125, 0.2042236328125, 0.14208984375, 0.2427978515625, 0.2242431640625, 0.30810546875, 0.2978515625, 0.1497802734375, 0.1019287109375, 0.40673828125, 0.1414794921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_40e76b2d4c91b1aeec11cdc5d60d839f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24322989583015442, 0.11603405326604843, 0.0172271691262722, 0.30246347188949585], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4dee74942b3047e19581b527d65cdea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_029cf30cfe4bb2a83f4c3681084531de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4dee74942b3047e19581b527d65cdea
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dffbda9407232eb3f3cccb90cfb881e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.050708893686532974, 0.0199196208268404, 0.20832200348377228, 0.4387050271034241, 0.3856157064437866, 0.08570412546396255, 0.04958168417215347, 0.24484577775001526, 0.48609623312950134, 0.05417025089263916, 0.49585849046707153, 0.1679399460554123, 0.13976708054542542, 0.07668182253837585, 0.49794822931289673, 0.22678203880786896, 0.48926737904548645, 0.29529765248298645, 0.4108555018901825, 0.1377299278974533, 0.4760247468948364, 0.28919363021850586, 0.1153421550989151, 0.16395831108093262, 0.052592698484659195, 0.2972778379917145, 0.44051656126976013, 0.3253866732120514], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c29f5c5952de040332d2ac5dbe2f360b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28271484375, 0.03955078125, 0.285400390625, 0.1712646484375, 0.368896484375, 0.1427001953125, 0.061859130859375, 0.08160400390625, 0.4306640625, 0.313232421875, 0.1494140625, 0.1295166015625, 0.42822265625, 0.473388671875, 0.0216217041015625, 0.323974609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_486c808b421f715ea60783b020b9ac2a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fb401baa1e511a86947d94ae47f2477(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_486c808b421f715ea60783b020b9ac2a
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb202f036c9bd9072b93caa41c526656(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.276034951210022, 0.12839433550834656, 0.3550872504711151, 0.0933225080370903, 0.10106206685304642, 0.4504457414150238, 0.06756465137004852, 0.3763774335384369, 0.38573214411735535, 0.08408980071544647, 0.14365583658218384, 0.08510208129882812, 0.447763055562973, 0.23908697068691254, 0.2587045729160309, 0.16970419883728027], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4e3ed0119c725a14e2d97cfaedfe882b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1719316691160202], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90ca54ec813d2dbc0135ae05bb92682b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_afbb3932692a43714789218f656afbd0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.162109375, 0.286376953125, 0.1392822265625, 0.220947265625, 0.310302734375, 0.461669921875, 0.1912841796875, 0.11773681640625, 0.306884765625, 0.425537109375, 0.32470703125, 0.2337646484375, 0.43994140625, 0.2086181640625, 0.493408203125, 0.2254638671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48204054b39c33b6d012def3253d1ff4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35939186811447144, 0.322150319814682, 0.19959375262260437, 0.29278814792633057, 0.28999999165534973, 0.0724036693572998, 0.32338088750839233, 0.10336379706859589, 0.359750896692276, 0.33029597997665405, 0.11377173662185669, 0.39997410774230957, 0.16865788400173187, 0.006120534613728523, 0.3743099570274353, 0.3258047103881836], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a45f49628229dd77f88351a57c9726ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.415283203125, 0.453369140625, 0.36865234375, 0.1285400390625, 0.4736328125, 0.35302734375, 0.330322265625, 0.305419921875, 0.289306640625, 0.3974609375, 0.013336181640625, 0.490478515625, 0.11688232421875, 0.3935546875, 0.0755615234375, 0.464111328125, 0.244873046875, 0.43505859375, 0.451416015625, 0.1947021484375, 0.0330810546875, 0.053375244140625, 0.1474609375, 0.333984375, 0.397705078125, 0.2332763671875, 0.466552734375, 0.01299285888671875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d3d25914804b3e80ce958cd92df52d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d51bdecb27870a5b4ea3a3454d8acaf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1307373046875, 0.16748046875, 0.01097869873046875, 0.455810546875, 0.20654296875, 0.471435546875, 0.04595947265625, 0.02825927734375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1bfff8052dce6b4bd1f77496fb5fd355(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028556201606988907, 0.13512903451919556, 0.08452322334051132, 0.3207937777042389, 0.38914185762405396, 0.4181497097015381, 0.3959921598434448, 0.10110417753458023, 0.08962400257587433, 0.23782192170619965, 0.21199661493301392, 0.2307417243719101, 0.4848659932613373, 0.43506360054016113, 0.39087486267089844, 0.4110347330570221, 0.3721051812171936, 0.06619640439748764, 0.04015188291668892, 0.2847747504711151], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_61d37ed2584d74e6259927213baeb5ee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77fce9ce3251b17bf7cf45ef8e5536ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15967167913913727, 0.2817107141017914, 0.281623512506485], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02d6bd138a27295ad4504cfda7eb5edd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2802734375, 0.291015625, 0.3037109375, 0.255126953125, 0.48046875, 0.11492919921875, 0.046173095703125, 0.19140625, 0.456298828125, 0.325439453125, 0.497314453125, 0.469970703125, 0.359619140625, 0.1131591796875, 0.390625, 0.3525390625, 0.419189453125, 0.060760498046875, 0.329833984375, 0.0714111328125, 0.46435546875, 0.0204620361328125, 0.11492919921875, 0.2120361328125, 0.05419921875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b75aa50038ba0c5a8ce48fd25e9f62e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07114942371845245, 0.059662796556949615, 0.4018350839614868, 0.02759931981563568, 0.09652191400527954, 0.2374342978000641, 0.07166850566864014, 0.4184873104095459, 0.4469403624534607, 0.3645752966403961, 0.4733423888683319, 0.482023686170578, 0.4770096242427826, 0.15130649507045746, 0.00596300745382905, 0.08450991660356522], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02adab333a60198faa2c9e42ba6ef992(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a7f449863ebf05b0288ede43944d502(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a66994c8cfb055e8cafee820dfe48e66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a7f449863ebf05b0288ede43944d502
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf59554684e0fad7123692ed2d41cadc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08422473073005676, 0.06428587436676025, 0.30602556467056274, 0.04866635426878929, 0.0034505517687648535, 0.31554368138313293, 0.42719513177871704, 0.3062422573566437, 0.3169209659099579, 0.3805937170982361, 0.428433358669281, 0.2869625985622406, 0.3279310166835785, 0.2962151765823364, 0.4557111859321594, 0.2698710262775421], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a641cc0346af16c06b8227df2dfb565d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22515593469142914, 0.18491607904434204, 0.1740533411502838, 0.20637744665145874, 0.2540383040904999, 0.30211710929870605, 0.46723631024360657, 0.28807321190834045, 0.11967352777719498, 0.23730045557022095, 0.4674440920352936, 0.43931591510772705, 0.2843591868877411, 0.2034134566783905, 0.37298649549484253, 0.4462263584136963, 0.3388841450214386, 0.05958300083875656, 0.024927940219640732, 0.3039216995239258, 0.08741236478090286, 0.27502280473709106, 0.34917861223220825, 0.29683995246887207], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_17678618bdc6eb665577e3a2c73624b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.204833984375, 0.0233306884765625, 0.0638427734375, 0.151123046875, 0.250244140625, 0.4765625, 0.1815185546875, 0.361328125, 0.1373291015625, 0.44970703125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8df9795a6a17ebb951910eec282b34b7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11981201171875, 0.45361328125, 0.032745361328125, 0.1820068359375, 0.286376953125, 0.4375, 0.3935546875, 0.429443359375, 0.40283203125, 0.343017578125, 0.49755859375, 0.253173828125, 0.4619140625, 0.32763671875, 0.38671875, 0.1259765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_49655c78c8480f2e8819399834a1ca35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.479736328125, 0.297119140625, 0.492919921875, 0.1407470703125, 0.339599609375, 0.08966064453125, 0.259765625, 0.0894775390625, 0.31689453125, 0.151123046875, 0.0316162109375, 0.31787109375], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e013344503775f7c23fe4188d0e33db9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e70dd51951f06b7a54630ae5897eeb88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e013344503775f7c23fe4188d0e33db9
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b29f3340116338d8fa64da0e59ef5523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff21f04216eaae7ca4f9832715a51f24(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68d8d908c50b752522d09f347f3bfbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ab4bf4662d2d9f288781186225bb60e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.197021484375, 0.35498046875, 0.0731201171875, 0.22412109375, 0.241455078125, 0.3369140625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_17891957112386b62bd55365629fe27e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c97e623509268f91f66b728b4c7ad30d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_17891957112386b62bd55365629fe27e
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41adc0d6d2080ea00fedcf08b919a8fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36572265625, 0.01055908203125, 0.24951171875, 0.2154541015625, 0.2242431640625, 0.0228729248046875, 0.072509765625, 0.441650390625, 0.373291015625, 0.2447509765625, 0.162109375, 0.369873046875, 0.2291259765625, 0.0911865234375, 0.432373046875, 0.133056640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f87ef802cd557ed0fdfe0349e4cc852(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39453125, 0.34130859375, 0.34912109375, 0.024383544921875, 0.297119140625, 0.025482177734375, 0.292236328125, 0.16162109375, 0.4990234375, 0.36572265625, 0.2412109375, 0.1292724609375, 0.1810302734375, 0.390869140625, 0.2333984375, 0.245361328125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8154e59b482154d3704a9f996036f513(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04391485080122948, 0.4911397099494934, 0.3044116795063019, 0.2125595659017563, 0.22337843477725983, 0.0740617886185646, 0.18032023310661316, 0.0975184440612793, 0.1825030893087387, 0.48528316617012024, 0.4516217112541199, 0.09065994620323181, 0.39487290382385254, 0.39809754490852356, 0.41860800981521606, 0.48000460863113403, 0.011938701383769512, 0.49236348271369934, 0.19461360573768616, 0.14402566850185394, 0.359514445066452, 0.3886495530605316, 0.26254722476005554, 0.4448390603065491], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aeb4a215947e001bcdbd14b5c3fabf28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46826171875, 0.484130859375, 0.07275390625, 0.41259765625, 0.00832366943359375, 0.454833984375, 0.1312255859375, 0.359619140625, 0.20751953125, 0.006572723388671875, 0.442626953125, 0.2099609375, 0.0163116455078125, 0.482177734375, 0.0108184814453125, 0.373291015625, 0.1986083984375, 0.114013671875, 0.1630859375, 0.1949462890625, 0.03558349609375, 0.2154541015625, 0.1785888671875, 0.335205078125, 0.408935546875, 0.04949951171875, 0.43115234375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7ecb22844c27141e6492123e16a1987(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47076308727264404, 0.3670482337474823, 0.2368529587984085, 0.22737282514572144, 0.22655902802944183, 0.10892768204212189], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf5cb82337c68469d12eeec970f95c11(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fca1cb9315bba4c8a53b28e9a87864e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf5cb82337c68469d12eeec970f95c11
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_27706a4b1a04a457d6583ba8ac53c58f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3128291070461273, 0.21181011199951172, 0.004254699219018221, 0.17838646471500397, 0.108852818608284, 0.1114712730050087, 0.387626588344574, 0.2632727026939392, 0.12964005768299103, 0.34163832664489746, 0.05785631760954857, 0.4668656885623932, 0.13123346865177155, 0.41867342591285706, 0.403331458568573, 0.05111917853355408, 0.4786132276058197, 0.20463283360004425, 0.08718977868556976, 0.49315717816352844], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d709f6ee2281ed6f2478dfaab729f9b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1427001953125, 0.45263671875, 0.30126953125, 0.257080078125, 0.11346435546875, 0.453369140625, 0.265869140625, 0.11669921875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8d3982d08c563e6ce77294ee1e7cf62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e40fe6008143781a6d81e0f541a21e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22509765625, 0.008758544921875, 0.38720703125, 0.473388671875, 0.11175537109375, 0.275634765625, 0.176513671875, 0.400390625, 0.478515625, 0.201904296875, 0.38330078125, 0.47607421875, 0.293212890625, 0.34423828125, 0.1732177734375, 0.35107421875, 0.3759765625, 0.200439453125, 0.220703125, 0.1531982421875, 0.202880859375, 0.018218994140625, 0.3916015625, 0.161865234375, 0.260009765625, 0.042724609375, 0.004947662353515625, 0.09967041015625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03026aab4111a5376b9ffcdac1615800(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2083740234375, 0.23291015625, 0.01471710205078125, 0.40283203125, 0.254150390625, 0.365234375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5340bce8491dedb7c708d2727ccfb9a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20077182352542877, 0.33041059970855713, 0.24254882335662842, 0.20813444256782532, 0.030822722241282463, 0.18718257546424866, 0.1458362489938736, 0.07799410074949265, 0.2587421238422394, 0.4442535936832428], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8001d8e312c6d4ef93c23508d5828643(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.020111083984375, 0.390380859375, 0.286865234375, 0.25830078125, 0.3271484375, 0.166259765625, 0.2095947265625, 0.492919921875, 0.345947265625, 0.33740234375, 0.11279296875], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b0eff796c5ba4137d55f8231a398f2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31494140625, 0.30517578125, 0.211669921875, 0.0166473388671875, 0.167236328125, 0.396484375, 0.2249755859375, 0.1575927734375, 0.282958984375, 0.1614990234375, 0.033935546875, 0.09197998046875, 0.1866455078125, 0.290283203125, 0.1749267578125, 0.032867431640625, 0.2125244140625, 0.044921875, 0.04583740234375, 0.292236328125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81825ebfa865c7c59a547ed72887d3a6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.223388671875, 0.323974609375, 0.440185546875, 0.05206298828125, 0.427490234375, 0.1263427734375, 0.08349609375, 0.11444091796875, 0.00847625732421875, 0.460205078125, 0.1658935546875, 0.274169921875, 0.322265625, 0.376708984375, 0.402099609375, 0.35546875, 0.44287109375, 0.39404296875, 0.11566162109375, 0.41064453125, 0.480712890625, 0.411865234375, 0.3349609375, 0.11517333984375, 0.207763671875, 0.2220458984375, 0.07275390625, 0.021331787109375, 0.22119140625, 0.2822265625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df560f6bfeade43eb674af0bbd4d1c19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2911364436149597, 0.024535324424505234, 0.30173563957214355, 0.2723747193813324, 0.3229660391807556, 0.08630556613206863], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b2394a36d4256bb9e5d83cc86956459f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.254150390625, 0.268310546875, 0.055328369140625, 0.0711669921875, 0.1397705078125, 0.2457275390625, 0.458984375, 0.007183074951171875, 0.355224609375, 0.4560546875, 0.140869140625, 0.0191192626953125, 0.0279693603515625, 0.084716796875, 0.272705078125, 0.427001953125, 0.377685546875, 0.307861328125, 0.11602783203125, 0.1881103515625, 0.3505859375, 0.260986328125, 0.0572509765625, 0.03704833984375, 0.1412353515625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b8f75a7383dcee76d790243f84c6dcd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4226655662059784, 0.10162946581840515, 0.22045934200286865, 0.0519770085811615, 0.38433170318603516, 0.1453193575143814, 0.12212152034044266, 0.26571983098983765, 0.4310133457183838, 0.15591441094875336, 0.3697993755340576, 0.45417097210884094, 0.22994814813137054, 0.10344387590885162, 0.47762608528137207, 0.48550179600715637, 0.37928345799446106, 0.07622429728507996, 0.38371285796165466, 0.07277969270944595, 0.015938716009259224, 0.053907886147499084, 0.4845722019672394, 0.29209163784980774, 0.05948811396956444, 0.20012609660625458, 0.15809416770935059, 0.3251523971557617, 0.0438842736184597, 0.35221418738365173], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7508c8142f42d0a96c6a3db38bdbcf4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.098876953125, 0.045379638671875, 0.365478515625, 0.391845703125, 0.407470703125, 0.020599365234375, 0.39501953125, 0.245849609375, 0.1378173828125, 0.46240234375, 0.30859375, 0.19482421875, 0.392822265625, 0.300048828125, 0.36865234375, 0.004974365234375, 0.005550384521484375, 0.3017578125, 0.377685546875, 0.3740234375, 0.40087890625, 0.344482421875, 0.349609375, 0.027496337890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_257820cc8fb68ab78599f4a0b7766cd8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29443359375, 0.476806640625, 0.03302001953125, 0.04669189453125, 0.475341796875, 0.1761474609375, 0.25439453125, 0.493408203125, 0.0194091796875, 0.415283203125, 0.155029296875, 0.317626953125, 0.473876953125, 0.435546875, 0.2373046875, 0.420166015625, 0.319091796875, 0.42578125, 0.093017578125, 0.494384765625, 0.1810302734375, 0.317626953125, 0.0261688232421875, 0.13134765625, 0.134521484375, 0.353515625, 0.2822265625, 0.231201171875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_94712ea9541aa8936495e80f602ef7ce(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b80c8c51963f704e03b61ad985cf000f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_94712ea9541aa8936495e80f602ef7ce
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a100ce18432eb5f6836f57c4b8ce38c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98b938744764b47e57b78c17cbf08409(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.002201080322265625, 0.40185546875, 0.2314453125, 0.1097412109375, 0.3701171875, 0.318115234375, 0.46923828125, 0.4609375, 0.22216796875, 0.034942626953125, 0.311767578125, 0.125, 0.30810546875, 0.1019287109375, 0.387939453125, 0.0015087127685546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fc6b52bb4c990849a058b4e459608ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb5d595f2406e5c6865a5eea3ea96484(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f04a19d9475d0ae51b8ae8787a38504a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc6937408c07aae502358ac092d82644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.434814453125, 0.02423095703125, 0.41796875, 0.127197265625, 0.1470947265625, 0.142333984375, 0.482666015625, 0.1907958984375, 0.09539794921875, 0.1080322265625, 0.35546875, 0.375244140625, 0.2152099609375, 0.195556640625, 0.2213134765625, 0.06732177734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b95024d5f691233cc9bedec332bac07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_daeb1353f697d4d8ee3157bead8c6701(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b95024d5f691233cc9bedec332bac07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a73e82951063d8b497277a3dc01d25d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4121561646461487, 0.4965463876724243, 0.4434504508972168, 0.22321350872516632, 0.4257487952709198, 0.45383840799331665, 0.12180595844984055, 0.30398786067962646], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_807873d0f506ad298b71c19f07581295(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77dda73e074238eabf305fb9c420484b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04498291015625, 0.1343994140625, 0.13671875, 0.2493896484375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cef0986c313a0aa518d6215f41b85758(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.011317376047372818, 0.08248311281204224, 0.4724672734737396, 0.20890992879867554, 0.2950035631656647, 0.37563079595565796, 0.258847177028656, 0.40160679817199707, 0.16976557672023773, 0.0514768548309803, 0.3967415988445282, 0.041105661541223526, 0.4505941867828369, 0.3047202229499817, 0.2974810302257538, 0.20807819068431854], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b9c4900cdc1451fd7e5c94c09ceb2d5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1443411260843277, 0.02754446491599083, 0.41690751910209656, 0.06412827223539352, 0.07726524770259857, 0.206046000123024, 0.13455736637115479, 0.2555903196334839, 0.006645105313509703, 0.1783178746700287, 0.4357447922229767, 0.4672156870365143, 0.022867249324917793, 0.2043253630399704, 0.08665847778320312, 0.205230712890625], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_743da23378156ff9021ba69f633f33e9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45184558629989624, 0.0396878607571125, 0.44028958678245544, 0.4239317774772644, 0.17737407982349396, 0.031656358391046524, 0.3538665771484375, 0.1917620152235031, 0.005338758695870638, 0.17955268919467926, 0.44920235872268677, 0.12049847096204758, 0.3707433342933655, 0.2789875566959381, 0.27452975511550903, 0.3977791965007782, 0.15870098769664764, 0.23769795894622803, 0.48350825905799866, 0.1468646079301834, 0.34774380922317505, 0.26237952709198, 0.43048107624053955, 0.09361877292394638], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8f1cb2676577c0541a270541c9e77f09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.409912109375, 0.391357421875, 0.049041748046875, 0.273193359375, 0.24609375, 0.331787109375, 0.440673828125, 0.47509765625, 0.360107421875, 0.2978515625, 0.024505615234375, 0.2286376953125, 0.046478271484375, 0.047210693359375, 0.1029052734375, 0.320068359375, 0.0665283203125, 0.337890625, 0.38671875, 0.390625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_94a218afd5767177bc6d4316106bcd5a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1805419921875, 0.46630859375, 0.05792236328125, 0.022674560546875, 0.1837158203125, 0.21533203125, 0.49169921875, 0.252685546875, 0.39404296875, 0.31640625, 0.01666259765625, 0.206298828125, 0.392333984375, 0.142822265625, 0.2479248046875, 0.0209503173828125, 0.08197021484375, 0.3251953125, 0.2274169921875, 0.290771484375, 0.0116119384765625, 0.01898193359375, 0.193115234375, 0.283447265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf0704221805286d51da82ea6044a7ff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d48ec4098dfa2e3049d3a7aec9c1644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf0704221805286d51da82ea6044a7ff
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee53303c54a660605505c257944f1f42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_60463bc84da5bb987269c77dc2550477(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01790633611381054, 0.04224586486816406, 0.08992452174425125, 0.12593208253383636, 0.3808170258998871, 0.20266199111938477, 0.35155633091926575, 0.2807076573371887, 0.019537856802344322, 0.14980101585388184, 0.18122775852680206, 0.30554986000061035, 0.1382550597190857, 0.3245336413383484, 0.06323698908090591, 0.1940295249223709], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e18183259d951cbb2edc7f68a9b9f617(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.390625, 0.0657958984375, 0.4921875, 0.1546630859375, 0.26953125, 0.31494140625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b51cc8e7780b67a7ef39060813b96d39(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1931696981191635, 0.2852762043476105, 0.16138413548469543], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f27cb717b2b9795db1c7ece1fd02e6fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1622314453125, 0.456298828125, 0.27294921875, 0.03900146484375, 0.273193359375, 0.10107421875, 0.43359375, 0.457763671875, 0.2291259765625, 0.115234375, 0.228759765625, 0.3017578125, 0.245361328125, 0.01580810546875, 0.2027587890625, 0.4248046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae47a834d06adaaaeba65d45347b373e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46dd01a152b5548d94603558c46d911d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae47a834d06adaaaeba65d45347b373e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_273f08ae18722921f4959405e3e9b654(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0899658203125, 0.27392578125, 0.484130859375, 0.256103515625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1338ba8ecca8fc45a8d4b0e24e3633e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23797249794006348, 0.4909527599811554, 0.08049033582210541, 0.030963411554694176, 0.11735628545284271, 0.37302327156066895, 0.2540295720100403, 0.4193029999732971, 0.1586814522743225, 0.10426872968673706, 0.2344362884759903, 0.3486540615558624, 0.30627429485321045, 0.18821120262145996, 0.022430604323744774, 0.3220449984073639, 0.16735638678073883, 0.419958233833313, 0.356621652841568, 0.46857762336730957, 0.05237618461251259, 0.23602919280529022, 0.18606363236904144, 0.2571564018726349, 0.25037437677383423], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_564a63fd22946a26cbc03592635c95cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2105712890625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8a9afaa53b9b9b95544b4fff58515c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.162841796875, 0.343994140625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d6335c00c45156738c0ff2e61111ea9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b73608344e22d650b695332607b8caaa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4283074736595154, 0.05854383856058121, 0.23509356379508972, 0.0822908952832222, 0.2760894000530243, 0.2124243974685669, 0.06189754232764244, 0.3346434235572815, 0.42116427421569824, 0.25016748905181885, 0.14530794322490692, 0.30339837074279785, 0.3537538945674896, 0.3355585038661957, 0.4577235281467438, 0.34319254755973816], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ddfeafa8bdbf59aafd5055e6cdd5f81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.381591796875, 0.4736328125, 0.304443359375, 0.165283203125, 0.0242919921875, 0.1427001953125, 0.391357421875, 0.385009765625, 0.402587890625, 0.345947265625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_283edc70aaf2ae165f786116266a774a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21196943521499634, 0.16831807792186737, 0.4166717827320099, 0.12733767926692963, 0.20282122492790222, 0.4041949212551117, 0.09403499215841293, 0.35781437158584595, 0.03307352215051651, 0.258016973733902, 0.12718556821346283, 0.3903583884239197, 0.09142007678747177, 0.42923688888549805, 0.12791569530963898, 0.4060901403427124], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7fe1574f420b332cd8caf5ab4be1ce5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42529296875, 0.060211181640625, 0.3447265625, 0.038848876953125, 0.302001953125, 0.06817626953125, 0.452392578125, 0.06829833984375, 0.07659912109375, 0.478759765625, 0.2393798828125, 0.498779296875, 0.43798828125, 0.1085205078125, 0.328125, 0.290771484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72ece9c93748459368ff6167033e4eba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.460693359375, 0.33154296875, 0.29150390625, 0.333251953125, 0.3369140625, 0.3779296875, 0.065673828125, 0.39453125, 0.0154571533203125, 0.32080078125, 0.339599609375, 0.322998046875, 0.0034580230712890625, 0.454345703125, 0.48779296875, 0.0188140869140625, 0.16162109375, 0.2030029296875, 0.07781982421875, 0.19580078125, 0.09027099609375, 0.05255126953125, 0.352783203125, 0.0136871337890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32eeddc987c9f6b6e5f218d93b98fddf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.061126708984375, 0.118896484375, 0.47021484375, 0.09326171875, 0.36181640625, 0.494384765625, 0.42578125, 0.063720703125, 0.410888671875, 0.0028591156005859375, 0.2183837890625, 0.130126953125, 0.185546875, 0.248046875, 0.0819091796875, 0.485107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e48e39a0aeccd44987368aa60fe28f9a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.316650390625, 0.018707275390625, 0.22216796875, 0.1422119140625, 0.364990234375, 0.223876953125, 0.263916015625, 0.460205078125, 0.214599609375, 0.150390625, 0.424560546875, 0.07891845703125, 0.2568359375, 0.2666015625, 0.1195068359375, 0.4296875, 0.474365234375, 0.303466796875, 0.393798828125, 0.41015625, 0.232177734375, 0.035125732421875, 0.35791015625, 0.3505859375, 0.31787109375, 0.344970703125, 0.189208984375, 0.2056884765625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a14e1f98657e5574d8bd9a7d324838b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_675ac781163081ac7d1e7785b5b3b457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52e6223eaea5679d50365260f81192ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_675ac781163081ac7d1e7785b5b3b457
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e814aa21973f07b1d7321d0b0d756e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.033416748046875, 0.40625, 0.0009379386901855469, 0.1932373046875, 0.1644287109375, 0.2880859375, 0.208251953125, 0.0343017578125, 0.359619140625, 0.2276611328125, 0.4248046875, 0.38232421875, 0.297119140625, 0.29443359375, 0.0230255126953125, 0.314453125, 0.0870361328125, 0.381591796875, 0.044036865234375, 0.2425537109375, 0.312255859375, 0.292724609375, 0.09600830078125, 0.413330078125, 0.2421875, 0.3623046875, 0.4970703125, 0.06787109375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93afa811994c197405d5b535a411202f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e8141f99e1056a8477a14b9b7192c88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.411865234375, 0.432373046875, 0.35107421875, 0.48095703125, 0.32373046875, 0.459716796875, 0.356201171875, 0.4677734375, 0.100830078125, 0.132568359375, 0.4345703125, 0.1517333984375, 0.309326171875, 0.48779296875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4acf961f882280d620ee28fa477a315(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32590076327323914, 0.3230816721916199, 0.35256701707839966, 0.3840997815132141, 0.26426541805267334, 0.12141349166631699, 0.4366006553173065, 0.1545461118221283, 0.1101466566324234, 0.28487488627433777, 0.3230382800102234, 0.488668292760849, 0.3203844428062439, 0.2768276631832123, 0.0752469152212143, 0.36337214708328247, 0.3851074278354645, 0.4588046371936798, 0.492574006319046, 0.056749630719423294], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a0c9f56f0498b8e8ef4b74e8c3542b37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9472cac6bbba4d97e20347942dcb03e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36000168323516846, 0.4953937828540802, 0.2786734998226166, 0.4606591761112213, 0.12212461233139038, 0.0037028177175670862, 0.1804949939250946, 0.2804352641105652, 0.4739992618560791, 0.31525811553001404, 0.11636871099472046, 0.0908849909901619], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03f77f9f146d6992e5ec2fb5e429bf38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02775556594133377, 0.04060319811105728, 0.3456469774246216, 0.2537793815135956, 0.05330381542444229, 0.12415027618408203, 0.042468056082725525, 0.34956660866737366, 0.12409918755292892, 0.02339000627398491, 0.44706371426582336, 0.11569837480783463, 0.372915118932724, 0.31168317794799805, 0.0514865517616272, 0.29470303654670715], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3dc7692d84763e216685101566e6a148(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18309468030929565, 0.1344856470823288, 0.10895542055368423, 0.352754145860672, 0.3033846616744995, 0.4478471279144287, 0.37073421478271484, 0.2547195255756378, 0.1379294991493225, 0.11744038760662079, 0.3013294041156769, 0.4026258885860443, 0.42285817861557007, 0.22567345201969147, 0.16619530320167542, 0.41082659363746643], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dff804a90933ea173966b10a5d5c4d5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40097659826278687, 0.1644590049982071, 0.10120875388383865, 0.20215541124343872, 0.0942211002111435, 0.004123140126466751, 0.4072299301624298, 0.4369802474975586, 0.4963381290435791, 0.44427624344825745, 0.2513856291770935, 0.329509437084198, 0.4406103193759918, 0.43015509843826294, 0.1655692160129547, 0.41696327924728394, 0.06199059262871742, 0.04407300055027008, 0.1330518275499344, 0.0032218326814472675], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7d58e576012041a41642f2fa5fee1c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db0e16fc547a37641e264d7be204eb09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.251628577709198, 0.13021767139434814, 0.038066234439611435, 0.45441532135009766, 0.33264070749282837, 0.3182990252971649, 0.1772172600030899, 0.24265338480472565, 0.36858808994293213, 0.07867664098739624, 0.1947149634361267, 0.39275217056274414, 0.3425341546535492, 0.052043259143829346, 0.4014694094657898, 0.3180018663406372], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1418e2930f27a739b7123b3acd0beb7d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3528822362422943], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48562c4c00e105c65cd004865fc5ce1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37255859375, 0.12646484375, 0.283447265625, 0.041046142578125, 0.41259765625, 0.19140625, 0.358154296875, 0.143310546875, 0.08642578125, 0.11810302734375, 0.44140625, 0.1016845703125, 0.427490234375, 0.28076171875, 0.07659912109375, 0.449951171875, 0.315185546875, 0.45263671875, 0.0843505859375, 0.0086822509765625, 0.405517578125, 0.2919921875, 0.2451171875, 0.047210693359375, 0.3056640625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6632152983516094597914fbd1047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61858562edc929e9999781fa546daa5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6632152983516094597914fbd1047e
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c789c65473dae7567c7bbbae7b44ed06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fdfb2fc43d76a54b6b9cb47a257337e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14594483375549316, 0.19450689852237701, 0.3070523738861084], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0abffbbc10a70ea892e33b060ae06431(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2766531705856323, 0.21638254821300507, 0.18163003027439117, 0.3904057741165161, 0.18695057928562164, 0.11421971023082733, 0.28569117188453674, 0.029678847640752792, 0.42365896701812744, 0.25948959589004517, 0.49741241335868835, 0.12585745751857758, 0.23294754326343536, 0.4878304898738861, 0.08115588128566742, 0.11250188946723938, 0.36512112617492676, 0.49184826016426086, 0.03538486361503601, 0.4900045394897461, 0.33658820390701294, 0.035145509988069534, 0.27860844135284424, 0.084061399102211], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d29e21ad24dc2af7bc1027cf4e9b8ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07503458112478256, 0.15712708234786987, 0.4716629385948181, 0.19875682890415192, 0.034462928771972656, 0.3717201054096222, 0.17562150955200195, 0.14094971120357513, 0.08380497246980667, 0.043155550956726074, 0.023535508662462234, 0.340562641620636, 0.4805929362773895, 0.4359273314476013, 0.010806988924741745, 0.22072221338748932, 0.4322628080844879, 0.4199453592300415, 0.29118812084198, 0.198329895734787, 0.3779236078262329, 0.0503704696893692, 0.020989403128623962, 0.15169145166873932, 0.07951890677213669, 0.2393108457326889, 0.17717882990837097], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53736879c88e2100fb705e29b9c3fd52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e5517fd2ef87341634c6e8797dec0ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53736879c88e2100fb705e29b9c3fd52
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4831121fed3775e2cb132ce5ecb9222(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02787751890718937, 0.2677428126335144, 0.39152762293815613, 0.3853929340839386, 0.020757749676704407, 0.1509111076593399, 0.19490662217140198, 0.050346486270427704, 0.39746934175491333, 0.16800950467586517, 0.2775312066078186, 0.3999592065811157], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78592e8ffafc624a8525332c0b300e4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d48d50520936e5613dbfcc6cc7f16d7d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78592e8ffafc624a8525332c0b300e4b
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5346be0741969f6fa6753d2a19545f7f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3daba85b0a666479fc9bbcb2fbd7abb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5346be0741969f6fa6753d2a19545f7f
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b5426f5880c511f63b07a291c2bda14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.067626953125, 0.3076171875, 0.3359375, 0.260498046875, 0.1475830078125, 0.1739501953125, 0.07916259765625, 0.045318603515625, 0.05859375, 0.1788330078125, 0.20654296875, 0.25390625, 0.2078857421875, 0.350830078125, 0.482177734375, 0.1160888671875, 0.307861328125, 0.3115234375, 0.396484375, 0.06365966796875, 0.423828125, 0.08990478515625, 0.04180908203125, 0.486572265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9bb8639cbf11255711daa4a023e45069(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15693023800849915, 0.42530688643455505, 0.3610544800758362, 0.4752345085144043, 0.4017649292945862, 0.032634034752845764, 0.06887529790401459, 0.2705490291118622, 0.28026852011680603, 0.20693626999855042, 0.29171809554100037, 0.26051974296569824, 0.25581875443458557, 0.4569736421108246, 0.08376221358776093, 0.47007885575294495, 0.44020017981529236, 0.07907094061374664, 0.19247642159461975, 0.10639083385467529], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61d528e0746e06e5a392c437bd3b4c25(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.379150390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_955d8bfa97a7c14e9036dfda1a6f1e9f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10040283203125, 0.11395263671875, 0.2174072265625, 0.1573486328125, 0.18603515625, 0.06781005859375, 0.410400390625, 0.08197021484375, 0.2369384765625, 0.283447265625, 0.2115478515625, 0.476806640625, 0.050628662109375, 0.1663818359375, 0.2705078125, 0.0251922607421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8750222149787c037883417b0d610a6d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01229095458984375, 0.483642578125, 0.1815185546875, 0.1676025390625, 0.07183837890625, 0.05841064453125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21d219b4ea24f7b5aa3cb1f4d04d61a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15687814354896545, 0.2215082347393036, 0.10391450673341751, 0.49552369117736816, 0.16410449147224426, 0.16340352594852448, 0.44984978437423706, 0.16311635076999664, 0.40867289900779724, 0.0792650654911995, 0.22655953466892242, 0.13922163844108582, 0.4306853711605072, 0.2698052227497101, 0.006751558277755976, 0.16019953787326813, 0.34871190786361694, 0.36009982228279114, 0.23093856871128082, 0.1552588790655136, 0.1397450566291809, 0.0734221413731575, 0.29554831981658936, 0.46906518936157227, 0.4696750342845917, 0.2898046374320984, 0.2799678146839142, 0.03828458487987518], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d51294fb9ca93ccd69629dc38e26f065(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039825439453125, 0.2587890625, 0.324462890625, 0.1376953125, 0.3837890625, 0.442626953125, 0.48193359375, 0.08148193359375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_658d5fc6dd2ee2b851c9792194803914(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07ca3489ca1b2728667c846695c1d1a5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_658d5fc6dd2ee2b851c9792194803914
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e8be008716a82ee8ee4708e6894030c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08912761509418488, 0.3459445536136627, 0.16981719434261322, 0.17272114753723145, 0.1355438530445099, 0.19860346615314484, 0.46200743317604065, 0.23393075168132782, 0.02392571046948433, 0.4078446328639984, 0.15976138412952423, 0.19390666484832764, 0.058314964175224304, 0.349197655916214, 0.48143282532691956, 0.11021557450294495], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ba3cd28863ad1d07a860080aaa33cc5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3944011926651001, 0.07919931411743164, 0.0009426478645764291, 0.1607668697834015, 0.34587913751602173, 0.10888629406690598, 0.2325284481048584, 0.041019462049007416, 0.12805479764938354, 0.1579296737909317, 0.163518026471138, 0.19531837105751038, 0.3143322467803955, 0.3429044783115387, 0.42608603835105896, 0.0032797304447740316, 0.3382837176322937, 0.08930525183677673, 0.1714300811290741, 0.38432881236076355, 0.1785631775856018, 0.001610832056030631, 0.27882885932922363, 0.1556239128112793, 0.46737274527549744], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_edb91f2b561bb1b73ae55a45892a66ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11102294921875, 0.31689453125, 0.0167388916015625, 0.00414276123046875, 0.051422119140625, 0.2115478515625, 0.305419921875, 0.400146484375, 0.12066650390625, 0.2261962890625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9a6efd4230a2e63562e4b634bdb2c777(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0767902210354805, 0.15134985744953156, 0.4451078474521637, 0.10432351380586624, 0.3245576322078705, 0.42769262194633484, 0.17024874687194824, 0.3454631268978119, 0.21903304755687714, 0.1611461490392685, 0.17765381932258606, 0.3579370081424713, 0.2149122804403305, 0.2272774577140808, 0.032166190445423126, 0.46229270100593567, 0.263992041349411, 0.09862229228019714, 0.10681774467229843, 0.04827151820063591, 0.2883444130420685, 0.3073901832103729, 0.0310965608805418, 0.4507743716239929], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7c799526ffe398cb0148ebb84076066f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32e4f5b70a67c7ddfdbe0746eea0ba22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7c799526ffe398cb0148ebb84076066f
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_67c722399f41af67f926ae5b349b5180(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.435546875, 0.0208587646484375, 0.231201171875, 0.04547119140625, 0.1514892578125, 0.190673828125, 0.473876953125, 0.140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f2c865490521d0387fc1b2c07241f0b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89896bb309eaa981e62a2f777142f796(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30677032470703125, 0.00465670321136713, 0.11908138543367386, 0.459380179643631, 0.04250938072800636, 0.3657270073890686, 0.104269839823246, 0.49285393953323364, 0.30463939905166626, 0.0647500529885292, 0.06768551468849182, 0.2623779773712158, 0.15563245117664337, 0.07268097251653671, 0.405092716217041, 0.011393824592232704], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe83bf2d3d6688a39c01518a0a875cb8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31718263030052185, 0.41133061051368713, 0.1891261339187622, 0.24542132019996643, 0.4631728529930115, 0.13218256831169128, 0.25326818227767944, 0.48083508014678955, 0.061713069677352905, 0.13781654834747314, 0.4101807177066803, 0.04583549126982689, 0.46415475010871887, 0.44724681973457336, 0.2494814097881317, 0.25569355487823486, 0.4508664608001709, 0.4356509745121002, 0.3881181478500366, 0.3133353292942047, 0.4088307321071625, 0.4689382314682007, 0.24017426371574402, 0.24804547429084778, 0.41030776500701904, 0.21888326108455658, 0.19741255044937134, 0.36681443452835083, 0.18938107788562775, 0.45433518290519714], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a85c16012ae3011b47913425326fef9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.175048828125, 0.434326171875, 0.443359375, 0.1082763671875, 0.427490234375, 0.0849609375, 0.224853515625, 0.431884765625, 0.2052001953125, 0.242431640625, 0.2197265625, 0.322509765625, 0.2222900390625, 0.059906005859375, 0.040191650390625, 0.1114501953125, 0.029937744140625, 0.08404541015625, 0.423095703125, 0.461669921875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef6d3eb3974a2797ce607419009dc799(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.011902209371328354, 0.4663909077644348, 0.015520449727773666, 0.48868635296821594, 0.396306574344635, 0.30929064750671387, 0.45278504490852356, 0.2070326805114746, 0.2167365849018097, 0.4563845992088318, 0.06300573796033859, 0.10098575800657272, 0.1552475094795227, 0.2657872140407562, 0.4998737573623657, 0.3616308271884918], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd2cb4290d95910762c4c4024dddd86f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b28db5105fe0f37f3b20d2d826623f19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83ade4a9304be412942b6e1280cf2e36(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b723a7a28bfc7fed7de7d6e3ca44d772(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83ade4a9304be412942b6e1280cf2e36
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f09ca8cf734036ee60018006e56f6ba1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06787109375, 0.39013671875, 0.127685546875, 0.1363525390625, 0.057159423828125, 0.233642578125, 0.1534423828125, 0.045379638671875, 0.462158203125, 0.287109375, 0.481689453125, 0.304443359375, 0.0682373046875, 0.1441650390625, 0.2205810546875, 0.26171875, 0.380615234375, 0.167724609375, 0.42333984375, 0.35595703125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4850e283a362e5077e875b903616e1e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06353759765625, 0.12939453125, 0.3603515625, 0.377685546875, 0.375244140625, 0.420166015625, 0.31640625, 0.0889892578125, 0.06329345703125, 0.2440185546875, 0.1104736328125, 0.3203125, 0.035369873046875, 0.19091796875, 0.443115234375, 0.472900390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d4d8953096449c49908487c78aefffac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33250662684440613, 0.23768864572048187, 0.4898858070373535, 0.2176004946231842, 0.1827554553747177, 0.11442052572965622, 0.3016834855079651, 0.44105955958366394, 0.2419416755437851, 0.4851681590080261, 0.27727270126342773, 0.07541488856077194, 0.3058100938796997, 0.0714195966720581, 0.05633575841784477, 0.12329601496458054], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ece94695f3273fdf0be845139be0218(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4216923415660858, 0.15031372010707855, 0.4534386098384857], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ff9751cdc69467c367ed750903844ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1429443359375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3e8c22502627c1954377208f28004b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.034232743084430695, 0.1839444786310196], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6213a99911c159307238785fba3d732e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_561e016c24803f84ea14602e5c934a2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6213a99911c159307238785fba3d732e
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75fcbdc811abdfe6a4bd72db18847b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_486bbb442af180e0fee2a875a9fef046(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.350830078125, 0.07666015625, 0.10601806640625, 0.4033203125, 0.2315673828125, 0.1033935546875, 0.2086181640625, 0.0084381103515625, 0.427490234375, 0.297119140625, 0.34521484375, 0.05950927734375, 0.344970703125, 0.07574462890625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e0c825643db18caa24dc3d0da307588(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fba68e146819173c75568dbea1901cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_852cf5aa9a8ce0039e9b33e36567f5eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40400663018226624, 0.3215797543525696, 0.14782258868217468, 0.35363906621932983, 0.37347882986068726, 0.1500530242919922, 0.27698037028312683, 0.27178874611854553, 0.30381134152412415, 0.35447579622268677, 0.3337855935096741, 0.36009731888771057, 0.15817108750343323, 0.49595800042152405], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a34e7bc1cf8da53a9351adf32414d204(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1435975432395935, 0.26995405554771423, 0.36140477657318115, 0.18823859095573425, 0.41602563858032227, 0.1459408849477768, 0.13327613472938538, 0.10328500717878342], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8dfd66d0567c3830df55411afc06862(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32098934054374695, 0.3379859924316406, 0.40259483456611633, 0.3345559537410736, 0.02253090962767601, 0.13839329779148102, 0.2821383774280548, 0.391202449798584, 0.13201197981834412, 0.26427704095840454, 0.31189844012260437, 0.4529799818992615, 0.45075365900993347, 0.30564090609550476, 0.10053788125514984, 0.18507204949855804], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1519a446773a54a64272fcbe3dd3698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0874cf81d85d28b952be2932e7836f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e57a87476cc2e6f9faf28be6eb0e45d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([33], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5583850176f366bae5f57f4e3634571b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.298828125, 0.259765625, 0.342529296875, 0.216796875, 0.489013671875, 0.08221435546875, 0.10736083984375, 0.28173828125, 0.232177734375, 0.377685546875, 0.366943359375, 0.0888671875, 0.310302734375, 0.103271484375, 0.212890625, 0.430908203125, 0.337158203125, 0.4853515625, 0.427490234375, 0.075439453125, 0.406494140625, 0.2489013671875, 0.07879638671875, 0.10333251953125, 0.275634765625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d7c8a42250149dce25c30d188caf5893(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13655158877372742, 0.4397487938404083, 0.24292413890361786, 0.07010030001401901, 0.4696645140647888, 0.17361080646514893, 0.3368627727031708, 0.4852907061576843], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32221a31c82e1ce656b63169c5728ea4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0003352165222167969, 0.300537109375, 0.04779052734375, 0.037841796875, 0.05804443359375, 0.25439453125, 0.06817626953125, 0.150146484375, 0.3193359375, 0.255859375, 0.1690673828125, 0.264892578125, 0.1815185546875, 0.23193359375, 0.41162109375, 0.23779296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_28328fab5925173473a90c5618c8b7bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5cd2f37d1246fed00ad8a1139cabd7e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_28328fab5925173473a90c5618c8b7bf
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87a1e34783fb92a3524d19f004421f6c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19707094132900238, 0.47868412733078003, 0.26642170548439026, 0.4080546200275421, 0.025264807045459747, 0.299450546503067, 0.05116598680615425, 0.13318340480327606, 0.21544687449932098, 0.292222797870636, 0.13571752607822418, 0.32687908411026, 0.0092287827283144, 0.340171217918396, 0.38415396213531494, 0.1079283282160759], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a4669374975354d2cb97d26aed373ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95cf2c755a667a4dac63c73f692c50d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a4669374975354d2cb97d26aed373ae
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4547d305d44c5412edd23722f4aff58d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327392578125, 0.012481689453125, 0.38623046875, 0.38720703125, 0.08050537109375, 0.1407470703125, 0.458740234375, 0.1954345703125, 0.2236328125, 0.08941650390625, 0.2451171875, 0.302001953125, 0.004459381103515625, 0.484619140625, 0.399169921875, 0.330810546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc566b225ed5a9210966d80ad4a37157(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.465576171875, 0.2047119140625, 0.29345703125, 0.4873046875, 0.356689453125, 0.085205078125, 0.423095703125, 0.029632568359375, 0.443603515625, 0.01180267333984375, 0.2227783203125, 0.338134765625, 0.18896484375, 0.1405029296875, 0.1126708984375, 0.1669921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_40240bce893116f555ce4df8ca166476(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.416259765625, 0.320068359375, 0.414306640625, 0.4072265625, 0.413818359375, 0.1502685546875, 0.12408447265625, 0.253662109375, 0.394775390625, 0.46630859375, 0.04779052734375, 0.385986328125, 0.33349609375, 0.375732421875, 0.408935546875, 0.257568359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffa36309426e2cb088a5b4ddda3bf51a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4671604335308075], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab92ba270100f625e64a660ea8eae72e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd1df9ff6539d495984fda2360e0d729(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab92ba270100f625e64a660ea8eae72e
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9650e0e03ba132d978beacb0daa67054(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24c170759313eb0700b607c58fce8b49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.274658203125, 0.27734375, 0.484619140625, 0.45947265625, 0.140625, 0.160400390625, 0.1966552734375, 0.139404296875, 0.26318359375, 0.387939453125, 0.41064453125, 0.049468994140625, 0.333251953125, 0.1683349609375, 0.196533203125, 0.422119140625, 0.4365234375, 0.326904296875, 0.3974609375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_16ec3c521061e41c3aa0067c165ff512(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26085302233695984, 0.48667973279953003, 0.28672343492507935, 0.4601995050907135, 0.03699802607297897, 0.35564708709716797, 0.2167961597442627, 0.05071593075990677, 0.05801548436284065, 0.06533167511224747, 0.27260076999664307, 0.15164433419704437, 0.4187251329421997, 0.37081587314605713, 0.32470619678497314, 0.17334017157554626, 0.3134748339653015, 0.03539267182350159, 0.22583453357219696, 0.39367857575416565, 0.319983571767807, 0.23826970160007477, 0.40215811133384705, 0.20899859070777893, 0.44547250866889954, 0.07222957164049149, 0.044898442924022675, 0.4842583239078522], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d58fc317571e13a7ed04e2f3d56cef12(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48791417479515076, 0.3196594715118408, 0.28362542390823364, 0.4053115248680115, 0.1383117437362671, 0.4810335338115692, 0.19981108605861664, 0.28860875964164734, 0.2933931350708008, 0.4784707725048065, 0.31306082010269165, 0.06526484340429306, 0.19604690372943878, 0.015292646363377571, 0.4386194348335266, 0.40196871757507324], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_73348ee52662eb3cd42534d1697d67e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ffc3886e42c3900c22576992ae2fcd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_73348ee52662eb3cd42534d1697d67e4
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23484165966510773, 0.04019085317850113, 0.37957116961479187, 0.16988247632980347, 0.11408649384975433, 0.4571695327758789, 0.30647820234298706], dtype='float32').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec93694197593f33ff1f5e91ebcd8d8c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2095947265625, 0.007442474365234375, 0.273193359375, 0.10174560546875, 0.27392578125, 0.3681640625, 0.37109375, 0.0136260986328125, 0.266357421875, 0.149169921875, 0.43017578125, 0.0309906005859375, 0.17822265625, 0.06427001953125, 0.446533203125, 0.338623046875, 0.3525390625, 0.07928466796875, 0.0184173583984375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_355ed212afbbeffcfb1e772eade11e47(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04400634765625, 0.498291015625, 0.1981201171875, 0.2109375, 0.331787109375, 0.260498046875, 0.263671875, 0.33251953125, 0.12322998046875, 0.271240234375, 0.06512451171875, 0.114501953125, 0.2445068359375, 0.37890625, 0.39453125, 0.499267578125, 0.016845703125, 0.196533203125, 0.390869140625, 0.00019061565399169922, 0.321044921875, 0.2125244140625, 0.024688720703125, 0.402099609375, 0.142578125, 0.170166015625, 0.41015625, 0.0102081298828125, 0.1998291015625, 0.114013671875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e792cc74f0803e4f1eac123dbb45c9e9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.043095849454402924, 0.33489978313446045, 0.39495426416397095, 0.17628329992294312, 0.25381407141685486, 0.15481705963611603, 0.107269786298275, 0.48395517468452454, 0.16210219264030457, 0.1953890025615692, 0.0783243179321289, 0.4490356147289276, 0.26701465249061584, 0.2884758710861206, 0.1945471465587616, 0.24084314703941345, 0.253227174282074, 0.14231064915657043, 0.2805599570274353, 0.2945360243320465, 0.24040398001670837, 0.03038204088807106, 0.05106903985142708, 0.2748190760612488, 0.0281208585947752], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ebb4e6e761f5078c9742ac160f6145c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11053466796875, 0.2320556640625, 0.437744140625, 0.3515625, 0.1302490234375, 0.347900390625, 0.212646484375, 0.270263671875, 0.1600341796875, 0.44970703125, 0.443603515625, 0.34423828125, 0.09326171875, 0.374755859375, 0.39990234375, 0.3076171875, 0.26904296875, 0.2900390625, 0.0177154541015625, 0.45751953125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d7fb47bd66a30c559e388e91f7d991e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01585274562239647, 0.2557305097579956, 0.28172340989112854, 0.42542916536331177, 0.42015382647514343, 0.42053401470184326, 0.1849054992198944, 0.33422282338142395, 0.3033626079559326, 0.3149176239967346, 0.2885904312133789, 0.46157026290893555, 0.459251344203949, 0.03762740641832352, 0.0909939557313919, 0.2029758244752884, 0.1245395690202713, 0.12639100849628448, 0.207076758146286, 0.06852941960096359, 0.24185793101787567, 0.4981873333454132, 0.305547297000885, 0.43286746740341187, 0.3517133891582489, 0.2978256046772003, 0.4749164879322052], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a41f1e759f01afb45c4b1bb18453784(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_70207fc7e7ab1be8d4e79410e9fbdaf1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.390869140625, 0.2379150390625, 0.07666015625, 0.1826171875, 0.055450439453125, 0.16455078125, 0.415283203125, 0.340576171875, 0.410400390625, 0.01094818115234375, 0.48876953125, 0.498291015625, 0.4111328125, 0.001605987548828125, 0.0816650390625, 0.12939453125, 0.34375, 0.1866455078125, 0.408203125, 0.377197265625, 0.01004791259765625, 0.45947265625, 0.1865234375, 0.06585693359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53564ba522bacb38c544962dfcc6798c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6d1a33e801d0a9f6512aba0db61e931(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53564ba522bacb38c544962dfcc6798c
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa7967a61a786331e866a4c17224b311(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13571053743362427, 0.46930620074272156, 0.02822973020374775, 0.3921080231666565, 0.2543599307537079, 0.1768392026424408, 0.1931425929069519, 0.04005791246891022, 0.22800885140895844, 0.38472989201545715, 0.38243547081947327, 0.4132123589515686, 0.0747997835278511, 0.08578621596097946, 0.4074143171310425, 0.049753155559301376], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2cd575cff59c5abdddc48813519ba15a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_929e464880853bada3717612d336b864(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2cd575cff59c5abdddc48813519ba15a
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cea79730ab4764744cb11620bb9896db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07896168529987335, 0.4902390241622925, 0.07359281182289124, 0.1140887588262558, 0.35462504625320435, 0.25284433364868164], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cca91649afbd85b12c596f345a8f61d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.454345703125, 0.1578369140625, 0.188232421875, 0.0516357421875, 0.273193359375, 0.062408447265625, 0.1771240234375, 0.07159423828125, 0.122802734375, 0.1783447265625, 0.2354736328125, 0.30078125, 0.28515625, 0.23193359375, 0.1781005859375, 0.176025390625, 0.2303466796875, 0.113525390625, 0.240478515625, 0.1612548828125, 0.447021484375, 0.4736328125, 0.259033203125, 0.481689453125, 0.475830078125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9df58f6ee3d4b496d4803629cbb7aca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.367919921875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69b892783c91e76422e13114ead53397(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c72a932085a2184db07de3a959bfcf00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69b892783c91e76422e13114ead53397
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_627e62d7d5e535a0102dc6fb4bfaba31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.015219688415527344, 0.04701798036694527, 0.123835489153862, 0.12541887164115906, 0.28699734807014465, 0.034119825810194016, 0.42147237062454224, 0.2712332606315613, 0.49738824367523193, 0.14177632331848145, 0.17895115911960602, 0.0962977409362793, 0.31570324301719666, 0.38940563797950745, 0.21951603889465332, 0.36723223328590393], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b61d0d11fef7d85adc03d106c66b0a24(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16040515899658203, 0.4259929955005646, 0.3541719913482666, 0.04905729740858078, 0.08867087960243225, 0.4300646185874939, 0.45432209968566895, 0.14625151455402374, 0.22046498954296112, 0.26537108421325684, 0.4728221595287323, 0.07755652070045471, 0.47295597195625305, 0.23369014263153076], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b50ccbc34280cd8543cde4d29947e475(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44619303941726685, 0.20145434141159058, 0.2476085126399994, 0.48536860942840576, 0.003224738407880068, 0.31490588188171387], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adec4d67ab295493f48e3d717aa46a19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3791709244251251, 0.4054635465145111, 0.18857409060001373, 0.3469807207584381, 0.15460148453712463, 0.14490719139575958, 0.22986890375614166, 0.33533117175102234, 0.38470378518104553, 0.02373555675148964, 0.3627593219280243, 0.016803979873657227, 0.048463426530361176, 0.22932982444763184, 0.3847472667694092, 0.237287238240242, 0.16384857892990112, 0.2769332230091095, 0.1575486809015274, 0.4973011016845703, 0.3437308371067047, 0.07400596141815186, 0.10977662354707718, 0.35168060660362244, 0.42464497685432434, 0.0332762636244297, 0.39834317564964294, 0.4000397026538849, 0.22527474164962769, 0.45242995023727417], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb9dccf692de6de1218f54a539299a46(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09413289278745651, 0.35256722569465637, 0.17742225527763367, 0.35539019107818604, 0.43026816844940186, 0.4696284830570221, 0.2261979877948761, 0.34396669268608093, 0.24439358711242676, 0.13642995059490204, 0.14207138121128082, 0.2595885992050171, 0.4925125241279602, 0.27421873807907104, 0.06340283155441284, 0.16591738164424896, 0.3194827437400818, 0.23128274083137512, 0.3132111430168152, 0.15848909318447113, 0.3160991370677948, 0.2740655541419983, 0.128962442278862, 0.219244584441185], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cba753e65789e0603b1d1e0ad1871df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.291748046875, 0.3310546875, 0.309814453125, 0.0911865234375, 0.482177734375, 0.352294921875, 0.0132904052734375, 0.302001953125, 0.421142578125, 0.474365234375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e2df4c822ce4e865f1177e26a5cde48(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1463623046875, 0.302734375, 0.039459228515625, 0.4677734375, 0.32861328125, 0.36181640625, 0.06280517578125, 0.37841796875, 0.1883544921875, 0.268310546875, 0.362548828125, 0.39306640625, 0.4638671875, 0.06365966796875, 0.360107421875, 0.1826171875, 0.1259765625, 0.489501953125, 0.31787109375, 0.395751953125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a51dfff990048c2d0a418ae7540508c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07690809667110443, 0.04128929227590561, 0.40346479415893555, 0.4897072911262512, 0.2518934905529022, 0.11138572543859482, 0.42288556694984436, 0.26006829738616943, 0.14124710857868195, 0.37877461314201355, 0.2656906545162201, 0.35777121782302856, 0.11043573170900345, 0.48569348454475403, 0.3917543888092041, 0.1487869769334793, 0.257983922958374, 0.024597741663455963, 0.4207330346107483, 0.31831294298171997, 0.4408801198005676, 0.3414718806743622, 0.0633140429854393, 0.10655642300844193], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86d7ba021f98f11be9dd90c1a37c8b17(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.348876953125, 0.053558349609375, 0.32861328125, 0.4921875, 0.1722412109375, 0.444091796875, 0.435791015625, 0.121826171875, 0.194091796875, 0.174560546875, 0.4892578125, 0.04156494140625, 0.1715087890625, 0.0026226043701171875, 0.05438232421875, 0.35791015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eae3805921e894c4e132b676df127b95(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04209764301776886, 0.06758695095777512, 0.18170924484729767, 0.37926986813545227, 0.08523847907781601, 0.13346771895885468, 0.07666657865047455, 0.021191485226154327, 0.4055200517177582, 0.19898167252540588, 0.22430047392845154, 0.08531835675239563, 0.3693109452724457, 0.43843165040016174, 0.41479989886283875, 0.3181953728199005], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3054038c42babdce7eb245cb18e33c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04147496446967125, 0.15677930414676666, 0.3107724189758301, 0.36170434951782227], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5e1962b9a65c9a12ac69fa3ee14724e9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31640625, 0.42822265625, 0.433837890625, 0.352294921875, 0.289306640625, 0.396484375, 0.12005615234375, 0.03582763671875, 0.06317138671875, 0.482177734375, 0.4951171875, 0.2529296875, 0.49560546875, 0.103271484375, 0.262939453125, 0.1915283203125, 0.413818359375, 0.416748046875, 0.1263427734375, 0.339111328125, 0.061859130859375, 0.128173828125, 0.07965087890625, 0.01369476318359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9a19c5c89b8d275ecae0b9843987f5b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10418701171875, 0.2314453125, 0.3486328125, 0.42724609375, 0.31103515625, 0.29736328125, 0.051177978515625, 0.425537109375, 0.1759033203125, 0.2132568359375, 0.062347412109375, 0.0411376953125, 0.28955078125, 0.10015869140625, 0.453857421875, 0.2376708984375, 0.1759033203125, 0.490478515625, 0.30859375, 0.353271484375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bd2845671761dcf5153557334a09cd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_300380de755e3c071f389576c4ceebc2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_394feea024cfab9d87b74ba3626234dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_300380de755e3c071f389576c4ceebc2
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab1bd1a3e0c6e3e0cea7ebcf79367bd7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.144775390625, 0.1527099609375, 0.240478515625, 0.255615234375, 0.11151123046875, 0.14404296875, 0.1700439453125, 0.28662109375, 0.2271728515625, 0.381103515625, 0.443115234375, 0.0211334228515625, 0.1243896484375, 0.3779296875, 0.302978515625, 0.09918212890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_067cad2cc557d137932e69220dc5a827(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_979ff75697c12ff016a935b215d95e5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_067cad2cc557d137932e69220dc5a827
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4582720100879669, 0.2299567610025406, 0.3850182592868805, 0.4309197962284088, 0.07525163888931274, 0.3617725670337677, 0.06424820423126221, 0.48831242322921753, 0.09679833054542542, 0.45390164852142334, 0.42252635955810547, 0.277112752199173, 0.25627264380455017, 0.05995309725403786, 0.48766905069351196, 0.3215671479701996, 0.1227981448173523], dtype='float32').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d8b053c28a48a8e45a8c68f03681607(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0431174673140049, 0.022938482463359833, 0.28035491704940796, 0.4052383601665497, 0.23515398800373077, 0.25274720788002014, 0.16070617735385895, 0.01100010983645916, 0.015633724629878998, 0.46166741847991943, 0.18166287243366241, 0.28652212023735046, 0.17086540162563324, 0.12411467730998993, 0.15236887335777283, 0.011630411259829998, 0.48386117815971375, 0.19003796577453613], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c2d70ff0fabedfd893b8c1bb717fc72(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.486083984375, 0.09857177734375, 0.00426483154296875, 0.031951904296875, 0.37939453125, 0.257080078125, 0.059783935546875, 0.458984375, 0.1798095703125, 0.0307769775390625, 0.2017822265625, 0.0733642578125, 0.41357421875, 0.08953857421875, 0.068115234375, 0.060150146484375, 0.27099609375, 0.06634521484375, 0.43359375, 0.287109375, 0.12286376953125, 0.15185546875, 0.32861328125, 0.41015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_916c8229a6a46cb980ce5f68ad6732ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.478515625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e609a2c6ee62f2fdb5645cad1ecdad72(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.401611328125, 0.0294952392578125, 0.023895263671875, 0.232666015625, 0.36328125, 0.0013952255249023438, 0.145263671875, 0.2841796875, 0.464599609375, 0.47998046875, 0.07183837890625, 0.30419921875, 0.438232421875, 0.478271484375, 0.302001953125, 0.12347412109375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a5aca92ccc8ae8ae227e417e1b833401(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.372314453125, 0.378662109375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_80aefc4e0754441accc261186f98ecfb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45863866806030273, 0.17637963593006134, 0.4361848533153534, 0.10266623646020889, 0.24924509227275848, 0.01564171351492405, 0.35647276043891907, 0.3483600616455078, 0.08635961264371872, 0.06240585073828697], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c86af03719bce0c921ce16fdf6a485d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1567728966474533, 0.4856322407722473, 0.1396506279706955, 0.2113291621208191, 0.4626227915287018, 0.1088068038225174, 0.35440441966056824, 0.2101762294769287, 0.23777225613594055, 0.19244155287742615, 0.06956422328948975, 0.4203159213066101, 0.32245343923568726, 0.31366416811943054, 0.46803340315818787, 0.3223129212856293], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9c05e494a164612ef48c812d87464be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16259765625, 0.186767578125, 0.28955078125, 0.320556640625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7433b15b0f5c46628b38d86aae536bf3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1805419921875, 0.469970703125, 0.228515625, 0.06890869140625, 0.26416015625, 0.02899169921875, 0.140625, 0.2381591796875, 0.43896484375, 0.4404296875, 0.329833984375, 0.411376953125, 0.0408935546875, 0.391845703125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_044b430a3824f3e6286db64e13750537(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_702b811ba27e7472fdcbb23ff2946810(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_044b430a3824f3e6286db64e13750537
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adf904263411f68a807917167dec710e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02542434260249138, 0.47088927030563354, 0.21049287915229797, 0.36782971024513245, 0.44625598192214966, 0.10470138490200043, 0.27412259578704834, 0.412745863199234, 0.4561995565891266, 0.037588272243738174, 0.43620234727859497, 0.2378774881362915, 0.020443305373191833, 0.41933000087738037, 0.19260534644126892, 0.2668520510196686], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39d034ee1c9102b923e43dd7e39c2983(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b31e3c05706cafd032081bb88edbc56e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1842041015625, 0.11358642578125, 0.297607421875, 0.1343994140625, 0.36767578125, 0.473388671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_455b1b1c57d3dfbf7d87147348979ce0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731
    def get_inputs(self):
        return [
            paddle.to_tensor([0.296630859375, 0.1094970703125, 0.10260009765625, 0.424072265625, 0.372802734375, 0.473388671875, 0.2156982421875], dtype='float16').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4b03cb1368df4b935e715814fc63c250(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2890625, 0.034423828125, 0.319091796875, 0.25048828125, 0.178466796875, 0.184326171875, 0.454833984375, 0.042266845703125, 0.2998046875, 0.391845703125, 0.215087890625, 0.09356689453125, 0.214111328125, 0.103759765625, 0.257568359375, 0.0190887451171875, 0.1505126953125, 0.1558837890625, 0.445068359375, 0.273681640625, 0.376953125, 0.433837890625, 0.327392578125, 0.376953125, 0.369873046875, 0.11175537109375, 0.12298583984375, 0.3115234375, 0.374755859375, 0.19873046875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7716d55b130b36686bd6bcb46b8eeb26(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4423828125, 0.0121002197265625, 0.39990234375, 0.49169921875, 0.038543701171875, 0.1412353515625, 0.4072265625, 0.0794677734375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cc47c39d73e583c5b5a4d87c858c29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c273666d46c8658b1d3d4f5cf2623df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17720334231853485, 0.015378558076918125, 0.17212815582752228, 0.34560272097587585, 0.13732661306858063, 0.4460025131702423, 0.049443311989307404, 0.319338858127594, 0.21711963415145874, 0.011187592521309853, 0.31700360774993896, 0.3509873151779175, 0.27923956513404846, 0.3920729458332062], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4422e6e5b8208d7dd8dcce3877aae546(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07787870615720749, 0.4278131425380707, 0.15589964389801025, 0.03171374648809433, 0.35821279883384705, 0.06264280527830124, 0.12047978490591049, 0.4942661225795746, 0.1212739422917366, 0.3624512851238251, 0.34598326683044434, 0.4078487753868103, 0.3600040078163147, 0.16913488507270813, 0.275952011346817, 0.20992358028888702, 0.4490901231765747, 0.048361387103796005, 0.40321314334869385, 0.23603928089141846, 0.49728840589523315, 0.48597681522369385, 0.47597938776016235, 0.2106257677078247], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4f8fd895ea8195b307117ffbd42159cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4851949214935303], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e90c9201590187360b6bcc740c2f279(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1925390660762787, 0.11741027235984802, 0.14661172032356262, 0.17457279562950134, 0.48513898253440857, 0.421144962310791, 0.2655392587184906, 0.22441856563091278, 0.449613094329834, 0.2984084486961365, 0.18085643649101257, 0.47109460830688477, 0.17369239032268524, 0.10338716208934784, 0.1896045058965683, 0.10522031038999557, 0.33751487731933594, 0.4497099816799164, 0.3765980899333954, 0.07363523542881012, 0.33686724305152893, 0.24203157424926758, 0.020954683423042297, 0.12657961249351501], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b093aec382f8d84b7369ff500fc0af2d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12796355783939362], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9d6a2d6fd0986cf143d9d3be5552982(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12190000712871552, 0.22069385647773743], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_988845879e4c71d442bb15353c03f5ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2605077922344208, 0.386696994304657, 0.18189193308353424, 0.08475220948457718, 0.07602985203266144, 0.14521129429340363], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f6daa240bc1d00bd45c703d6fcb11bc6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39892578125, 0.460693359375, 0.267578125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_511e1056631489d46d7630bf69c6f62d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28450527787208557], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_421628089b1089f9dd18671ea5445fa6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.271800696849823, 0.46791404485702515, 0.3358664810657501, 0.2350281924009323, 0.21294449269771576, 0.14999625086784363, 0.2559949457645416, 0.24449999630451202, 0.43659818172454834, 0.11618596315383911, 0.023438185453414917, 0.20482668280601501, 0.15442688763141632, 0.17650137841701508, 0.1415642946958542, 0.06597626209259033, 0.4563620984554291, 0.32340818643569946, 0.28460389375686646, 0.3716448247432709, 0.24926649034023285, 0.01842058263719082, 0.02712978795170784, 0.03866935148835182, 0.25777798891067505], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae7ef482d9cfdf0e474679cb1fbdb28d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.210693359375, 0.226806640625, 0.468017578125, 0.45703125, 0.1824951171875, 0.446044921875, 0.1468505859375, 0.2186279296875, 0.224365234375, 0.09716796875, 0.27099609375, 0.2088623046875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d821b243b40fbbdf0efdaa2683a57efd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10498046875, 0.253662109375, 0.447998046875, 0.4873046875, 0.011810302734375, 0.4052734375, 0.2205810546875, 0.196533203125, 0.3935546875, 0.446044921875, 0.03240966796875, 0.273193359375, 0.1968994140625, 0.2208251953125, 0.331298828125, 0.32275390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_120e167cef15876083e1f0fe16edf365(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33447265625, 0.0687255859375, 0.4140625, 0.30419921875, 0.2841796875, 0.0274658203125, 0.212890625, 0.1309814453125, 0.417236328125, 0.45751953125, 0.0784912109375, 0.2119140625, 0.388671875, 0.094482421875, 0.44140625, 0.269775390625, 0.2222900390625, 0.11529541015625, 0.0885009765625, 0.11505126953125, 0.22412109375, 0.2022705078125, 0.450439453125, 0.36669921875, 0.1790771484375, 0.1610107421875, 0.10516357421875, 0.3505859375, 0.1209716796875, 0.367919921875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68247ffbb2f3cce7a52ec6e9fe3d2744(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1310422271490097, 0.11102258414030075, 0.14489471912384033, 0.3027079403400421, 0.05353716388344765, 0.2782094180583954, 0.24743396043777466, 0.26423048973083496, 0.04992920160293579, 0.04294468089938164, 0.3825609087944031, 0.4225684702396393, 0.42189285159111023, 0.11899980902671814, 0.10056260228157043, 0.3458140790462494], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83309b4f69031df8d358082ab069a349(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1374572217464447, 0.05011047050356865, 0.47202447056770325, 0.46249818801879883, 0.38217154145240784, 0.41852810978889465, 0.40819263458251953, 0.015168252401053905, 0.4944360852241516, 0.4749079644680023, 0.3720303773880005, 0.09072671830654144, 0.03508296608924866, 0.2010745108127594, 0.1253574937582016, 0.3213140666484833, 0.4866486191749573, 0.2778804898262024, 0.20578807592391968, 0.4832966923713684, 0.1437472254037857, 0.22651202976703644, 0.033458080142736435, 0.23897932469844818], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3351c21ef3a71982137d3fd386202fbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1788330078125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75c69e16e72840116d1f549489ff24eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.167724609375, 0.25537109375, 0.3134765625, 0.313232421875, 0.1929931640625, 0.282470703125, 0.325439453125, 0.05517578125, 0.28125, 0.2159423828125, 0.45361328125, 0.1973876953125, 0.25732421875, 0.185302734375, 0.1876220703125, 0.45556640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a7e91fc172f4b1045ef676bf5eec19a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04148776829242706, 0.002035518642514944, 0.3246251046657562, 0.4597688913345337, 0.4574914574623108, 0.3506662845611572, 0.1828368753194809, 0.1677933633327484], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00f02511ec4c290a2f458e183d862398(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b280c40ef26c2dc305205e203965ec87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a49fa40a3a8a50c8253199be8fcf18e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_307abfb526388c69ea629b37336dcf28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ca0e94281d3264545cd8f04be9258bb9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0614013671875, 0.28662109375, 0.357177734375, 0.4697265625, 0.100341796875, 0.26416015625, 0.00130462646484375, 0.46240234375, 0.2001953125, 0.1868896484375, 0.051544189453125, 0.21923828125, 0.189453125, 0.488525390625, 0.1038818359375, 0.19189453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9af1a89f0bb91e34cf08c9560e066c88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.328125, 0.11627197265625, 0.271484375, 0.0290069580078125, 0.35986328125, 0.398193359375, 0.18359375, 0.302001953125, 0.025848388671875, 0.486083984375, 0.073974609375, 0.44970703125, 0.39306640625, 0.141845703125, 0.0380859375, 0.0914306640625, 0.3330078125, 0.28173828125, 0.034210205078125, 0.2352294921875, 0.1275634765625, 0.389404296875, 0.26904296875, 0.341796875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff61b0d36bec53ddbe877319f6b16cc6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10105355083942413, 0.20821532607078552, 0.32370513677597046, 0.3773247301578522, 0.0018777460791170597, 0.06070736423134804, 0.10207248479127884, 0.0014825097750872374, 0.37998220324516296, 0.21637780964374542, 0.42538368701934814, 0.3981461822986603, 0.25559478998184204, 0.05937856435775757, 0.4600844979286194, 0.00045165844494476914, 0.157980814576149, 0.4512973129749298, 0.3615669310092926, 0.3757185935974121, 0.1498669981956482, 0.2876986563205719, 0.3900367021560669, 0.10957411676645279], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_affaccfda15b51dc054b34f0e58aa8f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45455488562583923, 0.2608261704444885, 0.4583360552787781, 0.4400777518749237, 0.43594735860824585, 0.26370447874069214, 0.3666488528251648, 0.14540459215641022, 0.4577109217643738, 0.2301601767539978], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d9e1d6fa6f7e11e0a895316184a266f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.064453125, 0.33056640625, 0.1453857421875, 0.271484375, 0.3291015625, 0.260498046875, 0.377197265625, 0.06719970703125, 0.282470703125, 0.493408203125, 0.3544921875, 0.490234375, 0.10150146484375, 0.1295166015625, 0.037628173828125, 0.131591796875, 0.251708984375, 0.31982421875, 0.241943359375, 0.431884765625, 0.48779296875, 0.274658203125, 0.453369140625, 0.413330078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fdca1c180d327eb59f0417cb1a7838f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3093176782131195, 0.3375917077064514, 0.40545058250427246, 0.41372615098953247, 0.4186793267726898, 0.3027855157852173], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4ab5b41b1a1f31182956b3a42ce8bb7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.322998046875, 0.07763671875, 0.20703125, 0.2384033203125, 0.240478515625, 0.1522216796875, 0.373291015625, 0.310546875, 0.3388671875, 0.170654296875, 0.2147216796875, 0.1591796875, 0.37744140625, 0.1304931640625, 0.0019931793212890625, 0.002803802490234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a70bf71fdd0696f4205facc5d1a5f47(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11710154265165329, 0.3928455114364624, 0.0715225487947464, 0.21318957209587097, 0.24447152018547058, 0.1792895495891571, 0.06926877051591873, 0.42796629667282104, 0.09907980263233185, 0.24700866639614105, 0.3366124629974365, 0.4635608494281769, 0.4087580740451813, 0.09317722916603088, 0.45332249999046326, 0.4760271906852722], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8d2fe8cd86f3e59b4ac028bdd6fba57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.353515625, 0.2198486328125, 0.1756591796875, 0.306396484375, 0.349609375, 0.3017578125, 0.1727294921875, 0.208740234375, 0.1683349609375, 0.304931640625, 0.306396484375, 0.32666015625, 0.1888427734375, 0.4794921875, 0.302001953125, 0.2352294921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c683f74df572be4f9c56b3f829f05cef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3116375207901001, 0.20206277072429657, 0.42692047357559204, 0.3493516147136688, 0.33511871099472046, 0.09794963896274567, 0.4341680407524109, 0.3898882567882538], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a32a7eaffd56206666ceb095594a10c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06671015173196793, 0.2840880751609802, 0.23995065689086914, 0.09726676344871521, 0.4900294840335846, 0.3732381761074066, 0.21951304376125336, 0.29917892813682556, 0.35546359419822693, 0.46719637513160706, 0.21143031120300293, 0.3123229742050171, 0.36211109161376953, 0.3371787965297699, 0.4794914722442627, 0.2854312062263489, 0.1568460911512375, 0.2537870705127716, 0.050515316426754, 0.287834107875824, 0.35666343569755554, 0.43062901496887207, 0.27660107612609863, 0.2016340047121048, 0.44690802693367004, 0.02693750150501728, 0.33927908539772034, 0.40370455384254456, 0.1310245394706726, 0.22603292763233185], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0aa93b49c53a8ce58c2e8e556c46ae75(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37939453125, 0.2298583984375, 0.391357421875, 0.07568359375, 0.13720703125, 0.07330322265625, 0.1337890625, 0.26953125, 0.409423828125, 0.293212890625, 0.2470703125, 0.1229248046875, 0.1900634765625, 0.4462890625, 0.21044921875, 0.31201171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1375524b759f0d3e1d96f2ca01095bdd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28748607635498047, 0.29683876037597656, 0.4423848092556, 0.203119695186615, 0.12152828276157379, 0.08672571927309036, 0.4051179885864258, 0.3232657313346863, 0.30523425340652466, 0.2806069254875183, 0.4238680899143219, 0.05981055274605751, 0.23863466084003448, 0.07620895653963089, 0.01933152601122856, 0.4177560806274414, 0.16272953152656555, 0.10184234380722046, 0.2212480753660202, 0.45762476325035095, 0.09858104586601257, 0.3207255005836487, 0.4809429347515106, 0.4913415312767029], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e3fcbe0e4fae6370895501e2cd7df77f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21630859375, 0.0963134765625, 0.0006990432739257812, 0.402587890625, 0.12890625, 0.215087890625, 0.212646484375, 0.270751953125, 0.3193359375, 0.46533203125, 0.1029052734375, 0.447509765625, 0.0219879150390625, 0.0888671875, 0.07647705078125, 0.263671875, 0.2374267578125, 0.059478759765625, 0.25732421875, 0.35302734375, 0.01202392578125, 0.059967041015625, 0.464111328125, 0.424072265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d9ffce85100e19f0137502c2679af43(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15306265652179718, 0.0348854586482048, 0.2537078261375427, 0.15523435175418854, 0.35425999760627747, 0.09453630447387695, 0.06801231950521469, 0.27474382519721985, 0.07025937736034393, 0.16470865905284882, 0.18045125901699066, 0.04133611172437668, 0.49605071544647217, 0.2182675153017044, 0.13637015223503113, 0.06659021228551865, 0.21693935990333557, 0.43084263801574707, 0.37732937932014465, 0.17017962038516998, 0.158731609582901, 0.22355030477046967, 0.4276713728904724, 0.3527950048446655, 0.17064350843429565], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e359710c1e2353c7fa5a88ff49319a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.161211758852005, 0.2288329154253006, 0.29181382060050964, 0.41081303358078003, 0.02475171536207199, 0.13286615908145905, 0.15554042160511017, 0.1334921270608902, 0.3896723985671997, 0.3251594305038452, 0.16966064274311066, 0.08650065213441849, 0.1345973163843155, 0.16400617361068726, 0.18415270745754242, 0.07249881327152252, 0.4508175849914551, 0.06388100236654282, 0.28529250621795654, 0.42726534605026245, 0.15203708410263062, 0.10616964846849442, 0.20642508566379547, 0.19539479911327362, 0.2279028594493866], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8767e91221af282dfe7f8ccca36a9307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7e578c766ab7c0c9766296259fedc3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8767e91221af282dfe7f8ccca36a9307
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e8ec0363d32a6f92a887ac38e04b900(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29507315158843994, 0.2696249485015869, 0.4283554255962372, 0.38390395045280457, 0.16030289232730865, 0.13799987733364105, 0.38671985268592834, 0.2258584350347519, 0.15665578842163086, 0.34657448530197144, 0.3077180087566376, 0.02704264223575592, 0.3631964325904846, 0.25763997435569763, 0.023717205971479416, 0.3002256751060486, 0.43181905150413513, 0.21143165230751038, 0.3552897572517395, 0.1087220087647438], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fc10e968ddfbb475dd718041be2be2a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21111097931861877, 0.4979950487613678, 0.4776948392391205, 0.28949931263923645, 0.15995649993419647, 0.3840714693069458, 0.4097598195075989, 0.440064400434494, 0.4716687500476837, 0.31446322798728943, 0.1824381947517395, 0.35779911279678345], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac0cb6e1fd8e9dea20f1508d46ba62c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20501528680324554, 0.48145708441734314, 0.17204593122005463, 0.39546892046928406, 0.017252281308174133, 0.19420287013053894, 0.1057014912366867, 0.46397852897644043, 0.39911240339279175, 0.0516645722091198, 0.32561740279197693, 0.06211821734905243, 0.14554473757743835, 0.1844000369310379, 0.10544908791780472, 0.04264502227306366], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a66811dc70dd7500a2e1d6649154124(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24172134697437286, 0.14956220984458923], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8eaeee21c01eb9571d327be7d5a81310(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.037849415093660355, 0.021360477432608604, 0.47923052310943604, 0.29468610882759094, 0.09791996330022812, 0.44583508372306824, 0.36910760402679443, 0.47225579619407654, 0.3267269432544708, 0.13002359867095947, 0.09278129786252975, 0.11600282043218613, 0.3700183033943176, 0.09248508512973785, 0.060077935457229614, 0.2825962007045746, 0.2867579460144043, 0.21569712460041046], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad22e8af47462e36521a645c8935e76b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.403076171875, 0.07745361328125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f613640b461eb0a1517b2988aee99315(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47469842433929443], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e944766883120ad853d3fd096d95d587(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4d1df49d471706f369848265b6e10ca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e944766883120ad853d3fd096d95d587
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0972900390625, 0.302734375, 0.44677734375, 0.466064453125, 0.32373046875, 0.119384765625, 0.0743408203125, 0.413818359375, 0.494140625, 0.483154296875, 0.1798095703125, 0.359619140625, 0.2274169921875, 0.007904052734375, 0.299072265625, 0.2666015625, 0.06134033203125], dtype='float16').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30e83d6c982488c940f5dbcff3df5360(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07122802734375, 0.389404296875, 0.330810546875, 0.029449462890625, 0.06494140625, 0.424072265625, 0.455322265625, 0.09613037109375, 0.433349609375, 0.1434326171875, 0.230712890625, 0.199951171875, 0.1905517578125, 0.24267578125, 0.455322265625, 0.131591796875, 0.309326171875, 0.154052734375, 0.076416015625, 0.061187744140625, 0.28515625, 0.0977783203125, 0.37939453125, 0.0911865234375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_831462eea09adcffc99301bba6e30a42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03619237616658211, 0.18144240975379944, 0.0004852057318203151, 0.02527807280421257, 0.17036348581314087, 0.10258181393146515, 0.11156825721263885, 0.03905153274536133, 0.15402382612228394, 0.3044915795326233, 0.013049161061644554, 0.2525002956390381, 0.20099754631519318, 0.007556413300335407, 0.28942275047302246, 0.404020220041275], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d3e5693027b3cadac1b2f41b4f20eba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.278076171875, 0.456787109375, 0.436767578125, 0.09423828125, 0.07464599609375, 0.06024169921875, 0.1619873046875, 0.34423828125, 0.296875, 0.1552734375, 0.449951171875, 0.160888671875, 0.464111328125, 0.28564453125, 0.498046875, 0.12091064453125, 0.2076416015625, 0.116455078125, 0.26708984375, 0.406982421875, 0.452880859375, 0.049835205078125, 0.258056640625, 0.1502685546875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_66fde8df17055027a31657399c6b94e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87041aec12985f589da822a5eeda0a4b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_66fde8df17055027a31657399c6b94e4
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0229d15228ce404e71faf157e0dab35b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0033512115478515625, 0.44091796875, 0.45068359375, 0.42724609375, 0.39453125, 0.34130859375, 0.156005859375, 0.4091796875, 0.1705322265625, 0.11175537109375, 0.0723876953125, 0.0548095703125, 0.450439453125, 0.385498046875, 0.0340576171875, 0.36376953125, 0.36328125, 0.4609375, 0.0792236328125, 0.0306854248046875, 0.136474609375, 0.290771484375, 0.1583251953125, 0.291748046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8b20a54f128a94b59f5f2303e683ca8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e7672dc35b7f9ebcda22bc0b0f16b01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3486328125, 0.385009765625, 0.37451171875, 0.212890625, 0.32470703125, 0.12017822265625, 0.102783203125, 0.380615234375, 0.25244140625, 0.491455078125, 0.067626953125, 0.11444091796875, 0.10198974609375, 0.2568359375], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_74a9f134912755828961381f2dd35dbd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.056732177734375, 0.222900390625, 0.452392578125, 0.174560546875, 0.401611328125, 0.183349609375, 0.35205078125, 0.184326171875, 0.2298583984375, 0.203369140625, 0.127197265625, 0.1971435546875, 0.26953125, 0.394287109375, 0.105712890625, 0.4697265625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ce140bc3ac29048a87d25152a92be7a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10107421875, 0.1656494140625, 0.157958984375, 0.172119140625, 0.322509765625, 0.08538818359375, 0.3740234375, 0.1856689453125, 0.3623046875, 0.306396484375, 0.26171875, 0.11920166015625, 0.0513916015625, 0.086181640625, 0.2081298828125], dtype='float16').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f4285b5c12e897bb44986ddf6ef187a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da2c192c42e239a5488dcac691ff47c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.304931640625, 0.380126953125, 0.30859375, 0.1868896484375, 0.267333984375, 0.284423828125, 0.2822265625, 0.1641845703125, 0.305419921875, 0.134033203125, 0.355224609375, 0.1734619140625, 0.264892578125, 0.395751953125, 0.09228515625, 0.4755859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9bab9fa658275ca21132febc0e8c8110(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.041839599609375, 0.322998046875, 0.0799560546875, 0.2763671875, 0.384033203125, 0.32958984375, 0.10772705078125, 0.2237548828125, 0.48876953125, 0.01055145263671875, 0.31640625, 0.09161376953125, 0.361328125, 0.455078125, 0.4912109375, 0.283203125, 0.415283203125, 0.043731689453125, 0.40185546875, 0.216064453125, 0.051605224609375, 0.39794921875, 0.368896484375, 0.35546875, 0.376220703125, 0.3349609375, 0.425048828125, 0.019134521484375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_49a20a9c07113aec3a4915ffd46103a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2060546875, 0.46435546875, 0.427001953125, 0.4111328125, 0.27294921875, 0.09918212890625, 0.17236328125, 0.476806640625, 0.345458984375, 0.376220703125, 0.19140625, 0.351806640625, 0.462646484375, 0.349609375, 0.468994140625, 0.02630615234375, 0.4794921875, 0.07781982421875, 0.3095703125, 0.428955078125, 0.3818359375, 0.4638671875, 0.30517578125, 0.498291015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66f305930ed7184f3a7a550668fb500a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40845a12f69a4015053ee4d634276944(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_631ab03f309f35a398e91877813f735a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40845a12f69a4015053ee4d634276944
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d0024223e6c4ef572c35e2ce87ccdfc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.09991455078125, 0.35791015625, 0.304931640625, 0.326904296875, 0.44384765625, 0.046661376953125, 0.45068359375, 0.11175537109375, 0.1029052734375, 0.251708984375, 0.134033203125, 0.45068359375, 0.2310791015625, 0.494873046875, 0.280517578125, 0.34326171875, 0.25927734375, 0.0023708343505859375, 0.2083740234375, 0.1031494140625, 0.1322021484375, 0.2139892578125, 0.313232421875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8f6036eff8c7c3129de5ed47d79efaed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39553388953208923, 0.3086394965648651, 0.23986831307411194, 0.4865458607673645, 0.4863985478878021, 0.38944756984710693, 0.021198920905590057, 0.4368622601032257, 0.039719123393297195, 0.28152477741241455, 0.4732345938682556, 0.4373112618923187, 0.3290065824985504, 0.3055296540260315, 0.24239148199558258, 0.2653118073940277, 0.10728918015956879, 0.13683608174324036, 0.12797260284423828, 0.49716782569885254, 0.11724120378494263, 0.4887073040008545, 0.020588066428899765, 0.34119847416877747, 0.15942540764808655], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e28a7cf0e4f802e8368ac319806d590a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.002048492431640625, 0.38720703125, 0.3271484375, 0.1280517578125, 0.1707763671875, 0.14404296875, 0.05499267578125, 0.11260986328125, 0.11224365234375, 0.1202392578125, 0.356201171875, 0.4169921875, 0.371337890625, 0.0347900390625, 0.3583984375, 0.0286865234375, 0.29296875, 0.37744140625, 0.3056640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6e119d98eb33542a807b8cb83c62e5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.043008238077163696, 0.1345594823360443, 0.43458712100982666, 0.08015110343694687, 0.19470854103565216, 0.34598949551582336, 0.06921049952507019, 0.34502366185188293, 0.11403961479663849, 0.4330875873565674, 0.3449452519416809, 0.006493024528026581, 0.36078348755836487, 0.09800506383180618, 0.1312490850687027, 0.2976960837841034], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e22e4bec4c383b51924726ea944479a8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37939453125, 0.0943603515625, 0.1121826171875, 0.499755859375, 0.3251953125, 0.024871826171875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51a36582f20d2c824477283af6cb8adc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_addeabd1e4d0c22ca60b9c471db87265(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51a36582f20d2c824477283af6cb8adc
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4601a5ee78eb137061cf9df9317e89d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.445556640625, 0.3759765625, 0.17919921875, 0.159423828125, 0.329833984375, 0.452392578125, 0.353759765625, 0.14892578125, 0.3828125, 0.188720703125, 0.4150390625, 0.32470703125, 0.3525390625, 0.277099609375, 0.0208282470703125, 0.22412109375, 0.086181640625, 0.276123046875, 0.3466796875, 0.267822265625, 0.2431640625, 0.369873046875, 0.373046875, 0.325927734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a19597449924ecaeb044f901452e661(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.040313720703125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4bae6b6b23d68d792585e63fa42f16cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ddc5a9ef4a6a65dc684698d1dc267ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0438232421875, 0.336669921875], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_261fb7c3463284d972411df4242d4ce7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1690673828125, 0.1402587890625, 0.438720703125, 0.178955078125, 0.061431884765625, 0.23974609375, 0.421875, 0.270751953125, 0.107421875, 0.228515625, 0.1260986328125, 0.08160400390625, 0.387939453125, 0.0833740234375, 0.0723876953125, 0.411376953125, 0.283935546875, 0.1353759765625, 0.323974609375, 0.130126953125, 0.25830078125, 0.340576171875, 0.43359375, 0.348388671875, 0.2069091796875, 0.41259765625, 0.356689453125, 0.02593994140625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee64821d89dd1867d8fde30aa40ae496(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bde7559165d6b307596d13190c0e7ea5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16974811255931854, 0.23279717564582825, 0.2231965810060501, 0.3227381110191345, 0.3999462425708771, 0.006062597036361694, 0.2165158987045288, 0.3029930591583252, 0.013300151564180851, 0.12964816391468048, 0.2336180955171585, 0.42078927159309387, 0.20646238327026367, 0.38178959488868713, 0.2170289307832718, 0.4718853831291199, 0.29580235481262207, 0.1220315471291542, 0.34567147493362427, 0.17593738436698914, 0.04727133736014366, 0.45910242199897766, 0.14541670680046082, 0.2972829043865204], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f2db9bd3d59e74b831072a28b96d6c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38427734375, 0.42333984375, 0.2171630859375, 0.1920166015625, 0.028839111328125, 0.1832275390625, 0.06573486328125, 0.25146484375, 0.33251953125, 0.10577392578125, 0.31884765625, 0.169921875, 0.326171875, 0.490478515625, 0.26953125, 0.290283203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4aa574829c01b8739e8ca64ee27adc89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.059365201741456985, 0.04733867570757866, 0.18463926017284393, 0.12563376128673553, 0.15841855108737946, 0.4685065448284149, 0.41243821382522583, 0.4126005470752716, 0.039738837629556656, 0.060051802545785904, 0.42780736088752747, 0.02873285301029682, 0.046078603714704514, 0.10315993428230286, 0.29881078004837036, 0.06361616402864456, 0.2632303237915039, 0.3570397198200226, 0.26978597044944763, 0.1490653157234192, 0.45280447602272034, 0.26952695846557617, 0.05370243266224861, 0.36912569403648376, 0.17396830022335052, 0.46102818846702576, 0.026882000267505646, 0.05060853809118271], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0b7887bb212431107f23e2aefff62d2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4647848606109619, 0.2243092805147171, 0.3398258090019226, 0.14057417213916779, 0.21277764439582825, 0.42786940932273865, 0.39201268553733826, 0.22471056878566742, 0.32690635323524475, 0.1630120873451233, 0.18881811201572418, 0.4754052460193634, 0.054350223392248154, 0.2330591380596161, 0.24762560427188873, 0.43927258253097534], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1dd9480ea4cc43ce3a597c112760a451(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2768467664718628, 0.05860358849167824, 0.0455152802169323, 0.009650039486587048, 0.08938799053430557, 0.29416701197624207, 0.045916296541690826, 0.26531410217285156, 0.12077103555202484, 0.3454393148422241, 0.4539560079574585, 0.47871077060699463, 0.1240488588809967, 0.0371452160179615, 0.26442715525627136, 0.38874033093452454], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36388935c3dffab8d6e1b8ea9b84f60f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2298583984375, 0.1962890625, 0.2666015625, 0.16064453125, 0.488037109375, 0.103515625, 0.421630859375, 0.2646484375, 0.1275634765625, 0.259765625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dcb7a8365533bddb2656e946938e2876(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08570265024900436, 0.08393983542919159, 0.34523698687553406, 0.35316258668899536, 0.03734798729419708, 0.3738062381744385, 0.4697212874889374, 0.13391271233558655, 0.050436824560165405, 0.2502788007259369, 0.20703765749931335, 0.4539527893066406, 0.017194584012031555, 0.432998925447464, 0.17498528957366943, 0.17552423477172852, 0.48714444041252136, 0.41273149847984314, 0.012942062690854073], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_edb5fb5787d412d5b9373eda8e4955f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18139003217220306, 0.006644505076110363, 0.12356968969106674, 0.3458438515663147, 0.21719512343406677, 0.050439875572919846, 0.04021487757563591, 0.26202431321144104, 0.10158248990774155, 0.45505011081695557, 0.18022936582565308, 0.3105109930038452, 0.06462284177541733, 0.27590426802635193], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e00e52cccd9ee890b836b1e380f86652(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30146104097366333], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df2183ca2e0f3f94ae2ffaca6b5ed0da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14080490171909332, 0.02107897959649563, 0.09566830098628998, 0.05383015424013138, 0.4085998833179474, 0.1481175273656845, 0.2119286060333252, 0.41230836510658264, 0.3672190308570862, 0.39868417382240295, 0.45899197459220886, 0.09937374293804169, 0.26790547370910645, 0.15653595328330994, 0.23912712931632996, 0.46562841534614563, 0.43257734179496765, 0.056348029524087906, 0.42950719594955444, 0.26590126752853394, 0.3464306890964508, 0.04134155809879303, 0.047996636480093, 0.3777811527252197], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f0ce06936f703710e1fa9887fb6dc638(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39859849214553833, 0.019458705559372902], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_892a00e3156486b1912e6a723fe3799d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_956e6a11bf67fbfc16e5621a84aa0182(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_070b29c4052982b5d29a34cacc20f8d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3463618755340576, 0.17732736468315125, 0.28997713327407837, 0.33771830797195435, 0.2945030927658081, 0.35154107213020325, 0.2810326814651489, 0.005900233052670956, 0.015225224196910858, 0.23322781920433044, 0.04179801791906357, 0.10136857628822327, 0.08197768777608871, 0.489131897687912], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e71fa9c9bf52369150a5a4b2aa0bad5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16943359375, 0.0654296875, 0.1622314453125, 0.40576171875, 0.1390380859375, 0.421142578125, 0.20703125, 0.1309814453125, 0.24951171875, 0.1124267578125, 0.3623046875, 0.0085601806640625, 0.1636962890625, 0.2393798828125, 0.05316162109375, 0.13818359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6abd7259b90691e4b45bd613be397909(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33416128158569336, 0.18820428848266602, 0.397798627614975, 0.4016411006450653, 0.0667274221777916, 0.25699400901794434, 0.3865083158016205, 0.17187730967998505, 0.37616875767707825, 0.1817719042301178, 0.021793073043227196, 0.24462059140205383, 0.3755958080291748, 0.3486233949661255, 0.4174756705760956, 0.29854896664619446, 0.1817949116230011, 0.26040083169937134], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_45d0f84e5630d090282ff45b2f982f74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f30f63c78156fe15afdfa251604523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_45d0f84e5630d090282ff45b2f982f74
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d83717fefe3323e619653c548a5d17c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ef5cb42eacb32ede2c853e47798a255(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4845767617225647, 0.4094339609146118, 0.22072945535182953, 0.19844703376293182, 0.4727981984615326, 0.33097609877586365, 0.4277418851852417, 0.45802897214889526, 0.4749584496021271, 0.0006521451869048178, 0.2860966920852661, 0.04117986187338829, 0.3256111741065979, 0.12171407043933868, 0.08280438184738159, 0.4936506450176239, 0.4446730315685272, 0.08130284398794174, 0.37257522344589233, 0.07394246011972427], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c3b7d44c16b51bd537d81721e130f5b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47793975472450256, 0.4928169548511505, 0.3911520838737488, 0.01962553896009922, 0.09404832124710083, 0.10656435787677765, 0.45603683590888977, 0.4818098247051239, 0.3431188464164734, 0.16163185238838196, 0.40592458844184875, 0.11690312623977661, 0.43154481053352356, 0.24841821193695068, 0.14460454881191254, 0.06389512121677399, 0.006055912468582392, 0.45718932151794434, 0.408062219619751, 0.36538463830947876, 0.46266257762908936, 0.22000978887081146, 0.10076302289962769, 0.04629886895418167], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bca48fa7e80504a6b563a69bef1a8a37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4220799207687378, 0.010593689978122711, 0.0051639326848089695, 0.26300016045570374, 0.1419728547334671, 0.03202312812209129, 0.1937798112630844, 0.18453922867774963], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5df618cb9758c42321a2429ac94ef872(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.392578125, 0.125244140625, 0.302001953125, 0.037811279296875, 0.363525390625, 0.2099609375, 0.04083251953125, 0.00411224365234375, 0.178955078125, 0.326904296875, 0.2041015625, 0.1505126953125, 0.382568359375, 0.00032448768615722656, 0.2841796875, 0.428466796875, 0.0950927734375, 0.1485595703125, 0.07110595703125, 0.276123046875, 0.49560546875, 0.2181396484375, 0.1885986328125, 0.275146484375, 0.025848388671875, 0.2041015625, 0.39990234375, 0.21630859375, 0.353271484375, 0.272705078125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_708de7d39b54c42a7d5bd43645032dd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d7715c8265f33bbcf44483c09f8d1a92(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.255126953125, 0.2132568359375, 0.270751953125, 0.1298828125, 0.01129150390625, 0.0296783447265625, 0.39111328125, 0.062286376953125, 0.27001953125, 0.06219482421875, 0.3544921875, 0.380126953125, 0.2457275390625, 0.2236328125, 0.0634765625, 0.462158203125, 0.295654296875, 0.2242431640625, 0.30322265625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb0d8a2601161e0f055688026cb9f092(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28173828125, 0.1754150390625, 0.14697265625, 0.244140625, 0.288330078125, 0.057830810546875, 0.31982421875, 0.380859375, 0.26953125, 0.295166015625, 0.1768798828125, 0.4638671875, 0.338623046875, 0.372802734375, 0.2012939453125, 0.22314453125, 0.03277587890625, 0.37353515625, 0.48779296875, 0.25439453125, 0.0426025390625, 0.056732177734375, 0.0919189453125, 0.317626953125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b532af5888f4b4c34ca1c095d76ef07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.452392578125, 0.1722412109375, 0.0115509033203125, 0.140625, 0.2069091796875, 0.171142578125, 0.420654296875, 0.390869140625, 0.422607421875, 0.459716796875, 0.1683349609375, 0.2308349609375, 0.152587890625, 0.14599609375, 0.316650390625, 0.258056640625, 0.125732421875, 0.005764007568359375, 0.25927734375, 0.46630859375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f90dd80a3d9477691d52eb43bec8c97a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00563812255859375, 0.3935546875, 0.326171875, 0.1456298828125, 0.45458984375, 0.4853515625, 0.341796875, 0.0791015625, 0.350341796875, 0.287353515625, 0.0229949951171875, 0.259033203125, 0.21875, 0.04241943359375, 0.48828125, 0.43017578125, 0.180419921875, 0.331298828125, 0.326171875, 0.13720703125, 0.270263671875, 0.1300048828125, 0.07037353515625, 0.2364501953125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c946fc06755f943bc35586cc58c9cdd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21091794967651367, 0.1270630806684494, 0.3788253366947174, 0.12000890076160431, 0.1623009294271469, 0.468397855758667], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f198cf3386d1380fed84967d60a96e86(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2644740343093872, 0.07508242130279541, 0.2634263336658478, 0.11437834799289703, 0.021488988772034645, 0.04033622518181801, 0.4369359016418457, 0.03922201320528984, 0.1851295828819275, 0.050715647637844086, 0.23297512531280518, 0.3180033564567566, 0.3136829733848572, 0.047968700528144836, 0.42556849122047424, 0.4489233195781708, 0.49160143733024597, 0.405279278755188, 0.4063156247138977, 0.45301756262779236], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_000989294cc6292eeb88200cb887ab38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa07935ee51c9691258c16905ef29166(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_000989294cc6292eeb88200cb887ab38
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a1177c2b867d5b792c5235e506f8807f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.419677734375, 0.240234375, 0.481689453125, 0.391357421875, 0.0160980224609375, 0.390869140625, 0.455810546875, 0.48974609375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4cf8ffa56ff87a30c5bb7d36c0d978da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13902395963668823, 0.41603779792785645, 0.16524866223335266, 0.31400948762893677, 0.03983211889863014, 0.11631342768669128, 0.27457964420318604, 0.31120237708091736, 0.23779010772705078, 0.39228788018226624, 0.3186010718345642, 0.4215026795864105, 0.36380937695503235, 0.3073245584964752, 0.15860946476459503, 0.45951464772224426], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_92ae5948e8e228d37a97cb47fc1588c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33142998814582825, 0.2765924036502838, 0.037425871938467026, 0.02580588310956955, 0.37377816438674927, 0.08481694757938385, 0.12785296142101288, 0.40398263931274414, 0.11288800835609436, 0.349589467048645, 0.12383656203746796, 0.39566880464553833, 0.27177539467811584, 0.09132127463817596, 0.4870416522026062, 0.2811017632484436, 0.22545112669467926, 0.4660075306892395, 0.1282912790775299, 0.47070226073265076, 0.2544524669647217, 0.2716726064682007, 0.048205308616161346, 0.32140451669692993], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a00c3d3bfd53cb998624a7b5f465420(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.312255859375, 0.357177734375, 0.158935546875, 0.045166015625, 0.374755859375, 0.30859375, 0.2196044921875, 0.3115234375, 0.490234375, 0.2208251953125, 0.332763671875, 0.1015625, 0.43408203125, 0.44775390625, 0.05584716796875, 0.13232421875, 0.06390380859375, 0.410400390625, 0.317138671875, 0.10223388671875, 0.260009765625, 0.41357421875, 0.269287109375, 0.277587890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d337a29bc8ba19f5c764a9cf3d74766(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.309212327003479, 0.48630979657173157, 0.34566739201545715, 0.10315451771020889, 0.2628885507583618, 0.4615001976490021], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8741d7ed86e18ac81349858ca2d77a2a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0849609375, 0.206298828125, 0.0016918182373046875, 0.103759765625, 0.17724609375, 0.27734375, 0.3720703125, 0.125244140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0aa3d5deb7b110c919cebf982d3f687(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08453369140625, 0.3955078125, 0.341064453125, 0.091064453125, 0.180908203125, 0.20556640625, 0.035064697265625, 0.401611328125, 0.3779296875, 0.326904296875, 0.315185546875, 0.454833984375, 0.130859375, 0.365966796875, 0.2130126953125, 0.101318359375, 0.288818359375, 0.48388671875, 0.479736328125, 0.001491546630859375, 0.42041015625, 0.2138671875, 0.4912109375, 0.26806640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7229954914ee6bfa4ad5ccd337cb2d22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.212890625, 0.255126953125, 0.17578125, 0.25732421875, 0.275146484375, 0.2890625, 0.24560546875, 0.1524658203125, 0.2275390625, 0.286865234375, 0.351806640625, 0.385009765625, 0.35498046875, 0.09478759765625, 0.08587646484375, 0.365234375, 0.070068359375, 0.4765625, 0.08941650390625, 0.112060546875, 0.0234375, 0.2281494140625, 0.41845703125, 0.0150299072265625, 0.30126953125, 0.29736328125, 0.127197265625, 0.00788116455078125, 0.10833740234375, 0.49609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90e7f8f51e6de895738cec83410dd9f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24924413859844208, 0.153807133436203, 0.30507734417915344, 0.11982529610395432, 0.1367255598306656, 0.36577847599983215], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34c05da7c7201b324c5809b640cf894f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1179136335849762, 0.4862867593765259, 0.08455342054367065, 0.1824066936969757, 0.3892573118209839, 0.004108896013349295, 0.2732946276664734, 0.13297134637832642, 0.22500865161418915, 0.08718675374984741, 0.33589646220207214, 0.26154449582099915, 0.2431991845369339, 0.10390178114175797, 0.4759986698627472, 0.06907125562429428], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd8241c566a455047884655bcd747773(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2421ff7991c8c82228a4fe2ee1737050(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.443359375, 0.334228515625, 0.39892578125, 0.363037109375, 0.256591796875, 0.11651611328125, 0.1922607421875, 0.1226806640625, 0.457275390625, 0.06317138671875, 0.11883544921875, 0.1484375, 0.08416748046875, 0.16943359375, 0.0574951171875, 0.2440185546875, 0.298583984375, 0.2119140625, 0.455078125, 0.0751953125, 0.1640625, 0.05487060546875, 0.262451171875, 0.390380859375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f588b2bceafbf6ca733f987c58eb405(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2900390625, 0.3037109375, 0.44287109375, 0.352294921875, 0.47119140625, 0.25, 0.32373046875, 0.197998046875, 0.2230224609375, 0.2132568359375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9a013fc9c9b7c9d8c6de683eab1987ed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2310791015625, 0.305419921875, 0.12890625, 0.494384765625, 0.1334228515625, 0.17919921875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0dc3977c5108f317c7bd66ae6c649d2e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20849609375, 0.0072021484375, 0.334228515625, 0.255615234375, 0.187744140625, 0.155517578125, 0.0158843994140625, 0.032135009765625, 0.25146484375, 0.316162109375, 0.3720703125, 0.035919189453125, 0.32958984375, 0.27001953125, 0.49755859375, 0.1920166015625, 0.1422119140625, 0.467041015625, 0.34521484375, 0.439208984375, 0.417724609375, 0.2578125, 0.468994140625, 0.1519775390625, 0.458740234375, 0.2144775390625, 0.13134765625, 0.268310546875, 0.498779296875, 0.41748046875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a1328627793138fe285fc789d3ca89b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40102940797805786, 0.18932339549064636, 0.20908886194229126, 0.12968358397483826, 0.02077752910554409, 0.15168561041355133, 0.47844821214675903, 0.03609384596347809, 0.38092416524887085, 0.1656712293624878, 0.1953202188014984, 0.32259249687194824, 0.03252427279949188, 0.4735950827598572, 0.003064942080527544, 0.32094690203666687], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a5fe78723501882c505745013feb35bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3199709355831146, 0.08759171515703201, 0.35917770862579346, 0.0032128412276506424, 0.016675930470228195, 0.42869067192077637, 0.09421415627002716, 0.1503491848707199, 0.39659231901168823, 0.14729656279087067, 0.31304869055747986, 0.3356194496154785, 0.04972880706191063, 0.4240293502807617, 0.016279632225632668, 0.2936662435531616, 0.2375311404466629, 0.05552474036812782, 0.13544318079948425, 0.08800898492336273], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a6e3847fd4b4c899d0e06aa25eb8133c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42720746994018555, 0.1699533611536026, 0.38285642862319946, 0.4742982089519501, 0.05729490891098976, 0.10098239779472351, 0.4714091420173645, 0.06831224262714386, 0.22819703817367554, 0.26171231269836426, 0.045810241252183914, 0.2013729363679886, 0.2843755781650543, 0.02821861207485199, 0.0820087119936943, 0.3870861828327179, 0.19224870204925537, 0.28641271591186523, 0.06461041420698166, 0.14513863623142242, 0.49997228384017944, 0.44371601939201355, 0.28876668214797974, 0.27000537514686584, 0.4741046130657196, 0.23049697279930115, 0.1050446555018425], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46b229e0455c5624f0956ae3021014e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.331603080034256], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b89b90116f34fc8373c53946050434a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41093024611473083, 0.3027900159358978, 0.47577840089797974, 0.3850749135017395, 0.3972504734992981, 0.19251276552677155, 0.3447829782962799, 0.4426547884941101, 0.4580605626106262, 0.1983644664287567, 0.31714773178100586, 0.32177484035491943, 0.3274458944797516, 0.4028231203556061, 0.380237877368927, 0.47004249691963196], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25b245acf650b885856578c3354cc2e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.397705078125, 0.341064453125, 0.0638427734375, 0.3037109375, 0.458740234375, 0.08544921875, 0.283203125, 0.198486328125, 0.408447265625, 0.400634765625, 0.174072265625, 0.08135986328125, 0.178955078125, 0.337646484375, 0.11553955078125, 0.230224609375, 0.41845703125, 0.0224609375, 0.398681640625, 0.1048583984375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52dd6905a45bd106d69ad85f6f925564(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4912109375, 0.42138671875, 0.33056640625, 0.333740234375, 0.274658203125, 0.1417236328125, 0.2578125, 0.05377197265625, 0.449462890625, 0.211181640625, 0.055908203125, 0.2388916015625, 0.3916015625, 0.4375, 0.3837890625, 0.342529296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0700eac203d701461995d025885211bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_443e6825f04920e270d9c0b1f6a31538(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0700eac203d701461995d025885211bf
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed416f4d754470bffc8860aa16ab15ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08978271484375, 0.45458984375, 0.155029296875, 0.1646728515625, 0.2459716796875, 0.333251953125, 0.247802734375, 0.148681640625, 0.448486328125, 0.21923828125, 0.390625, 0.408447265625, 0.415283203125, 0.312744140625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6978215ff05ce61ba31e37e2643ebea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.331787109375, 0.385009765625, 0.37353515625, 0.31201171875, 0.231201171875, 0.41845703125, 0.10394287109375, 0.359130859375, 0.058135986328125, 0.33740234375, 0.1529541015625, 0.408203125, 0.42724609375, 0.146728515625, 0.498291015625, 0.1146240234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f7a74382bda68e5838e6feecf318a8ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44656503200531006, 0.3137640953063965, 0.3221271336078644, 0.021263152360916138, 0.0843353196978569, 0.3339587450027466, 0.20388057827949524, 0.35600563883781433], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f23e1599e8f8f1b1e552868f314634d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3922712504863739, 0.4730954170227051, 0.3497505784034729, 0.14471779763698578, 0.3159727454185486, 0.48051851987838745, 0.3507881164550781, 0.44078701734542847, 0.2191469818353653, 0.42078331112861633, 0.13285182416439056, 0.16740483045578003, 0.19951793551445007, 0.35211923718452454, 0.45045626163482666, 0.33166182041168213], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0214074805925a072cea9eab77b9ecd0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.293701171875, 0.28955078125, 0.380859375, 0.477294921875, 0.10540771484375, 0.2303466796875, 0.0733642578125, 0.381103515625, 0.261474609375, 0.414794921875, 0.0992431640625, 0.33544921875, 0.0211334228515625, 0.334228515625, 0.271240234375, 0.09130859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b80a01d57266710ed3a9a151a123894(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.497314453125, 0.09564208984375, 0.47998046875, 0.33056640625, 0.136474609375, 0.401123046875, 0.458740234375, 0.043243408203125, 0.054443359375, 0.219482421875, 0.058837890625, 0.45947265625, 0.32470703125, 0.07281494140625, 0.2257080078125, 0.324462890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52f51e21e13f697968dd85e97172f23a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24e8564168b4b201e0d65341a4176a59(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.259033203125, 0.441162109375, 0.102294921875, 0.404052734375, 0.3837890625, 0.458251953125, 0.26220703125, 0.0266876220703125, 0.480712890625, 0.298828125, 0.3466796875, 0.1097412109375, 0.1324462890625, 0.453369140625, 0.183349609375, 0.459228515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f562b0c05658c4452fda7de5aa6dd72f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ee4fceca55d1f3b143ffbbe94ba8577(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4854247570037842, 0.34991538524627686, 0.024511972442269325, 0.2967589199542999, 0.3204691708087921, 0.2359820157289505, 0.4110822081565857, 0.4008334279060364, 0.28006449341773987, 0.44506800174713135, 0.29903489351272583, 0.35392987728118896, 0.23980247974395752, 0.07138819992542267, 0.32577088475227356, 0.43845731019973755], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_048a3b3778854ad6c4b3b7980674d0f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28759765625, 0.1927490234375, 0.1177978515625, 0.381103515625, 0.370849609375, 0.2705078125, 0.133544921875, 0.04248046875, 0.1103515625, 0.497802734375, 0.279541015625, 0.305908203125, 0.377685546875, 0.045196533203125, 0.462646484375, 0.396484375, 0.044097900390625, 0.1600341796875, 0.380126953125, 0.2410888671875, 0.0640869140625, 0.43017578125, 0.460693359375, 0.1341552734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e69608910f321d20c3b41ec865f9ac52(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3173828125, 0.431640625, 0.08905029296875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7d84668537f89cfeb9fb1721ea0bed8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2239990234375, 0.28125, 0.29443359375, 0.09014892578125, 0.25830078125, 0.3779296875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12f0c4e52b93b538b4c8c9370c1021fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aac801c1e34b31eda747cc3c932a9414(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.259521484375, 0.435302734375, 0.0975341796875, 0.4951171875, 0.3271484375, 0.25634765625, 0.217041015625, 0.288330078125, 0.2568359375, 0.052001953125, 0.35498046875, 0.3291015625, 0.07122802734375, 0.03424072265625, 0.4609375, 0.044677734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91bea4fa9c0993c4653c094667ac2fb5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11720581352710724, 0.39226362109184265, 0.3393928110599518, 0.14406023919582367, 0.0228017196059227, 0.0005259242025204003, 0.24552907049655914, 0.2489219456911087, 0.3099147379398346, 0.3989136815071106], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88533205ef611272fd449eb64ad22d30(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3850085437297821, 0.179002583026886, 0.2789047062397003, 0.12234354019165039, 0.18463276326656342, 0.2362023890018463, 0.22711274027824402, 0.46262145042419434, 0.3681751787662506, 0.08365151286125183, 0.4830746054649353, 0.14400652050971985, 0.4659627676010132, 0.4728929102420807, 0.16205859184265137, 0.2550738751888275, 0.23477081954479218, 0.18012358248233795, 0.07793430238962173, 0.32038450241088867, 0.20931603014469147, 0.05407404527068138, 0.05149603262543678, 0.20160619914531708], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_350d688e4c2db5dcaa5e030b66909457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55303686d08886bb356b7d14832db8fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_350d688e4c2db5dcaa5e030b66909457
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72b669765779f2f2edf2dc9a41beb72b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4951171875, 0.10723876953125, 0.1795654296875, 0.2025146484375, 0.10675048828125, 0.170166015625, 0.44677734375, 0.252685546875, 0.354248046875, 0.066650390625, 0.203857421875, 0.1488037109375, 0.39404296875, 0.04412841796875, 0.02703857421875, 0.364990234375, 0.06793212890625, 0.0701904296875, 0.368408203125, 0.430908203125, 0.058258056640625, 0.013641357421875, 0.453125, 0.223388671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb4f6ee3de01bd814f552a6d85d729e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_011396e2bc4144cdf8f41cf3d9e9808f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19968783855438232], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f4fa035dbc935198166d9d42925d421(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1008610799908638, 0.33128178119659424, 0.2505432963371277, 0.06740487366914749, 0.13699355721473694, 0.3934747278690338, 0.40159156918525696, 0.0606246255338192, 0.037584930658340454, 0.3555731475353241, 0.26500990986824036, 0.2229313999414444, 0.14879657328128815, 0.08579254895448685, 0.41464218497276306, 0.40909433364868164, 0.022604649886488914, 0.436864972114563, 0.061145324259996414, 0.303559273481369], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a6e0ad4b59333e8ae41297b371159c5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0941162109375, 0.262451171875, 0.38330078125, 0.366943359375, 0.32177734375, 0.019744873046875, 0.1553955078125, 0.131103515625, 0.429931640625, 0.462646484375, 0.4765625, 0.403076171875, 0.1427001953125, 0.0037097930908203125, 0.09967041015625, 0.284912109375, 0.3564453125, 0.41943359375, 0.4150390625, 0.1527099609375, 0.15234375, 0.4638671875, 0.12017822265625, 0.0941162109375, 0.0261383056640625, 0.252685546875, 0.427734375, 0.4033203125, 0.2410888671875, 0.1634521484375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_060a71bfd304ec43d74757455128fed6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08033081144094467, 0.3859838843345642, 0.15997573733329773, 0.18120676279067993, 0.030459074303507805, 0.3897635340690613, 0.42019766569137573, 0.1013825461268425, 0.16375921666622162, 0.39762526750564575], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4724e8a94d6fdefdac392a16f40c7faf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25244140625, 0.308837890625, 0.5, 0.4287109375, 0.36376953125, 0.47412109375, 0.189453125, 0.4853515625, 0.12445068359375, 0.351806640625, 0.11529541015625, 0.333251953125, 0.296875, 0.345703125, 0.12103271484375, 0.2802734375, 0.05072021484375, 0.338623046875, 0.044281005859375, 0.494140625, 0.4365234375, 0.020294189453125, 0.4716796875, 0.0760498046875, 0.402099609375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_418a0877d038968e816a9456222fdec5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42713838815689087, 0.10126113146543503, 0.11406585574150085, 0.08430469036102295, 0.09899268299341202, 0.2073637694120407, 0.38556644320487976, 0.3656666576862335, 0.41581788659095764, 0.06354430317878723], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4573b78ea8d585c40aeb99eb2b1e6712(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.311767578125, 0.004741668701171875, 0.06585693359375, 0.21435546875, 0.374267578125, 0.423095703125, 0.1708984375, 0.262451171875, 0.426513671875, 0.46142578125, 0.4072265625, 0.19140625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2620fb12a7eba93f890960119e605c59(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3076171875, 0.09893798828125, 0.166748046875, 0.0301361083984375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d2e89da82c36e33fc6f3ace25f0a493(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.356689453125, 0.1162109375, 0.1326904296875, 0.419189453125, 0.1893310546875, 0.2088623046875, 0.299560546875, 0.268310546875, 0.1739501953125, 0.267822265625, 0.2291259765625, 0.4853515625, 0.492919921875, 0.496337890625, 0.483642578125, 0.2607421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c23731c5f194889b251c495eafc304a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1651611328125, 0.19580078125, 0.432861328125, 0.44482421875, 0.276611328125, 0.0287322998046875, 0.397705078125, 0.33251953125, 0.198486328125, 0.31591796875, 0.31591796875, 0.2220458984375, 0.224365234375, 0.08258056640625, 0.337158203125, 0.04351806640625, 0.2103271484375, 0.31787109375, 0.2032470703125, 0.007160186767578125, 0.291259765625, 0.401123046875, 0.283203125, 0.12255859375, 0.1593017578125, 0.41357421875, 0.1534423828125], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_15d4d0c78f895a4bbd45bdf9ad1bd09e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2076416015625, 0.297119140625, 0.12261962890625, 0.403076171875, 0.29833984375, 0.06951904296875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e47f3ba6ac6f9b326bc302efbbc759ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.174560546875, 0.2291259765625, 0.170166015625, 0.328369140625, 0.382080078125, 0.10931396484375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d0efc4960107edbd3a092d94e159ba1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2507808804512024, 0.1422892063856125, 0.4606729745864868, 0.332604318857193, 0.0731576532125473, 0.09029337763786316, 0.04673672094941139, 0.19067740440368652, 0.333506315946579, 0.1286768615245819, 0.1813407689332962, 0.2964378595352173, 0.2919812798500061, 0.1206190213561058, 0.29984650015830994, 0.146454855799675, 0.3959209620952606, 0.37076056003570557, 0.42043763399124146, 0.17936038970947266, 0.3547337055206299, 0.31466254591941833, 0.011393163353204727, 0.17681053280830383], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e711adc69e9d9e846d9c73e8e1465c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4054194688796997, 0.36248260736465454, 0.016638362780213356, 0.35572370886802673, 0.35860636830329895, 0.14682820439338684, 0.44460421800613403, 0.12465608865022659, 0.276937872171402, 0.11246611922979355, 0.3666912317276001, 0.10790818929672241, 0.1925777643918991, 0.35789820551872253, 0.36085382103919983, 0.22258424758911133, 0.35650166869163513, 0.4546954333782196, 0.2454008162021637, 0.020134152844548225, 0.012292683124542236, 0.4388231337070465, 0.48016098141670227, 0.46997588872909546], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_210b1256fd07abfa17c99df80fc6c20c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3349609375, 0.0256805419921875, 0.4638671875, 0.264892578125, 0.13427734375, 0.1839599609375, 0.1707763671875, 0.29833984375, 0.1953125, 0.227783203125, 0.132080078125, 0.49951171875, 0.44921875, 0.291259765625, 0.39501953125, 0.1845703125, 0.376220703125, 0.0714111328125, 0.251953125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06526e97547c276697dddd3a7960dc84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43cfd72bbaa1a6929e1eae5c8e0915b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06526e97547c276697dddd3a7960dc84
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31343700ff879256b000647f6b7c4c8f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29961130023002625, 0.0675428956747055, 0.46733614802360535, 0.041900768876075745, 0.29066818952560425, 0.26587843894958496, 0.4355306327342987, 0.45312345027923584, 0.4114494323730469, 0.19495725631713867, 0.051316745579242706, 0.24701716005802155, 0.2045307159423828, 0.07637172192335129, 0.10656662285327911, 0.2975533902645111, 0.3983774185180664, 0.27311354875564575, 0.24329860508441925], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fafc83b8e76060c0ac71e3b7c90e3d1a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22021484375, 0.2298583984375, 0.333740234375, 0.438232421875, 0.025970458984375, 0.39111328125, 0.34521484375, 0.1563720703125, 0.06256103515625, 0.386474609375, 0.3125, 0.141357421875, 0.1082763671875, 0.1151123046875, 0.494384765625, 0.11700439453125, 0.0751953125, 0.2479248046875, 0.3720703125, 0.322509765625, 0.1729736328125, 0.0670166015625, 0.266357421875, 0.4677734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f5b9308516a40dd7544461a59c9610(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e61f71cf1f5ed45759488a099f6140c7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.179443359375, 0.2489013671875, 0.318603515625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c061d3463324b69fdbb31142d8ebd7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12601180374622345, 0.2439158856868744, 0.17464542388916016, 0.35870739817619324, 0.014209614135324955, 0.11752917617559433, 0.2222168892621994, 0.16274502873420715, 0.2947068214416504, 0.14225570857524872, 0.40632742643356323, 0.04781106859445572, 0.10306965559720993, 0.465086430311203, 0.29062873125076294, 0.2776700258255005], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e744bb23825681d908e64970b603532(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1426457b2f4a8aece2fe2d98d2df8816(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e744bb23825681d908e64970b603532
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78977d7ea852f71fb71932e139ef3843(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49151939153671265, 0.4892365634441376, 0.36394932866096497], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae76802e396a5d12d5d76e0027a7ed89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3380672037601471, 0.004196631722152233, 0.25133979320526123, 0.4833516776561737, 0.47522416710853577, 0.45297548174858093, 0.27149447798728943, 0.07951124012470245, 0.2522709369659424, 0.45184624195098877, 0.05772753432393074, 0.289431095123291, 0.017595015466213226, 0.4298670291900635, 0.48071232438087463, 0.26270103454589844, 0.46688494086265564, 0.4910026788711548, 0.04135175049304962, 0.42581209540367126, 0.4444769620895386, 0.14918501675128937, 0.10253527760505676, 0.45549091696739197, 0.06974980235099792, 0.34331345558166504, 0.02020196057856083, 0.03466804698109627], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b1534122f29fcde0b28b26b2503f3ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.348876953125, 0.38623046875, 0.1822509765625, 0.12274169921875, 0.18505859375, 0.00628662109375, 0.341796875, 0.12890625, 0.2486572265625, 0.43212890625, 0.1439208984375, 0.186767578125, 0.0909423828125, 0.203857421875, 0.1640625, 0.35595703125, 0.1864013671875, 0.036163330078125, 0.145751953125], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38b09de3ab78231dc2c93d9a49e91c09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_92595550b404cb44bd891b472f79d65b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.381591796875, 0.298583984375, 0.005153656005859375, 0.182861328125, 0.2427978515625, 0.14794921875, 0.312744140625, 0.1280517578125, 0.1536865234375, 0.47265625, 0.48291015625, 0.045623779296875, 0.01413726806640625, 0.49560546875, 0.48681640625, 0.28857421875, 0.11224365234375, 0.01508331298828125, 0.438720703125, 0.325439453125, 0.485107421875, 0.337890625, 0.164794921875, 0.1468505859375, 0.469970703125, 0.051300048828125, 0.448974609375, 0.315185546875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a316412c7eaacd4064e070ce939a1346(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3978241980075836, 0.481391042470932, 0.47565174102783203, 0.3044425845146179, 0.03141710162162781, 0.15009810030460358, 0.047702379524707794, 0.22883734107017517, 0.4288805425167084, 0.1344822645187378, 0.28016945719718933, 0.09299983084201813, 0.4272601008415222, 0.4262835681438446, 0.3307974338531494, 0.41585350036621094, 0.17681977152824402, 0.32349148392677307, 0.3749667704105377, 0.2064763307571411, 0.22537457942962646, 0.23426498472690582, 0.06418415158987045, 0.24665161967277527, 0.4101147949695587, 0.45444267988204956, 0.07248860597610474, 0.3723949193954468], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ad7b821ff92486882686907fe34ebb4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49308934807777405, 0.4050573408603668, 0.0419062040746212, 0.3204358220100403, 0.2819879651069641, 0.04818498343229294, 0.29919755458831787, 0.2308206707239151, 0.03335927426815033, 0.08020667731761932, 0.015988759696483612, 0.01586386188864708, 0.03793119639158249, 0.39778417348861694, 0.340460866689682, 0.10223739594221115, 0.03940680995583534, 0.4671333432197571, 0.23877134919166565, 0.04924679547548294, 0.4633621275424957, 0.3475988805294037, 0.39835667610168457, 0.17320838570594788, 0.20748259127140045, 0.3610406517982483, 0.40008223056793213, 0.45430612564086914, 0.3615148067474365, 0.3590199053287506], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c436cf590e5db7d32a04dc37dfe5768c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3586774468421936, 0.2347082942724228, 0.09194955229759216, 0.28913408517837524, 0.11046598106622696, 0.2107667773962021, 0.06569983810186386, 0.30779391527175903, 0.1640566736459732, 0.13573090732097626, 0.3198634088039398, 0.14366836845874786, 0.16469204425811768, 0.32698431611061096, 0.43424487113952637, 0.10544688254594803], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2cced615c04b375701f7ad12c20fb317(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3730262517929077, 0.32751521468162537, 0.3811773657798767, 0.4443124830722809, 0.2640308737754822, 0.4338149428367615, 0.004387533292174339, 0.03713395446538925], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6a2bc79cc8e084a9a510f6f1da8a248(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1876007616519928, 0.3196547329425812, 0.4525613784790039, 0.4448728561401367, 0.45418649911880493, 0.270852267742157, 0.006727713160216808, 0.37949347496032715, 0.1533888429403305, 0.04567404091358185, 0.33317115902900696, 0.44892391562461853, 0.12120474129915237, 0.25872454047203064, 0.37810760736465454, 0.07518546283245087, 0.2587176263332367, 0.07564865797758102, 0.006327775772660971, 0.4720277488231659, 0.2601497769355774, 0.19029361009597778, 0.16746921837329865, 0.17071186006069183, 0.3743930459022522], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aec76d626b17111f8cf58b796270ba78(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1875, 0.159423828125, 0.2275390625, 0.38916015625, 0.055267333984375, 0.375, 0.2919921875, 0.364990234375, 0.022430419921875, 0.263427734375, 0.12030029296875, 0.233154296875, 0.3603515625, 0.398681640625, 0.09381103515625, 0.1912841796875, 0.31201171875, 0.033203125, 0.2763671875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c1b1de210b55b4b718275632f58d1f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43473702669143677, 0.245688796043396, 0.153654083609581, 0.29081347584724426, 0.17742472887039185, 0.19924193620681763, 0.2551882863044739, 0.42840778827667236, 0.12160619348287582, 0.10657373070716858, 0.3450182378292084, 0.40583285689353943, 0.1396489143371582, 0.32916775345802307, 0.24859368801116943, 0.4727321267127991, 0.48611190915107727, 0.23701897263526917, 0.18536438047885895, 0.43018242716789246], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cccb78fd0fea3381973e1117f43eed00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37161627411842346, 0.48971137404441833, 0.14764580130577087, 0.13766394555568695, 0.251865416765213, 0.03764568269252777, 0.2175823450088501, 0.2805333435535431, 0.36387473344802856, 0.11963734030723572, 0.23012444376945496, 0.010577342472970486, 0.042837150394916534, 0.1252811998128891, 0.20817461609840393, 0.08131947368383408], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4591c2c45c2f49a16d58e711752dfd5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4273216128349304, 0.04668628051877022, 0.2847025990486145, 0.06259221583604813, 0.12849563360214233, 0.36304664611816406, 0.15461508929729462, 0.13651959598064423, 0.4575161039829254, 0.013624338433146477], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b7f758a74c7f71d6a0bfcd57fab5789(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468017578125, 0.0621337890625, 0.10260009765625, 0.037322998046875, 0.09490966796875, 0.307861328125, 0.3017578125, 0.4052734375, 0.09967041015625, 0.27001953125, 0.398193359375, 0.483642578125, 0.03839111328125, 0.109130859375, 0.393798828125, 0.00803375244140625, 0.058807373046875, 0.1295166015625, 0.037567138671875, 0.22119140625, 0.486328125, 0.25732421875, 0.266845703125, 0.0287017822265625, 0.12078857421875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_852384b5b1eb0e838deaf2eae1ba19b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43195268511772156, 0.22412006556987762, 0.4083394706249237, 0.46806269884109497, 0.080522321164608, 0.4097754657268524, 0.4665191173553467, 0.39858970046043396, 0.3028087615966797, 0.48635947704315186, 0.04762817174196243, 0.3852919638156891, 0.20322111248970032, 0.48699671030044556, 0.07438899576663971, 0.46272894740104675, 0.19746004045009613, 0.21673880517482758, 0.06713923066854477, 0.41370776295661926, 0.06491797417402267, 0.04583093523979187, 0.2893691062927246, 0.04648926854133606], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6827ae6ea94d01f73ae4773a9bfe9fd9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47607421875, 0.263916015625, 0.315185546875, 0.167236328125, 0.0927734375, 0.443359375, 0.3662109375, 0.294189453125, 0.39892578125, 0.2305908203125, 0.49169921875, 0.011871337890625, 0.0760498046875, 0.280517578125, 0.22314453125, 0.1826171875, 0.34716796875, 0.0706787109375, 0.1424560546875, 0.316650390625, 0.253173828125, 0.459228515625, 0.4765625, 0.0209808349609375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c27ee7ddc8d19fd63fb12e348d85a8da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2254638671875, 0.183349609375, 0.08251953125, 0.4619140625, 0.248046875, 0.164306640625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d4387c3ccd3b2df6ddd9fe4a572c8b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1431884765625, 0.412109375, 0.27783203125, 0.269287109375, 0.419189453125, 0.477294921875, 0.31884765625, 0.074462890625, 0.30712890625, 0.0296478271484375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_420daea52f592d2e228335e9044b9007(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.459369033575058, 0.03608611226081848, 0.22754773497581482, 0.0194524135440588, 0.048276208341121674, 0.47683170437812805, 0.23552672564983368, 0.4505435824394226, 0.329645037651062, 0.441504567861557, 0.09659549593925476, 0.4857698976993561, 0.10567287355661392, 0.4020644426345825, 0.1570219248533249, 0.04216263070702553, 0.19600875675678253, 0.08057081699371338, 0.22768566012382507], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e517d43e90e667d9f085af21eec77b2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04119635000824928, 0.3005230724811554, 0.07696746289730072, 0.18441277742385864, 0.19052696228027344, 0.11557064950466156, 0.17615950107574463, 0.45723918080329895, 0.015433615073561668, 0.27310115098953247, 0.346302330493927, 0.23199860751628876], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c4a9a5fde2d51c170295b49adb0ed15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d57c192e18f54fec2eb126a196b544f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4599609375, 0.19580078125, 0.300537109375, 0.278076171875, 0.1722412109375, 0.08026123046875, 0.12841796875, 0.09967041015625, 0.4169921875, 0.01136016845703125, 0.06707763671875, 0.01425933837890625, 0.444091796875, 0.12841796875, 0.300537109375, 0.032440185546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_60902c2fc8ba3700de8a11abae5f3a62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4776446223258972, 0.30750787258148193, 0.044133514165878296, 0.4108918309211731, 0.0778752937912941, 0.0032345508225262165, 0.42420199513435364, 0.07520714402198792, 0.02753053791821003, 0.025295384228229523, 0.2775813043117523, 0.20539337396621704, 0.30993661284446716, 0.3630143404006958, 0.04965115338563919, 0.004469694569706917, 0.3217887580394745, 0.40575283765792847, 0.3952936828136444, 0.18689772486686707, 0.4482738971710205, 0.3777140974998474, 0.16661658883094788, 0.4648655951023102, 0.45867714285850525, 0.1321282684803009, 0.19438990950584412, 0.4196331202983856, 0.3602442145347595, 0.3004744350910187], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02b1ac588a8b8e059e17ecc5a6a05372(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22705078125, 0.30810546875, 0.48388671875, 0.019500732421875, 0.320556640625, 0.1265869140625, 0.35986328125, 0.145263671875, 0.2734375, 0.427734375, 0.07098388671875, 0.1707763671875, 0.167724609375, 0.43408203125, 0.2281494140625, 0.2861328125, 0.45947265625, 0.44921875, 0.230712890625, 0.4267578125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fab6742fe8cbb632f3d36d636a49361f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.5, 0.22412109375, 0.1312255859375, 0.20263671875, 0.315185546875, 0.27099609375, 0.051727294921875, 0.21142578125, 0.34423828125, 0.36181640625, 0.313232421875, 0.197021484375, 0.11865234375, 0.01215362548828125, 0.2181396484375, 0.34765625, 0.2822265625, 0.377197265625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7482992be68d5232351dcb7b444bfa2d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02261601760983467, 0.4465724229812622, 0.11824054270982742, 0.4767015278339386, 0.22185128927230835, 0.4417590796947479, 0.34903886914253235, 0.05748279020190239, 0.1045573279261589, 0.43062713742256165], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_62696cfd7642932947982d9572431133(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c77d53f7598ede2d42bf98b201c4a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_62696cfd7642932947982d9572431133
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84a63f6f72ce8e3eddaa53cb4628a68a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.312255859375, 0.333984375, 0.021636962890625, 0.1533203125, 0.359375, 0.0031909942626953125, 0.360107421875, 0.26904296875, 0.478271484375, 0.016998291015625, 0.24072265625, 0.22607421875, 0.44677734375, 0.053253173828125, 0.259765625, 0.0205230712890625, 0.1260986328125, 0.0040435791015625, 0.17724609375, 0.357177734375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8b2871fbe48446c9c28d7f82db4bb03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.017956625670194626, 0.21409940719604492, 0.3748947083950043, 0.477410227060318, 0.4259592294692993, 0.24442383646965027, 0.4891331195831299, 0.4365982711315155, 0.2369641214609146, 0.20429553091526031, 0.23037473857402802, 0.02917630225419998, 0.42909324169158936, 0.390846312046051, 0.17808935046195984, 0.12721951305866241, 0.23384703695774078, 0.03495882451534271, 0.3245941698551178, 0.14005827903747559, 0.4411108195781708, 0.19183972477912903, 0.45005038380622864, 0.06787587702274323], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_236bab54d93cda55881728262fec4eff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13484571874141693, 0.3263348639011383, 0.19025981426239014, 0.3024347722530365, 0.334685355424881, 0.3372850716114044, 0.25581836700439453, 0.30158716440200806, 0.38914623856544495, 0.48244357109069824, 0.19002878665924072, 0.4263690114021301, 0.45095571875572205, 0.007448203861713409, 0.2606322169303894, 0.4085945785045624, 0.037173811346292496, 0.18787221610546112, 0.23014625906944275, 0.34441229701042175, 0.06939126551151276, 0.4089602530002594, 0.18283115327358246, 0.2563817501068115], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc27d41707ccc34452322d278ad3b017(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09343118220567703, 0.020095931366086006, 0.4645448327064514, 0.3671334385871887, 0.04534301161766052, 0.338410884141922, 0.4213258922100067, 0.3727853000164032, 0.1811453402042389, 0.2584577798843384, 0.07646803557872772, 0.45172396302223206, 0.40811026096343994, 0.42154189944267273, 0.4372970759868622, 0.13380536437034607, 0.2928785979747772, 0.32383444905281067, 0.32764074206352234, 0.04330514743924141, 0.10276474058628082, 0.36795279383659363, 0.18641529977321625, 0.077011838555336], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f54d66965c5e711f6265a66dcd3c1f11(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08984375, 0.27197265625, 0.09234619140625, 0.11651611328125, 0.389404296875, 0.480224609375, 0.41552734375, 0.01474761962890625, 0.48046875, 0.44091796875, 0.272216796875, 0.227294921875, 0.35107421875, 0.4111328125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19385325e03ac786da1eb6167406d990(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0072784423828125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0531980b7f2a44fd37edc3a6f3232eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e43f4917fd147c59375a6856207927b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1771635264158249, 0.04765123501420021, 0.48157939314842224, 0.21808065474033356, 0.026198184117674828, 0.4534294009208679, 0.25162336230278015, 0.32942742109298706], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cac7826511314758cb322c466218973(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.047245465219020844, 0.12178365141153336, 0.309082955121994, 0.2880783975124359, 0.13356801867485046, 0.361642450094223, 0.4258376657962799, 0.4527599513530731, 0.48507046699523926, 0.14802959561347961, 0.46026989817619324, 0.2062389999628067, 0.09026183187961578, 0.31660783290863037], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e1a689b6056c5d54cf2d92ccdb43907(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.363002747297287, 0.21941465139389038, 0.29971906542778015, 0.35734859108924866, 0.29091864824295044, 0.2668474018573761, 0.039267607033252716, 0.4141075313091278, 0.14558954536914825, 0.3495427072048187], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3590eaf298f6ef5cf80d07007546c0ba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09914529323577881, 0.13698409497737885, 0.09169870615005493, 0.4981505870819092, 0.39084675908088684, 0.07696598768234253, 0.13214753568172455, 0.31102216243743896, 0.005464415065944195, 0.2768322825431824, 0.15112926065921783, 0.4200306832790375, 0.1921546459197998, 0.25465071201324463, 0.43635833263397217, 0.17022868990898132, 0.3728834092617035, 0.4535263180732727, 0.49237003922462463, 0.4760889708995819, 0.48846331238746643, 0.40486064553260803, 0.14831486344337463, 0.3186219036579132, 0.43932971358299255, 0.4541919529438019, 0.07189066708087921, 0.4008956849575043], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c867a462d9ea145e50d42788dd0b10db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5092f9e7385a115f2aad6645241186b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c867a462d9ea145e50d42788dd0b10db
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8bffcc6b43e3ba9018b7519439d728b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1666259765625, 0.1673583984375, 0.2259521484375, 0.072998046875, 0.1552734375, 0.25634765625, 0.125732421875, 0.484130859375, 0.4912109375, 0.462646484375, 0.0226898193359375, 0.1868896484375, 0.275634765625, 0.435302734375, 0.241943359375, 0.383056640625, 0.13818359375, 0.48291015625, 0.419921875, 0.357421875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e9aae36ce78abb3eec8829563ab8c5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24119728803634644, 0.4698543846607208, 0.4022211730480194, 0.050202663987874985, 0.3761078417301178, 0.2711697220802307, 0.28738129138946533, 0.17753039300441742, 0.4286167621612549, 0.4963454604148865, 0.4838866889476776, 0.17872360348701477, 0.1395636796951294, 0.1802554875612259, 0.2847403585910797, 0.3657550513744354, 0.24271385371685028, 0.09399763494729996, 0.040140993893146515, 0.07735989987850189], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ecff573262ba716646339c0f9d58050(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40897223353385925, 0.2982996702194214, 0.46950194239616394, 0.3223116099834442, 0.42176079750061035, 0.03904169797897339, 0.353324294090271, 0.2551971971988678, 0.0026817619800567627, 0.08938536047935486, 0.21866221725940704, 0.029986707493662834, 0.3999597430229187, 0.2164754718542099, 0.37199321389198303, 0.18766160309314728], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4f036eacf5148e01f599a7cd848d09c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.395263671875, 0.48193359375, 0.275390625, 0.47802734375, 0.043975830078125, 0.1912841796875, 0.3857421875, 0.1005859375, 0.2486572265625, 0.28955078125, 0.406982421875, 0.395751953125, 0.367919921875, 0.244873046875, 0.42333984375, 0.026214599609375, 0.09014892578125, 0.368408203125, 0.462646484375, 0.06353759765625, 0.334228515625, 0.2459716796875, 0.1380615234375, 0.447998046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a6776dc4a691b4430a74402f2a922c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26287931203842163, 0.22940334677696228, 0.3422017991542816, 0.08452048152685165, 0.4027295410633087, 0.3024997115135193, 0.13468189537525177, 0.4427740275859833, 0.30052855610847473, 0.43193498253822327, 0.3564704656600952, 0.4352646768093109, 0.38711386919021606, 0.061628557741642, 0.35483160614967346, 0.43502524495124817, 0.2545425593852997, 0.3321894109249115, 0.17964957654476166, 0.30922579765319824, 0.23046398162841797, 0.29490429162979126, 0.08035226166248322, 0.13815367221832275, 0.3860917091369629], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75f98182121eb962075cd99f166134fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22590091824531555, 0.17744915187358856, 0.022326979786157608, 0.1767321527004242, 0.053970690816640854, 0.10866092145442963, 0.28121113777160645, 0.14339010417461395, 0.48406103253364563, 0.30053579807281494, 0.14937599003314972, 0.04256444796919823, 0.4899991452693939, 0.1989532858133316, 0.3359972834587097, 0.10150884836912155], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2299aaa9aebef531e657d76daf56728f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18924757838249207, 0.36975863575935364, 0.2607082426548004, 0.49009424448013306, 0.3899398446083069, 0.08749933540821075, 0.06882531940937042, 0.0651649758219719, 0.43788963556289673, 0.2633810341358185, 0.16116634011268616, 0.4725329875946045, 0.4883887767791748, 0.3300355076789856, 0.49286171793937683, 0.47130411863327026], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42945542b3343127d9c5772e850f2b00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.412353515625, 0.2301025390625, 0.2471923828125, 0.321044921875, 0.2427978515625, 0.272705078125, 0.31103515625, 0.458251953125, 0.359619140625, 0.279541015625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a47fead08edd2c82302892a43c0b1f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18265585601329803, 0.4389781057834625, 0.37157097458839417, 0.3414674699306488, 0.3824922442436218, 0.33131274580955505, 0.41446444392204285, 0.40285131335258484, 0.15687261521816254, 0.39664775133132935, 0.018623510375618935, 0.33985742926597595, 0.2725672721862793, 0.15283481776714325, 0.12334885448217392], dtype='float32').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e88191cde453ce4b753ec40b0f729b50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49462890625, 0.21240234375, 0.449462890625, 0.356201171875, 0.2489013671875, 0.317626953125, 0.25927734375, 0.09332275390625, 0.453857421875, 0.08154296875, 0.1483154296875, 0.4638671875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8636e6ffbb064e612b7f46d3df7911b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00026535987854003906, 0.0008668899536132812, 0.220947265625, 0.171875, 0.271728515625, 0.3837890625, 0.0931396484375, 0.482666015625, 0.344482421875, 0.12469482421875, 0.0008311271667480469, 0.0072479248046875, 0.12939453125, 0.32373046875, 0.089111328125, 0.419921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_871a1767d59ae456a3b4b4b5035fcf48(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.302001953125, 0.01354217529296875, 0.09539794921875, 0.007205963134765625, 0.2174072265625, 0.428955078125, 0.1573486328125, 0.089111328125, 0.203857421875, 0.35693359375, 0.39794921875, 0.08148193359375, 0.0159759521484375, 0.369384765625, 0.08203125, 0.30908203125, 0.162109375, 0.3671875, 0.185546875, 0.235107421875, 0.3984375, 0.4765625, 0.2349853515625, 0.13330078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39a1e8e994febddd7347c30ba11142da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.466064453125, 0.3916015625, 0.155517578125, 0.1488037109375, 0.46533203125, 0.479248046875, 0.281494140625, 0.08111572265625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2137bb004fd807305819dbae54757e3a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0010467576794326305, 0.3456275761127472, 0.4066118896007538, 0.24368251860141754, 0.37525755167007446, 0.26515069603919983, 0.4419040083885193, 0.47640055418014526, 0.2862311601638794, 0.1302134394645691, 0.20537641644477844, 0.1739901900291443, 0.17589519917964935, 0.07770916819572449, 0.16730959713459015, 0.35397446155548096, 0.06334330886602402, 0.16072531044483185, 0.2868550717830658, 0.47278332710266113, 0.09624164551496506, 0.2761061191558838, 0.13956212997436523, 0.15060389041900635], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_469013a0faf2e38b6a9ff2a0dbdd54c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48876953125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_016bd5e7dd98260f0372bcb2b7c0d0ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1833515465259552, 0.3102782666683197, 0.45263350009918213, 0.3161545991897583, 0.2845171093940735, 0.019631236791610718, 0.102845698595047, 0.22316642105579376, 0.2867065370082855, 0.2198144644498825, 0.13087321817874908, 0.31814706325531006, 0.46139436960220337, 0.391590416431427, 0.47684258222579956, 0.43519333004951477], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f0a82beba5a834a7cd4b07827fe839b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12103271484375, 0.41650390625, 0.412109375, 0.05499267578125, 0.00643157958984375, 0.135986328125, 0.332275390625, 0.2132568359375, 0.2447509765625, 0.376953125, 0.450927734375, 0.430419921875, 0.27099609375, 0.252197265625, 0.1414794921875, 0.379150390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_821acd4de4a0c3e8bd8e9ccf7d38fc7f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49286967515945435], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84bea244aba4c21805955e60ce7dc9e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08575439453125, 0.273681640625, 0.33349609375, 0.011810302734375, 0.425048828125, 0.281005859375, 0.0217742919921875, 0.00681304931640625, 0.447265625, 0.0217132568359375, 0.05718994140625, 0.164794921875, 0.1502685546875, 0.380126953125, 0.404052734375, 0.17041015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14d27b07ea33752ce98968664b79afbd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21267372369766235, 0.11773509532213211, 0.2088698297739029, 0.02806398645043373, 0.013346871361136436, 0.12948736548423767], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b3230111d3aee57d79788d57cb99159(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ab43d7e073db67176a4fe7cd500fa8f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b3230111d3aee57d79788d57cb99159
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_931ccd5c6c13da94c349357c74df3fe0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1717529296875, 0.2418212890625, 0.2283935546875, 0.453369140625, 0.19921875, 0.192138671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d00a46c1684c0d14eff55be77bb6d9fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4440765380859375, 0.3943575918674469, 0.23740914463996887, 0.10281349718570709, 0.13561967015266418, 0.4932507276535034, 0.08906152099370956, 0.05417309328913689], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dfbadf86ad0c912f5d30cb092e06560e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09200791269540787, 0.14707815647125244, 0.49593982100486755, 0.1612110435962677, 0.2002294659614563, 0.4536816477775574, 0.32844090461730957, 0.32564714550971985, 0.3121435046195984, 0.47235292196273804, 0.3861200511455536, 0.3973352611064911, 0.45592767000198364, 0.09084680676460266, 0.1366245448589325, 0.2496146559715271, 0.2740843594074249, 0.3552067279815674, 0.1352442353963852, 0.2839527726173401, 0.14499196410179138, 0.1285804957151413, 0.2770659327507019, 0.39398103952407837, 0.1850370317697525], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31e86b9dbb5170390de557eec79a3725(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12230855226516724, 0.49635106325149536, 0.0868891179561615, 0.4208415448665619, 0.19848351180553436, 0.06842996925115585], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_85362e0b434a368e5fa75604e5279f67(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.231201171875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee239605a935475fce3b0db626958fcc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.318115234375, 0.4921875, 0.2421875, 0.308349609375, 0.474365234375, 0.258544921875, 0.040130615234375, 0.36962890625, 0.0980224609375, 0.18896484375, 0.2037353515625, 0.029693603515625, 0.136962890625, 0.01253509521484375, 0.04742431640625, 0.0953369140625, 0.35791015625, 0.0302886962890625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3fe172432b2db13b1d1ca9cd62bfbc43(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33030232787132263, 0.09721400588750839, 0.414819598197937, 0.3567989766597748, 0.3183751106262207, 0.1273864507675171, 0.48130449652671814, 0.40566739439964294, 0.013917025178670883, 0.4658411145210266, 0.4745141267776489, 0.49741533398628235, 0.3633200526237488, 0.24888023734092712, 0.2114880084991455, 0.48533716797828674], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_898c3d330188516001fdc6afb2550f37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.448974609375, 0.199951171875, 0.1629638671875, 0.2685546875, 0.438232421875, 0.2132568359375, 0.34765625, 0.0665283203125, 0.10919189453125, 0.04833984375, 0.28759765625, 0.270263671875, 0.045867919921875, 0.1163330078125, 0.390380859375, 0.436767578125, 0.291748046875, 0.1573486328125, 0.12298583984375, 0.260009765625, 0.1693115234375, 0.0465087890625, 0.399658203125, 0.144287109375, 0.245849609375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7eb46a59d5c7c8b0c332bb5182d22e84(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.239013671875, 0.039276123046875, 0.0006055831909179688, 0.10833740234375, 0.0673828125, 0.035125732421875, 0.036041259765625, 0.1131591796875, 0.07244873046875, 0.25634765625, 0.43896484375, 0.421142578125, 0.2354736328125, 0.498291015625, 0.02655029296875, 0.041412353515625, 0.09100341796875, 0.322998046875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d498f5c8c9316afe982462c0194ca11d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.344970703125, 0.447998046875, 0.316650390625, 0.1246337890625, 0.43994140625, 0.08380126953125, 0.48095703125, 0.297607421875, 0.31396484375, 0.209228515625, 0.10205078125, 0.0283355712890625, 0.386962890625, 0.265380859375, 0.1988525390625, 0.49755859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2234884d01307f078c1569fee00b1835(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10873199254274368], dtype='float32').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6f8610dedbd86099190071dd8de14c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4a0098aaf2358d23db4fb77abfaa0d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6f8610dedbd86099190071dd8de14c8b
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7e6e2769e24e77eb6cfc4124c1ff89a6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63509a073e0ff2f037c232e8a8f5a4a3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e6e2769e24e77eb6cfc4124c1ff89a6
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10d867209e276180edb4ec78ad7178cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81ab9a45d90879bbf6e0f712103c9456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38ffdd04fba913e3645cadf6e82a66cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a3c73740775bd78d086617da86ce8d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18291451036930084, 0.3035469055175781, 0.026936113834381104, 0.2519782781600952, 0.3944492042064667, 0.20137469470500946, 0.10282574594020844, 0.3635231852531433, 0.25519078969955444, 0.4530221223831177, 0.4746520221233368, 0.4190441370010376, 0.3034053444862366, 0.2735334038734436, 0.2111344337463379, 0.357038676738739, 0.4500555992126465, 0.30653348565101624, 0.3321927487850189, 0.3613084852695465, 0.47046470642089844, 0.1462101936340332, 0.39867261052131653, 0.2764774560928345, 0.059124905616045], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0296f854bdc7fe23a13230a9d667cde9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9fe3d204669e773ccfa2d558a08706c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ca960dc3c6de5aaa288fcbdc5d72339(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_97e15737707f5e964c83733fd8c0a780(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02579524926841259, 0.38501209020614624, 0.1889687031507492, 0.45836323499679565, 0.10457545518875122, 0.4068089723587036, 0.06637822836637497, 0.424407422542572, 0.19786173105239868, 0.19620783627033234, 0.4522016942501068, 0.0333816222846508, 0.40889257192611694, 0.09080152958631516, 0.4245973825454712, 0.2629433870315552, 0.4794588088989258, 0.18178725242614746, 0.4040032625198364], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3deef7ce55df14091bd0f69ecf9ed4a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14461e8370acd22916b1fd1b276296b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77b24f1107af22aa9a5c0c6be7c8bac4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14461e8370acd22916b1fd1b276296b8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0ba4caa14fcac619aedbe54f4b95ffa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5e7d4e15953cd0a94f9c9fcf281b8fa5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43312329053878784, 0.20628297328948975, 0.418617844581604, 0.4114833474159241, 0.26785460114479065, 0.2784983813762665, 0.11433491110801697, 0.33971282839775085, 0.23181745409965515, 0.05368794873356819, 0.483640193939209, 0.39558738470077515, 0.07014324516057968, 0.39575669169425964, 0.2769564390182495, 0.07925598323345184], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_125c13bd111488568f6aa2bd3b8cac79(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1265944c708a9b8bb3e117b1841a5d05(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_125c13bd111488568f6aa2bd3b8cac79
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c63579fb15baf02867c878fcb9a7047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65393fab12929e8664d17b6d352d24ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34814453125, 0.362060546875, 0.109619140625, 0.0223236083984375, 0.2039794921875, 0.403076171875, 0.358154296875, 0.171142578125, 0.2880859375, 0.480224609375, 0.0745849609375, 0.09088134765625, 0.0635986328125, 0.272705078125, 0.208984375, 0.2032470703125, 0.022857666015625, 0.055511474609375, 0.06353759765625, 0.26806640625, 0.078125, 0.442626953125, 0.11138916015625, 0.1640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ec75e0a1eac60570675662167fc12e2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ec47bd98ac432c65daee0242b7b66aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ec75e0a1eac60570675662167fc12e2e
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b2e28bdb089b2a06f9f3c0f65620f93(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b323fa790003ba2374ea92122a7648e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aea4c82d1095f2d6307f87ef6e819ba8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b323fa790003ba2374ea92122a7648e2
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3f380390162d404d1c4b19a90eb3870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44990f0c5021549153b6934ce2d94a88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4139f48deff026a9f7eff10d1911d1ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.483154296875, 0.171630859375, 0.04754638671875, 0.474609375, 0.494873046875, 0.266357421875, 0.294189453125, 0.2919921875, 0.3798828125, 0.0972900390625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d80d3b32d0bc742585697c411b3b598(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05296126380562782], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f103316df6090d2d4303c927f0c2a85f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76ea3314d569a76d36722658f96fd141(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f103316df6090d2d4303c927f0c2a85f
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_432d1ebffffa755e49510ed60359a1b6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c9f7cdb91e296f571703b65b8da5d5e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.418212890625, 0.1434326171875, 0.07830810546875, 0.003276824951171875, 0.328857421875, 0.474609375, 0.060394287109375, 0.466796875, 0.31201171875, 0.282958984375, 0.450439453125, 0.410400390625, 0.298583984375, 0.1923828125, 0.484619140625, 0.404052734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7168368fc2d9714a65f7f1529a86c458(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5bbe72960ad0c50ea632118ae5cef61(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1925048828125, 0.01230621337890625, 0.223876953125, 0.238037109375, 0.46484375, 0.1590576171875, 0.371337890625, 0.368896484375, 0.389892578125, 0.438720703125, 0.2462158203125, 0.07611083984375, 0.0950927734375, 0.2276611328125, 0.44775390625, 0.43359375, 0.379638671875, 0.1751708984375, 0.375732421875, 0.1610107421875, 0.08465576171875, 0.296142578125, 0.3349609375, 0.256103515625, 0.2802734375, 0.1259765625, 0.429443359375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_590b776ac6411426b1b7d195238cc930(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc87dfbf59f9460b76b1837aa1cba6eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_590b776ac6411426b1b7d195238cc930
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0ec5d97b7dde4b94156985566db3079(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d774f2c411227a48ca3762b29ac90db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0ec5d97b7dde4b94156985566db3079
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6dc25886605f6c99e5333e88315bbedf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73df0e3ae62a6655704f9b68999ec0fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6dc25886605f6c99e5333e88315bbedf
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df7339978207b900f3ad9570fc311692(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a90d9cb6eb2175fb92342421defe99d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df7339978207b900f3ad9570fc311692
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ace01422747b7c6d292d2c543390d5f0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4aea0f17230329cac3ca025492f44af7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ace01422747b7c6d292d2c543390d5f0
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df7cd17bd9fd1528fe5dc3de31567c18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.301513671875, 0.1312255859375, 0.218505859375, 0.02325439453125, 0.060699462890625, 0.36181640625, 0.262451171875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12a47130cc30746386ca79ed37757e08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc4cc8cd8b7973c6f06905a9fa039485(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e43c881316d43fba0ff5d2190338ac8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d55e15a7824c4568ce536ba9218b649d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a16aa590a5209e043dec72f269a26b15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d55e15a7824c4568ce536ba9218b649d
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_024e0d162516e413a3b18d806e6b5c57(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77dfd02fb9c93e0dace3aa7f138069ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_024e0d162516e413a3b18d806e6b5c57
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da65682b4c59605c3aa383b20cd4fcb9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c288a7d6e0fc0512734edc18119549f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7177845c8997a43ca5c5283e068fdb97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b94ccdd48ed42d43e965155df43bb200(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7177845c8997a43ca5c5283e068fdb97
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b7646da19f75e214a5656fc8f79e163(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62341c630bc5fb1b1161047edcd20254(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b7646da19f75e214a5656fc8f79e163
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7616d2cee120f5113b6c5adc6035553d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ede10e013dfea86ea113c5145e4e09e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18733452260494232, 0.25191304087638855, 0.35940858721733093, 0.00043852481758221984, 0.11381598562002182, 0.2001674473285675, 0.3827745020389557, 0.41419345140457153, 0.33842283487319946, 0.015114710666239262, 0.2581409513950348, 0.3901658356189728, 0.4600610136985779, 0.35008689761161804, 0.09955694526433945, 0.3685397803783417], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab0cb8a80d1a66cd012199224946361d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a32ee8e1f6209570fdff2ad57a1ca3ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1259765625, 0.435791015625, 0.11773681640625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb537e74c4cbba91aa3f14df65d42d81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9234c05eb679f10226c37a6045040d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59a9ffbc0f293949ddca76dbae04f527(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b6de5479dfd25b7f72ad11f4c39fd4a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1acc78b57f90758f643f9308ccc63e82(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06463623046875, 0.09796142578125, 0.07440185546875, 0.470458984375, 0.32373046875, 0.2626953125, 0.2939453125, 0.32568359375, 0.364013671875, 0.260986328125, 0.243896484375, 0.299560546875, 0.498291015625, 0.43115234375, 0.232666015625, 0.053680419921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1ce7ff2b990610c551a3795573e108f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25235193967819214, 0.2712599039077759, 0.09252461791038513, 0.2633594274520874, 0.37259939312934875, 0.4846327006816864, 0.18577077984809875, 0.2541946470737457, 0.3442111313343048, 0.15095315873622894, 0.08905867487192154, 0.03433840349316597, 0.3295449912548065, 0.413299024105072, 0.320849746465683, 0.2845191955566406, 0.4732842445373535, 0.16982224583625793], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_396aabe45bd0843436abef9b507ac5b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39db26cd7f03a76138753964e5b993b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_396aabe45bd0843436abef9b507ac5b9
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da6b520b98d0b887dce2a538218534fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_883b036f3b26e9fe9e65affb9c5ca2b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09932190179824829, 0.424435555934906, 0.034339796751737595, 0.24100741744041443, 0.3689596354961395, 0.03460724279284477, 0.0422622486948967, 0.1026613861322403, 0.19067461788654327, 0.42651796340942383, 0.39218536019325256, 0.28667086362838745, 0.40787237882614136, 0.17563055455684662, 0.27813220024108887, 0.14385195076465607], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_108a9c741ab184c41ad6619ca78c2020(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_431a33accbb4f4ca5fdbe45313433b87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_108a9c741ab184c41ad6619ca78c2020
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_126127298a872858242ef92a6d59a455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1fed42ac7bace8d3316ab2b1f19b1da5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_126127298a872858242ef92a6d59a455
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1fc176fc897661a0351d8d26779ccdad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.410888671875, 0.208984375, 0.49853515625, 0.1683349609375, 0.343505859375, 0.26318359375, 0.400634765625, 0.2474365234375, 0.007415771484375, 0.10430908203125, 0.1883544921875, 0.310791015625, 0.2188720703125, 0.283935546875, 0.0140838623046875, 0.04168701171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b72d2da90f9e3404b55e3df6cea923b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.353759765625, 0.0266876220703125, 0.4677734375, 0.198974609375, 0.07794189453125, 0.284912109375, 0.33642578125, 0.0292510986328125, 0.423583984375, 0.456787109375, 0.324951171875, 0.477294921875, 0.246826171875, 0.47802734375, 0.15380859375, 0.415283203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07da2f993d9546f0c1abdf48c7555826(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2827167212963104, 0.1460980921983719, 0.48890337347984314, 0.3590873181819916, 0.0016528572887182236, 0.3176818788051605, 0.09210792183876038, 0.17044053971767426, 0.36875736713409424, 0.2898408770561218, 0.3790476620197296, 0.2170645147562027, 0.4126947522163391, 0.4370417594909668, 0.37326905131340027, 0.10164368897676468], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_59233f0b453f269ed765a9ed50178ce3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f20da9eba8a4343cd0943fc9d4bc473b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_59233f0b453f269ed765a9ed50178ce3
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88df5e4cb2d1bb7057159c657167165c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d778579c56fdc49ff8b43e1ab536ad0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04633340239524841, 0.2763908803462982, 0.05956445634365082, 0.290038138628006, 0.02418147772550583, 0.06853634864091873, 0.2993963658809662, 0.33478066325187683, 0.08380088955163956, 0.16890133917331696, 0.16148604452610016, 0.1292809247970581, 0.10296912491321564, 0.4830781817436218, 0.4289471209049225, 0.16481782495975494, 0.3369666337966919, 0.1412191092967987, 0.0949479267001152, 0.33591389656066895, 0.23549504578113556, 0.0575437992811203, 0.27842384576797485, 0.3945409059524536, 0.12341222167015076, 0.427221417427063, 0.38704705238342285, 0.3526488244533539, 0.3272470533847809, 0.44674867391586304], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdda2790ac7c375ae63e8efd200f2896(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0c75bd441700c68ce2d731248d27487a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09cf30699a5929633ad13c0db0e3425f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0c75bd441700c68ce2d731248d27487a
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5947308f7c3db5a3d07029893c7127cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cacb44bfec0254417b6ef3865acea244(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5947308f7c3db5a3d07029893c7127cc
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3653f2b5a8e90358813b34a3daf6fa3a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27912670373916626, 0.38359206914901733, 0.2833196818828583, 0.08588898926973343, 0.34292587637901306, 0.2889240086078644, 0.3116629123687744, 0.058854661881923676, 0.16009396314620972, 0.34928613901138306], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b79cd50f85a3366c2cb2dc56a0fbb55e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.031970828771591187, 0.004637714009732008], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9c0e97951c29a8a82f9a09adf02186c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.443359375, 0.126953125, 0.0167999267578125, 0.03692626953125, 0.1522216796875, 0.0823974609375, 0.255126953125, 0.1829833984375, 0.422607421875, 0.493896484375, 0.11102294921875, 0.40478515625, 0.043731689453125, 0.13671875, 0.407958984375, 0.3837890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25d5833cc87e7cd60e62371003a5acb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_966b91ba5475ce4cad0f29d7b36ac00b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25d5833cc87e7cd60e62371003a5acb8
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5afc82ef84e0ebcb51a71a125e74aa36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6225ef866b48cd44bfa043c3c1745598(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9474d0c396e1c3653c19f71e073595d3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f811c567f8cd54d87c2a0559fa5ad19c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9474d0c396e1c3653c19f71e073595d3
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c34f96949dd554c857b67f1590cc019(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad6281e844088fcef025fa5cfb73402f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c34f96949dd554c857b67f1590cc019
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_610269159ea82667f0a26160364f4e0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4947257936000824, 0.2863576412200928, 0.18011827766895294, 0.1364462822675705, 0.3281257748603821, 0.295189768075943, 0.0010756151750683784, 0.08715932071208954, 0.020758945494890213, 0.3706705570220947, 0.007648928090929985, 0.00359436497092247, 0.32664361596107483, 0.12367403507232666, 0.09700686484575272, 0.26494646072387695], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c3dcac2c8035fe08076823493696330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a5230f8caab6de9b6840085fd44447(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c3dcac2c8035fe08076823493696330
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fe816d42aa70be02530ac2cf05a329a2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d94b9b3de4f547796f170f7ac4bd426(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fe816d42aa70be02530ac2cf05a329a2
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_35fae243d8722e86177d2f50c36b9364(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6240d49815cc579b1b661834e81a898e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36669921875, 0.1109619140625, 0.01727294921875, 0.275390625, 0.0009465217590332031, 0.2489013671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_223cbb8a6d9f9ce1321cc05779a3ca08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1094202995300293, 0.4039173424243927, 0.03815341740846634, 0.27441444993019104, 0.4654683470726013, 0.48071298003196716, 0.20636418461799622, 0.18817946314811707, 0.02482413314282894, 0.48569366335868835, 0.4803788959980011, 0.42912566661834717, 0.3340972065925598, 0.2249375432729721, 0.2730973958969116, 0.037615466862916946, 0.37924033403396606, 0.33678555488586426, 0.14314520359039307], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01cd3be3df1b95e2174d692aed82e0b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_044d3f971b5b5fff468d01121a0d3e09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.463623046875, 0.331787109375, 0.045684814453125, 0.462646484375, 0.1741943359375, 0.193359375, 0.0443115234375, 0.437744140625, 0.169189453125, 0.061004638671875, 0.403076171875, 0.230224609375, 0.1707763671875, 0.28125, 0.0718994140625, 0.1754150390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25e9e590a38db5a588ded3a43a86617f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9ab673e2630f52b34b577b7acca8128(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25e9e590a38db5a588ded3a43a86617f
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5dabc4273e972935aba6399730a43e23(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16357421875, 0.36083984375, 0.15087890625, 0.41015625, 0.48779296875, 0.415771484375, 0.207763671875, 0.290283203125, 0.0157928466796875, 0.379638671875, 0.20263671875, 0.412841796875, 0.4609375, 0.255126953125, 0.281005859375, 0.1507568359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4371d838f1b6cd52158f4f9d53f82af3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.483642578125, 0.275390625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7495d55152483b0317cba505852a912(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48388671875, 0.1595458984375, 0.178466796875, 0.259033203125, 0.250244140625, 0.328857421875, 0.10699462890625, 0.431884765625, 0.32421875, 0.002864837646484375, 0.10992431640625, 0.47900390625, 0.39013671875, 0.370849609375, 0.151611328125, 0.03570556640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5147afb4ff3b5e53aab3132b75820df9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5df760ccdebd0f3592363617cc655f09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c52d4a58a9a5f760b9ef8a0b65669dab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.393798828125, 0.32958984375, 0.4892578125, 0.19677734375, 0.3935546875, 0.334228515625, 0.1611328125, 0.005710601806640625, 0.390625, 0.00940704345703125, 0.2357177734375, 0.373291015625, 0.429931640625, 0.445556640625, 0.058624267578125, 0.2318115234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3419a9e89402c6e4fa7ba005ed1559e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.285888671875, 0.1458740234375, 0.2421875, 0.318603515625, 0.272705078125, 0.0718994140625, 0.2305908203125, 0.1624755859375, 0.03643798828125, 0.11199951171875, 0.045013427734375, 0.12066650390625, 0.417724609375, 0.315185546875, 0.020477294921875, 0.1978759765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b348e8000ef970ecd9caafceb501b8db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_779698d6e4e98b7800d4f2d1b2d42a50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b348e8000ef970ecd9caafceb501b8db
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_daf6c28a06badd2166429e2f551d1511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0203bc591b7633508dc4f66644c355e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_daf6c28a06badd2166429e2f551d1511
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a1ddb17ff09eb4117abab6062e634e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45868635177612305], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df31c92b16b89bfe93d32d8431a0373f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_20cf577b1e96f3ddcb3dcaa7353fbc22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_932705cbd1e4d97aa9c055b6a1f9d156(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_33816cee09b847ff95409190c6fc938c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42864733934402466, 0.1616930216550827, 0.396443635225296, 0.0978492796421051, 0.48646247386932373, 0.2718261480331421, 0.3799389898777008, 0.1674438714981079, 0.4164768159389496, 0.04496917128562927, 0.40005674958229065, 0.46812090277671814, 0.05431952700018883, 0.4721566140651703, 0.050512708723545074, 0.4704916775226593, 0.3699737787246704, 0.14421483874320984, 0.29332736134529114, 0.25203633308410645, 0.39408019185066223, 0.2542564570903778, 0.2677474617958069, 0.291912317276001], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1de039c1dcaf14b4b27c085ecc75a49b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aba26f640436cb631296169db0ee9d98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1de039c1dcaf14b4b27c085ecc75a49b
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbeaa8fd06d8d5cd37523d9e3d528f89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88caf10fd8864d43290106db80951116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0132c583edf5c3c9b164cc61bada2919(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f8f06ea016e535844ee17d169d6a6477(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0132c583edf5c3c9b164cc61bada2919
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_098a3ee94b6d533e7330524d22c827d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39c230be945281668f6f15091a83830d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_098a3ee94b6d533e7330524d22c827d6
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9671dd47f3820cadf432b99d5bade88f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c23017e48d87261907de5766eca4633b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9671dd47f3820cadf432b99d5bade88f
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2dcffc5a5104b24ac024929b70d1bfba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.475830078125, 0.01450347900390625, 0.2431640625, 0.416259765625, 0.05255126953125, 0.3798828125, 0.279541015625, 0.288818359375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c868fa9613c83ccf161f06dc828acef5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.458984375, 0.280517578125, 0.15234375, 0.47509765625, 0.47216796875, 0.08209228515625, 0.455810546875, 0.051910400390625, 0.46728515625, 0.3779296875, 0.0836181640625, 0.24169921875, 0.49658203125, 0.484619140625, 0.1881103515625, 0.33056640625, 0.41015625, 0.3037109375, 0.373046875, 0.375244140625, 0.111083984375, 0.289306640625, 0.3974609375, 0.151123046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71984068057d651d9aa5ad377ab88f9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65ddb5a68ed3ca140581c7279499fede(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d1707636fc1992c60fc4b126594f20d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53e7ab23444f18826f8fd999dab59d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50e78120c41052fba34aa83461ea16f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08150164783000946, 0.4643172025680542, 0.2329191416501999, 0.21496804058551788, 0.4765164256095886, 0.27203449606895447, 0.2423301786184311, 0.2827720642089844], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7c8f4ffd9e3d40c3694bf23a909a3c56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1512451171875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a5985e5cd4d83ec008ca9ffb88692b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07099159061908722, 0.47701865434646606, 0.378887802362442, 0.05643812194466591, 0.22401393949985504, 0.05149221420288086], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_89cda948e868e1ef926b5b31e96deeec(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b257e035f106435a62f501911d1b7785(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_89cda948e868e1ef926b5b31e96deeec
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01807d8175f7ba75ae4ff375f6b085c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8808622a7cb5223d0633241adc21a697(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01807d8175f7ba75ae4ff375f6b085c9
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_57f49d28787da8a67945b8ee9089f420(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45dcbac5cf7d774f090fe0e5a58f1b8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_57f49d28787da8a67945b8ee9089f420
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4e5cb28274a2b002e8d99847231742cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_917b2e92c57f74798dccbe2e7df7d084(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.296142578125, 0.271240234375, 0.2149658203125, 0.1356201171875, 0.1483154296875, 0.426513671875, 0.2022705078125, 0.15234375, 0.09521484375, 0.0016374588012695312, 0.44287109375, 0.45458984375, 0.2568359375, 0.11920166015625, 0.364501953125, 0.24951171875, 0.49560546875, 0.463134765625, 0.1925048828125, 0.04949951171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d780af52c8e1efef99794179a2a19b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_291ac5550146552163cd1b127f4bd7da(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc6a71f9217720cd76bfd3f8497ecf46(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.424282968044281, 0.269639253616333, 0.15399278700351715, 0.4082469642162323, 0.16469520330429077, 0.026887943968176842, 0.08627719432115555, 0.012700735591351986, 0.2793358564376831, 0.08477328717708588, 0.08458876609802246, 0.10390394181013107, 0.40070220828056335, 0.004687492735683918, 0.15735532343387604, 0.05431859567761421, 0.03928541764616966, 0.23126113414764404, 0.09835069626569748, 0.24386970698833466, 0.003850273322314024, 0.3046182096004486, 0.12424851953983307, 0.29008617997169495, 0.2608024775981903, 0.10609594732522964, 0.11866165697574615, 0.48893260955810547], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c26560c89dc1e7248882f310260a435(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3273971676826477, 0.25154727697372437, 0.4870568811893463, 0.03438321873545647, 0.363834410905838, 0.13639959692955017, 0.4592944383621216, 0.10812781006097794, 0.22023941576480865, 0.3982807695865631, 0.42258214950561523, 0.48433175683021545, 0.3303219974040985, 0.41584888100624084, 0.493854284286499, 0.4427362382411957, 0.47406911849975586, 0.01801912672817707, 0.3775861859321594], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_778850ed0a00af83f7e3403b88fb2ed1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03539612144231796], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6765253200d7c0118c082ef2d30068ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e9ff4d4c0bbe49cd798ea3e00a660803(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_171ad9702b210cd03f17309f159df686(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e9ff4d4c0bbe49cd798ea3e00a660803
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ece2919536ae0172a3c47d1c13a0850(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f6cb8f267507e3a18a3dcd45cf76648f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.025888098403811455, 0.11869237571954727, 0.3614635765552521, 0.277105450630188, 0.3469439446926117, 0.09231001883745193, 0.25674769282341003, 0.19433318078517914, 0.2919524013996124, 0.44098398089408875, 0.4346822500228882, 0.35799485445022583, 0.3913831114768982, 0.43857020139694214, 0.2298736721277237, 0.052817557007074356], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_992a16b3792110889d1f888b9e567e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3374020457267761, 0.36334702372550964, 0.4960505962371826, 0.08091750741004944], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c98ddc2dfc49c4d4ca79f55c3fc89ad8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358642578125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a7bccc9c8b855cb5bc7157c4c22e5ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d0a4c7ff355bcc25bacb885fd898a425(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 8, 3, 224, 224], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72b8866fbbda7f93089f40bf2a3de2a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d0a4c7ff355bcc25bacb885fd898a425
    def get_inputs(self):
        return [
            paddle.uniform([1, 8, 3, 224, 224], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 224, 224], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d926776cbd45981611849d2cbf06b36a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38022148609161377, 0.06220271810889244, 0.10625962167978287, 0.2526179552078247, 0.3225085735321045, 0.011072153225541115, 0.2868107259273529, 0.29241254925727844, 0.40275081992149353, 0.4597267210483551, 0.34074074029922485, 0.10791793465614319, 0.013744639232754707, 0.16066372394561768, 0.40367287397384644, 0.07482536137104034, 0.09061535447835922, 0.24658483266830444, 0.42018944025039673, 0.010396039113402367, 0.1751263439655304, 0.44517892599105835, 0.05233616754412651, 0.1337147355079651], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e86af1b01f76b44c1e8252f7938e2a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.294921875, 0.47705078125, 0.393798828125, 0.00212860107421875, 0.1263427734375, 0.2322998046875, 0.20703125, 0.320068359375, 0.1513671875, 0.046875, 0.4765625, 0.382080078125, 0.299072265625, 0.2479248046875, 0.177734375, 0.314208984375, 0.0222625732421875, 0.392333984375, 0.2734375, 0.3173828125, 0.369384765625, 0.25244140625, 0.491455078125, 0.07867431640625, 0.473876953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0fa4de620daf98eb8585b1f4236586e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0187127236276865, 0.44822877645492554, 0.07667835801839828, 0.09181522578001022, 0.40684840083122253, 0.2127314656972885, 0.4435398578643799, 0.49230051040649414, 0.29390019178390503, 0.18928535282611847, 0.32623517513275146, 0.06043224036693573, 0.45018985867500305, 0.3557693660259247, 0.47814008593559265, 0.3330612778663635], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_05d07a396d2d518c1f9f355cb5ae2309(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b8bcfe92471daac04a4218350f4e12d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_05d07a396d2d518c1f9f355cb5ae2309
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38380545377731323, 0.07097826153039932, 0.04632808640599251, 0.06650540232658386, 0.17473933100700378, 0.4912809729576111, 0.10069865733385086, 0.10089176148176193, 0.10716110467910767, 0.22188761830329895, 0.12654273211956024], dtype='float32').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_34238d17a0ce790d55cc788aa535a511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bcab1049b0eb911bbe69f691f8b019c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_34238d17a0ce790d55cc788aa535a511
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e6cb5bddc6cd4286e59d67d0d609b4d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10931396484375, 0.351318359375, 0.371826171875, 0.1771240234375, 0.0872802734375, 0.190185546875, 0.401611328125, 0.3896484375, 0.308349609375, 0.18212890625, 0.4228515625, 0.03033447265625, 0.3818359375, 0.005695343017578125, 0.176513671875, 0.41748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ea02985cf9d6d43c5043253a5216c31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3232421875, 0.07061767578125, 0.498291015625, 0.1748046875, 0.322265625, 0.2286376953125, 0.491943359375, 0.470458984375, 0.298583984375, 0.0367431640625, 0.277099609375, 0.1383056640625, 0.09259033203125, 0.0789794921875, 0.10858154296875, 0.12255859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_738ea5c7a19dff2b844476d797c9744c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45458984375, 0.320068359375, 0.27783203125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_310fc0b81d8e68a22a3f124f95fdd7d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31689453125, 0.146240234375, 0.1434326171875, 0.498046875, 0.270263671875, 0.4189453125, 0.367431640625, 0.34033203125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21eaadd0fddc7fca9b3d5664bec48149(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f680f9b1ea31fae4df89880f99ea0882(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22634173929691315, 0.34366998076438904, 0.4153388738632202, 0.2805233895778656, 0.23028476536273956, 0.4763565957546234, 0.04194972664117813, 0.09801184386014938, 0.15770553052425385, 0.44493812322616577, 0.2944021224975586, 0.36853283643722534, 0.45124533772468567, 0.49936386942863464, 0.15903112292289734, 0.2517830431461334], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13b9457d94523c3b9076f1402d173d42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2857321798801422, 0.49156033992767334, 0.3239683210849762, 0.10873421281576157, 0.42966243624687195, 0.244066521525383, 0.22909203171730042, 0.3417036235332489, 0.24992498755455017, 0.43440595269203186, 0.3508921265602112, 0.011716669425368309], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_220e088420c2368699fe83426ee21471(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_20472d7b22b8e68d28df621b29d5b21c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b9fe46f586d39acdd3e72af03c1cb21(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_20472d7b22b8e68d28df621b29d5b21c
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2253377244dd182a0a7fa8cec6598200(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.011306099593639374, 0.13868938386440277, 0.21062326431274414, 0.23319575190544128, 0.36702772974967957, 0.11543446779251099, 0.19123575091362, 0.45269811153411865, 0.22507984936237335, 0.4248649775981903, 0.05357291176915169, 0.4610290229320526, 0.05281106010079384, 0.28350862860679626, 0.19223836064338684, 0.4672662317752838, 0.11709333211183548, 0.4147082269191742, 0.459883451461792, 0.3583517074584961], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bba71088c74680315c7950b59c766080(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327392578125, 0.2763671875, 0.284423828125, 0.471923828125, 0.09619140625, 0.21875, 0.226806640625, 0.345458984375, 0.032928466796875, 0.1710205078125, 0.334716796875, 0.397216796875, 0.1337890625, 0.454345703125, 0.027923583984375, 0.2420654296875, 0.46875, 0.0102081298828125, 0.45654296875, 0.080810546875, 0.277099609375, 0.28955078125, 0.488525390625, 0.402099609375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_602ae6e88434b6fc27627676c1e9f54b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028106689453125, 0.23779296875, 0.0736083984375, 0.364013671875, 0.170166015625, 0.03857421875, 0.1922607421875, 0.10638427734375, 0.051239013671875, 0.07659912109375, 0.34326171875, 0.016815185546875, 0.37158203125, 0.2978515625, 0.29345703125, 0.19091796875, 0.15625, 0.0282745361328125, 0.3994140625, 0.40966796875, 0.003734588623046875, 0.318603515625, 0.380859375, 0.168212890625, 0.2296142578125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_860d2f8daa928511aa219ec2fd710273(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364990234375, 0.369873046875, 0.072998046875, 0.3125, 0.46533203125, 0.38330078125, 0.034912109375, 0.09185791015625, 0.417236328125, 0.342529296875, 0.0258941650390625, 0.22216796875, 0.0655517578125, 0.341796875, 0.22802734375, 0.03955078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd2e9266af049333222abbc5369b00ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5fc57627e042ca460d92274720bc6a98(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9cdd8f4cd7510a802beada8a43209ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5fc57627e042ca460d92274720bc6a98
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_efcb7145a52ad75099760e0d61ee43df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48810073733329773, 0.2552131712436676, 0.2549103796482086, 0.20862028002738953, 0.23464933037757874, 0.2504408359527588, 0.05344777554273605, 0.3791288733482361, 0.11741341650485992, 0.19766218960285187, 0.12188516557216644, 0.3352797329425812, 0.003107596654444933, 0.3215459883213043, 0.08826801925897598, 0.0019917984027415514, 0.4375867247581482, 0.054181549698114395, 0.15228651463985443, 0.4850197732448578, 0.16351665556430817, 0.08029700815677643, 0.49079492688179016, 0.4583042562007904], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3468905893d8fe3274d16d1a50655fdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f95f5583d01fa8fba411905fe4cdee4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44871869683265686, 0.3259098529815674, 0.25761494040489197, 0.2937397360801697], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a874772f5fb1e7d1cbc8068b28faf7fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0975341796875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_30bee08710449fc1b91a095ffc39b038(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_35f387afe60f605d06d54c7113005510(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_30bee08710449fc1b91a095ffc39b038
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04962158203125, 0.431884765625, 0.2003173828125, 0.262451171875, 0.358154296875, 0.369140625, 0.130615234375, 0.102783203125, 0.05535888671875, 0.382080078125, 0.2254638671875, 0.137451171875, 0.41796875, 0.372314453125, 0.2169189453125, 0.06298828125, 0.0010271072387695312, 0.08026123046875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_385bc84b1c05f1de1540423dc3c89427(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4808763265609741, 0.2565974295139313, 0.06770607084035873, 0.08800578862428665, 0.11735966801643372, 0.1409294456243515, 0.4159088134765625, 0.37482139468193054, 0.4690919518470764, 0.46267879009246826, 0.24352310597896576, 0.2195252776145935, 0.0004881272907368839, 0.12729962170124054, 0.39983949065208435, 0.15640458464622498, 0.25959256291389465, 0.1844794899225235, 0.09919491410255432], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f305230407f986fad77a89a79ca5df2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32227046440e2b66742a955c646f82a6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f305230407f986fad77a89a79ca5df2
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f579163a54472e8d91e465a159a849a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3488764464855194, 0.24750803411006927, 0.3474583923816681, 0.46554797887802124, 0.03167708218097687, 0.12898413836956024, 0.0951509028673172, 0.23443037271499634, 0.0857844427227974, 0.24272197484970093, 0.39940521121025085, 0.39625808596611023, 0.3735162913799286, 0.445389062166214, 0.3675914704799652, 0.4236076772212982], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51bf8263e6facdc374376d337e40606f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4600ad6e2f75cf68d662d261f07f9250(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29541015625, 0.132080078125, 0.307373046875, 0.499755859375, 0.302490234375, 0.0267181396484375, 0.456298828125, 0.069580078125, 0.10662841796875, 0.229736328125, 0.45068359375, 0.34619140625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5c22bcc4b2607f2c2e2346b8767f5921(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4709426760673523, 0.04656822234392166, 0.372962087392807, 0.24637606739997864, 0.3289940059185028, 0.44953200221061707, 0.4519873559474945, 0.04871923476457596, 0.43872490525245667, 0.0665464773774147, 0.28885141015052795, 0.19449007511138916, 0.21138548851013184, 0.05731293559074402, 0.28858959674835205, 0.04346508905291557], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07ccbb1a3b0a4c32b89469249e9a6cac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44021692872047424, 0.3238399028778076, 0.3690930902957916, 0.2581387758255005, 0.17296600341796875, 0.19347892701625824, 0.3608105182647705, 0.3749103546142578, 0.12081769853830338, 0.20286044478416443, 0.22779905796051025, 0.3383842706680298, 0.05641060322523117, 0.2467598170042038, 0.3697271943092346, 0.11736176908016205, 0.35313984751701355, 0.4121881127357483, 0.4320179522037506, 0.34768056869506836, 0.330233097076416, 0.35706451535224915, 0.3776037096977234, 0.3030603528022766], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89f957a35e5a9ec875da7097df3ecb18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.054412841796875, 0.46044921875, 0.477783203125, 0.075927734375, 0.4013671875, 0.00733184814453125, 0.07684326171875, 0.04681396484375, 0.1805419921875, 0.04913330078125, 0.427490234375, 0.16015625, 0.360107421875, 0.1434326171875, 0.07843017578125, 0.474853515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f3441b84666245f38033554359bde822(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bb135cf48c1f1568d6909255367f818(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f3441b84666245f38033554359bde822
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7128015721b168549497631acf9e448(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5ece0acae22299f5857b6b1f15491eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7128015721b168549497631acf9e448
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac2e38a178e2560d0a1c47dfeac28fb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b622f9ff9877a5807cb99ccf278c373a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.321044921875, 0.235107421875, 0.09222412109375, 0.43310546875, 0.254638671875, 0.1944580078125, 0.130615234375, 0.24267578125, 0.200927734375, 0.2239990234375, 0.1845703125, 0.155029296875, 0.365478515625, 0.498046875, 0.476806640625, 0.082275390625, 0.1290283203125, 0.4814453125, 0.2406005859375, 0.370849609375, 0.07550048828125, 0.1181640625, 0.3408203125, 0.29296875, 0.3173828125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2494c54ef94d2dfde06c2fbc02c9e3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31c70796233a06bcb26c43500de243f4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10717423260211945, 0.22233670949935913, 0.2740926146507263, 0.3274760842323303, 0.3223201334476471, 0.35951465368270874, 0.1703212708234787, 0.23431898653507233, 0.22923234105110168, 0.1291184276342392, 0.48198723793029785, 0.12152867019176483, 0.3315896987915039, 0.3849262595176697, 0.251085489988327, 0.20987676084041595, 0.09462448209524155, 0.23462526500225067, 0.20599599182605743, 0.08970127254724503, 0.0646105632185936, 0.314055472612381, 0.05997798219323158, 0.4204089641571045], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db4b8d3ebace066654a497758d4a0849(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.042999267578125, 0.033203125, 0.2225341796875, 0.490478515625, 0.331298828125, 0.44140625, 0.401611328125, 0.294921875, 0.04241943359375, 0.2734375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d4f706cb05d5b4d509356587fc945d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0711669921875, 0.283203125, 0.267578125, 0.489990234375, 0.390380859375, 0.309814453125, 0.42236328125, 0.40771484375, 0.4111328125, 0.1419677734375, 0.44775390625, 0.44287109375, 0.0880126953125, 0.304931640625, 0.3740234375, 0.34619140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c9ae3a2510026f1cf13a60772dcaebe2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2257080078125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_874dbfd777051f5e4c42cb941eec12a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08306416124105453, 0.006745439954102039, 0.338731050491333, 0.45018866658210754, 0.32444438338279724, 0.4525500535964966, 0.03356468677520752, 0.3505265414714813, 0.33186349272727966, 0.3293270468711853, 0.01647958718240261, 0.30371490120887756, 0.35965967178344727, 0.35396701097488403, 0.22384139895439148, 0.30781084299087524], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab261f522a7a6d1b003710b4c2eaa5cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41056206822395325, 0.3457649052143097, 0.21590232849121094, 0.40622445940971375, 0.24569573998451233, 0.24851270020008087, 0.15997855365276337, 0.46524760127067566, 0.4503934979438782, 0.09887241572141647, 0.28594231605529785, 0.44787758588790894, 0.03630899265408516, 0.32790258526802063, 0.2589792013168335, 0.40614238381385803, 0.1749841868877411, 0.02372552827000618, 0.2969772517681122, 0.2923278510570526, 0.09102901071310043, 0.49519672989845276, 0.11261167377233505, 0.05704060196876526, 0.3137737810611725, 0.27073487639427185, 0.42421263456344604, 0.17392921447753906, 0.2004852592945099, 0.47337302565574646], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a29c558f3b4180585abee69812740dd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26828545331954956, 0.442525714635849, 0.08029067516326904, 0.47622913122177124, 0.27187618613243103, 0.06104002892971039, 0.43951743841171265, 0.035648126155138016, 0.18089400231838226, 0.4375378489494324, 0.24226026237010956, 0.3871653378009796, 0.11214075982570648, 0.27540114521980286, 0.466325581073761, 0.27495822310447693], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b1b164ccc6d6a84723178244c4257b0c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2558009624481201, 0.2545585632324219, 0.1971062421798706, 0.43876051902770996, 0.4555601477622986, 0.314766526222229], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3eb74b29bdd3bd2f94eb2526d2bcedf7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.333740234375, 0.26806640625, 0.2481689453125, 0.425048828125, 0.07037353515625, 0.0043487548828125, 0.2042236328125, 0.14208984375, 0.2427978515625, 0.2242431640625, 0.30810546875, 0.2978515625, 0.1497802734375, 0.1019287109375, 0.40673828125, 0.1414794921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f730e4020ab4ea10308ae8113b00206e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24322989583015442, 0.11603405326604843, 0.0172271691262722, 0.30246347188949585], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d00d214de24836ff01c88f3cd35b698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a78e2fe6cdecfc7aeb65629b8fce468(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.050708893686532974, 0.0199196208268404, 0.20832200348377228, 0.4387050271034241, 0.3856157064437866, 0.08570412546396255, 0.04958168417215347, 0.24484577775001526, 0.48609623312950134, 0.05417025089263916, 0.49585849046707153, 0.1679399460554123, 0.13976708054542542, 0.07668182253837585, 0.49794822931289673, 0.22678203880786896, 0.48926737904548645, 0.29529765248298645, 0.4108555018901825, 0.1377299278974533, 0.4760247468948364, 0.28919363021850586, 0.1153421550989151, 0.16395831108093262, 0.052592698484659195, 0.2972778379917145, 0.44051656126976013, 0.3253866732120514], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd49acf88478969d50c82ee2166917a2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28271484375, 0.03955078125, 0.285400390625, 0.1712646484375, 0.368896484375, 0.1427001953125, 0.061859130859375, 0.08160400390625, 0.4306640625, 0.313232421875, 0.1494140625, 0.1295166015625, 0.42822265625, 0.473388671875, 0.0216217041015625, 0.323974609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7169113b05c0edd385d9b15c9d73c523(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e04b0c95d411c4f2f6b7e2bec50b617(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7169113b05c0edd385d9b15c9d73c523
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac2eaae81a5f122ffc97a83b48b326f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.276034951210022, 0.12839433550834656, 0.3550872504711151, 0.0933225080370903, 0.10106206685304642, 0.4504457414150238, 0.06756465137004852, 0.3763774335384369, 0.38573214411735535, 0.08408980071544647, 0.14365583658218384, 0.08510208129882812, 0.447763055562973, 0.23908697068691254, 0.2587045729160309, 0.16970419883728027], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8b79d745711a77593d36f7d5b4b96d55(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1719316691160202], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06727e7110b2fb06d07f55af090095f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1720eff484050980ab133cefbca4a66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06727e7110b2fb06d07f55af090095f5
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_11036224aaa395b1cc0325e1ec0a30a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.162109375, 0.286376953125, 0.1392822265625, 0.220947265625, 0.310302734375, 0.461669921875, 0.1912841796875, 0.11773681640625, 0.306884765625, 0.425537109375, 0.32470703125, 0.2337646484375, 0.43994140625, 0.2086181640625, 0.493408203125, 0.2254638671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb3c759f7ab1fd8f3ed1a16c3e42f46d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35939186811447144, 0.322150319814682, 0.19959375262260437, 0.29278814792633057, 0.28999999165534973, 0.0724036693572998, 0.32338088750839233, 0.10336379706859589, 0.359750896692276, 0.33029597997665405, 0.11377173662185669, 0.39997410774230957, 0.16865788400173187, 0.006120534613728523, 0.3743099570274353, 0.3258047103881836], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbb31bafeb75d5d29f2217de88624af9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.415283203125, 0.453369140625, 0.36865234375, 0.1285400390625, 0.4736328125, 0.35302734375, 0.330322265625, 0.305419921875, 0.289306640625, 0.3974609375, 0.013336181640625, 0.490478515625, 0.11688232421875, 0.3935546875, 0.0755615234375, 0.464111328125, 0.244873046875, 0.43505859375, 0.451416015625, 0.1947021484375, 0.0330810546875, 0.053375244140625, 0.1474609375, 0.333984375, 0.397705078125, 0.2332763671875, 0.466552734375, 0.01299285888671875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d1464b59103b0857baa69ef938270cf6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6819e26fed3f8f0e48d6b8e511514e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d1464b59103b0857baa69ef938270cf6
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91f3dd351a51af32ca3a4facaf003bbb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1307373046875, 0.16748046875, 0.01097869873046875, 0.455810546875, 0.20654296875, 0.471435546875, 0.04595947265625, 0.02825927734375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_daeeccbc021d67cdb605c1add37016dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028556201606988907, 0.13512903451919556, 0.08452322334051132, 0.3207937777042389, 0.38914185762405396, 0.4181497097015381, 0.3959921598434448, 0.10110417753458023, 0.08962400257587433, 0.23782192170619965, 0.21199661493301392, 0.2307417243719101, 0.4848659932613373, 0.43506360054016113, 0.39087486267089844, 0.4110347330570221, 0.3721051812171936, 0.06619640439748764, 0.04015188291668892, 0.2847747504711151], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e21f6c7e6bf2f3594293dbd1053c50c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15967167913913727, 0.2817107141017914, 0.281623512506485], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e2b34dd06b9c24388abbb50ce7879ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2802734375, 0.291015625, 0.3037109375, 0.255126953125, 0.48046875, 0.11492919921875, 0.046173095703125, 0.19140625, 0.456298828125, 0.325439453125, 0.497314453125, 0.469970703125, 0.359619140625, 0.1131591796875, 0.390625, 0.3525390625, 0.419189453125, 0.060760498046875, 0.329833984375, 0.0714111328125, 0.46435546875, 0.0204620361328125, 0.11492919921875, 0.2120361328125, 0.05419921875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f2345c406903d509a50554d72511550(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07114942371845245, 0.059662796556949615, 0.4018350839614868, 0.02759931981563568, 0.09652191400527954, 0.2374342978000641, 0.07166850566864014, 0.4184873104095459, 0.4469403624534607, 0.3645752966403961, 0.4733423888683319, 0.482023686170578, 0.4770096242427826, 0.15130649507045746, 0.00596300745382905, 0.08450991660356522], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e55190ca20138f0a1dd70ebf5cd64844(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab0a039ec87dc9bb062df2e2a98f4b01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c0f305c6dc4679c86092a71305f0a5d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08422473073005676, 0.06428587436676025, 0.30602556467056274, 0.04866635426878929, 0.0034505517687648535, 0.31554368138313293, 0.42719513177871704, 0.3062422573566437, 0.3169209659099579, 0.3805937170982361, 0.428433358669281, 0.2869625985622406, 0.3279310166835785, 0.2962151765823364, 0.4557111859321594, 0.2698710262775421], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9380a9cb530786a8636d7d04406da539(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22515593469142914, 0.18491607904434204, 0.1740533411502838, 0.20637744665145874, 0.2540383040904999, 0.30211710929870605, 0.46723631024360657, 0.28807321190834045, 0.11967352777719498, 0.23730045557022095, 0.4674440920352936, 0.43931591510772705, 0.2843591868877411, 0.2034134566783905, 0.37298649549484253, 0.4462263584136963, 0.3388841450214386, 0.05958300083875656, 0.024927940219640732, 0.3039216995239258, 0.08741236478090286, 0.27502280473709106, 0.34917861223220825, 0.29683995246887207], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d51f63aafe05c2968381578b301c539(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.204833984375, 0.0233306884765625, 0.0638427734375, 0.151123046875, 0.250244140625, 0.4765625, 0.1815185546875, 0.361328125, 0.1373291015625, 0.44970703125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a3a12cc4994eaa1fb8ddf52a606a823(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11981201171875, 0.45361328125, 0.032745361328125, 0.1820068359375, 0.286376953125, 0.4375, 0.3935546875, 0.429443359375, 0.40283203125, 0.343017578125, 0.49755859375, 0.253173828125, 0.4619140625, 0.32763671875, 0.38671875, 0.1259765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf88dc03b7fe7cd66cc5dc21c0bc79a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.479736328125, 0.297119140625, 0.492919921875, 0.1407470703125, 0.339599609375, 0.08966064453125, 0.259765625, 0.0894775390625, 0.31689453125, 0.151123046875, 0.0316162109375, 0.31787109375], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b752edbcdf8035fddd6b7e752cd702db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a224222de31045650e13d1ae36bee221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd781ee82bc35e3eeca67e5ddc2fc3f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a224222de31045650e13d1ae36bee221
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae0b114246e4452c66d62ae5df5c6846(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36cf7a11860d4c701b234dc8c5b5e622(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f32a8286feae801dfd26239c36395630(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.197021484375, 0.35498046875, 0.0731201171875, 0.22412109375, 0.241455078125, 0.3369140625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96d116b534285f736434e079b250c07b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5083ead458ca23b5535b045b04da95e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36572265625, 0.01055908203125, 0.24951171875, 0.2154541015625, 0.2242431640625, 0.0228729248046875, 0.072509765625, 0.441650390625, 0.373291015625, 0.2447509765625, 0.162109375, 0.369873046875, 0.2291259765625, 0.0911865234375, 0.432373046875, 0.133056640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f267c9b51718c2c4faf9437a44d1066(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39453125, 0.34130859375, 0.34912109375, 0.024383544921875, 0.297119140625, 0.025482177734375, 0.292236328125, 0.16162109375, 0.4990234375, 0.36572265625, 0.2412109375, 0.1292724609375, 0.1810302734375, 0.390869140625, 0.2333984375, 0.245361328125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_262d8aa3a4f8ecc916c2b91ac895eb85(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04391485080122948, 0.4911397099494934, 0.3044116795063019, 0.2125595659017563, 0.22337843477725983, 0.0740617886185646, 0.18032023310661316, 0.0975184440612793, 0.1825030893087387, 0.48528316617012024, 0.4516217112541199, 0.09065994620323181, 0.39487290382385254, 0.39809754490852356, 0.41860800981521606, 0.48000460863113403, 0.011938701383769512, 0.49236348271369934, 0.19461360573768616, 0.14402566850185394, 0.359514445066452, 0.3886495530605316, 0.26254722476005554, 0.4448390603065491], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6328ae437d3c6af84ce040c5fcec35c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46826171875, 0.484130859375, 0.07275390625, 0.41259765625, 0.00832366943359375, 0.454833984375, 0.1312255859375, 0.359619140625, 0.20751953125, 0.006572723388671875, 0.442626953125, 0.2099609375, 0.0163116455078125, 0.482177734375, 0.0108184814453125, 0.373291015625, 0.1986083984375, 0.114013671875, 0.1630859375, 0.1949462890625, 0.03558349609375, 0.2154541015625, 0.1785888671875, 0.335205078125, 0.408935546875, 0.04949951171875, 0.43115234375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dfae4d20f1be4d37241c407d61b22111(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47076308727264404, 0.3670482337474823, 0.2368529587984085, 0.22737282514572144, 0.22655902802944183, 0.10892768204212189], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87d7367db3f0872195622d445d1b86fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b36b1fdbaa152a4a2e4fdac9c43ebc5b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3128291070461273, 0.21181011199951172, 0.004254699219018221, 0.17838646471500397, 0.108852818608284, 0.1114712730050087, 0.387626588344574, 0.2632727026939392, 0.12964005768299103, 0.34163832664489746, 0.05785631760954857, 0.4668656885623932, 0.13123346865177155, 0.41867342591285706, 0.403331458568573, 0.05111917853355408, 0.4786132276058197, 0.20463283360004425, 0.08718977868556976, 0.49315717816352844], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_316213b0eeb61813cff73b0b977d8f5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1427001953125, 0.45263671875, 0.30126953125, 0.257080078125, 0.11346435546875, 0.453369140625, 0.265869140625, 0.11669921875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6388565d3a8dd7f57531e8189fad763d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d318cad6fc0ea88abd2b6aa3a2c24340(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6388565d3a8dd7f57531e8189fad763d
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50df61e573ce4bc9082dcf7d5812790a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22509765625, 0.008758544921875, 0.38720703125, 0.473388671875, 0.11175537109375, 0.275634765625, 0.176513671875, 0.400390625, 0.478515625, 0.201904296875, 0.38330078125, 0.47607421875, 0.293212890625, 0.34423828125, 0.1732177734375, 0.35107421875, 0.3759765625, 0.200439453125, 0.220703125, 0.1531982421875, 0.202880859375, 0.018218994140625, 0.3916015625, 0.161865234375, 0.260009765625, 0.042724609375, 0.004947662353515625, 0.09967041015625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d92f321bd39c76dd9a061f5646ab62b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2083740234375, 0.23291015625, 0.01471710205078125, 0.40283203125, 0.254150390625, 0.365234375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_435aa0becb0111aea10ad2459fd449e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20077182352542877, 0.33041059970855713, 0.24254882335662842, 0.20813444256782532, 0.030822722241282463, 0.18718257546424866, 0.1458362489938736, 0.07799410074949265, 0.2587421238422394, 0.4442535936832428], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04ecb9020941b54b8b86341675a90bc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f76c6278ade901f9d26068d29a13f614(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04ecb9020941b54b8b86341675a90bc0
    def get_inputs(self):
        return [
            paddle.to_tensor([0.020111083984375, 0.390380859375, 0.286865234375, 0.25830078125, 0.3271484375, 0.166259765625, 0.2095947265625, 0.492919921875, 0.345947265625, 0.33740234375, 0.11279296875], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cdb796a3a136b4632f98d17cb747237(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31494140625, 0.30517578125, 0.211669921875, 0.0166473388671875, 0.167236328125, 0.396484375, 0.2249755859375, 0.1575927734375, 0.282958984375, 0.1614990234375, 0.033935546875, 0.09197998046875, 0.1866455078125, 0.290283203125, 0.1749267578125, 0.032867431640625, 0.2125244140625, 0.044921875, 0.04583740234375, 0.292236328125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66e1fbf90f106e6304fd0dfbed3ca290(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.223388671875, 0.323974609375, 0.440185546875, 0.05206298828125, 0.427490234375, 0.1263427734375, 0.08349609375, 0.11444091796875, 0.00847625732421875, 0.460205078125, 0.1658935546875, 0.274169921875, 0.322265625, 0.376708984375, 0.402099609375, 0.35546875, 0.44287109375, 0.39404296875, 0.11566162109375, 0.41064453125, 0.480712890625, 0.411865234375, 0.3349609375, 0.11517333984375, 0.207763671875, 0.2220458984375, 0.07275390625, 0.021331787109375, 0.22119140625, 0.2822265625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d02167c28ecbc157476ee88d649bd7c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2911364436149597, 0.024535324424505234, 0.30173563957214355, 0.2723747193813324, 0.3229660391807556, 0.08630556613206863], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8db5aac74e24db401f43d421dc34d919(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.254150390625, 0.268310546875, 0.055328369140625, 0.0711669921875, 0.1397705078125, 0.2457275390625, 0.458984375, 0.007183074951171875, 0.355224609375, 0.4560546875, 0.140869140625, 0.0191192626953125, 0.0279693603515625, 0.084716796875, 0.272705078125, 0.427001953125, 0.377685546875, 0.307861328125, 0.11602783203125, 0.1881103515625, 0.3505859375, 0.260986328125, 0.0572509765625, 0.03704833984375, 0.1412353515625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84ba8644f97aeacfd51ceea763dff4fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4226655662059784, 0.10162946581840515, 0.22045934200286865, 0.0519770085811615, 0.38433170318603516, 0.1453193575143814, 0.12212152034044266, 0.26571983098983765, 0.4310133457183838, 0.15591441094875336, 0.3697993755340576, 0.45417097210884094, 0.22994814813137054, 0.10344387590885162, 0.47762608528137207, 0.48550179600715637, 0.37928345799446106, 0.07622429728507996, 0.38371285796165466, 0.07277969270944595, 0.015938716009259224, 0.053907886147499084, 0.4845722019672394, 0.29209163784980774, 0.05948811396956444, 0.20012609660625458, 0.15809416770935059, 0.3251523971557617, 0.0438842736184597, 0.35221418738365173], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2698d1063eefa00a67cb449ffc72825(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.098876953125, 0.045379638671875, 0.365478515625, 0.391845703125, 0.407470703125, 0.020599365234375, 0.39501953125, 0.245849609375, 0.1378173828125, 0.46240234375, 0.30859375, 0.19482421875, 0.392822265625, 0.300048828125, 0.36865234375, 0.004974365234375, 0.005550384521484375, 0.3017578125, 0.377685546875, 0.3740234375, 0.40087890625, 0.344482421875, 0.349609375, 0.027496337890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b9110e93e7f7761dd6c1c57c29b8429d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29443359375, 0.476806640625, 0.03302001953125, 0.04669189453125, 0.475341796875, 0.1761474609375, 0.25439453125, 0.493408203125, 0.0194091796875, 0.415283203125, 0.155029296875, 0.317626953125, 0.473876953125, 0.435546875, 0.2373046875, 0.420166015625, 0.319091796875, 0.42578125, 0.093017578125, 0.494384765625, 0.1810302734375, 0.317626953125, 0.0261688232421875, 0.13134765625, 0.134521484375, 0.353515625, 0.2822265625, 0.231201171875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b902f5db1dcced054fd69912f2f4f7af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a295be2984591cf007a4bd85ef764481(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb2e8693848b3b27f75122ef1078e15e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.002201080322265625, 0.40185546875, 0.2314453125, 0.1097412109375, 0.3701171875, 0.318115234375, 0.46923828125, 0.4609375, 0.22216796875, 0.034942626953125, 0.311767578125, 0.125, 0.30810546875, 0.1019287109375, 0.387939453125, 0.0015087127685546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e8da62c0b3b86604e20ffc701398757(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfc8689a095e89666d64c858d6f5eecf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b78f81ca5f45bac85ba448da918e1637(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9639858b17d30594db9948459f11c138(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b78f81ca5f45bac85ba448da918e1637
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3fa76340d6451ea90d192b51b3a01757(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.434814453125, 0.02423095703125, 0.41796875, 0.127197265625, 0.1470947265625, 0.142333984375, 0.482666015625, 0.1907958984375, 0.09539794921875, 0.1080322265625, 0.35546875, 0.375244140625, 0.2152099609375, 0.195556640625, 0.2213134765625, 0.06732177734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0469ed37c14d545e4e8b93cf7d234bae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fcd6439e944b9c4a2f2be12d620e234d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0469ed37c14d545e4e8b93cf7d234bae
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed44b60d54ca374d5755fc1742d64c49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4121561646461487, 0.4965463876724243, 0.4434504508972168, 0.22321350872516632, 0.4257487952709198, 0.45383840799331665, 0.12180595844984055, 0.30398786067962646], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50b5bf7066921a43668d45ec9dbf952c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04498291015625, 0.1343994140625, 0.13671875, 0.2493896484375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9df45cfb32e3496ca231c5a9b596cec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.011317376047372818, 0.08248311281204224, 0.4724672734737396, 0.20890992879867554, 0.2950035631656647, 0.37563079595565796, 0.258847177028656, 0.40160679817199707, 0.16976557672023773, 0.0514768548309803, 0.3967415988445282, 0.041105661541223526, 0.4505941867828369, 0.3047202229499817, 0.2974810302257538, 0.20807819068431854], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76743b2f3392f6e21eaceb3a0898b0b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1443411260843277, 0.02754446491599083, 0.41690751910209656, 0.06412827223539352, 0.07726524770259857, 0.206046000123024, 0.13455736637115479, 0.2555903196334839, 0.006645105313509703, 0.1783178746700287, 0.4357447922229767, 0.4672156870365143, 0.022867249324917793, 0.2043253630399704, 0.08665847778320312, 0.205230712890625], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fc3cb728866b4d7d7e37f92eb07e646(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45184558629989624, 0.0396878607571125, 0.44028958678245544, 0.4239317774772644, 0.17737407982349396, 0.031656358391046524, 0.3538665771484375, 0.1917620152235031, 0.005338758695870638, 0.17955268919467926, 0.44920235872268677, 0.12049847096204758, 0.3707433342933655, 0.2789875566959381, 0.27452975511550903, 0.3977791965007782, 0.15870098769664764, 0.23769795894622803, 0.48350825905799866, 0.1468646079301834, 0.34774380922317505, 0.26237952709198, 0.43048107624053955, 0.09361877292394638], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b14e91eabde4181eab86d7e27e1a2a85(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.409912109375, 0.391357421875, 0.049041748046875, 0.273193359375, 0.24609375, 0.331787109375, 0.440673828125, 0.47509765625, 0.360107421875, 0.2978515625, 0.024505615234375, 0.2286376953125, 0.046478271484375, 0.047210693359375, 0.1029052734375, 0.320068359375, 0.0665283203125, 0.337890625, 0.38671875, 0.390625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5cf75012aaf30ee0231773de06e628aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1805419921875, 0.46630859375, 0.05792236328125, 0.022674560546875, 0.1837158203125, 0.21533203125, 0.49169921875, 0.252685546875, 0.39404296875, 0.31640625, 0.01666259765625, 0.206298828125, 0.392333984375, 0.142822265625, 0.2479248046875, 0.0209503173828125, 0.08197021484375, 0.3251953125, 0.2274169921875, 0.290771484375, 0.0116119384765625, 0.01898193359375, 0.193115234375, 0.283447265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a1c66f1f6b160866c0ff226076740be5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_230b3169a93af2342c1629bde4d92d9f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a1c66f1f6b160866c0ff226076740be5
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a632d479d42bf90421b2f92e73060116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_80f622ae0bc29291aabb392489415e9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01790633611381054, 0.04224586486816406, 0.08992452174425125, 0.12593208253383636, 0.3808170258998871, 0.20266199111938477, 0.35155633091926575, 0.2807076573371887, 0.019537856802344322, 0.14980101585388184, 0.18122775852680206, 0.30554986000061035, 0.1382550597190857, 0.3245336413383484, 0.06323698908090591, 0.1940295249223709], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af46b9a01c38ff15751d3c83d0d9297e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.390625, 0.0657958984375, 0.4921875, 0.1546630859375, 0.26953125, 0.31494140625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b4c3aca5a2da05078ce9a8f80e2abfa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1931696981191635, 0.2852762043476105, 0.16138413548469543], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f23dd8fdf01b032cbae93ba2874780f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1622314453125, 0.456298828125, 0.27294921875, 0.03900146484375, 0.273193359375, 0.10107421875, 0.43359375, 0.457763671875, 0.2291259765625, 0.115234375, 0.228759765625, 0.3017578125, 0.245361328125, 0.01580810546875, 0.2027587890625, 0.4248046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_547329b19c13cdf6bec73f50f5be1786(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7abd549d3139519a329c10bedfedf031(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0899658203125, 0.27392578125, 0.484130859375, 0.256103515625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_017c00aeb295dc46f9fc1d2891b305b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23797249794006348, 0.4909527599811554, 0.08049033582210541, 0.030963411554694176, 0.11735628545284271, 0.37302327156066895, 0.2540295720100403, 0.4193029999732971, 0.1586814522743225, 0.10426872968673706, 0.2344362884759903, 0.3486540615558624, 0.30627429485321045, 0.18821120262145996, 0.022430604323744774, 0.3220449984073639, 0.16735638678073883, 0.419958233833313, 0.356621652841568, 0.46857762336730957, 0.05237618461251259, 0.23602919280529022, 0.18606363236904144, 0.2571564018726349, 0.25037437677383423], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14b895217912dd4a8ecf31a98d3bdbd7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2105712890625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59046ffac3bfbc458ca58e2754ba4734(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.162841796875, 0.343994140625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_811037475b19a96c723ef9f47073d2cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1ab4f1a6db4efe81d1675ce8e0e7d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_811037475b19a96c723ef9f47073d2cf
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d7aff3492b57a1a60a17794f02db52b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4283074736595154, 0.05854383856058121, 0.23509356379508972, 0.0822908952832222, 0.2760894000530243, 0.2124243974685669, 0.06189754232764244, 0.3346434235572815, 0.42116427421569824, 0.25016748905181885, 0.14530794322490692, 0.30339837074279785, 0.3537538945674896, 0.3355585038661957, 0.4577235281467438, 0.34319254755973816], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f1f360eaa77f3722e932333d6dfd4bf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.381591796875, 0.4736328125, 0.304443359375, 0.165283203125, 0.0242919921875, 0.1427001953125, 0.391357421875, 0.385009765625, 0.402587890625, 0.345947265625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8885b52c7e00a12ffa38161622a6c34(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21196943521499634, 0.16831807792186737, 0.4166717827320099, 0.12733767926692963, 0.20282122492790222, 0.4041949212551117, 0.09403499215841293, 0.35781437158584595, 0.03307352215051651, 0.258016973733902, 0.12718556821346283, 0.3903583884239197, 0.09142007678747177, 0.42923688888549805, 0.12791569530963898, 0.4060901403427124], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b8c1e9335834f7295c5110dec0289b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42529296875, 0.060211181640625, 0.3447265625, 0.038848876953125, 0.302001953125, 0.06817626953125, 0.452392578125, 0.06829833984375, 0.07659912109375, 0.478759765625, 0.2393798828125, 0.498779296875, 0.43798828125, 0.1085205078125, 0.328125, 0.290771484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c38566489f6962d9b573594c18ecddc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.460693359375, 0.33154296875, 0.29150390625, 0.333251953125, 0.3369140625, 0.3779296875, 0.065673828125, 0.39453125, 0.0154571533203125, 0.32080078125, 0.339599609375, 0.322998046875, 0.0034580230712890625, 0.454345703125, 0.48779296875, 0.0188140869140625, 0.16162109375, 0.2030029296875, 0.07781982421875, 0.19580078125, 0.09027099609375, 0.05255126953125, 0.352783203125, 0.0136871337890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a20ee9bee1652b8aef6912948adebd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.061126708984375, 0.118896484375, 0.47021484375, 0.09326171875, 0.36181640625, 0.494384765625, 0.42578125, 0.063720703125, 0.410888671875, 0.0028591156005859375, 0.2183837890625, 0.130126953125, 0.185546875, 0.248046875, 0.0819091796875, 0.485107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd9f07f1f187c84a501cd87e09eabce3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.316650390625, 0.018707275390625, 0.22216796875, 0.1422119140625, 0.364990234375, 0.223876953125, 0.263916015625, 0.460205078125, 0.214599609375, 0.150390625, 0.424560546875, 0.07891845703125, 0.2568359375, 0.2666015625, 0.1195068359375, 0.4296875, 0.474365234375, 0.303466796875, 0.393798828125, 0.41015625, 0.232177734375, 0.035125732421875, 0.35791015625, 0.3505859375, 0.31787109375, 0.344970703125, 0.189208984375, 0.2056884765625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c0171da79c971803bc2291f5e0fd104(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46e6c7ee377f5859c47ecfd24f38da79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c0171da79c971803bc2291f5e0fd104
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adde2f5281fed82c137e00d8c83a1d27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03f312392ff5e0294359aacfee1a1347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.033416748046875, 0.40625, 0.0009379386901855469, 0.1932373046875, 0.1644287109375, 0.2880859375, 0.208251953125, 0.0343017578125, 0.359619140625, 0.2276611328125, 0.4248046875, 0.38232421875, 0.297119140625, 0.29443359375, 0.0230255126953125, 0.314453125, 0.0870361328125, 0.381591796875, 0.044036865234375, 0.2425537109375, 0.312255859375, 0.292724609375, 0.09600830078125, 0.413330078125, 0.2421875, 0.3623046875, 0.4970703125, 0.06787109375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_345e1ebb3fb340085e09969b37a542e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.411865234375, 0.432373046875, 0.35107421875, 0.48095703125, 0.32373046875, 0.459716796875, 0.356201171875, 0.4677734375, 0.100830078125, 0.132568359375, 0.4345703125, 0.1517333984375, 0.309326171875, 0.48779296875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f54d7b77425b178922e4134ab9bea52(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32590076327323914, 0.3230816721916199, 0.35256701707839966, 0.3840997815132141, 0.26426541805267334, 0.12141349166631699, 0.4366006553173065, 0.1545461118221283, 0.1101466566324234, 0.28487488627433777, 0.3230382800102234, 0.488668292760849, 0.3203844428062439, 0.2768276631832123, 0.0752469152212143, 0.36337214708328247, 0.3851074278354645, 0.4588046371936798, 0.492574006319046, 0.056749630719423294], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c760df10fab723f31b4a3d805cec3b20(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1e088d2d22111966a0190fc703a01c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c760df10fab723f31b4a3d805cec3b20
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c63ea95a6f1611125cae3523d3b03ba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36000168323516846, 0.4953937828540802, 0.2786734998226166, 0.4606591761112213, 0.12212461233139038, 0.0037028177175670862, 0.1804949939250946, 0.2804352641105652, 0.4739992618560791, 0.31525811553001404, 0.11636871099472046, 0.0908849909901619], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_92fd90fe371b29364f7c080c23296349(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02775556594133377, 0.04060319811105728, 0.3456469774246216, 0.2537793815135956, 0.05330381542444229, 0.12415027618408203, 0.042468056082725525, 0.34956660866737366, 0.12409918755292892, 0.02339000627398491, 0.44706371426582336, 0.11569837480783463, 0.372915118932724, 0.31168317794799805, 0.0514865517616272, 0.29470303654670715], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01c87d58b8a5942e7499427f9415cf79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18309468030929565, 0.1344856470823288, 0.10895542055368423, 0.352754145860672, 0.3033846616744995, 0.4478471279144287, 0.37073421478271484, 0.2547195255756378, 0.1379294991493225, 0.11744038760662079, 0.3013294041156769, 0.4026258885860443, 0.42285817861557007, 0.22567345201969147, 0.16619530320167542, 0.41082659363746643], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9960216672a17a5adc64b2a6c4acdee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40097659826278687, 0.1644590049982071, 0.10120875388383865, 0.20215541124343872, 0.0942211002111435, 0.004123140126466751, 0.4072299301624298, 0.4369802474975586, 0.4963381290435791, 0.44427624344825745, 0.2513856291770935, 0.329509437084198, 0.4406103193759918, 0.43015509843826294, 0.1655692160129547, 0.41696327924728394, 0.06199059262871742, 0.04407300055027008, 0.1330518275499344, 0.0032218326814472675], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f9591a0aaf515741e8968b77e8500202(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ef928b84a28df20982e43fead5e64aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f9591a0aaf515741e8968b77e8500202
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72f04d903c72029ea3995ee76b9e0574(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.251628577709198, 0.13021767139434814, 0.038066234439611435, 0.45441532135009766, 0.33264070749282837, 0.3182990252971649, 0.1772172600030899, 0.24265338480472565, 0.36858808994293213, 0.07867664098739624, 0.1947149634361267, 0.39275217056274414, 0.3425341546535492, 0.052043259143829346, 0.4014694094657898, 0.3180018663406372], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe271c20afc3543541118bf370469ad5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3528822362422943], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bff892dcdd0b66e71010df17b1628103(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37255859375, 0.12646484375, 0.283447265625, 0.041046142578125, 0.41259765625, 0.19140625, 0.358154296875, 0.143310546875, 0.08642578125, 0.11810302734375, 0.44140625, 0.1016845703125, 0.427490234375, 0.28076171875, 0.07659912109375, 0.449951171875, 0.315185546875, 0.45263671875, 0.0843505859375, 0.0086822509765625, 0.405517578125, 0.2919921875, 0.2451171875, 0.047210693359375, 0.3056640625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53fda62ef123d2a8eef234ce21380e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d205c4b0f33567a650c63e6874f0d498(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91a966b777720f51e78f2a3a7ef2e91a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14594483375549316, 0.19450689852237701, 0.3070523738861084], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3ea24142c3d372acb25634faaf8e4e98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2766531705856323, 0.21638254821300507, 0.18163003027439117, 0.3904057741165161, 0.18695057928562164, 0.11421971023082733, 0.28569117188453674, 0.029678847640752792, 0.42365896701812744, 0.25948959589004517, 0.49741241335868835, 0.12585745751857758, 0.23294754326343536, 0.4878304898738861, 0.08115588128566742, 0.11250188946723938, 0.36512112617492676, 0.49184826016426086, 0.03538486361503601, 0.4900045394897461, 0.33658820390701294, 0.035145509988069534, 0.27860844135284424, 0.084061399102211], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cce3548625175c370c2fad79f491191f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e735de264f2af8a20802f07def6cd3c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07503458112478256, 0.15712708234786987, 0.4716629385948181, 0.19875682890415192, 0.034462928771972656, 0.3717201054096222, 0.17562150955200195, 0.14094971120357513, 0.08380497246980667, 0.043155550956726074, 0.023535508662462234, 0.340562641620636, 0.4805929362773895, 0.4359273314476013, 0.010806988924741745, 0.22072221338748932, 0.4322628080844879, 0.4199453592300415, 0.29118812084198, 0.198329895734787, 0.3779236078262329, 0.0503704696893692, 0.020989403128623962, 0.15169145166873932, 0.07951890677213669, 0.2393108457326889, 0.17717882990837097], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_457c1034fbf71b1c3753cc85023ec7f6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43a1bce2cf2395bd685119e9111fab73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_457c1034fbf71b1c3753cc85023ec7f6
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc64bc8b2e52655cca529981f8bd3fa1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02787751890718937, 0.2677428126335144, 0.39152762293815613, 0.3853929340839386, 0.020757749676704407, 0.1509111076593399, 0.19490662217140198, 0.050346486270427704, 0.39746934175491333, 0.16800950467586517, 0.2775312066078186, 0.3999592065811157], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_87451d4417be6571e9462c24b340c576(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a9aa27f469cb36767b891c4d8726ef2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_87451d4417be6571e9462c24b340c576
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06710df14faf6cc083ff73c4e6443f94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdf52523857bc908b41702df1e2bd09f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06710df14faf6cc083ff73c4e6443f94
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8de2a23ccf5f3dcc68872a5ef2041129(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.067626953125, 0.3076171875, 0.3359375, 0.260498046875, 0.1475830078125, 0.1739501953125, 0.07916259765625, 0.045318603515625, 0.05859375, 0.1788330078125, 0.20654296875, 0.25390625, 0.2078857421875, 0.350830078125, 0.482177734375, 0.1160888671875, 0.307861328125, 0.3115234375, 0.396484375, 0.06365966796875, 0.423828125, 0.08990478515625, 0.04180908203125, 0.486572265625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_febaac8168ca3860125e72b4d4ac6dc2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15693023800849915, 0.42530688643455505, 0.3610544800758362, 0.4752345085144043, 0.4017649292945862, 0.032634034752845764, 0.06887529790401459, 0.2705490291118622, 0.28026852011680603, 0.20693626999855042, 0.29171809554100037, 0.26051974296569824, 0.25581875443458557, 0.4569736421108246, 0.08376221358776093, 0.47007885575294495, 0.44020017981529236, 0.07907094061374664, 0.19247642159461975, 0.10639083385467529], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7cafa8e0a9285c90ef342aba494a6f99(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.379150390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c2839f66af7e5f317f11296f34bcac2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10040283203125, 0.11395263671875, 0.2174072265625, 0.1573486328125, 0.18603515625, 0.06781005859375, 0.410400390625, 0.08197021484375, 0.2369384765625, 0.283447265625, 0.2115478515625, 0.476806640625, 0.050628662109375, 0.1663818359375, 0.2705078125, 0.0251922607421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41c6e163ceb7acd3fa7bd656a16defe5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01229095458984375, 0.483642578125, 0.1815185546875, 0.1676025390625, 0.07183837890625, 0.05841064453125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e3468e1afb74eb37d373bdf6af7f03c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15687814354896545, 0.2215082347393036, 0.10391450673341751, 0.49552369117736816, 0.16410449147224426, 0.16340352594852448, 0.44984978437423706, 0.16311635076999664, 0.40867289900779724, 0.0792650654911995, 0.22655953466892242, 0.13922163844108582, 0.4306853711605072, 0.2698052227497101, 0.006751558277755976, 0.16019953787326813, 0.34871190786361694, 0.36009982228279114, 0.23093856871128082, 0.1552588790655136, 0.1397450566291809, 0.0734221413731575, 0.29554831981658936, 0.46906518936157227, 0.4696750342845917, 0.2898046374320984, 0.2799678146839142, 0.03828458487987518], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e712edb4c8ae698e6d0390b50ed18bf6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039825439453125, 0.2587890625, 0.324462890625, 0.1376953125, 0.3837890625, 0.442626953125, 0.48193359375, 0.08148193359375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44587888091f1c5cd9aa2b4cb52a51ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db47b12c8d21e82d4bea956452d1409e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08912761509418488, 0.3459445536136627, 0.16981719434261322, 0.17272114753723145, 0.1355438530445099, 0.19860346615314484, 0.46200743317604065, 0.23393075168132782, 0.02392571046948433, 0.4078446328639984, 0.15976138412952423, 0.19390666484832764, 0.058314964175224304, 0.349197655916214, 0.48143282532691956, 0.11021557450294495], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb8bb137f429e6aa9c253d901896393c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3944011926651001, 0.07919931411743164, 0.0009426478645764291, 0.1607668697834015, 0.34587913751602173, 0.10888629406690598, 0.2325284481048584, 0.041019462049007416, 0.12805479764938354, 0.1579296737909317, 0.163518026471138, 0.19531837105751038, 0.3143322467803955, 0.3429044783115387, 0.42608603835105896, 0.0032797304447740316, 0.3382837176322937, 0.08930525183677673, 0.1714300811290741, 0.38432881236076355, 0.1785631775856018, 0.001610832056030631, 0.27882885932922363, 0.1556239128112793, 0.46737274527549744], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f842b6d9b5f6e7504660a2fb8951efb8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11102294921875, 0.31689453125, 0.0167388916015625, 0.00414276123046875, 0.051422119140625, 0.2115478515625, 0.305419921875, 0.400146484375, 0.12066650390625, 0.2261962890625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3ad58c28a51413eed7f7afefc575626(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0767902210354805, 0.15134985744953156, 0.4451078474521637, 0.10432351380586624, 0.3245576322078705, 0.42769262194633484, 0.17024874687194824, 0.3454631268978119, 0.21903304755687714, 0.1611461490392685, 0.17765381932258606, 0.3579370081424713, 0.2149122804403305, 0.2272774577140808, 0.032166190445423126, 0.46229270100593567, 0.263992041349411, 0.09862229228019714, 0.10681774467229843, 0.04827151820063591, 0.2883444130420685, 0.3073901832103729, 0.0310965608805418, 0.4507743716239929], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_536e240cab5d453a371bd948242247ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a2a5757bf97ac11e2534a972b0c9f0d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.435546875, 0.0208587646484375, 0.231201171875, 0.04547119140625, 0.1514892578125, 0.190673828125, 0.473876953125, 0.140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_20d78d7a552b39362498c0e5aba7f2e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d10fcea5fa71e804b2ace4bb83c47bbb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_20d78d7a552b39362498c0e5aba7f2e4
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6147ca2078269ba99bba177344e69406(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30677032470703125, 0.00465670321136713, 0.11908138543367386, 0.459380179643631, 0.04250938072800636, 0.3657270073890686, 0.104269839823246, 0.49285393953323364, 0.30463939905166626, 0.0647500529885292, 0.06768551468849182, 0.2623779773712158, 0.15563245117664337, 0.07268097251653671, 0.405092716217041, 0.011393824592232704], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13bd6c91a3d0917114e1e63e4b26ac5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31718263030052185, 0.41133061051368713, 0.1891261339187622, 0.24542132019996643, 0.4631728529930115, 0.13218256831169128, 0.25326818227767944, 0.48083508014678955, 0.061713069677352905, 0.13781654834747314, 0.4101807177066803, 0.04583549126982689, 0.46415475010871887, 0.44724681973457336, 0.2494814097881317, 0.25569355487823486, 0.4508664608001709, 0.4356509745121002, 0.3881181478500366, 0.3133353292942047, 0.4088307321071625, 0.4689382314682007, 0.24017426371574402, 0.24804547429084778, 0.41030776500701904, 0.21888326108455658, 0.19741255044937134, 0.36681443452835083, 0.18938107788562775, 0.45433518290519714], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02b27d32f5e8195f6b6c3a5a93db963a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.175048828125, 0.434326171875, 0.443359375, 0.1082763671875, 0.427490234375, 0.0849609375, 0.224853515625, 0.431884765625, 0.2052001953125, 0.242431640625, 0.2197265625, 0.322509765625, 0.2222900390625, 0.059906005859375, 0.040191650390625, 0.1114501953125, 0.029937744140625, 0.08404541015625, 0.423095703125, 0.461669921875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30f3ac56d4d7a53b16f0ab3cb2d029c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.011902209371328354, 0.4663909077644348, 0.015520449727773666, 0.48868635296821594, 0.396306574344635, 0.30929064750671387, 0.45278504490852356, 0.2070326805114746, 0.2167365849018097, 0.4563845992088318, 0.06300573796033859, 0.10098575800657272, 0.1552475094795227, 0.2657872140407562, 0.4998737573623657, 0.3616308271884918], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af43144cb9497fa7fc8daabbb976dabe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f28dd262e7e08b340552622aea2227df(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb67791e6ca96c827bccf3ba7864c93b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f28dd262e7e08b340552622aea2227df
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9df161e3f3e88246764c408dfc295be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e31f0347f1b7a847fd937308b7374d87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06787109375, 0.39013671875, 0.127685546875, 0.1363525390625, 0.057159423828125, 0.233642578125, 0.1534423828125, 0.045379638671875, 0.462158203125, 0.287109375, 0.481689453125, 0.304443359375, 0.0682373046875, 0.1441650390625, 0.2205810546875, 0.26171875, 0.380615234375, 0.167724609375, 0.42333984375, 0.35595703125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a6819b92a24d3237dcb66723d11bb1c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06353759765625, 0.12939453125, 0.3603515625, 0.377685546875, 0.375244140625, 0.420166015625, 0.31640625, 0.0889892578125, 0.06329345703125, 0.2440185546875, 0.1104736328125, 0.3203125, 0.035369873046875, 0.19091796875, 0.443115234375, 0.472900390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0b837fff3fd858512ad8484c5029aa0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33250662684440613, 0.23768864572048187, 0.4898858070373535, 0.2176004946231842, 0.1827554553747177, 0.11442052572965622, 0.3016834855079651, 0.44105955958366394, 0.2419416755437851, 0.4851681590080261, 0.27727270126342773, 0.07541488856077194, 0.3058100938796997, 0.0714195966720581, 0.05633575841784477, 0.12329601496458054], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae51507e97b5b5ce02eacec6fc3b6227(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4216923415660858, 0.15031372010707855, 0.4534386098384857], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2e9b2cb7a09d9dd2a30319ea79a23cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1429443359375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0aad45b5b8c056decd1d1b9a90ebcac7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.034232743084430695, 0.1839444786310196], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cccb2b9e947e032b6f30d953e24d25f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9160e85b57c47fc4d4d1fb6901aa3347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b2ce42eebf23c79684c6e647872e3fb3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.350830078125, 0.07666015625, 0.10601806640625, 0.4033203125, 0.2315673828125, 0.1033935546875, 0.2086181640625, 0.0084381103515625, 0.427490234375, 0.297119140625, 0.34521484375, 0.05950927734375, 0.344970703125, 0.07574462890625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d8d3a8b9f64d7a3230fa7435759c2f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8d5cf4af68db796e013543629413259b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d36c6b6b9d2ead42f52575ad9fdbd60(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40400663018226624, 0.3215797543525696, 0.14782258868217468, 0.35363906621932983, 0.37347882986068726, 0.1500530242919922, 0.27698037028312683, 0.27178874611854553, 0.30381134152412415, 0.35447579622268677, 0.3337855935096741, 0.36009731888771057, 0.15817108750343323, 0.49595800042152405], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9ef49cd99859525a8365bd57ff1acb8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1435975432395935, 0.26995405554771423, 0.36140477657318115, 0.18823859095573425, 0.41602563858032227, 0.1459408849477768, 0.13327613472938538, 0.10328500717878342], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d55182a9bebd88f2a0278a2fcfc4ed01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32098934054374695, 0.3379859924316406, 0.40259483456611633, 0.3345559537410736, 0.02253090962767601, 0.13839329779148102, 0.2821383774280548, 0.391202449798584, 0.13201197981834412, 0.26427704095840454, 0.31189844012260437, 0.4529799818992615, 0.45075365900993347, 0.30564090609550476, 0.10053788125514984, 0.18507204949855804], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_140157323802807a893bfdff45660fab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75a543643012e8f8e5ad1d8cb18a233a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_140157323802807a893bfdff45660fab
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_43b9f6546658842e4b05b14487bc284a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bcc164a4c7083a0405fd66e25eb8f6bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_43b9f6546658842e4b05b14487bc284a
    def get_inputs(self):
        return [
            paddle.to_tensor([33], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2cad07e203c6c52a83919382272ec26e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.298828125, 0.259765625, 0.342529296875, 0.216796875, 0.489013671875, 0.08221435546875, 0.10736083984375, 0.28173828125, 0.232177734375, 0.377685546875, 0.366943359375, 0.0888671875, 0.310302734375, 0.103271484375, 0.212890625, 0.430908203125, 0.337158203125, 0.4853515625, 0.427490234375, 0.075439453125, 0.406494140625, 0.2489013671875, 0.07879638671875, 0.10333251953125, 0.275634765625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc1db764bc9f18a8caddcae045ad2236(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13655158877372742, 0.4397487938404083, 0.24292413890361786, 0.07010030001401901, 0.4696645140647888, 0.17361080646514893, 0.3368627727031708, 0.4852907061576843], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7cb91a72e220ed4240f2b7580be17d21(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0003352165222167969, 0.300537109375, 0.04779052734375, 0.037841796875, 0.05804443359375, 0.25439453125, 0.06817626953125, 0.150146484375, 0.3193359375, 0.255859375, 0.1690673828125, 0.264892578125, 0.1815185546875, 0.23193359375, 0.41162109375, 0.23779296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2543ee47a748e0f2ccaa520de6fdfc96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f40e404620342ec56cde1f950136a23(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19707094132900238, 0.47868412733078003, 0.26642170548439026, 0.4080546200275421, 0.025264807045459747, 0.299450546503067, 0.05116598680615425, 0.13318340480327606, 0.21544687449932098, 0.292222797870636, 0.13571752607822418, 0.32687908411026, 0.0092287827283144, 0.340171217918396, 0.38415396213531494, 0.1079283282160759], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_35af1cac4b0f73665144f4f598fee6f0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25eab9acf9333b418a00a008d6bf8785(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35af1cac4b0f73665144f4f598fee6f0
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_298343809263466d5c4a68f0e9c62a4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.327392578125, 0.012481689453125, 0.38623046875, 0.38720703125, 0.08050537109375, 0.1407470703125, 0.458740234375, 0.1954345703125, 0.2236328125, 0.08941650390625, 0.2451171875, 0.302001953125, 0.004459381103515625, 0.484619140625, 0.399169921875, 0.330810546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4de15b7a5bc1c5616fa098eb6b2cf98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.465576171875, 0.2047119140625, 0.29345703125, 0.4873046875, 0.356689453125, 0.085205078125, 0.423095703125, 0.029632568359375, 0.443603515625, 0.01180267333984375, 0.2227783203125, 0.338134765625, 0.18896484375, 0.1405029296875, 0.1126708984375, 0.1669921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd41a87c57a152156dd9c80cecaeaf5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.416259765625, 0.320068359375, 0.414306640625, 0.4072265625, 0.413818359375, 0.1502685546875, 0.12408447265625, 0.253662109375, 0.394775390625, 0.46630859375, 0.04779052734375, 0.385986328125, 0.33349609375, 0.375732421875, 0.408935546875, 0.257568359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1849c8bbda7f80fefaed1beb453ad9a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4671604335308075], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ce9436932e0c11290f846aa6172f96d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5aa91dccc47990f58f0743f87205e5cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.274658203125, 0.27734375, 0.484619140625, 0.45947265625, 0.140625, 0.160400390625, 0.1966552734375, 0.139404296875, 0.26318359375, 0.387939453125, 0.41064453125, 0.049468994140625, 0.333251953125, 0.1683349609375, 0.196533203125, 0.422119140625, 0.4365234375, 0.326904296875, 0.3974609375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b9807f04b432d5080fcd3b3563f27a41(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26085302233695984, 0.48667973279953003, 0.28672343492507935, 0.4601995050907135, 0.03699802607297897, 0.35564708709716797, 0.2167961597442627, 0.05071593075990677, 0.05801548436284065, 0.06533167511224747, 0.27260076999664307, 0.15164433419704437, 0.4187251329421997, 0.37081587314605713, 0.32470619678497314, 0.17334017157554626, 0.3134748339653015, 0.03539267182350159, 0.22583453357219696, 0.39367857575416565, 0.319983571767807, 0.23826970160007477, 0.40215811133384705, 0.20899859070777893, 0.44547250866889954, 0.07222957164049149, 0.044898442924022675, 0.4842583239078522], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d373f60ce27a49057183f4944826413(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48791417479515076, 0.3196594715118408, 0.28362542390823364, 0.4053115248680115, 0.1383117437362671, 0.4810335338115692, 0.19981108605861664, 0.28860875964164734, 0.2933931350708008, 0.4784707725048065, 0.31306082010269165, 0.06526484340429306, 0.19604690372943878, 0.015292646363377571, 0.4386194348335266, 0.40196871757507324], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_86b6f9266468fc57624ac1a7a8325dda(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88fe38dbbd162180c18d5028f4a267cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_86b6f9266468fc57624ac1a7a8325dda
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23484165966510773, 0.04019085317850113, 0.37957116961479187, 0.16988247632980347, 0.11408649384975433, 0.4571695327758789, 0.30647820234298706], dtype='float32').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73b9493e16a3cbfb5be1220397e1307b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2095947265625, 0.007442474365234375, 0.273193359375, 0.10174560546875, 0.27392578125, 0.3681640625, 0.37109375, 0.0136260986328125, 0.266357421875, 0.149169921875, 0.43017578125, 0.0309906005859375, 0.17822265625, 0.06427001953125, 0.446533203125, 0.338623046875, 0.3525390625, 0.07928466796875, 0.0184173583984375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c467f5d8a9777b1775d387ce96d3d452(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04400634765625, 0.498291015625, 0.1981201171875, 0.2109375, 0.331787109375, 0.260498046875, 0.263671875, 0.33251953125, 0.12322998046875, 0.271240234375, 0.06512451171875, 0.114501953125, 0.2445068359375, 0.37890625, 0.39453125, 0.499267578125, 0.016845703125, 0.196533203125, 0.390869140625, 0.00019061565399169922, 0.321044921875, 0.2125244140625, 0.024688720703125, 0.402099609375, 0.142578125, 0.170166015625, 0.41015625, 0.0102081298828125, 0.1998291015625, 0.114013671875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c0a8ded4eaa11309f711730b160bad69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.043095849454402924, 0.33489978313446045, 0.39495426416397095, 0.17628329992294312, 0.25381407141685486, 0.15481705963611603, 0.107269786298275, 0.48395517468452454, 0.16210219264030457, 0.1953890025615692, 0.0783243179321289, 0.4490356147289276, 0.26701465249061584, 0.2884758710861206, 0.1945471465587616, 0.24084314703941345, 0.253227174282074, 0.14231064915657043, 0.2805599570274353, 0.2945360243320465, 0.24040398001670837, 0.03038204088807106, 0.05106903985142708, 0.2748190760612488, 0.0281208585947752], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0660fc15f57cb1c92c23d91771ec2255(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11053466796875, 0.2320556640625, 0.437744140625, 0.3515625, 0.1302490234375, 0.347900390625, 0.212646484375, 0.270263671875, 0.1600341796875, 0.44970703125, 0.443603515625, 0.34423828125, 0.09326171875, 0.374755859375, 0.39990234375, 0.3076171875, 0.26904296875, 0.2900390625, 0.0177154541015625, 0.45751953125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_431711c33c12ca14ccc1c0dfea7c1568(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01585274562239647, 0.2557305097579956, 0.28172340989112854, 0.42542916536331177, 0.42015382647514343, 0.42053401470184326, 0.1849054992198944, 0.33422282338142395, 0.3033626079559326, 0.3149176239967346, 0.2885904312133789, 0.46157026290893555, 0.459251344203949, 0.03762740641832352, 0.0909939557313919, 0.2029758244752884, 0.1245395690202713, 0.12639100849628448, 0.207076758146286, 0.06852941960096359, 0.24185793101787567, 0.4981873333454132, 0.305547297000885, 0.43286746740341187, 0.3517133891582489, 0.2978256046772003, 0.4749164879322052], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e24341cdd0c386828737cb259fa3c958(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b085891b19d3d45d1a9cc3176c13e875(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e24341cdd0c386828737cb259fa3c958
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1493b4502ed01bd9ce965d61cc9641ba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.390869140625, 0.2379150390625, 0.07666015625, 0.1826171875, 0.055450439453125, 0.16455078125, 0.415283203125, 0.340576171875, 0.410400390625, 0.01094818115234375, 0.48876953125, 0.498291015625, 0.4111328125, 0.001605987548828125, 0.0816650390625, 0.12939453125, 0.34375, 0.1866455078125, 0.408203125, 0.377197265625, 0.01004791259765625, 0.45947265625, 0.1865234375, 0.06585693359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a41f7b425d76aa21c6862f902ea64547(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b155b39a705c0c62b356b5739c7cc71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13571053743362427, 0.46930620074272156, 0.02822973020374775, 0.3921080231666565, 0.2543599307537079, 0.1768392026424408, 0.1931425929069519, 0.04005791246891022, 0.22800885140895844, 0.38472989201545715, 0.38243547081947327, 0.4132123589515686, 0.0747997835278511, 0.08578621596097946, 0.4074143171310425, 0.049753155559301376], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ba32a88792bcda1e7debf247a6100264(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a05f4b780fe10500dc7806c4bb07356(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ba32a88792bcda1e7debf247a6100264
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c5ff57323ce794994c6dd41315239e87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07896168529987335, 0.4902390241622925, 0.07359281182289124, 0.1140887588262558, 0.35462504625320435, 0.25284433364868164], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9a9bdcaf2be4001d07894d26921ecd5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.454345703125, 0.1578369140625, 0.188232421875, 0.0516357421875, 0.273193359375, 0.062408447265625, 0.1771240234375, 0.07159423828125, 0.122802734375, 0.1783447265625, 0.2354736328125, 0.30078125, 0.28515625, 0.23193359375, 0.1781005859375, 0.176025390625, 0.2303466796875, 0.113525390625, 0.240478515625, 0.1612548828125, 0.447021484375, 0.4736328125, 0.259033203125, 0.481689453125, 0.475830078125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a38cf7197eec2f3a02e4ac2090a1259(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.367919921875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db2c637356ff6a9907ed3be79e224d4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61cbbc7f6441829e0c8ecb27e2645cbc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.015219688415527344, 0.04701798036694527, 0.123835489153862, 0.12541887164115906, 0.28699734807014465, 0.034119825810194016, 0.42147237062454224, 0.2712332606315613, 0.49738824367523193, 0.14177632331848145, 0.17895115911960602, 0.0962977409362793, 0.31570324301719666, 0.38940563797950745, 0.21951603889465332, 0.36723223328590393], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2291fd45db0df3406d5161b4225e1eec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16040515899658203, 0.4259929955005646, 0.3541719913482666, 0.04905729740858078, 0.08867087960243225, 0.4300646185874939, 0.45432209968566895, 0.14625151455402374, 0.22046498954296112, 0.26537108421325684, 0.4728221595287323, 0.07755652070045471, 0.47295597195625305, 0.23369014263153076], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e7668a40bf33aa1e98effc75d74debe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44619303941726685, 0.20145434141159058, 0.2476085126399994, 0.48536860942840576, 0.003224738407880068, 0.31490588188171387], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_683246d07e276df6fad210753e216c96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3791709244251251, 0.4054635465145111, 0.18857409060001373, 0.3469807207584381, 0.15460148453712463, 0.14490719139575958, 0.22986890375614166, 0.33533117175102234, 0.38470378518104553, 0.02373555675148964, 0.3627593219280243, 0.016803979873657227, 0.048463426530361176, 0.22932982444763184, 0.3847472667694092, 0.237287238240242, 0.16384857892990112, 0.2769332230091095, 0.1575486809015274, 0.4973011016845703, 0.3437308371067047, 0.07400596141815186, 0.10977662354707718, 0.35168060660362244, 0.42464497685432434, 0.0332762636244297, 0.39834317564964294, 0.4000397026538849, 0.22527474164962769, 0.45242995023727417], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0df1f8f0e936be57fe072b92d8a47b52(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09413289278745651, 0.35256722569465637, 0.17742225527763367, 0.35539019107818604, 0.43026816844940186, 0.4696284830570221, 0.2261979877948761, 0.34396669268608093, 0.24439358711242676, 0.13642995059490204, 0.14207138121128082, 0.2595885992050171, 0.4925125241279602, 0.27421873807907104, 0.06340283155441284, 0.16591738164424896, 0.3194827437400818, 0.23128274083137512, 0.3132111430168152, 0.15848909318447113, 0.3160991370677948, 0.2740655541419983, 0.128962442278862, 0.219244584441185], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c05260aff472b4bd0c02ccd648797923(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.291748046875, 0.3310546875, 0.309814453125, 0.0911865234375, 0.482177734375, 0.352294921875, 0.0132904052734375, 0.302001953125, 0.421142578125, 0.474365234375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a547e317a331ccd4b9e985a436ccd72(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1463623046875, 0.302734375, 0.039459228515625, 0.4677734375, 0.32861328125, 0.36181640625, 0.06280517578125, 0.37841796875, 0.1883544921875, 0.268310546875, 0.362548828125, 0.39306640625, 0.4638671875, 0.06365966796875, 0.360107421875, 0.1826171875, 0.1259765625, 0.489501953125, 0.31787109375, 0.395751953125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_60e34dd11afbbb243973c095e46eadf4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07690809667110443, 0.04128929227590561, 0.40346479415893555, 0.4897072911262512, 0.2518934905529022, 0.11138572543859482, 0.42288556694984436, 0.26006829738616943, 0.14124710857868195, 0.37877461314201355, 0.2656906545162201, 0.35777121782302856, 0.11043573170900345, 0.48569348454475403, 0.3917543888092041, 0.1487869769334793, 0.257983922958374, 0.024597741663455963, 0.4207330346107483, 0.31831294298171997, 0.4408801198005676, 0.3414718806743622, 0.0633140429854393, 0.10655642300844193], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32bdca347c570585d014d314eafa48d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.348876953125, 0.053558349609375, 0.32861328125, 0.4921875, 0.1722412109375, 0.444091796875, 0.435791015625, 0.121826171875, 0.194091796875, 0.174560546875, 0.4892578125, 0.04156494140625, 0.1715087890625, 0.0026226043701171875, 0.05438232421875, 0.35791015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41e1cbf17bbbb36281dedccff39713ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04209764301776886, 0.06758695095777512, 0.18170924484729767, 0.37926986813545227, 0.08523847907781601, 0.13346771895885468, 0.07666657865047455, 0.021191485226154327, 0.4055200517177582, 0.19898167252540588, 0.22430047392845154, 0.08531835675239563, 0.3693109452724457, 0.43843165040016174, 0.41479989886283875, 0.3181953728199005], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_369a23a5c97f16fd699e2a9c77e17681(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04147496446967125, 0.15677930414676666, 0.3107724189758301, 0.36170434951782227], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e09d8297d12206c27b145f65bbcd140a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31640625, 0.42822265625, 0.433837890625, 0.352294921875, 0.289306640625, 0.396484375, 0.12005615234375, 0.03582763671875, 0.06317138671875, 0.482177734375, 0.4951171875, 0.2529296875, 0.49560546875, 0.103271484375, 0.262939453125, 0.1915283203125, 0.413818359375, 0.416748046875, 0.1263427734375, 0.339111328125, 0.061859130859375, 0.128173828125, 0.07965087890625, 0.01369476318359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d23e7dc3d369a84bac0d78e37ae1d9c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10418701171875, 0.2314453125, 0.3486328125, 0.42724609375, 0.31103515625, 0.29736328125, 0.051177978515625, 0.425537109375, 0.1759033203125, 0.2132568359375, 0.062347412109375, 0.0411376953125, 0.28955078125, 0.10015869140625, 0.453857421875, 0.2376708984375, 0.1759033203125, 0.490478515625, 0.30859375, 0.353271484375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_369561123a893250bd0e421a93c848be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb173633bb497f7769e4e9a3d8307f07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_369561123a893250bd0e421a93c848be
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ece0433b9d0463882aef95d09fc590c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a124dabfc0fade8db140e9cdaaa6add(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ece0433b9d0463882aef95d09fc590c9
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ce859cb9a71e9f4477e4e4adc0536cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.144775390625, 0.1527099609375, 0.240478515625, 0.255615234375, 0.11151123046875, 0.14404296875, 0.1700439453125, 0.28662109375, 0.2271728515625, 0.381103515625, 0.443115234375, 0.0211334228515625, 0.1243896484375, 0.3779296875, 0.302978515625, 0.09918212890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5151870a8a25b2b6b00e2d50620190a6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61f5241d535e31009d590f415a71d2aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5151870a8a25b2b6b00e2d50620190a6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4582720100879669, 0.2299567610025406, 0.3850182592868805, 0.4309197962284088, 0.07525163888931274, 0.3617725670337677, 0.06424820423126221, 0.48831242322921753, 0.09679833054542542, 0.45390164852142334, 0.42252635955810547, 0.277112752199173, 0.25627264380455017, 0.05995309725403786, 0.48766905069351196, 0.3215671479701996, 0.1227981448173523], dtype='float32').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30ee4b87584bc75053408313473b89ca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0431174673140049, 0.022938482463359833, 0.28035491704940796, 0.4052383601665497, 0.23515398800373077, 0.25274720788002014, 0.16070617735385895, 0.01100010983645916, 0.015633724629878998, 0.46166741847991943, 0.18166287243366241, 0.28652212023735046, 0.17086540162563324, 0.12411467730998993, 0.15236887335777283, 0.011630411259829998, 0.48386117815971375, 0.19003796577453613], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_365be5bcb557a18b32d4b852af289aaf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.486083984375, 0.09857177734375, 0.00426483154296875, 0.031951904296875, 0.37939453125, 0.257080078125, 0.059783935546875, 0.458984375, 0.1798095703125, 0.0307769775390625, 0.2017822265625, 0.0733642578125, 0.41357421875, 0.08953857421875, 0.068115234375, 0.060150146484375, 0.27099609375, 0.06634521484375, 0.43359375, 0.287109375, 0.12286376953125, 0.15185546875, 0.32861328125, 0.41015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_753ef5aef664d899756147d8c454fd16(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.478515625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4dcc7b18f37741f5370f97842125fa4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.401611328125, 0.0294952392578125, 0.023895263671875, 0.232666015625, 0.36328125, 0.0013952255249023438, 0.145263671875, 0.2841796875, 0.464599609375, 0.47998046875, 0.07183837890625, 0.30419921875, 0.438232421875, 0.478271484375, 0.302001953125, 0.12347412109375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9671d0a1316521c0c98ef1bb805daf34(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.372314453125, 0.378662109375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_85725a1063890430e862da1f3affd2f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45863866806030273, 0.17637963593006134, 0.4361848533153534, 0.10266623646020889, 0.24924509227275848, 0.01564171351492405, 0.35647276043891907, 0.3483600616455078, 0.08635961264371872, 0.06240585073828697], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d9f5082ec9df667dee84cc5de00392f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1567728966474533, 0.4856322407722473, 0.1396506279706955, 0.2113291621208191, 0.4626227915287018, 0.1088068038225174, 0.35440441966056824, 0.2101762294769287, 0.23777225613594055, 0.19244155287742615, 0.06956422328948975, 0.4203159213066101, 0.32245343923568726, 0.31366416811943054, 0.46803340315818787, 0.3223129212856293], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9947288bddbd896524197dc255248958(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16259765625, 0.186767578125, 0.28955078125, 0.320556640625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_246a3b319113573a0b234c1587a13800(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1805419921875, 0.469970703125, 0.228515625, 0.06890869140625, 0.26416015625, 0.02899169921875, 0.140625, 0.2381591796875, 0.43896484375, 0.4404296875, 0.329833984375, 0.411376953125, 0.0408935546875, 0.391845703125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fba6d5beb48a497b4250dfb2c1f647bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_022594865071b0d6fdf31c84ce0c6f7d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02542434260249138, 0.47088927030563354, 0.21049287915229797, 0.36782971024513245, 0.44625598192214966, 0.10470138490200043, 0.27412259578704834, 0.412745863199234, 0.4561995565891266, 0.037588272243738174, 0.43620234727859497, 0.2378774881362915, 0.020443305373191833, 0.41933000087738037, 0.19260534644126892, 0.2668520510196686], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6dac7f00c569c0c6e01d62bdc071eeac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ad7b3a0e534a6c3fac4105f12025a47(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1842041015625, 0.11358642578125, 0.297607421875, 0.1343994140625, 0.36767578125, 0.473388671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a20912bb4145a7f4e6b0f1d37013fe10(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e390128ba4cd06ebfda9f17ee02fba30(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a20912bb4145a7f4e6b0f1d37013fe10
    def get_inputs(self):
        return [
            paddle.to_tensor([0.296630859375, 0.1094970703125, 0.10260009765625, 0.424072265625, 0.372802734375, 0.473388671875, 0.2156982421875], dtype='float16').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_838dccbe5c0a71a4a772385cd1fe29eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2890625, 0.034423828125, 0.319091796875, 0.25048828125, 0.178466796875, 0.184326171875, 0.454833984375, 0.042266845703125, 0.2998046875, 0.391845703125, 0.215087890625, 0.09356689453125, 0.214111328125, 0.103759765625, 0.257568359375, 0.0190887451171875, 0.1505126953125, 0.1558837890625, 0.445068359375, 0.273681640625, 0.376953125, 0.433837890625, 0.327392578125, 0.376953125, 0.369873046875, 0.11175537109375, 0.12298583984375, 0.3115234375, 0.374755859375, 0.19873046875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_460bd4720022f20ad7d43e3bacfa14c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4423828125, 0.0121002197265625, 0.39990234375, 0.49169921875, 0.038543701171875, 0.1412353515625, 0.4072265625, 0.0794677734375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f6988adcd86bb52bda84375788fac524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2836a7c2a45ba80e537659b19a0887e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f6988adcd86bb52bda84375788fac524
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f93312e42d1c92798ec91f356b71d869(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17720334231853485, 0.015378558076918125, 0.17212815582752228, 0.34560272097587585, 0.13732661306858063, 0.4460025131702423, 0.049443311989307404, 0.319338858127594, 0.21711963415145874, 0.011187592521309853, 0.31700360774993896, 0.3509873151779175, 0.27923956513404846, 0.3920729458332062], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_663edad2ac3f63a4fcf47d98bbe06918(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07787870615720749, 0.4278131425380707, 0.15589964389801025, 0.03171374648809433, 0.35821279883384705, 0.06264280527830124, 0.12047978490591049, 0.4942661225795746, 0.1212739422917366, 0.3624512851238251, 0.34598326683044434, 0.4078487753868103, 0.3600040078163147, 0.16913488507270813, 0.275952011346817, 0.20992358028888702, 0.4490901231765747, 0.048361387103796005, 0.40321314334869385, 0.23603928089141846, 0.49728840589523315, 0.48597681522369385, 0.47597938776016235, 0.2106257677078247], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe6cf88759abe6143cc10f355f13eb2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4851949214935303], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25bf759cae2b0c2042402ad64d74203f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1925390660762787, 0.11741027235984802, 0.14661172032356262, 0.17457279562950134, 0.48513898253440857, 0.421144962310791, 0.2655392587184906, 0.22441856563091278, 0.449613094329834, 0.2984084486961365, 0.18085643649101257, 0.47109460830688477, 0.17369239032268524, 0.10338716208934784, 0.1896045058965683, 0.10522031038999557, 0.33751487731933594, 0.4497099816799164, 0.3765980899333954, 0.07363523542881012, 0.33686724305152893, 0.24203157424926758, 0.020954683423042297, 0.12657961249351501], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4eae75b029580f095c33b7b2b566972a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12796355783939362], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3534fe129d6982ca7d00e058078e70c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12190000712871552, 0.22069385647773743], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_79bf255b060f92b68297c8ba64d38e2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2605077922344208, 0.386696994304657, 0.18189193308353424, 0.08475220948457718, 0.07602985203266144, 0.14521129429340363], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0eb3be049610d367e03c38f239049125(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39892578125, 0.460693359375, 0.267578125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c449864258190df0b458df10e46b2641(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28450527787208557], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00b4e2786b00d660e8cbb83507aef028(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.271800696849823, 0.46791404485702515, 0.3358664810657501, 0.2350281924009323, 0.21294449269771576, 0.14999625086784363, 0.2559949457645416, 0.24449999630451202, 0.43659818172454834, 0.11618596315383911, 0.023438185453414917, 0.20482668280601501, 0.15442688763141632, 0.17650137841701508, 0.1415642946958542, 0.06597626209259033, 0.4563620984554291, 0.32340818643569946, 0.28460389375686646, 0.3716448247432709, 0.24926649034023285, 0.01842058263719082, 0.02712978795170784, 0.03866935148835182, 0.25777798891067505], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c3fedc2d4e2e808d1b8bfece3e13bf0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.210693359375, 0.226806640625, 0.468017578125, 0.45703125, 0.1824951171875, 0.446044921875, 0.1468505859375, 0.2186279296875, 0.224365234375, 0.09716796875, 0.27099609375, 0.2088623046875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_710537e6fd07769b9edfb9404273a225(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10498046875, 0.253662109375, 0.447998046875, 0.4873046875, 0.011810302734375, 0.4052734375, 0.2205810546875, 0.196533203125, 0.3935546875, 0.446044921875, 0.03240966796875, 0.273193359375, 0.1968994140625, 0.2208251953125, 0.331298828125, 0.32275390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_367ed9959b0ec3eee8aa893f3e63df4f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33447265625, 0.0687255859375, 0.4140625, 0.30419921875, 0.2841796875, 0.0274658203125, 0.212890625, 0.1309814453125, 0.417236328125, 0.45751953125, 0.0784912109375, 0.2119140625, 0.388671875, 0.094482421875, 0.44140625, 0.269775390625, 0.2222900390625, 0.11529541015625, 0.0885009765625, 0.11505126953125, 0.22412109375, 0.2022705078125, 0.450439453125, 0.36669921875, 0.1790771484375, 0.1610107421875, 0.10516357421875, 0.3505859375, 0.1209716796875, 0.367919921875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fcace4917e5682a4d4d177bd67f84b9f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1310422271490097, 0.11102258414030075, 0.14489471912384033, 0.3027079403400421, 0.05353716388344765, 0.2782094180583954, 0.24743396043777466, 0.26423048973083496, 0.04992920160293579, 0.04294468089938164, 0.3825609087944031, 0.4225684702396393, 0.42189285159111023, 0.11899980902671814, 0.10056260228157043, 0.3458140790462494], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8862500bd16a550b3f98be5b96f2c73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1374572217464447, 0.05011047050356865, 0.47202447056770325, 0.46249818801879883, 0.38217154145240784, 0.41852810978889465, 0.40819263458251953, 0.015168252401053905, 0.4944360852241516, 0.4749079644680023, 0.3720303773880005, 0.09072671830654144, 0.03508296608924866, 0.2010745108127594, 0.1253574937582016, 0.3213140666484833, 0.4866486191749573, 0.2778804898262024, 0.20578807592391968, 0.4832966923713684, 0.1437472254037857, 0.22651202976703644, 0.033458080142736435, 0.23897932469844818], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c6da2a0f84814a3bbbf4019b714f502(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1788330078125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bef33b65b291ff9d16a63edab15a03e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.167724609375, 0.25537109375, 0.3134765625, 0.313232421875, 0.1929931640625, 0.282470703125, 0.325439453125, 0.05517578125, 0.28125, 0.2159423828125, 0.45361328125, 0.1973876953125, 0.25732421875, 0.185302734375, 0.1876220703125, 0.45556640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5df6c4265807db6bcc8d21b31e6d22b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04148776829242706, 0.002035518642514944, 0.3246251046657562, 0.4597688913345337, 0.4574914574623108, 0.3506662845611572, 0.1828368753194809, 0.1677933633327484], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_719b0fe264e9986f5e8aa4b075fc6377(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64da93602daa6cf543369e73e795beae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54f75997e93c27e26447d0ba1f5eaeda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64da93602daa6cf543369e73e795beae
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76507a1b521dcfd5642848299dc9dd1b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd4a04e9dcca0a4b34807f5c193c84f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76507a1b521dcfd5642848299dc9dd1b
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a6eeb081cd5c582e1d58ca7d275a607(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f201c4433f3c114e96a627219af0bae9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0614013671875, 0.28662109375, 0.357177734375, 0.4697265625, 0.100341796875, 0.26416015625, 0.00130462646484375, 0.46240234375, 0.2001953125, 0.1868896484375, 0.051544189453125, 0.21923828125, 0.189453125, 0.488525390625, 0.1038818359375, 0.19189453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_262a1ef7a64a94918c41fa4304ad1b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.328125, 0.11627197265625, 0.271484375, 0.0290069580078125, 0.35986328125, 0.398193359375, 0.18359375, 0.302001953125, 0.025848388671875, 0.486083984375, 0.073974609375, 0.44970703125, 0.39306640625, 0.141845703125, 0.0380859375, 0.0914306640625, 0.3330078125, 0.28173828125, 0.034210205078125, 0.2352294921875, 0.1275634765625, 0.389404296875, 0.26904296875, 0.341796875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_251c0c3beba05c01437a1f849feafee5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10105355083942413, 0.20821532607078552, 0.32370513677597046, 0.3773247301578522, 0.0018777460791170597, 0.06070736423134804, 0.10207248479127884, 0.0014825097750872374, 0.37998220324516296, 0.21637780964374542, 0.42538368701934814, 0.3981461822986603, 0.25559478998184204, 0.05937856435775757, 0.4600844979286194, 0.00045165844494476914, 0.157980814576149, 0.4512973129749298, 0.3615669310092926, 0.3757185935974121, 0.1498669981956482, 0.2876986563205719, 0.3900367021560669, 0.10957411676645279], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe31cd7d35eef378ba22a72e57aea6e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45455488562583923, 0.2608261704444885, 0.4583360552787781, 0.4400777518749237, 0.43594735860824585, 0.26370447874069214, 0.3666488528251648, 0.14540459215641022, 0.4577109217643738, 0.2301601767539978], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e8d4f4f6e8e7bc6bed3892062068048(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.064453125, 0.33056640625, 0.1453857421875, 0.271484375, 0.3291015625, 0.260498046875, 0.377197265625, 0.06719970703125, 0.282470703125, 0.493408203125, 0.3544921875, 0.490234375, 0.10150146484375, 0.1295166015625, 0.037628173828125, 0.131591796875, 0.251708984375, 0.31982421875, 0.241943359375, 0.431884765625, 0.48779296875, 0.274658203125, 0.453369140625, 0.413330078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_701427004926d049986cfd5fffdbec2f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_01d6f22d794f4695de99a51464761ec1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_358228dfcad02c78d06faa8f561bccc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_c2663d99f6f518ce36630a9f9f35802e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4ff470d8f8e2350fe419dacf3e6760b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_0a78a9c91d25d66008423e7d82e44a14(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_23058785eccb6a6caa30b5b3fddf4c4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_61b22eaa0d4eecdb76251ee9ed5109bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_054bec9c87d83a07587fa079a7032b0b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_401eed822e3968c75ff4dfebd8abb5f1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a0ca5377ce1eae493dce3069e6a9146b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bc64d890c7f2b9184b1110ca90dd51c4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bfca4bd32cbc4ec1edcec3c482924c22(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4e7d488259349ce2de4748cbb5aca91b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_02134e8293b2caa197d34ecd0c82b64f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_99db288df05fe60e2ba2083c833c3832(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_03f501535c8e6a2fdd956cd0332efb52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_989c252fd4794966f21dbb118705a92a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_83346459f3d31a00e5264c469259215f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_7a2c37763cd54738516fce73184f2a2b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_8ff280ddb62c53196715d5d0eea5e0aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_1bf07801a793b77edadba595542a9761(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_111d43f9efa9c16b156439ac6d03e962(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_fb096a8cfe2c4e417c05d0c2183173e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_1ecd35a1bff1ae7fe858647cc7ee9367(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_06ba996a6b88813331f493a40b5ea446(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_42829ccaaeb262da62067e363b816f25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_98fe80f164803e504d36b49d6f728999(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None




if __name__ == '__main__':
    unittest.main()