import os
os.environ['FLAGS_cinn_new_group_scheduler'] = '1'
os.environ['FLAGS_group_schedule_tiling_first'] = '1'
os.environ['FLAGS_enable_pir_api'] = '1'
os.environ['FLAGS_cinn_bucket_compile'] = '1'
import sys
import unittest
import numpy as np
from dataclasses import dataclass
import typing as t
import itertools

@dataclass
class Stage:
    name: str
    env_vars: t.Dict[str, str]

cinn_stages = [
    Stage(
        name="dynamic_to_static",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=False,
            FLAGS_prim_enable_dynamic=False,
        ),
    ),
    Stage(
        name="prim",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
        ),
    ),
    Stage(
        name="infer_symbolic",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=False,
            FLAGS_check_infer_symbolic=True,
        ),
    ),
	Stage(
        name="frontend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=True,
        ), 
    ),
    Stage(
        name="backend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=False,
        ), 
    ),
]

def GetCinnStageByName(name):
    for stage in cinn_stages:
        if stage.name == name:
            return stage
    return None

def GetCurrentCinnStage():
    name = os.getenv('PADDLE_DEBUG_CINN_STAGE_NAME')
    if name is None:
        return None
    stage_names = [stage.name for stage in cinn_stages]
    assert name in stage_names, (
        f"PADDLE_DEBUG_CINN_STAGE_NAME should be in {stage_names}"
    )
    return GetCinnStageByName(name)

def GetPrevCinnStage(stage):
    for i in range(1, len(cinn_stages)):
        if stage is cinn_stages[i]:
            return cinn_stages[i - 1]
    return None

def IsCinnStageEnableDiff():
    value = os.getenv('PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF')
    enabled = value in {
        '1',
        'true',
        'True',
    }
    if enabled:
        assert GetCurrentCinnStage() is not None
    return enabled

def GetExitCodeAndStdErr(cmd, env):
    env = {
        k:v
        for k, v in env.items()
        if v is not None
    }
    import subprocess
    result = subprocess.run(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        env=env,
    )
    return result.returncode, result.stderr

def GetStageExitCodeAndStdErr(stage):
    return GetExitCodeAndStdErr(
        [sys.executable, __file__],
        env=dict(
            PADDLE_DEBUG_CINN_STAGE_NAME=stage.name,
            PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF='0',
            PYTHONPATH=os.getenv('PYTHONPATH'),
            ATHENA_ENABLE_TRY_RUN="False",
        ),
    )

def AthenaTryRunEnabled():
    return os.getenv('ATHENA_ENABLE_TRY_RUN') not in {
        "0",
        "False",
        "false",
        "OFF"
    }

def GetNeedSkipAndSkipMessage():
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    if not IsCinnStageEnableDiff():
        return False, ""
    last_stage = GetPrevCinnStage(current_stage)
    if last_stage is None:
        return False, ""
    exitcode, stderr = GetStageExitCodeAndStdErr(last_stage)
    if exitcode != 0:
        return True, "last stage failed."
    return False, ""

def GetCurrentStageTryRunExitCodeAndStdErr():
    if not AthenaTryRunEnabled():
        return False, ""
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    return GetStageExitCodeAndStdErr(current_stage)

def SetDefaultEnv(**env_var2value):
    for env_var, value in env_var2value.items():
        if os.getenv(env_var) is None:
            os.environ[env_var] = str(value)

SetDefaultEnv(
    PADDLE_DEBUG_CINN_STAGE_NAME="backend",
    PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF=False,
    PADDLE_DEBUG_ENABLE_CINN=True,
    FLAGS_enable_pir_api=True,
    FLAGS_prim_all=True,
    FLAGS_prim_enable_dynamic=True,
    FLAGS_use_cinn=False,
    FLAGS_check_infer_symbolic=False,
    FLAGS_enable_fusion_fallback=False,
)

import paddle

def SetEnvVar(env_var2value):
    for env_var, value in env_var2value.items():
        os.environ[env_var] = str(value)
    paddle.set_flags({
        env_var:value
        for env_var, value in env_var2value.items()
        if env_var.startswith('FLAGS_')
    })

if GetCurrentCinnStage() is not None:
    SetEnvVar(GetCurrentCinnStage().env_vars)

def GetEnvVarEnableJit():
    enable_jit = os.getenv('PADDLE_DEBUG_ENABLE_JIT')
    return enable_jit not in {
        "0",
        "False",
        "false",
        "OFF",
    }

def GetEnvVarEnableCinn():
    enable_cinn = os.getenv('PADDLE_DEBUG_ENABLE_CINN')
    if enable_cinn is None:
        return True
    return enable_cinn not in {
        "0",
        "False",
        "false",
        "OFF",
    }


def GetTolerance(dtype):
    if dtype == np.float16:
        return GetFloat16Tolerance()
    if dtype == np.float32:
        return GetFloat32Tolerance()
    return 1e-6

def GetFloat16Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT16_TOL'))
    except:
        return 1e-3

def GetFloat32Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT32_TOL'))
    except:
        return 1e-6

def IsInteger(dtype):
    return np.dtype(dtype).char in np.typecodes['AllInteger']

def ApplyToStatic(net, use_cinn):
    build_strategy = paddle.static.BuildStrategy()
    build_strategy.build_cinn_pass = use_cinn
    return paddle.jit.to_static(
        net,
        input_spec=net.get_input_spec(),
        build_strategy=build_strategy,
        full_graph=True,
    )

class InstanceTrait:

    @classmethod
    def instance(cls):
        if cls.instance_ is None:
            cls.instance_ = cls()
        return cls.instance_

    @classmethod
    def static_instance_with_cinn(cls):
        if cls.static_instance_with_cinn_ is None:
            cls.static_instance_with_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=True
            )
        return cls.static_instance_with_cinn_

    @classmethod
    def static_instance_without_cinn(cls):
        if cls.static_instance_without_cinn_ is None:
            cls.static_instance_without_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=False
            )
        return cls.static_instance_without_cinn_


class CinnTestBase:

    def setUp(self):
        paddle.seed(2024)
        self.prepare_data()

    def _test_entry(self):
        dy_outs = self.train(use_cinn=False)
        cinn_outs = self.train(use_cinn=GetEnvVarEnableCinn())

        for cinn_out, dy_out in zip(cinn_outs, dy_outs):
          if type(cinn_out) is list and type(dy_out) is list:
            for x, y in zip(cinn_out, dy_out):
              self.assert_all_close(x, y)
          else:
            self.assert_all_close(cinn_out, dy_out)

    def train(self, use_cinn):
        if GetEnvVarEnableJit():
            net = self.prepare_static_net(use_cinn)
        else:
            net = self.prepare_net()
        paddle.seed(2024)
        out = net(*self.inputs)
        return out
    
    def prepare_data(self):
        self.inputs = self.get_inputs()
        for input in self.inputs:
            input.stop_gradient = True

    def prepare_net(self):
        return self.get_test_class().instance()

    def prepare_static_net(self, use_cinn):
        if use_cinn:
            return self.get_test_class().static_instance_with_cinn()
        else:
            return self.get_test_class().static_instance_without_cinn()

    def assert_all_close(self, x, y):
        if (hasattr(x, "numpy") and hasattr(y, "numpy")):
            x_numpy = x.numpy()
            y_numpy = y.numpy()
            assert x_numpy.dtype == y_numpy.dtype
            if IsInteger(x_numpy.dtype):
                np.testing.assert_equal(x_numpy, y_numpy)
            else:
                tol = GetTolerance(x_numpy.dtype)
                np.testing.assert_allclose(x_numpy, y_numpy, atol=tol, rtol=tol)
        else:
            assert x == y





need_skip, skip_message = GetNeedSkipAndSkipMessage()
try_run_exit_code, try_run_stderr = GetCurrentStageTryRunExitCodeAndStdErr()
class TestTryRun(unittest.TestCase):
    def test_panic(self):
        if not AthenaTryRunEnabled():
            return
        if try_run_exit_code == 0:
            # All unittest cases passed.
            return
        if try_run_exit_code > 0:
            # program failed but not panic.
            return
        # program panicked.
        kOutputLimit = 65536
        message = try_run_stderr[-kOutputLimit:]
        raise RuntimeError(f"panicked. last {kOutputLimit} characters of stderr: \n{message}")
class PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1788bee2b0184e6648ed4065d195f60c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c380f56e3c450ff942683a9fb13de58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af9e19547ec2a28cee8c3952a85f0512(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3271028697490692, 0.42141714692115784, 0.2461729347705841, 0.2918940484523773, 0.030791619792580605, 0.24453264474868774, 0.4756605327129364, 0.3191494047641754, 0.16495653986930847, 0.398355633020401, 0.3645930290222168, 0.35779038071632385, 0.3627999424934387, 0.3436409533023834, 0.33678966760635376, 0.02896115556359291, 0.1397242397069931, 0.39883047342300415, 0.30226290225982666, 0.21543024480342865, 0.0004528953577391803, 0.11357982456684113, 0.033971887081861496, 0.27483704686164856, 0.11060813069343567], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8907027e1722275a0f8ac1bd491d6529(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6aca1ae391a7fd9925f852a33ddbbbc1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8907027e1722275a0f8ac1bd491d6529
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2864e061d373c1f57649883b519d2d25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8d4398dd34f7e9193cad0c48addc178(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2864e061d373c1f57649883b519d2d25
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf7e9b59f3e4618e1c91821b9bcd5142(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1207025b2416dc423736d9776a3021f7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93f067a2008ed5a9e4398890d89ecfa8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1207025b2416dc423736d9776a3021f7
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d6335c00c45156738c0ff2e61111ea9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_040e6fbfa405b001dba7b80ea22e51c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d3d25914804b3e80ce958cd92df52d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a0b65ecd4fd986024e93753bfd3c82c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f49d8cb88e0c825acc2d12f6c90e3bbc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9962276da9ce745db32c85ab2c856c4a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ed42ede22da9d554c959704486bb590(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9962276da9ce745db32c85ab2c856c4a
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75fcbdc811abdfe6a4bd72db18847b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2100f43cedfc5ee218435a88559c3f5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45583778619766235, 0.008747951127588749, 0.28325334191322327, 0.17284299433231354, 0.44668740034103394, 0.4316466748714447, 0.42756369709968567, 0.2557156980037689, 0.19674649834632874, 0.13883069157600403, 0.36308616399765015, 0.4911988079547882, 0.43136560916900635, 0.2767798900604248, 0.2953028082847595, 0.39949530363082886, 0.43555399775505066, 0.2066013067960739, 0.10504031181335449], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d20619502e57f68fea535ebaca4b9970(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f46c2b4ddf325ecbdfb086bde22ac83d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d20619502e57f68fea535ebaca4b9970
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8b94dd95189364001a79065ef3b68b2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c2774ac551e4196d2b2700b0f4457e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15983189642429352, 0.21445094048976898, 0.30672159790992737, 0.36247703433036804, 0.39451682567596436, 0.3169409930706024, 0.15527591109275818, 0.4585237503051758, 0.1428205817937851, 0.2099614143371582, 0.418809711933136, 0.34512126445770264, 0.47560566663742065, 0.21142305433750153, 0.45802152156829834, 0.19297026097774506, 0.11744830012321472, 0.3573782444000244, 0.3718077838420868, 0.2894071340560913, 0.3741054832935333, 0.4649015963077545, 0.39885199069976807, 0.1459885537624359], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36593d9b098b0e4cc5f51beb60666b8e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7f928de2838bc37868bf977a3ac7a18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36593d9b098b0e4cc5f51beb60666b8e
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2958d89fe34de2fdd330504b1c7ed10(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd2cb4290d95910762c4c4024dddd86f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48f9b993ff699180fbc23cc191e20a8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14255fb370c4cc952f46f476bbf8310c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34706544876098633, 0.354500412940979, 0.03786783292889595, 0.3783652186393738, 0.007737571839243174, 0.46939194202423096, 0.33197706937789917, 0.12167567759752274, 0.45114895701408386, 0.061563413590192795, 0.1403135061264038, 0.21573999524116516, 0.3955940008163452, 0.28754428029060364, 0.4779700040817261, 0.28260886669158936, 0.26142457127571106, 0.07513990998268127, 0.4872272312641144, 0.1223837286233902], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3959c93179c104dabc01a5615673b38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1435ec68106ada9b09690ff610301a0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f209034d026402df7c7a6baa6608b033(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1435ec68106ada9b09690ff610301a0a
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fba68e146819173c75568dbea1901cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c08cd2a36b86f1a00021e8f3d420ad3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2681120038032532, 0.43960142135620117, 0.20935286581516266, 0.13933947682380676, 0.3990621268749237, 0.2470030039548874, 0.05417995899915695, 0.36647891998291016, 0.0785064548254013, 0.020219596102833748, 0.13392028212547302, 0.3829497694969177, 0.4536823034286499, 0.1336812973022461], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f4285b5c12e897bb44986ddf6ef187a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_310618c00d619831e3f82c908e2c517a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_823a5987e415ca2993342734e38f41d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_310618c00d619831e3f82c908e2c517a
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a7703647190228da56677428840df221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a332fe32ef5d9c267f89a22a5636c229(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a7703647190228da56677428840df221
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76fd18bf5f4404db65736c706e655b76(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba62f05a9a4f63835115ed202eb9e5cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76fd18bf5f4404db65736c706e655b76
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_17891957112386b62bd55365629fe27e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c97e623509268f91f66b728b4c7ad30d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_17891957112386b62bd55365629fe27e
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4506d7b50329fce3d573b3e13065738e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fae4caeac92453f39a0dafbfcec3cab5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.246337890625, 0.038787841796875, 0.07501220703125, 0.018768310546875, 0.315185546875, 0.3369140625, 0.35302734375, 0.230224609375, 0.27587890625, 0.100830078125, 0.5, 0.11578369140625, 0.310302734375, 0.1865234375, 0.140869140625, 0.32275390625, 0.34619140625, 0.203857421875, 0.1611328125, 0.2225341796875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a95afc5eb47d95b3bebf49e9f7e01db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_061ea1a545e58f525f09bad4f3abed42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1dab80e2a68dc29685d19543500b12d8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f83fa518685c319f171748be0913ad7c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1dab80e2a68dc29685d19543500b12d8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c6e486a5615fb35f59ab84c186179de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5019dfac401ad8840745540dde57a5a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c6e486a5615fb35f59ab84c186179de
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_74c01f6125a72d81ae6d8adacc75ced0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21510611474514008, 0.42732641100883484, 0.25039365887641907, 0.28663986921310425, 0.12159674614667892, 0.2724835276603699, 0.29967954754829407, 0.25211936235427856], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e95260de6333db167b544fa6886878d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5cb566008637fe80b0257fecbd0657c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e95260de6333db167b544fa6886878d
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_be518b7e3de955eef05f038300ab76e8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3aaa3e4c3e6ee497cac5e4783689127c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.489501953125, 0.47119140625, 0.391845703125, 0.30859375, 0.40234375, 0.10638427734375, 0.494140625, 0.031951904296875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b7e4591abf52fc6ffc1d47800ff6537(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23563359677791595, 0.01393650472164154, 0.20017430186271667, 0.46746423840522766, 0.13535569608211517, 0.493337482213974, 0.044712357223033905, 0.3704719841480255, 0.1877877414226532, 0.20351828634738922, 0.28868094086647034, 0.09445687383413315, 0.20195958018302917, 0.40704235434532166, 0.25620487332344055, 0.011650947853922844], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_56d15c7701954747083eaa309d460f5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e95ef843643e8ae38693ac5780b094df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_56d15c7701954747083eaa309d460f5f
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a14e1f98657e5574d8bd9a7d324838b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07a90c9fdc13a9ec49463f6a83d1b48b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.431396484375, 0.10455322265625, 0.2025146484375, 0.1279296875, 0.38330078125, 0.21630859375, 0.45166015625, 0.34619140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2ec7cf2ec74467236a0395f03e91fc8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05499267578125, 0.0657958984375, 0.00447845458984375, 0.280029296875, 0.0625, 0.09368896484375, 0.34912109375, 0.357666015625, 0.2059326171875, 0.0170745849609375, 0.37109375, 0.215087890625, 0.32568359375, 0.327880859375, 0.44775390625, 0.36865234375, 0.3291015625, 0.373291015625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c485ec025d6486261cccbc00e5629efc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25bd063daed0e2f412e215aeb00b42a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c485ec025d6486261cccbc00e5629efc
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a7f449863ebf05b0288ede43944d502(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a66994c8cfb055e8cafee820dfe48e66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a7f449863ebf05b0288ede43944d502
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed62f7e4e4ce11f311803887a3e2f95a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d05b99514dcebeb8099fd0de5a572fde(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2096860259771347, 0.003912083804607391, 0.05476532131433487, 0.03571492061018944, 0.006574236787855625, 0.13417208194732666, 0.2820621132850647, 0.28098735213279724], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9650e0e03ba132d978beacb0daa67054(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8457be8ff96f735c2f8bbefb47f69996(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.281005859375, 0.376708984375, 0.05810546875, 0.0038051605224609375, 0.1282958984375, 0.343017578125, 0.26611328125, 0.0308074951171875, 0.476806640625, 0.208740234375, 0.0255889892578125, 0.1859130859375, 0.059783935546875, 0.1669921875, 0.10076904296875, 0.2039794921875, 0.2423095703125, 0.251708984375, 0.1839599609375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31232cbdee9766d4562a30dbd94eef49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bdacde2836f98446b9906b50142ce07c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba2e2861851cf732031cab97c0a25e69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bdacde2836f98446b9906b50142ce07c
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22a13fcfc74c8cccef0dab82a210552e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e013344503775f7c23fe4188d0e33db9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e70dd51951f06b7a54630ae5897eeb88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e013344503775f7c23fe4188d0e33db9
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a16667a0dfeb13ce7fb5c9bf8060052c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04557406157255173, 0.1714135706424713, 0.06474565714597702, 0.27839910984039307, 0.0861019492149353, 0.33587923645973206, 0.3848743140697479, 0.18078738451004028, 0.030870411545038223, 0.00018439145060256124, 0.4018518626689911, 0.3705049455165863, 0.30119526386260986, 0.01178289856761694, 0.39807650446891785, 0.4519578516483307], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c031ec8aa0b62c248c9f601194bc0235(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47921133041381836, 0.17932221293449402, 0.11050046980381012, 0.40501338243484497, 0.32421576976776123, 0.1532193124294281, 0.4012618958950043, 0.14582036435604095, 0.23750996589660645, 0.1590421348810196, 0.279080331325531], dtype='float32').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_019bfe5d381a1539bcf2788d7658891d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07269287109375, 0.41552734375, 0.265869140625, 0.193359375, 0.07330322265625, 0.01374053955078125, 0.189697265625, 0.44384765625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90ca54ec813d2dbc0135ae05bb92682b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69b892783c91e76422e13114ead53397(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c72a932085a2184db07de3a959bfcf00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69b892783c91e76422e13114ead53397
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_253085d6b88517595929786b5a1a32bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.347900390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2047b574f0c6bf637e75046caaabdde(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26502859592437744, 0.38616788387298584, 0.02576480805873871, 0.1824059933423996, 0.15343602001667023, 0.4520927667617798, 0.43783050775527954, 0.2984201908111572], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6295a2dc69caca65eba56abec5ec0683(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f2a0080962a3d0eef74a7d9e859f3d2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03625106438994408], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c10de201bce3f87606322999496df08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30f62c0dc25f68707b6b6bb571e734c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04100629314780235, 0.31005948781967163, 0.12818817794322968, 0.3804400861263275, 0.06010739505290985, 0.2811751663684845, 0.341748982667923, 0.47525253891944885, 0.343076229095459, 0.49104148149490356, 0.16339053213596344, 0.08946012705564499, 0.12309327721595764, 0.08478818833827972, 0.1537122279405594, 0.442065954208374, 0.4995885193347931, 0.1849902868270874, 0.08882357180118561, 0.27498680353164673, 0.18025913834571838, 0.042545098811388016, 0.012394487857818604, 0.32293376326560974], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_191dc03200364a7a8918b252bce8eee8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab7a4d4d9c6e80b06b6a025c54a39408(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33544921875, 0.328125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b1c861e0471ade83d0711ce6690836e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4172603189945221, 0.26249271631240845, 0.14326873421669006, 0.4977559745311737, 0.28011348843574524, 0.06689542531967163, 0.2608984410762787, 0.16355478763580322, 0.15440523624420166, 0.15069043636322021, 0.3598305284976959, 0.00986636895686388, 0.029845716431736946, 0.3739493191242218, 0.13908281922340393, 0.195123553276062], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f04a19d9475d0ae51b8ae8787a38504a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_209804910a7e121e0147cb9b27884896(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8152c810c9148e484cb2102cdbddda56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_209804910a7e121e0147cb9b27884896
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3206a566b89b35f7206094ddff6b0b2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2095947265625, 0.41259765625, 0.28369140625, 0.372314453125, 0.49658203125, 0.29931640625, 0.3310546875, 0.421875, 0.28857421875, 0.1568603515625, 0.2666015625, 0.10601806640625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c3f2554b0d2e33dc87eb61efe4e2e57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93afa811994c197405d5b535a411202f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a6e37ce79cd4a92ed30d08901d65cb97(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2357177734375, 0.065185546875, 0.28125, 0.0665283203125, 0.139892578125, 0.1298828125, 0.273681640625, 0.38330078125, 0.058685302734375, 0.1585693359375, 0.1376953125, 0.469482421875, 0.2022705078125, 0.373046875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a0c9f56f0498b8e8ef4b74e8c3542b37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83ade4a9304be412942b6e1280cf2e36(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b723a7a28bfc7fed7de7d6e3ca44d772(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83ade4a9304be412942b6e1280cf2e36
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68d8d908c50b752522d09f347f3bfbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0874cf81d85d28b952be2932e7836f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52f51e21e13f697968dd85e97172f23a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39d034ee1c9102b923e43dd7e39c2983(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_136f8d9a810061abc4321e742542cb26(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c32436b694f42b1a17e3dfad481e623(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_136f8d9a810061abc4321e742542cb26
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90909214a1b61c76e442d8ce45dbb9d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.256591796875, 0.1439208984375, 0.2333984375, 0.38623046875, 0.40673828125, 0.330078125, 0.10125732421875, 0.463134765625, 0.354736328125, 0.026092529296875, 0.1971435546875, 0.3974609375, 0.1732177734375, 0.00328826904296875, 0.489013671875, 0.19775390625, 0.11541748046875, 0.1036376953125, 0.00945281982421875, 0.44580078125, 0.1854248046875, 0.272216796875, 0.04180908203125, 0.289794921875, 0.05963134765625, 0.478515625, 0.303466796875, 0.40380859375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d8157971fc7e20d1a1649847b17550f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a5810d25d51f6f10d052d8f7eaaaecc5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364990234375, 0.2578125, 0.1876220703125, 0.134521484375, 0.206298828125, 0.492431640625, 0.1732177734375, 0.459716796875, 0.3017578125, 0.03875732421875, 0.492431640625, 0.07073974609375, 0.055999755859375, 0.331787109375, 0.450927734375, 0.360107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b17ac827aa037e3c431fa3f354115491(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1bfae82ea2d944cc57ee433ccd890498(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16552734375, 0.004482269287109375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cef30e32ff696bc0d55c13b72cf2d2f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09023449569940567, 0.4049240052700043], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e5262ed39ae5effcb6cff9d9e541323(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da33035dd57ffbdef17107ae2aea5194(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12764589488506317, 0.30755549669265747, 0.15330924093723297, 0.41192731261253357, 0.3970332741737366, 0.47404730319976807, 0.4474819004535675, 0.39328867197036743, 0.25742360949516296, 0.29455775022506714, 0.4830940365791321, 0.4587555527687073, 0.42899706959724426, 0.037220291793346405, 0.4901790916919708, 0.29571837186813354, 0.04404039308428764, 0.15380948781967163, 0.39119458198547363, 0.4695301055908203, 0.3732894957065582, 0.33065855503082275, 0.18074236810207367, 0.04167155176401138], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_365cb44e401002334716f04a9c1b4b75(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2841796875, 0.44384765625, 0.0355224609375, 0.1646728515625, 0.05078125, 0.47314453125, 0.47802734375, 0.17333984375, 0.276123046875, 0.10968017578125, 0.2320556640625, 0.34521484375, 0.2890625, 0.204345703125, 0.183837890625, 0.0071563720703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dee707c97fd8f5c383347684498998bf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24838042259216309], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54fb167a13f0a86a779075b5c01a1baa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.334228515625, 0.31298828125, 0.19970703125, 0.213623046875, 0.419189453125, 0.363525390625, 0.350341796875, 0.01192474365234375, 0.355712890625, 0.2298583984375, 0.37451171875, 0.344482421875, 0.0435791015625, 0.10211181640625, 0.1669921875, 0.164794921875, 0.341796875, 0.364501953125, 0.2744140625, 0.476318359375, 0.450439453125, 0.32958984375, 0.0258026123046875, 0.0186004638671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f562b0c05658c4452fda7de5aa6dd72f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_28328fab5925173473a90c5618c8b7bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5cd2f37d1246fed00ad8a1139cabd7e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_28328fab5925173473a90c5618c8b7bf
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_222c339fd4d1817a73fb27e327413387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff21f04216eaae7ca4f9832715a51f24(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_012f19189650dad87be60335a3a8882e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bb48ed47d99105fb3876eb192ed56704(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8415d2bc894ea3989dd098e5171f09d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bb48ed47d99105fb3876eb192ed56704
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e617f28e49f3f2f6e9a7782291d99dba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3010338842868805, 0.4737429916858673, 0.31500881910324097, 0.2913210988044739, 0.24133998155593872, 0.24662500619888306, 0.22794674336910248, 0.4565643072128296, 0.04327204450964928, 0.49664974212646484, 0.46223026514053345, 0.22535237669944763, 0.17357642948627472, 0.4694322645664215, 0.328864723443985, 0.06856122612953186, 0.38196152448654175, 0.4645146429538727, 0.42208635807037354, 0.40491658449172974, 0.44438570737838745, 0.4249876141548157, 0.3290403187274933, 0.050324540585279465], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e429ba311317de0da7ead611ca98ed0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3430ff81f66cc4a5356a89e385f3f645(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e429ba311317de0da7ead611ca98ed0
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6218803822e514761b8d7d9cdaa5ae4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09417724609375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a36644d7d9f0d2ea6f778b96b81806(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2062c4a97c908160b3592fb381a9c2a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1832275390625, 0.0285186767578125, 0.229736328125, 0.3095703125, 0.3359375, 0.255126953125, 0.2161865234375, 0.1944580078125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09d5cb408dc74de9bd752c51e54382c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2119140625, 0.2392578125, 0.1712646484375, 0.1861572265625, 0.2039794921875, 0.25390625, 0.062744140625, 0.46142578125, 0.26123046875, 0.09063720703125, 0.20751953125, 0.390625, 0.04656982421875, 0.09295654296875, 0.0237579345703125, 0.2210693359375, 0.1630859375, 0.431884765625, 0.3369140625, 0.15087890625, 0.452392578125, 0.1204833984375, 0.09698486328125, 0.38330078125, 0.417236328125, 0.413818359375, 0.365478515625, 0.257080078125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_490ec0e032cb9cc014290ddd941ccf11(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9890daf20d07c5f38fa6992ace6bdc5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_490ec0e032cb9cc014290ddd941ccf11
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6213a99911c159307238785fba3d732e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_561e016c24803f84ea14602e5c934a2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6213a99911c159307238785fba3d732e
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_47366ba000dea28308771433e1cd6306(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91520cd20b279a31055bb1bc3b3afa8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_47366ba000dea28308771433e1cd6306
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55627581f61faabb31663bb73b4bf705(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2127685546875, 0.0047149658203125, 0.20703125, 0.26904296875, 0.14990234375, 0.38037109375, 0.1270751953125, 0.46484375, 0.11700439453125, 0.337158203125, 0.35546875, 0.210205078125, 0.459716796875, 0.099609375, 0.177001953125, 0.07550048828125, 0.4755859375, 0.342529296875, 0.052581787109375, 0.070068359375, 0.17724609375, 0.397216796875, 0.1505126953125, 0.305419921875, 0.213623046875, 0.32177734375, 0.3359375, 0.2841796875, 0.264892578125, 0.12066650390625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_77a643f7378d55f0f985cd226f1364aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3bdcaf5b6d6c0e81e03bfd4e4348c4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_77a643f7378d55f0f985cd226f1364aa
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aafad837a2964a5fe344a61e28fc1f26(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48876953125, 0.35986328125, 0.0999755859375, 0.325439453125, 0.08673095703125, 0.251708984375, 0.36962890625, 0.058685302734375, 0.400146484375, 0.439697265625, 0.467529296875, 0.437255859375, 0.370361328125, 0.208251953125, 0.221923828125, 0.1734619140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4b1e249f80495a5903ba88201e38a7e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.385986328125, 0.333251953125, 0.334716796875, 0.06793212890625, 0.1910400390625, 0.1673583984375, 0.32568359375, 0.40185546875, 0.4775390625, 0.28759765625, 0.400634765625, 0.08123779296875, 0.311279296875, 0.351806640625, 0.0887451171875, 0.267333984375, 0.3564453125, 0.49755859375, 0.2490234375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a77431f9f1493f6f02b0250ae8d45521(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29953333735466003, 0.14048199355602264, 0.09503817558288574, 0.27777937054634094, 0.03954518586397171, 0.2302182912826538, 0.21525782346725464, 0.15632948279380798, 0.26107051968574524, 0.3730330467224121, 0.3565206229686737, 0.23681162297725677, 0.1321362555027008, 0.22117017209529877, 0.17099304497241974, 0.48302316665649414], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab92ba270100f625e64a660ea8eae72e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd1df9ff6539d495984fda2360e0d729(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab92ba270100f625e64a660ea8eae72e
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_064c55c9db61dd2826504c03a7b3196f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc83b346411f5b614cd0430827bafd7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_064c55c9db61dd2826504c03a7b3196f
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4113e7fbb00d578dc0836a4b07dd2ca0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b1f331f1a718cef6f9cad4e8f638435f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47098490595817566, 0.1103280559182167, 0.4369451403617859, 0.46775713562965393, 0.010145529173314571, 0.40881893038749695, 0.2006591111421585, 0.1803542673587799, 0.3965291976928711, 0.11009849607944489, 0.18915928900241852, 0.002716373186558485, 0.05337166413664818, 0.4194211959838867, 0.13802571594715118, 0.4693391025066376], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78be90690f4d0d6865975a13e19b042a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ad47dee074e253b7939209cca7b36ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33877092599868774, 0.1501975655555725, 0.18830828368663788, 0.1020621731877327, 0.29176151752471924, 0.11152896285057068, 0.09068342298269272, 0.13547582924365997], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cac42a93549f9f5e140adc06880552ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b0398652beeb18ea57be6eb4aac7c35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4974875748157501, 0.09569000452756882, 0.23384393751621246, 0.31365737318992615, 0.3961949646472931, 0.13677676022052765, 0.4369716942310333, 0.3035373091697693, 0.12980438768863678, 0.23378348350524902], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0047d47e5f8e9adc1e42d4bd90c82c64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7d58e576012041a41642f2fa5fee1c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d1dd34762ad993b11188a2159767a71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30380719900131226, 0.31134921312332153, 0.08341967314481735, 0.3145287334918976], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e47c7d5cf2939e028fa837d3e3154b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13117456436157227], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4e151590debf2f482e81dcfca735d117(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.334228515625, 0.459716796875, 0.20654296875, 0.1590576171875, 0.461669921875, 0.154052734375, 0.07733154296875, 0.08343505859375, 0.074462890625, 0.3857421875, 0.07562255859375, 0.1795654296875, 0.337890625, 0.29931640625, 0.30810546875, 0.455810546875, 0.474609375, 0.400146484375, 0.032684326171875, 0.310791015625, 0.3193359375, 0.2252197265625, 0.1973876953125, 0.326904296875, 0.365234375, 0.471435546875, 0.4169921875, 0.1097412109375, 0.021148681640625, 0.1939697265625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08d927ff4613402ffcc261794c20b188(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30d2f9660206a94844996c838a294528(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49609375, 0.149658203125, 0.18505859375, 0.412353515625, 0.418701171875, 0.10137939453125, 0.32470703125, 0.266845703125, 0.259765625, 0.027435302734375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19ffa6060b3fe43bffc1bccecbdbdc01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faad70cf18affedd64b7596c522ae1f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cc47c39d73e583c5b5a4d87c858c29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da2c0291a987c24e05646762cee2ee0f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.228770449757576, 0.3070676624774933, 0.012506400234997272, 0.2797805368900299, 0.022481350228190422, 0.19392473995685577, 0.4236636161804199, 0.3389718532562256, 0.26210853457450867, 0.31854695081710815, 0.21146011352539062, 0.19069309532642365, 0.36751365661621094, 0.16383254528045654, 0.19763030111789703, 0.0816006064414978], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faf960d28c2b6f7ac40b0fdde1fe6d40(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bcd29d4ae14dbf42908a959bdf8438ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.447021484375, 0.271484375, 0.46142578125, 0.2744140625, 0.277587890625, 0.334716796875, 0.1717529296875, 0.396240234375, 0.481689453125, 0.1007080078125, 0.018310546875, 0.395751953125, 0.38427734375, 0.1734619140625, 0.195068359375, 0.1336669921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7a329f238b80026b391a3f33d42341e9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2639538049697876, 0.11187825351953506, 0.46734365820884705, 0.3756919801235199, 0.02035297453403473, 0.41448432207107544], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6c7aba6b5335f4bd83f94ebbc5e0deb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9575431ebb83f1803a446fd1d9934b73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15346701443195343, 0.41454753279685974, 0.425022155046463, 0.432869553565979, 0.20029017329216003, 0.19872061908245087, 0.141497403383255, 0.22335919737815857, 0.03189738467335701, 0.3255617320537567, 0.13339591026306152, 0.3611944317817688, 0.3478880226612091, 0.14621604979038239, 0.13500189781188965, 0.14650028944015503], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5aeef627ddcf3047278f7eda58b5812(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38223016262054443, 0.39165619015693665, 0.41650617122650146, 0.16663606464862823, 0.02070820890367031, 0.015845859423279762, 0.09407474845647812, 0.41467350721359253, 0.007886075414717197, 0.3089967966079712, 0.21219834685325623, 0.19450998306274414, 0.2758464217185974, 0.42424821853637695, 0.23132529854774475, 0.11107577383518219], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_13a6402fe9abbf5115466a5568661351(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ddc246a0e070f12e373b313a0dcbc2d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25816845893859863, 0.4001642167568207, 0.2050032615661621, 0.3794298768043518, 0.13416577875614166, 0.1666058897972107, 0.2232966423034668, 0.4588037133216858, 0.21713222563266754, 0.240620955824852, 0.4139060974121094, 0.3119710385799408, 0.4032934606075287, 0.3309653103351593, 0.1386215090751648, 0.3987278640270233, 0.3393310606479645, 0.47535213828086853, 0.2971802353858948, 0.08563289791345596, 0.26863160729408264, 0.29960396885871887, 0.3046574890613556, 0.24973317980766296, 0.4132726490497589, 0.37794584035873413, 0.2941853404045105, 0.0763818696141243, 0.2549571692943573, 0.44969791173934937], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df799e00f127b4c3ad1a650bc974527e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4783e4b44e267157676985eef807dfd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df799e00f127b4c3ad1a650bc974527e
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_be0989440d75067fe99cae385e49259a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1828138828277588, 0.46402984857559204, 0.33494189381599426, 0.12569701671600342, 0.30962666869163513, 0.06738302856683731], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ecdfc7c89fb65037df068e13507864e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46871137619018555, 0.1864335685968399, 0.17219066619873047, 0.21391667425632477, 0.09396190196275711, 0.33694344758987427, 0.462715744972229, 0.032894574105739594, 0.23859229683876038, 0.22927916049957275, 0.24216651916503906, 0.18984651565551758, 0.43069717288017273, 0.43700507283210754, 0.3605944514274597, 0.013375453650951385, 0.15696458518505096, 0.26494982838630676, 0.11806044727563858, 0.24433332681655884, 0.3499873876571655, 0.4231843650341034, 0.20984815061092377, 0.0120462067425251], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f4bd1b3e9c7a462fa7e859c34a14d7eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1605224609375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcabcab139b242ad1c233087264f27f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_815ba7792c5a199d4109f1feebecb95d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.031219482421875, 0.201171875, 0.405029296875, 0.341064453125, 0.48876953125, 0.26416015625, 0.09625244140625, 0.1788330078125, 0.135498046875, 0.07781982421875, 0.37158203125, 0.219970703125, 0.0968017578125, 0.2413330078125, 0.240234375, 0.08856201171875, 0.239501953125, 0.165771484375, 0.342041015625, 0.2314453125, 0.362060546875, 0.029937744140625, 0.1322021484375, 0.393310546875, 0.07672119140625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81860008c923a4e3db6b1dec282f94ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb5d595f2406e5c6865a5eea3ea96484(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4dee74942b3047e19581b527d65cdea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_029cf30cfe4bb2a83f4c3681084531de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4dee74942b3047e19581b527d65cdea
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ce075d2d95748883a218586b564c9c33(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4022024869918823, 0.07014036923646927, 0.475299209356308, 0.4686344563961029, 0.1150880679488182, 0.46683400869369507, 0.2930436134338379, 0.33698368072509766, 0.33449414372444153, 0.188934788107872, 0.004047160968184471, 0.13115720450878143, 0.16497530043125153, 0.49003326892852783, 0.16370783746242523, 0.23387987911701202], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b48f8ad897df4cf019c174ded30d3056(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02adab333a60198faa2c9e42ba6ef992(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d8ecd24614754a894302b6cc2d7f78a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_94712ea9541aa8936495e80f602ef7ce(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b80c8c51963f704e03b61ad985cf000f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_94712ea9541aa8936495e80f602ef7ce
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7e00aede534f79b21e4385d2ededf67(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31396484375, 0.3125, 0.1043701171875, 0.431884765625, 0.04022216796875, 0.2037353515625, 0.2471923828125, 0.400146484375, 0.00856781005859375, 0.317138671875, 0.454833984375, 0.008575439453125, 0.32177734375, 0.191650390625, 0.10552978515625, 0.07977294921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b3230111d3aee57d79788d57cb99159(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ab43d7e073db67176a4fe7cd500fa8f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b3230111d3aee57d79788d57cb99159
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e0c825643db18caa24dc3d0da307588(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b29f3340116338d8fa64da0e59ef5523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8cb50c38f5fe32c1139105576683a39f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19547851383686066, 0.2586682140827179, 0.1553369164466858, 0.29943615198135376, 0.49066585302352905, 0.3682379126548767, 0.4085695445537567, 0.21141298115253448, 0.4799420237541199, 0.3172178268432617, 0.4954792857170105, 0.2777649164199829, 0.2812957465648651, 0.3146669268608093, 0.010855184867978096, 0.2808789014816284], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e3a49a190d239c3313b6d56576b99480(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19788621366024017, 0.3619807958602905, 0.4617757499217987, 0.1131972223520279, 0.014421505853533745, 0.032239481806755066, 0.3677856922149658, 0.3210349380970001, 0.15419234335422516, 0.32643163204193115, 0.02658122405409813, 0.4718132019042969, 0.22340071201324463, 0.25834017992019653, 0.27714967727661133, 0.26905766129493713], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_61d37ed2584d74e6259927213baeb5ee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8720570d19e6b6e41a56e5031bc8e96b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3068547546863556, 0.4261798858642578, 0.3363073170185089], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_807873d0f506ad298b71c19f07581295(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9e37c29be6b6c904223d07852d64e6c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.382080078125, 0.036773681640625, 0.484619140625, 0.46826171875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f1b74fe7fd7a4e1d85397b0511bee5b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03436279296875, 0.45654296875, 0.1405029296875, 0.0911865234375, 0.392578125, 0.41796875, 0.293701171875, 0.208740234375, 0.35595703125, 0.348388671875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf5cb82337c68469d12eeec970f95c11(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fca1cb9315bba4c8a53b28e9a87864e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf5cb82337c68469d12eeec970f95c11
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8767e91221af282dfe7f8ccca36a9307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7e578c766ab7c0c9766296259fedc3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8767e91221af282dfe7f8ccca36a9307
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2183257b281edddd1814d0e3637e9b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_18a2b78bd6ad6f52a6ad241f1c5304c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2183257b281edddd1814d0e3637e9b8
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5ead841357e8ca51f57be566c10861f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4867d2ba1a42406557cea8b81eb4f7da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5ead841357e8ca51f57be566c10861f
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6891607c590dc118ca3851848cd9743(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2793307900428772, 0.29374775290489197, 0.35540035367012024, 0.16818031668663025, 0.33717411756515503, 0.34204521775245667], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5376664a8d0a487d3a8881d7bf15dc25(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3510717451572418, 0.26590102910995483, 0.3697400689125061, 0.16503383219242096, 0.06953370571136475, 0.08043193817138672, 0.14517302811145782, 0.09927701950073242, 0.4276491105556488, 0.2546904385089874, 0.238024041056633, 0.39808470010757446, 0.36840102076530457, 0.06058964133262634, 0.018979893997311592, 0.25208136439323425], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_486c808b421f715ea60783b020b9ac2a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fb401baa1e511a86947d94ae47f2477(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_486c808b421f715ea60783b020b9ac2a
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68052952a611e99ca683b7fc1fbe587(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_230ff064a398bea7096884a958d4d929(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05975341796875, 0.435791015625, 0.08758544921875, 0.0965576171875, 0.4833984375, 0.05780029296875, 0.316650390625, 0.022735595703125, 0.08148193359375, 0.0634765625, 0.492431640625, 0.2386474609375, 0.35986328125, 0.3154296875, 0.204833984375, 0.00244903564453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6d021d91f7811013c15e196ea119243(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_056e13d1d4fff163e51db3f84d4fb72c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039398193359375, 0.447509765625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0fcc951b859ff27c6426f3fe56dc8e3f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.333740234375, 0.223876953125, 0.369140625, 0.39990234375, 0.3994140625, 0.33837890625, 0.2186279296875, 0.14892578125, 0.435791015625, 0.44482421875, 0.16845703125, 0.0179290771484375, 0.1063232421875, 0.462158203125, 0.173095703125, 0.41064453125, 0.275146484375, 0.161376953125, 0.417724609375, 0.435791015625, 0.10809326171875, 0.0024967193603515625, 0.295166015625, 0.2021484375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b59c72ca73728fc370a962a3d634e04(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48291015625, 0.03997802734375, 0.5, 0.431640625, 0.1220703125, 0.349609375, 0.3427734375, 0.4306640625, 0.37646484375, 0.0011224746704101562, 0.361328125, 0.432373046875, 0.315185546875, 0.456787109375, 0.2005615234375, 0.11138916015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58e5e10eb906686d1b5b59da74526e1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.138427734375, 0.0838623046875, 0.29833984375, 0.2509765625, 0.2095947265625, 0.309326171875, 0.284423828125, 0.366455078125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dddae32fb10aa2967df8285de100133a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_454acca9b203c0b4e82d33fdd727940f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dddae32fb10aa2967df8285de100133a
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b28db5105fe0f37f3b20d2d826623f19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83a831c45cd4f1a3399a7ce8440e8c77(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b17c399290dbb1bd1e4641ba87e475ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10369873046875, 0.308837890625, 0.39453125, 0.399169921875, 0.0860595703125, 0.409912109375, 0.059295654296875, 0.47412109375, 0.155029296875, 0.1092529296875, 0.20849609375, 0.441650390625, 0.27783203125, 0.1905517578125, 0.44482421875, 0.34228515625, 0.426025390625, 0.39892578125, 0.2259521484375, 0.0265350341796875, 0.2166748046875, 0.1749267578125, 0.27490234375, 0.282470703125, 0.3427734375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df5f57a019c2f350d79caf4d14e92e07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48221322894096375, 0.02107037603855133, 0.038059234619140625, 0.4915320575237274, 0.25906136631965637, 0.23590143024921417, 0.023573357611894608, 0.24542400240898132, 0.19440613687038422, 0.19072909653186798, 0.3573165237903595, 0.2250446081161499, 0.290025532245636, 0.4905933141708374, 0.46656471490859985, 0.17089274525642395, 0.43671464920043945, 0.24415218830108643, 0.13440604507923126], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14624256417a43228ec531fb6c33ae03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5f6c501af1f629be34dfbfa20d09202(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14624256417a43228ec531fb6c33ae03
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42c89a06938342a05047d16c2a49149d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41748046875, 0.0751953125, 0.197509765625, 0.1954345703125, 0.1920166015625, 0.28076171875, 0.2030029296875, 0.10333251953125, 0.30712890625, 0.434814453125, 0.203369140625, 0.40625, 0.455078125, 0.0005984306335449219, 0.2135009765625, 0.161865234375, 0.389404296875, 0.2210693359375, 0.492431640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb7483a91c565c1dc71c7f794b161ea3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.314208984375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_26ee15234e74c48ce9feb1b5610c6387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08585511893033981, 0.3989000618457794, 0.2791346609592438, 0.3581233024597168, 0.43867161870002747, 0.48880499601364136, 0.25281259417533875, 0.21201956272125244, 0.42296555638313293, 0.3246332108974457, 0.020234333351254463, 0.2562689185142517, 0.060019202530384064, 0.44436460733413696, 0.21957215666770935, 0.47982993721961975, 0.21877896785736084, 0.037908341735601425, 0.26457542181015015, 0.17235982418060303, 0.4291820526123047, 0.3214067816734314, 0.1544209122657776, 0.031061189249157906, 0.18398600816726685], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d5915752baf0e0dafc1d62c6e4e9288(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_074002d010dc476fb4f6b1fde317a10f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a7c6a187db799636e8b39d1615d18c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3796316087245941, 0.09123673290014267, 0.44970986247062683, 0.3006294071674347, 0.25468015670776367, 0.34974533319473267, 0.1231820359826088, 0.28685906529426575, 0.30852505564689636, 0.39187273383140564, 0.1739671528339386, 0.1543310284614563, 0.10314583033323288, 0.11961746960878372], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81d1656442f9756317a97ba2b6d6370c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.070556640625, 0.271728515625, 0.028717041015625, 0.36962890625, 0.269287109375, 0.387451171875, 0.335693359375, 0.43505859375, 0.368896484375, 0.37158203125, 0.08843994140625, 0.404541015625, 0.397216796875, 0.180908203125, 0.468994140625, 0.416259765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83b05cee729de361cea8e25d344ac7e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2285173237323761, 0.22846093773841858, 0.09053981304168701, 0.1912737339735031, 0.12027612328529358, 0.05591193959116936, 0.24761857092380524, 0.13102397322654724, 0.03928789868950844, 0.04022873938083649, 0.2422853410243988, 0.0541667640209198, 0.03069944679737091, 0.23035815358161926, 0.37814000248908997, 0.1261817365884781], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69f24bcff300e051624f7e93999e3905(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8d2f9237c82cb1b4938424dfb01e456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69f24bcff300e051624f7e93999e3905
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72188b54492c5c0051465658f13750ed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.060302734375, 0.2183837890625, 0.4912109375, 0.27685546875, 0.0889892578125, 0.40283203125, 0.465576171875, 0.189453125, 0.401123046875, 0.420654296875, 0.4951171875, 0.03265380859375, 0.3408203125, 0.1920166015625, 0.118408203125, 0.11578369140625, 0.3330078125, 0.1966552734375, 0.1741943359375, 0.3359375, 0.447998046875, 0.2259521484375, 0.01139068603515625, 0.4248046875, 0.4423828125, 0.07989501953125, 0.4140625, 0.239013671875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c347fb09d52739c63fa2a9280a562c62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4677734375, 0.263916015625, 0.482177734375, 0.4638671875, 0.03192138671875, 0.236083984375, 0.11248779296875, 0.499267578125, 0.1998291015625, 0.28515625, 0.295654296875, 0.1890869140625, 0.1568603515625, 0.1981201171875, 0.453369140625, 0.2430419921875, 0.36474609375, 0.385009765625, 0.447265625, 0.497802734375, 0.10870361328125, 0.0102691650390625, 0.486572265625, 0.432373046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_915285295adf2c68f509fa6d931cfd64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.286376953125, 0.273681640625, 0.287841796875, 0.2001953125, 0.389892578125, 0.2423095703125, 0.11993408203125, 0.259765625, 0.25244140625, 0.493408203125, 0.317138671875, 0.1744384765625, 0.4541015625, 0.276123046875, 0.379638671875, 0.08087158203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44854d19ef940dbe436ccb4c869372ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0178375244140625, 0.395263671875, 0.00630950927734375, 0.04327392578125, 0.12890625, 0.1669921875, 0.448974609375, 0.006839752197265625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25ddcaf81ae82ccc95ba700078014547(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e77eb3f5856dfd0e484e04f86c80286b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.335205078125, 0.1680908203125, 0.488037109375], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64edb4d01d9b5264eacbee672737212d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8baea14f3a70e97387d448db726017ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4789729118347168, 0.24426601827144623, 0.2053736448287964, 0.14805202186107635, 0.1719214916229248, 0.21694664657115936, 0.48200908303260803, 0.2673577070236206, 0.1909935176372528, 0.34919238090515137, 0.17692910134792328, 0.48165974020957947, 0.112911656498909, 0.19231760501861572, 0.4283224046230316, 0.11781132966279984, 0.4620648920536041, 0.45964285731315613, 0.14581096172332764, 0.17120033502578735, 0.3043971061706543, 0.45196184515953064, 0.21653664112091064, 0.49905189871788025, 0.16505193710327148, 0.03496897220611572, 0.27406299114227295, 0.416681170463562], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bcd1df2cb0298aebf912a07ab9a96d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48681640625, 0.46044921875, 0.238525390625, 0.496337890625, 0.05584716796875, 0.298583984375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_518386ef3278f1b3e8f3990a9fdea4a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33544921875, 0.322021484375, 0.35107421875, 0.278076171875, 0.284423828125, 0.484130859375, 0.247314453125, 0.410888671875, 0.174560546875, 0.1781005859375, 0.490966796875, 0.418212890625, 0.37158203125, 0.48291015625, 0.287841796875, 0.4775390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d56782afe609ead099ae9f17a4f36cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4027767777442932, 0.20165354013442993, 0.19733816385269165, 0.4477063715457916, 0.2500143051147461, 0.33750975131988525, 0.3439345955848694, 0.39021846652030945, 0.13744011521339417, 0.07462148368358612, 0.1331857442855835, 0.3776300251483917, 0.404992938041687, 0.1740676611661911, 0.3469834625720978, 0.06777537614107132], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fcd7944214ce6c08d975b62bf0e48d1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.413330078125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a23f9584e2f79fe15d1075fb6e1ac0fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.017366012558341026, 0.06610836088657379, 0.2160094678401947, 0.26003292202949524, 0.3453695774078369, 0.4479909837245941, 0.3067782521247864, 0.049961674958467484, 0.0243060402572155, 0.43703123927116394, 0.12218402326107025, 0.03471870347857475, 0.4253115653991699, 0.16639481484889984, 0.0038706029299646616, 0.11735616624355316, 0.3760066032409668, 0.16532480716705322, 0.3365201950073242, 0.24196521937847137, 0.2006341516971588, 0.4742480516433716, 0.4712190628051758, 0.2303050011396408, 0.17814546823501587, 0.00822892040014267, 0.24593578279018402, 0.2632424235343933, 0.4454611539840698, 0.3233998119831085], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_11ef11e85c8227d27468a973ffdd622e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2992144823074341, 0.37978413701057434, 0.2479998618364334, 0.2324618250131607, 0.31358420848846436, 0.33069324493408203, 0.46709463000297546, 0.24675393104553223, 0.37866708636283875, 0.04174048453569412, 0.49904865026474, 0.06227476894855499, 0.3286227285861969, 0.0980716198682785, 0.35584118962287903, 0.06958302855491638], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e97ecb35bcd7d1971baad5ec9dbf4a81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.497802734375, 0.0692138671875, 0.059967041015625, 0.479248046875, 0.0382080078125, 0.24755859375, 0.0037364959716796875, 0.21484375, 0.1658935546875, 0.31396484375, 0.1744384765625, 0.2384033203125, 0.2249755859375, 0.2462158203125, 0.092041015625, 0.212890625, 0.387939453125, 0.1595458984375, 0.46533203125, 0.1884765625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d94f2e28e16747d4c6f50a7b41ef2924(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24355632066726685, 0.20225770771503448, 0.4387662410736084, 0.1841912418603897, 0.12117510288953781, 0.17811696231365204, 0.3331369161605835, 0.16109655797481537, 0.05322794243693352, 0.06832467019557953], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7f2a9be89c96ffad34648be040bc8c8d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22337546944618225, 0.4560365080833435, 0.17735983431339264, 0.25445225834846497, 0.11326859891414642, 0.2657611668109894, 0.29901257157325745, 0.4950510263442993, 0.4950448274612427, 0.18323709070682526, 0.08312633633613586, 0.4017690122127533, 0.010062843561172485, 0.2233823537826538, 0.3282209634780884, 0.09608469903469086], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e49ed0dd6bf48814a97b75c4c53bb506(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41162109375, 0.41650390625, 0.44384765625, 0.122314453125, 0.162353515625, 0.2705078125, 0.293701171875, 0.269287109375, 0.26513671875, 0.1356201171875, 0.0909423828125, 0.06695556640625, 0.10284423828125, 0.31298828125, 0.1710205078125, 0.055694580078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52828b3ee07cfbca61a6de8cffe68213(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4073091187761e818d90e62a95adfe43(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29736328125, 0.1142578125, 0.27685546875, 0.018341064453125, 0.4013671875, 0.06689453125, 0.24951171875, 0.2161865234375, 0.467529296875, 0.38037109375, 0.12432861328125, 0.424560546875, 0.248779296875, 0.1561279296875, 0.20166015625, 0.0601806640625, 0.11383056640625, 0.257568359375, 0.318359375, 0.19775390625, 0.2183837890625, 0.0267333984375, 0.1524658203125, 0.489013671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d670895b0c9c3bc69ef90141b6123dfa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1eaa332a4cf157fab6d81b80964fc68c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.367034375667572, 0.3803701102733612], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1cf7d8f02c241f68395551c8e786b6d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45458984375, 0.35546875, 0.288330078125, 0.28857421875, 0.442626953125, 0.428466796875, 0.40380859375, 0.09942626953125, 0.4189453125, 0.31298828125, 0.470458984375, 0.369873046875, 0.145263671875, 0.1385498046875, 0.29248046875, 0.06378173828125, 0.0120391845703125, 0.2939453125, 0.198486328125, 0.388671875, 0.0797119140625, 0.07257080078125, 0.019378662109375, 0.329833984375, 0.19140625, 0.15673828125, 0.314697265625, 0.329345703125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58f84d1d360fefd7f1ae4b2c98684591(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee64821d89dd1867d8fde30aa40ae496(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ce8582ceb93bcc7f93909985c889c87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2113037109375, 0.265380859375, 0.052154541015625, 0.23583984375, 0.029754638671875, 0.031890869140625, 0.35791015625, 0.1602783203125, 0.470458984375, 0.2044677734375, 0.288818359375, 0.353515625, 0.206298828125, 0.311767578125, 0.1253662109375, 0.1610107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c993c8db12634eb358d8c6f0484c9083(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.445556640625, 0.058746337890625, 0.279541015625, 0.294921875, 0.226806640625, 0.053955078125, 0.1268310546875, 0.05523681640625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_537e39f2fbe743ff5332da89db63a05c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2440185546875, 0.1494140625, 0.2939453125, 0.213134765625, 0.48046875, 0.36962890625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73889d0f3e0a33eb45b18a5dc50b5d66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50ecb2c0c5d327cb6d234e985c6c09e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06665477156639099, 0.24149499833583832, 0.1843189001083374, 0.2251514494419098, 0.0803493857383728, 0.10570324957370758, 0.2859632968902588, 0.15720193088054657], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5346be0741969f6fa6753d2a19545f7f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3daba85b0a666479fc9bbcb2fbd7abb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5346be0741969f6fa6753d2a19545f7f
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e82be1ad100ab56abbd6e696d9be304c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a1c8b6c42952fc8c03d0a3fa2679752(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e82be1ad100ab56abbd6e696d9be304c
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bd2845671761dcf5153557334a09cd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c7c6e45001f473e1bfcaa08d1714bf6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4921875, 0.37939453125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e0cf64d5cccdad5928d4a81c7413edd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1768798828125, 0.165771484375, 0.2783203125, 0.16162109375, 0.11798095703125, 0.313720703125, 0.1431884765625, 0.22265625, 0.49560546875, 0.46923828125, 0.031982421875, 0.1510009765625, 0.08148193359375, 0.1650390625, 0.3955078125, 0.45263671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffc241dc82f71cefb27d83b88b12b51c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11492237448692322, 0.35500863194465637, 0.2136552780866623, 0.42267414927482605, 0.10773646086454391, 0.4543062150478363, 0.4850323796272278, 0.36721643805503845, 0.3521881401538849, 0.057265978306531906, 0.05239595100283623, 0.1695789098739624, 0.04914446920156479, 0.4882144033908844, 0.1914212852716446, 0.41769325733184814, 0.488690584897995, 0.40214377641677856, 0.26252734661102295, 0.1856919825077057, 0.2554430067539215, 0.4497910439968109, 0.4953177571296692, 0.3650914430618286, 0.4656042158603668, 0.24772000312805176, 0.10484056174755096], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e81de19e720864c35229d98142e438d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20298519730567932, 0.374347448348999, 0.3854242265224457, 0.2849748432636261, 0.36028197407722473, 0.15236994624137878], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_907a01985d66c844e4ced4441b7f5fdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.061730820685625076, 0.4200352132320404, 0.345179945230484, 0.4817410409450531, 0.21383723616600037, 0.48939889669418335, 0.2790786921977997, 0.4011266529560089, 0.47012653946876526, 0.1353830099105835, 0.4342627227306366, 0.16618949174880981, 0.024386409670114517, 0.2226143330335617, 0.07138774544000626, 0.2394409477710724], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ce494bb973099752a5a27990ecea0d86(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.040084369480609894, 0.02506832219660282, 0.44947150349617004, 0.1402331292629242, 0.4582919478416443, 0.2614850401878357, 0.19011618196964264, 0.1247553601861, 0.11983540654182434, 0.34840577840805054, 0.30459409952163696, 0.16167321801185608, 0.030182603746652603, 0.4639908969402313, 0.02934490144252777, 0.3754202723503113, 0.22254125773906708, 0.1615632325410843, 0.2756286859512329, 0.31126487255096436, 0.40281176567077637, 0.26235431432724, 0.30989909172058105, 0.24917274713516235, 0.008542206138372421, 0.40368542075157166, 0.34037700295448303], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_15dd083bc6a0c5fe70ed515d582126e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24150347709655762, 0.07109400629997253, 0.3206436336040497, 0.34967637062072754, 0.2374601513147354, 0.3666323721408844, 0.3446998596191406, 0.4501146972179413, 0.12410806864500046, 0.36638951301574707, 0.3178119659423828, 0.3322029113769531, 0.44204360246658325, 0.34665411710739136, 0.29571130871772766, 0.4535655081272125, 0.28362080454826355, 0.43038100004196167, 0.25375449657440186, 0.22211644053459167, 0.1271832436323166, 0.1209024041891098, 0.41473573446273804, 0.4927786588668823, 0.05854478105902672, 0.44716203212738037, 0.4518616795539856, 0.3418855667114258, 0.2879215180873871, 0.1883224993944168], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_73348ee52662eb3cd42534d1697d67e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c8716a4f6f3d3e061710416ea733a640(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_73348ee52662eb3cd42534d1697d67e4
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19309866428375244, 0.023983728140592575, 0.38822299242019653, 0.4086936414241791, 0.042207278311252594, 0.3149300217628479, 0.03774488344788551], dtype='float32').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc65c097667ed04926194589e2888e72(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.248779296875, 0.2236328125, 0.2705078125, 0.2327880859375, 0.1292724609375, 0.359375, 0.3896484375, 0.11419677734375, 0.288818359375, 0.335693359375, 0.3212890625, 0.00940704345703125, 0.35302734375, 0.2283935546875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5605860349bd7a54411faed925488dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18239222466945648, 0.09819332510232925, 0.3728660047054291, 0.002518775872886181, 0.017798827961087227, 0.4572797119617462], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf0704221805286d51da82ea6044a7ff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d48ec4098dfa2e3049d3a7aec9c1644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf0704221805286d51da82ea6044a7ff
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83e11b997a952e4363ba9bccdbdc987d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2139601707458496, 0.438407838344574, 0.13260647654533386, 0.3127289414405823, 0.30903056263923645, 0.2938729524612427, 0.3808489739894867, 0.09026559442281723, 0.15545900166034698, 0.41738080978393555, 0.4580065906047821, 0.4542735815048218, 0.42342284321784973, 0.09722762554883957], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_29c6f6298b2e59dcd64553c20ef8bcdc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48280569911003113, 0.31996843218803406, 0.2914310693740845, 0.2728753089904785, 0.09326789528131485, 0.1639857143163681, 0.4472211003303528, 0.0795850157737732, 0.421001672744751, 0.3299606442451477, 0.2199867218732834, 0.13521185517311096, 0.2160603553056717, 0.4257848262786865, 0.20909182727336884, 0.00446786405518651], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a2999db644a51a70ea5e154c2fdcd71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_360dc6d03096d6a7e886ade36f1a1373(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0853271484375, 0.469970703125, 0.0103302001953125, 0.006099700927734375, 0.426513671875, 0.273681640625, 0.34619140625, 0.33984375, 0.374755859375, 0.058990478515625, 0.1796875, 0.27734375, 0.141845703125, 0.0748291015625, 0.181640625, 0.30419921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b00dd889684f92c16a23c90feb9b45f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04867864027619362, 0.0533156655728817, 0.4722336530685425, 0.28279733657836914, 0.3352298438549042, 0.218780979514122, 0.06459295749664307, 0.4999854862689972, 0.39430615305900574, 0.08638004213571548, 0.02133878506720066, 0.04015287011861801, 0.002224366180598736, 0.368786484003067, 0.04809049516916275, 0.35794514417648315, 0.3359200060367584, 0.013428017497062683, 0.25874197483062744, 0.3500525653362274, 0.21431724727153778, 0.31778132915496826, 0.17021726071834564, 0.4698958396911621, 0.05613536387681961], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e451a0dc45f2db5f203c0a46903907e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3057602047920227, 0.4259108901023865, 0.2687835991382599, 0.3789917528629303, 0.038891784846782684, 0.11782544106245041, 0.33715683221817017, 0.3796766996383667, 0.42676466703414917, 0.46362441778182983, 0.16018028557300568, 0.20759911835193634, 0.13958293199539185, 0.24272477626800537, 0.1276525855064392, 0.13766539096832275], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_840e9d449e170f0ce0bda8df1295fe05(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26708984375, 0.016815185546875, 0.442626953125, 0.16796875, 0.437744140625, 0.0181427001953125, 0.4306640625, 0.42138671875, 0.330810546875, 0.396240234375, 0.08099365234375, 0.00281524658203125, 0.2291259765625, 0.1739501953125, 0.409423828125, 0.1268310546875, 0.06341552734375, 0.2191162109375, 0.054443359375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9982893bf35f0d3bf1a5dffea3667040(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.084716796875, 0.05352783203125, 0.3134765625, 0.2900390625, 0.2425537109375, 0.31591796875, 0.1956787109375, 0.069580078125, 0.489990234375, 0.25, 0.245361328125, 0.1439208984375, 0.145751953125, 0.218994140625, 0.09002685546875, 0.0364990234375, 0.124267578125, 0.468017578125, 0.05230712890625, 0.10321044921875, 0.3623046875, 0.06280517578125, 0.487060546875, 0.22900390625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_742a8da1082951ba5d819c21526364ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad7b3dcfb80d245b7df24048cf1174c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46833640336990356, 0.40794867277145386, 0.15605005621910095, 0.11051875352859497, 0.4357362985610962, 0.4235735237598419, 0.3221908509731293, 0.4431439936161041, 0.4913564622402191, 0.2303684949874878, 0.2880527973175049, 0.10910817235708237, 0.16882531344890594, 0.3960956633090973, 0.0665302649140358, 0.47919851541519165, 0.11864984035491943, 0.0480976402759552, 0.4318884015083313, 0.2068713754415512, 0.02755977027118206, 0.4557161033153534, 0.34266436100006104, 0.2142055630683899], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a16f1aa8ef34bc0383d2448ab07643f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10972212255001068, 0.036104943603277206, 0.35186323523521423, 0.36100026965141296, 0.4455263912677765, 0.3976133465766907, 0.33828291296958923, 0.2797265946865082, 0.21524059772491455, 0.38419702649116516, 0.3660350441932678, 0.04489108920097351, 0.2917773425579071, 0.022361883893609047, 0.06113768741488457, 0.3652360737323761, 0.01235553715378046, 0.21285925805568695, 0.09489618241786957, 0.04811025410890579, 0.08407871425151825, 0.3836091458797455, 0.3463830053806305, 0.4184888005256653, 0.01668548583984375], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59b73d816c2dec6f5777b4da20a6eee6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2532244026660919, 0.015865741297602654, 0.21156275272369385, 0.0628231018781662, 0.29710862040519714, 0.06176914647221565, 0.4661644399166107, 0.37219634652137756, 0.258279412984848, 0.2149575799703598, 0.04853407293558121, 0.15137240290641785, 0.17512819170951843, 0.2752442955970764, 0.052924744784832, 0.14786773920059204, 0.3805826008319855, 0.13810530304908752, 0.27903079986572266, 0.17712068557739258, 0.0510115772485733, 0.40035519003868103, 0.20336933434009552, 0.17709100246429443, 0.36108502745628357, 0.20326770842075348, 0.479671835899353], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e790b7d0b8ebfe542daa3eb21d8ae02e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.330322265625, 0.4384765625, 0.03363037109375, 0.416748046875, 0.34814453125, 0.0703125, 0.037200927734375, 0.07928466796875, 0.3359375, 0.29638671875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5b721b7acbd8bbecad8cc72cb226432(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06634521484375, 0.3466796875, 0.44189453125, 0.46484375, 0.37841796875, 0.076416015625, 0.13623046875, 0.05450439453125, 0.28369140625, 0.139892578125, 0.4072265625, 0.2257080078125, 0.12445068359375, 0.217041015625, 0.46240234375, 0.14111328125, 0.034637451171875, 0.0093841552734375, 0.0687255859375, 0.1705322265625, 0.286376953125, 0.450439453125, 0.162353515625, 0.472412109375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee53303c54a660605505c257944f1f42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_66fde8df17055027a31657399c6b94e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87041aec12985f589da822a5eeda0a4b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_66fde8df17055027a31657399c6b94e4
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13c4f208fd1781917df7f458d6dcfb33(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4013036787509918], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2c11f347654121d6936dc449fc5175bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7fcdc4d8c28e638b61f5bc62ea9040b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2c11f347654121d6936dc449fc5175bf
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b859927b31cb02314545c050df9c81c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c674a823d945820d0c65e78c595d0fa7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46630859375, 0.0277862548828125, 0.431884765625, 0.03662109375, 0.251953125, 0.19677734375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_695ac383e02bc51abf996efb315a4016(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42242932319641113, 0.1176968663930893, 0.19053426384925842, 0.2913735806941986, 0.10913822054862976, 0.11439356207847595, 0.2960520386695862, 0.255048543214798, 0.39278122782707214, 0.4653633236885071, 0.20842936635017395, 0.4040623903274536, 0.025321269407868385, 0.25643256306648254, 0.01667836681008339, 0.04922308772802353, 0.3198142647743225, 0.12347227334976196, 0.1261889636516571], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aebb3fd48c3a2496a0f37acd228cf2db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.044952392578125, 0.27734375, 0.014495849609375, 0.447998046875, 0.4609375, 0.1961669921875, 0.304931640625, 0.44775390625, 0.2685546875, 0.451416015625, 0.25, 0.12359619140625, 0.372314453125, 0.358642578125, 0.004344940185546875, 0.414306640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bc72ead9360dcd043042364724af9a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4173808991909027, 0.16096150875091553, 0.4907238483428955, 0.48650532960891724, 0.25970178842544556, 0.37709924578666687, 0.12202100455760956, 0.3085935711860657, 0.25829294323921204, 0.26723748445510864, 0.13976797461509705, 0.2457529753446579, 0.20672984421253204, 0.449166864156723, 0.13182803988456726, 0.44988083839416504], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7c799526ffe398cb0148ebb84076066f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32e4f5b70a67c7ddfdbe0746eea0ba22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7c799526ffe398cb0148ebb84076066f
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5076df2107919087c1a7a632171e9bd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00432202685624361, 0.05323328077793121, 0.13994088768959045, 0.20521032810211182, 0.46393176913261414, 0.1463203728199005, 0.3902837932109833, 0.23866769671440125, 0.07676170766353607, 0.19543413817882538, 0.34054601192474365, 0.4330064654350281, 0.19965475797653198, 0.44370368123054504, 0.3771262764930725, 0.2761792838573456, 0.47437164187431335, 0.08979591727256775, 0.31752389669418335, 0.10311323404312134, 0.4163581430912018, 0.20196247100830078, 0.005280067212879658, 0.17444239556789398, 0.2693488299846649, 0.37738239765167236, 0.19212935864925385, 0.4716111421585083], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae47a834d06adaaaeba65d45347b373e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46dd01a152b5548d94603558c46d911d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae47a834d06adaaaeba65d45347b373e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_80d16dbbaf8f700bac0e620898a0c612(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3210175037384033, 0.14609870314598083, 0.33452364802360535, 0.4865833520889282, 0.498644083738327, 0.3476608693599701, 0.4431597590446472, 0.46477314829826355, 0.09084924310445786, 0.4555304944515228, 0.10448172688484192, 0.4222969710826874, 0.2770436108112335, 0.059814441949129105, 0.30201900005340576, 0.2146729826927185, 0.03788590803742409, 0.42070597410202026, 0.09999974071979523, 0.43933573365211487, 0.20952211320400238, 0.3566257655620575, 0.4114621877670288, 0.18917739391326904], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc166c1bb126857b5a1fd75adea1825f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47392863035202026, 0.2813740074634552, 0.23555070161819458, 0.11414249986410141, 0.32965487241744995, 0.4784798324108124, 0.14609917998313904, 0.2692776322364807, 0.17543430626392365, 0.15991562604904175, 0.1222609356045723, 0.43704068660736084, 0.45299726724624634, 0.45909127593040466, 0.2301178276538849, 0.48338237404823303, 0.3788231611251831, 0.09732553362846375, 0.2238098680973053], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3dd709d011f1a13893e159790374e6de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4015517234802246, 0.2729862332344055, 0.37424978613853455, 0.3396391272544861, 0.16673770546913147, 0.15578576922416687, 0.41264528036117554, 0.033391792327165604, 0.2029736340045929, 0.25619176030158997, 0.1306736171245575, 0.3446349799633026, 0.4771483838558197, 0.13364000618457794, 0.4222411811351776, 0.08514730632305145, 0.1905350685119629, 0.40120187401771545, 0.2028140276670456, 0.15223591029644012, 0.14309555292129517, 0.46182283759117126, 0.04526848718523979, 0.27312394976615906], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a41f1e759f01afb45c4b1bb18453784(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4dfca9c41ea7e79c23779b88d759a60f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1836998164653778, 0.163843035697937, 0.21608185768127441, 0.06654207408428192, 0.35533779859542847, 0.35320380330085754], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_045a972d837bca0f62586e48b18e1d37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3105378746986389, 0.30525848269462585, 0.33458349108695984, 0.46361440420150757, 0.28924721479415894, 0.030774420127272606, 0.30545979738235474, 0.37625652551651, 0.12671637535095215, 0.06624224036931992, 0.4482450485229492, 0.222898930311203, 0.055973127484321594, 0.22283394634723663, 0.02660764381289482, 0.25307926535606384, 0.23278242349624634, 0.466416597366333, 0.09077312052249908, 0.49889126420021057, 0.2277003973722458, 0.29875779151916504, 0.1209169402718544, 0.36430561542510986], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_114d4d496b13d7178b95d6f7c01bb505(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02286343276500702, 0.12068427354097366, 0.0091498838737607, 0.4211653172969818, 0.07376044988632202, 0.07300873845815659, 0.12104492634534836, 0.3903884291648865, 0.03184221684932709, 0.15864446759223938, 0.09657203406095505, 0.13229136168956757, 0.3447488248348236, 0.2080352008342743, 0.0357462540268898, 0.29819244146347046], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66229d35ffe70017aa6e858a96ac645b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4375, 0.397705078125, 0.411865234375, 0.298583984375, 0.09088134765625, 0.42529296875, 0.308837890625, 0.037689208984375, 0.08203125, 0.08526611328125, 0.451416015625, 0.345947265625, 0.462158203125, 0.1766357421875, 0.034393310546875, 0.423095703125, 0.049407958984375, 0.2496337890625, 0.49853515625, 0.0322265625, 0.2252197265625, 0.0011663436889648438, 0.269775390625, 0.1279296875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e34274ea46ba10490d2623bed6089056(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07281494140625, 0.01363372802734375, 0.2235107421875, 0.468017578125, 0.227783203125, 0.467041015625, 0.021087646484375, 0.22900390625, 0.32861328125, 0.371337890625, 0.00208282470703125, 0.12408447265625, 0.15966796875, 0.11865234375, 0.358154296875, 0.451904296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a1b8560bc6a64364064914a1a6948a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27237468957901, 0.35778582096099854], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0f6d982377a9fe6fe503ad035e0a181(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.311279296875, 0.02374267578125, 0.08648681640625, 0.4755859375, 0.320556640625, 0.051910400390625, 0.44384765625, 0.344970703125, 0.007305145263671875, 0.12451171875, 0.302490234375, 0.025665283203125, 0.38720703125, 0.0010585784912109375, 0.004238128662109375, 0.12322998046875, 0.392578125, 0.055999755859375, 0.11376953125, 0.2215576171875, 0.05419921875, 0.273681640625, 0.489501953125, 0.1461181640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5833bdb2de106df1a564b55929f64f3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3981516361236572, 0.3610955774784088, 0.4390685558319092, 0.45547014474868774], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d998d811b552ad973f8c12fabbbd8b1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2138671875, 0.265380859375, 0.11181640625, 0.017791748046875, 0.21533203125, 0.194091796875, 0.422607421875, 0.333740234375, 0.08172607421875, 0.425048828125, 0.047271728515625, 0.4404296875, 0.1324462890625, 0.384033203125, 0.1549072265625, 0.330322265625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd0c033670adcd04766e8316780c4a03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4854871332645416], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4eac2d1bedca1688f6b7bfadc50f9250(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2247314453125, 0.0772705078125, 0.45947265625, 0.426513671875, 0.485107421875, 0.25244140625, 0.35888671875, 0.12841796875, 0.00749969482421875, 0.18359375, 0.24365234375], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1986cd15561a02ef40dd79493abb85f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1597900390625, 0.2314453125, 0.42236328125, 0.05804443359375, 0.359130859375, 0.456787109375, 0.2958984375, 0.289306640625, 0.385009765625, 0.2183837890625, 0.343994140625, 0.24462890625, 0.350341796875, 0.1834716796875, 0.02490234375, 0.10400390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_821e89ab992f2f72111fe88e2005ba56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11163330078125, 0.2724609375, 0.21533203125, 0.1141357421875, 0.255126953125, 0.01751708984375, 0.2666015625, 0.16015625, 0.26904296875, 0.357421875, 0.0279693603515625, 0.05816650390625, 0.485595703125, 0.278076171875, 0.0068817138671875, 0.1483154296875, 0.2059326171875, 0.09674072265625, 0.279541015625, 0.059051513671875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_731368416622bb883988fa0e412d4506(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5369ff3616a4431f608d336e7688ccdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1383136808872223, 0.2134973406791687, 0.007689809426665306, 0.22355741262435913, 0.24088534712791443, 0.3242819905281067, 0.2706891894340515, 0.4218330979347229, 0.10768687725067139, 0.009981006383895874, 0.3451842963695526, 0.07558248937129974, 0.1965542435646057, 0.47697722911834717, 0.47809314727783203, 0.22114765644073486, 0.4658060669898987, 0.31975188851356506, 0.45770323276519775, 0.040554530918598175, 0.006782840471714735, 0.38984325528144836, 0.1517133265733719, 0.012143034487962723, 0.11678089201450348, 0.20060601830482483, 0.43293681740760803, 0.031790368258953094, 0.48604804277420044, 0.3179565668106079], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4d330a83e6c72ad2a5f4a32ba301273(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51a36582f20d2c824477283af6cb8adc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_addeabd1e4d0c22ca60b9c471db87265(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51a36582f20d2c824477283af6cb8adc
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c789c65473dae7567c7bbbae7b44ed06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d83717fefe3323e619653c548a5d17c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_62696cfd7642932947982d9572431133(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c77d53f7598ede2d42bf98b201c4a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_62696cfd7642932947982d9572431133
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a100ce18432eb5f6836f57c4b8ce38c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5be27b6d4695d9f89896c93eb28d2e84(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.352783203125, 0.45361328125, 0.238037109375, 0.392333984375, 0.193603515625, 0.35888671875, 0.19921875, 0.1292724609375, 0.287353515625, 0.291748046875, 0.265869140625, 0.1595458984375, 0.08056640625, 0.09716796875, 0.492919921875, 0.2220458984375, 0.2216796875, 0.3291015625, 0.2431640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c45638301a94c7de5636e67946d53e7c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ae83da67cf7bf19af200be4e7d32e35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c45638301a94c7de5636e67946d53e7c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb4f6ee3de01bd814f552a6d85d729e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f15797e81b4fda8e4e788a1fe6ddb4f0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21564911305904388, 0.4933849275112152, 0.18564926087856293, 0.04922419786453247, 0.30540791153907776, 0.009654508903622627, 0.04414563626050949, 0.31142014265060425, 0.30712297558784485, 0.31391316652297974, 0.10996228456497192, 0.23931480944156647, 0.11852569133043289, 0.4960204064846039, 0.26108869910240173, 0.4433358609676361], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3248836893382d3485d198924a01e0f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.234130859375, 0.12384033203125, 0.40283203125, 0.376953125, 0.1793212890625, 0.09942626953125, 0.20263671875, 0.2320556640625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c01730d935ede054f36d35d68e82b841(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb845d749309af450bbb5897bb8d1e63(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3561233580112457, 0.2943532466888428, 0.22440490126609802, 0.20625565946102142, 0.22658465802669525, 0.23752963542938232, 0.4105497896671295, 0.21647906303405762, 0.44844135642051697, 0.08331415802240372, 0.4151829183101654, 0.40951022505760193, 0.00010771519737318158, 0.315147340297699, 0.09495915472507477, 0.13360320031642914, 0.14691327512264252, 0.49308496713638306, 0.09021469205617905, 0.3571033179759979, 0.03270016238093376, 0.011803213506937027, 0.21658027172088623, 0.44632962346076965], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_524c34625eba4d6b058d61efd530a501(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2064208984375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_381177b304689a333ca64e38d1a9e2b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08026123046875, 0.22900390625, 0.05987548828125, 0.451171875, 0.0853271484375, 0.179931640625, 0.39208984375, 0.44189453125, 0.2232666015625, 0.260986328125, 0.026611328125, 0.150146484375, 0.4599609375, 0.30078125, 0.158935546875, 0.23486328125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e0ffc15bea8cb987e525e6b5955627d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.052789539098739624, 0.2590576112270355, 0.3980639576911926, 0.18700546026229858, 0.21520720422267914, 0.3991771340370178, 0.3442930579185486, 0.3830791711807251, 0.3127639889717102, 0.32544705271720886, 0.17642679810523987, 0.24760876595973969, 0.27894023060798645, 0.2510776221752167, 0.2980796694755554, 0.23766113817691803, 0.14327587187290192, 0.037248432636260986, 0.12644615769386292, 0.43121710419654846], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3ae16c4ce12a5a806e972cf8447ece1e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364013671875, 0.00653076171875, 0.11248779296875, 0.0037689208984375, 0.104736328125, 0.188232421875, 0.09869384765625, 0.109375, 0.390380859375, 0.127197265625, 0.18212890625, 0.298828125, 0.159423828125, 0.4453125, 0.2763671875, 0.037628173828125, 0.253662109375, 0.2288818359375, 0.482666015625, 0.1129150390625, 0.1832275390625, 0.246826171875, 0.297607421875, 0.06085205078125, 0.427490234375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f82adeba8d5201527424d9e3b0e8c5b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1536865234375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86e61605ddaf8d8fb30a935a3b08aada(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3335455656051636], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4bae6b6b23d68d792585e63fa42f16cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b85afd0147e085fa4298fbd0465ddf79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2235925793647766, 0.303688645362854, 0.35915884375572205, 0.38585415482521057, 0.4471566677093506, 0.27935948967933655, 0.14789894223213196, 0.22422248125076294, 0.0003513739793561399, 0.25544530153274536, 0.18737731873989105, 0.2736695408821106, 0.3923252522945404, 0.4431346356868744, 0.3997967541217804, 0.3748812675476074, 0.16857418417930603, 0.3385988473892212, 0.4500090479850769, 0.05755622312426567, 0.18012209236621857, 0.08515829592943192, 0.22080354392528534, 0.4763932526111603, 0.32246145606040955, 0.36486440896987915, 0.3418392241001129, 0.03419152647256851], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_803aff1bebd3dd5b841df303e83f0930(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12339028716087341, 0.019446920603513718, 0.33636146783828735, 0.37804681062698364, 0.3007664084434509, 0.0077005489729344845, 0.32072630524635315, 0.3158107399940491, 0.4634767174720764, 0.27266010642051697, 0.3273322284221649, 0.2392278015613556, 0.15427303314208984, 0.11144084483385086, 0.39511632919311523, 0.15132401883602142, 0.23591452836990356, 0.2441965490579605, 0.28004521131515503, 0.018862998113036156, 0.1482921689748764, 0.0795593187212944, 0.47791528701782227, 0.08514200150966644, 0.4535328149795532], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0531980b7f2a44fd37edc3a6f3232eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0f006334539d85988541c6b32306b64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02291596308350563, 0.27641990780830383, 0.04822036251425743, 0.3549841344356537, 0.4113180935382843, 0.24945580959320068, 0.0742613896727562, 0.3472110331058502, 0.20278260111808777, 0.09931427985429764, 0.12011076509952545, 0.3855585753917694, 0.26112207770347595, 0.459098219871521, 0.45327138900756836, 0.027673769742250443, 0.37805020809173584, 0.247306227684021, 0.03361964598298073, 0.01605992764234543, 0.49402445554733276, 0.23287349939346313, 0.18504229187965393, 0.15730975568294525, 0.2740073800086975, 0.06683294475078583, 0.053981877863407135, 0.3299989402294159], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9faf91db7307f7afe626f76b1d7e5662(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27070003747940063, 0.03173394128680229, 0.3761885166168213, 0.09693078696727753, 0.40899646282196045, 0.05732710659503937, 0.43634694814682007, 0.16896027326583862, 0.45100054144859314, 0.3992413282394409, 0.19125962257385254, 0.06439915299415588, 0.4144868850708008, 0.3397411108016968, 0.34757721424102783, 0.28572285175323486, 0.21073085069656372, 0.07830792665481567, 0.125510573387146, 0.1745317578315735, 0.0021711678709834814, 0.04130635783076286, 0.1022796779870987, 0.35252645611763, 0.08570723235607147], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68d2d1ecdf9209ad567127a8a083a2cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06903076171875, 0.27392578125, 0.493408203125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a020a12b266c7b1a775e0825e17f076c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.049365654587745667, 0.19443057477474213, 0.014798360876739025, 0.1181795597076416, 0.18947279453277588, 0.1724754124879837, 0.17883087694644928, 0.38178369402885437, 0.4619530737400055, 0.275246798992157, 0.24436070024967194, 0.08266683667898178, 0.18509617447853088, 0.17610003054141998, 0.2405858337879181, 0.43268367648124695], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5b06fd3a48f0f75d0f1b95194eba606(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.204833984375, 0.2060546875, 0.058624267578125, 0.08544921875, 0.180419921875, 0.29541015625, 0.0523681640625, 0.4111328125, 0.06640625, 0.34716796875, 0.13818359375, 0.24853515625, 0.01039886474609375, 0.211181640625, 0.228271484375, 0.18603515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbef11b6fe606ec9f62b665e449090d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20975516736507416, 0.19303803145885468, 0.3620593845844269, 0.4315885007381439, 0.36087754368782043, 0.32248741388320923, 0.012132165022194386, 0.026685483753681183, 0.19119437038898468, 0.3465738594532013, 0.025056321173906326, 0.19498515129089355, 0.362766295671463, 0.4339916408061981, 0.37114399671554565, 0.10951457172632217], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6799c3935bf486b39acfd1fd5e767f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15132801234722137, 0.16906219720840454, 0.14543208479881287, 0.4917794466018677, 0.2538255751132965, 0.2413453906774521, 0.36480388045310974, 0.2947365343570709, 0.40683305263519287, 0.46582967042922974, 0.0051023950800299644, 0.2871053218841553, 0.4586446285247803, 0.004650269169360399, 0.2540878653526306, 0.21479517221450806, 0.31037336587905884, 0.4967614412307739, 0.32211756706237793, 0.12747398018836975, 0.4954368472099304, 0.274880588054657, 0.1530090868473053, 0.12786152958869934], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_986e6baa848d2c75ea089102e8497d84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_104f4bfe7eacd7010083733b0824b859(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_986e6baa848d2c75ea089102e8497d84
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e36af82cdad01fd37b75a11925ccbf4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44485002756118774, 0.02295677736401558, 0.04091456159949303, 0.24348950386047363, 0.2797301411628723, 0.3816124200820923, 0.18227946758270264, 0.29252734780311584, 0.07769330590963364, 0.36635440587997437, 0.44494011998176575, 0.39758750796318054, 0.19865436851978302, 0.05391376093029976, 0.344485878944397, 0.3376796841621399, 0.2551109194755554, 0.41324010491371155, 0.49759867787361145, 0.16078314185142517, 0.008642279542982578, 0.3891935348510742, 0.10599945485591888, 0.2954951524734497, 0.26175054907798767, 0.06646257638931274, 0.18089145421981812, 0.4296361207962036, 0.25410473346710205, 0.2769271731376648], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee6899ba5e96e95ab6a90cdc2e0fd165(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03364485502243042, 0.3667457103729248, 0.13212579488754272, 0.22184252738952637, 0.12624090909957886, 0.4710577130317688, 0.4346298277378082, 0.04987671971321106, 0.3879614472389221, 0.4055812954902649, 0.49922168254852295, 0.47514283657073975, 0.11034201085567474, 0.2955319285392761, 0.09823618084192276, 0.3721023201942444, 0.01526346243917942, 0.08688241988420486, 0.10771416872739792, 0.002441857475787401, 0.11812272667884827, 0.4805484712123871, 0.45628324151039124, 0.24116015434265137, 0.3230252265930176, 0.11549659073352814, 0.17233331501483917, 0.044745780527591705], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5c576abcba372503887fe87720117f57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46724948287010193, 0.3228239119052887, 0.13910481333732605, 0.46698665618896484, 0.05949760228395462, 0.47262322902679443], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6632152983516094597914fbd1047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61858562edc929e9999781fa546daa5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6632152983516094597914fbd1047e
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2953f53162ec121f53e59550975c818a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00787353515625, 0.112548828125, 0.38525390625, 0.411376953125, 0.37060546875, 0.481201171875, 0.28173828125, 0.11016845703125, 0.316162109375, 0.10125732421875, 0.291259765625, 0.31591796875, 0.35693359375, 0.033294677734375, 0.32421875, 0.490966796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53736879c88e2100fb705e29b9c3fd52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e5517fd2ef87341634c6e8797dec0ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53736879c88e2100fb705e29b9c3fd52
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ede31e79e12315d4d119d5e64dfd193(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3310546875, 0.459228515625, 0.0019168853759765625, 0.06744384765625, 0.039520263671875, 0.42236328125, 0.448974609375, 0.0007848739624023438, 0.2320556640625, 0.11236572265625, 0.06268310546875, 0.2462158203125, 0.040679931640625, 0.0270843505859375, 0.452392578125, 0.39892578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8d3982d08c563e6ce77294ee1e7cf62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_343f351cc42b6794ae430961f8a72619(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08026330918073654, 0.40921998023986816, 0.13583475351333618, 0.08133259415626526, 0.22759094834327698, 0.22167238593101501, 0.18369750678539276, 0.044350773096084595, 0.12026704847812653, 0.1127440482378006, 0.43629273772239685, 0.19715312123298645, 0.10477705299854279, 0.23748287558555603, 0.2282858043909073, 0.2088063806295395, 0.16448970139026642, 0.43656453490257263, 0.030065713450312614, 0.10992174595594406], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6142e6b6f8e1e7daed7aad8996c8070a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3606322407722473, 0.4069778621196747, 0.25268423557281494, 0.3450815975666046, 0.2618842124938965, 0.24295729398727417, 0.30913612246513367, 0.027644094079732895, 0.43795108795166016, 0.1039961576461792, 0.46336254477500916, 0.15622112154960632, 0.3557562828063965, 0.1580706387758255, 0.24847063422203064, 0.03408050909638405, 0.03802742809057236, 0.3951541781425476, 0.34027719497680664, 0.09069836884737015], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c9d0ae3805c3040f89c48b882dbaf0c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.259765625, 0.07318115234375, 0.283447265625, 0.203125, 0.2071533203125, 0.005001068115234375, 0.16015625, 0.06597900390625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_675ac781163081ac7d1e7785b5b3b457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52e6223eaea5679d50365260f81192ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_675ac781163081ac7d1e7785b5b3b457
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db41ce1093d4804b207a95635d34b11b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.041103918105363846, 0.4535641074180603, 0.21733126044273376, 0.2475132942199707, 0.4808821380138397, 0.2647680938243866, 0.27811458706855774, 0.33631592988967896, 0.2861585021018982, 0.05467132106423378, 0.09114310890436172, 0.0650382936000824, 0.3248242139816284, 0.12124419957399368, 0.2367454469203949, 0.22681787610054016, 0.14389044046401978, 0.15188521146774292, 0.18539872765541077, 0.20859083533287048, 0.39123231172561646, 0.020993249490857124, 0.44685792922973633, 0.028818771243095398], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e319bcaedaac29ac52f69a905ce93bc0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27799251675605774, 0.19256749749183655, 0.11548038572072983, 0.4734894037246704, 0.24328483641147614, 0.14044331014156342], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8ccac1805637a4eb070b3c73cef73435(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_157477e278fac051253405faa4830f3c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2529296875, 0.21435546875, 0.49853515625, 0.0279083251953125, 0.06536865234375, 0.442626953125, 0.177001953125, 0.498291015625, 0.453369140625, 0.214599609375, 0.417236328125, 0.05902099609375, 0.28515625, 0.462890625, 0.27734375, 0.378173828125, 0.45361328125, 0.300048828125, 0.332275390625, 0.49267578125, 0.3544921875, 0.2548828125, 0.292724609375, 0.4833984375, 0.38134765625, 0.3486328125, 0.333251953125], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_124cc0aff9492b8b82f588f24a3083f4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3852052092552185, 0.4961507320404053], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_be5d7872d052740271b0819e43df52b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.321044921875, 0.1322021484375, 0.3759765625, 0.09716796875, 0.431640625, 0.2880859375, 0.10479736328125, 0.1798095703125, 0.149658203125, 0.186767578125, 0.0198211669921875, 0.053955078125, 0.36083984375, 0.1763916015625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_000989294cc6292eeb88200cb887ab38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa07935ee51c9691258c16905ef29166(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_000989294cc6292eeb88200cb887ab38
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fedf919a83853c84aedce505ed4e2ac0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3523091971874237, 0.1127236932516098, 0.4907808303833008, 0.13777418434619904, 0.38994231820106506, 0.14153790473937988, 0.06242275610566139, 0.42054858803749084, 0.4220086932182312, 0.45978978276252747, 0.47028055787086487, 0.46909216046333313, 0.2153850495815277, 0.32732951641082764, 0.4964328110218048, 0.17712852358818054, 0.4905388653278351, 0.07705414295196533, 0.17450737953186035, 0.3284203112125397, 0.4664211869239807, 0.21081770956516266, 0.407073974609375, 0.3696712851524353, 0.30253008008003235, 0.2082945853471756, 0.17109209299087524, 0.44272321462631226], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c5c6d89d28c36662001db19af7395e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22743651270866394, 0.2095925211906433, 0.30369850993156433, 0.27022528648376465, 0.1789117455482483, 0.23376502096652985, 0.12276269495487213, 0.12825791537761688, 0.2969488799571991, 0.3427037298679352, 0.08935035765171051, 0.36897924542427063, 0.007959344424307346, 0.12447959929704666, 0.4265011250972748, 0.08835320174694061, 0.474994033575058, 0.44022995233535767, 0.2661784887313843, 0.414358913898468], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7f1aca61940d106b80cecabb39139c5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23509709537029266], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9edbf8828ed7bb5ad0cbb03f1ca71d6c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15591028332710266], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_baf840e72ffc321ae6de3f596187810c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.185302734375, 0.350341796875, 0.331298828125, 0.3974609375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ecbe141295466a1e6c2bcfa0dc996cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27392578125, 0.12066650390625, 0.2052001953125, 0.13525390625, 0.111328125, 0.2978515625, 0.4765625, 0.264404296875, 0.3525390625, 0.36328125, 0.442138671875, 0.0626220703125, 0.053070068359375, 0.081298828125, 0.0360107421875, 0.0706787109375, 0.045654296875, 0.369384765625, 0.07757568359375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e1235e817670753172553788745a36f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1861240565776825, 0.4869103729724884, 0.4760875999927521, 0.4227560758590698, 0.49862685799598694, 0.3923931419849396], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffcc9e3725d4c1c5f653bf2eb98053e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1607378125190735, 0.33086368441581726, 0.48351147770881653, 0.4867827296257019, 0.2078898549079895, 0.009476374834775925, 0.14497068524360657, 0.008652028627693653, 0.044510819017887115, 0.07363004237413406, 0.25495538115501404, 0.03690171614289284, 0.2969684898853302, 0.4987104535102844, 0.06758874654769897, 0.18741098046302795, 0.4421754777431488, 0.26295363903045654, 0.3124955892562866, 0.40645140409469604, 0.013307329267263412, 0.23849380016326904, 0.016621995717287064, 0.29047855734825134], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_487bb12a7b7c41953b9a5b538b25100c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.338623046875, 0.44580078125, 0.342529296875, 0.1339111328125, 0.312255859375, 0.49560546875, 0.292724609375, 0.408203125, 0.139892578125, 0.09930419921875, 0.410888671875, 0.1622314453125, 0.418701171875, 0.3896484375, 0.467529296875, 0.0207672119140625, 0.4033203125, 0.4462890625, 0.3837890625, 0.4931640625, 0.036468505859375, 0.2626953125, 0.10150146484375, 0.080322265625, 0.17138671875, 0.2484130859375, 0.1385498046875], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc6e586f5971d2a21fa1cd194b5d2406(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18226869404315948, 0.17136947810649872, 0.4374394714832306, 0.11121217906475067, 0.09940555691719055, 0.10673429071903229, 0.2518516182899475, 0.46257850527763367, 0.0319703072309494, 0.020469747483730316, 0.09344765543937683, 0.29241254925727844, 0.44174790382385254, 0.06748349219560623, 0.25710979104042053, 0.13576683402061462], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e04f1bd5aa6ffb4e834010df6f3e34a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48996928334236145, 0.07622731477022171, 0.15213455259799957, 0.26849162578582764, 0.23636884987354279, 0.024829354137182236, 0.20280596613883972, 0.3376026153564453, 0.2697717249393463, 0.3845614790916443, 0.46624404191970825, 0.3987833857536316, 0.0858837142586708, 0.03577658534049988], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3cba3571057b4d9f256d377f9f626fa8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4443359375, 0.219482421875, 0.09893798828125, 0.0200653076171875, 0.23974609375, 0.1927490234375, 0.214599609375, 0.48193359375, 0.4296875, 0.4462890625, 0.311767578125, 0.470947265625, 0.49365234375, 0.337158203125, 0.33251953125, 0.035888671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4248e41669d04c3046a186d39e22cf9b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2491455078125, 0.201904296875, 0.2454833984375, 0.442626953125, 0.494384765625, 0.0191802978515625, 0.209716796875, 0.3681640625, 0.3203125, 0.3564453125, 0.09930419921875, 0.002422332763671875, 0.4453125, 0.133056640625, 0.283203125, 0.2125244140625, 0.4443359375, 0.040313720703125, 0.1981201171875, 0.14306640625, 0.459716796875, 0.3720703125, 0.3330078125, 0.46044921875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8cdea709eddc63702971fff8c93601f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_abedf525d66d7a21464eb53e395aad91(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8cdea709eddc63702971fff8c93601f3
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4156709ad69e8d0e8213f6ebc5bfe0d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0911865234375, 0.48046875, 0.282958984375, 0.317626953125, 0.24169921875, 0.125244140625, 0.06866455078125, 0.1951904296875, 0.260986328125, 0.498046875, 0.47314453125, 0.35888671875, 0.407470703125, 0.306396484375, 0.3349609375, 0.1884765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b29a55d788bc611701a18d0d9ee8cf4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34978675842285156, 0.2920951545238495, 0.4704170525074005, 0.2657043933868408, 0.08190944790840149, 0.31052085757255554, 0.03262228146195412, 0.3518802523612976, 0.26324060559272766, 0.43060341477394104, 0.35299184918403625, 0.11967384070158005, 0.3251707851886749, 0.009811045601963997, 0.35488423705101013, 0.18538138270378113, 0.2303522229194641, 0.44733041524887085], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_738e37ff37a54bd8c340df55a29cc688(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1650390625, 0.1485595703125, 0.398681640625, 0.2200927734375, 0.373291015625, 0.443603515625, 0.332763671875, 0.16162109375, 0.219482421875, 0.342529296875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b5b0b8d8629cfedec717c8936060f8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01029205322265625, 0.1669921875, 0.2509765625, 0.322021484375, 0.449951171875, 0.310791015625, 0.329833984375, 0.17529296875, 0.2354736328125, 0.411376953125, 0.259033203125, 0.1693115234375, 0.04449462890625, 0.2393798828125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b129e9535d4810b0c5c8b120b6054809(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0057830810546875, 0.0364990234375, 0.017120361328125, 0.357421875, 0.43359375, 0.391357421875, 0.245849609375, 0.11468505859375, 0.337890625, 0.0223388671875, 0.3955078125, 0.11602783203125, 0.35546875, 0.2130126953125, 0.443603515625, 0.03179931640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53564ba522bacb38c544962dfcc6798c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6d1a33e801d0a9f6512aba0db61e931(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53564ba522bacb38c544962dfcc6798c
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdfe0330aa98256d1bc050c373aa12c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30126953125, 0.457275390625, 0.18994140625, 0.28662109375, 0.389892578125, 0.466064453125, 0.431884765625, 0.411376953125, 0.28173828125, 0.07562255859375, 0.228515625, 0.3759765625, 0.0831298828125, 0.27294921875, 0.267578125, 0.2093505859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38b09de3ab78231dc2c93d9a49e91c09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3076892c37fc86264b164601eada0807(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.184326171875, 0.2890625, 0.295654296875, 0.353271484375, 0.0301666259765625, 0.2237548828125, 0.1644287109375, 0.3330078125, 0.0465087890625, 0.11602783203125, 0.486572265625, 0.197509765625, 0.277099609375, 0.404296875, 0.04034423828125, 0.0948486328125, 0.2283935546875, 0.39306640625, 0.229248046875, 0.2110595703125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2cd575cff59c5abdddc48813519ba15a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_929e464880853bada3717612d336b864(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2cd575cff59c5abdddc48813519ba15a
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_694098c6bf87912a577767d8fd06b2a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0665283203125, 0.441650390625, 0.170654296875, 0.389404296875, 0.1842041015625, 0.1259765625, 0.33203125, 0.271484375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b53d54eb5716bfdae220e575e9bb47b7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44384765625, 0.4853515625, 0.466064453125, 0.34521484375, 0.1883544921875, 0.2156982421875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cadffc86204c1401ee2e028441676227(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1220707893371582, 0.21642285585403442, 0.0482056625187397, 0.3596499562263489, 0.1018778383731842, 0.14494402706623077, 0.35609930753707886, 0.30328476428985596, 0.3717028498649597, 0.23974740505218506, 0.025757690891623497, 0.06963090598583221, 0.017071736976504326, 0.4191068410873413, 0.2394927591085434, 0.17213952541351318], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f667242c8513337dca7546d27b41cda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16051198542118073, 0.447366863489151, 0.43090277910232544, 0.03631577640771866, 0.3200337886810303, 0.15795603394508362, 0.4568880498409271, 0.47700613737106323, 0.17582660913467407, 0.3687911033630371, 0.0758398175239563, 0.36841511726379395, 0.010338466614484787, 0.23786665499210358, 0.20688273012638092, 0.2518761456012726], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a9ff5b887c2183e06c162de5b55b2d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47141897678375244], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2fb80fda27f3f1ba27d48f66c28aba74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f5e91acf5998f004504a60225fb6773(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2fb80fda27f3f1ba27d48f66c28aba74
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e744bb23825681d908e64970b603532(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1426457b2f4a8aece2fe2d98d2df8816(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e744bb23825681d908e64970b603532
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b10cf725f8fb819db4fa10e448e32e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37951451539993286, 0.25179219245910645, 0.31783851981163025, 0.18866609036922455, 0.04207494482398033, 0.4304063320159912, 0.2690686583518982, 0.12159594893455505], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_56f9ff0a8996aad89dd87bd0b79dd3ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.019195556640625, 0.491455078125, 0.3310546875, 0.077880859375, 0.060882568359375, 0.01358795166015625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48b63be12c92e539a142c602ce814b00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.237548828125, 0.15185546875, 0.443115234375, 0.36865234375, 0.002422332763671875, 0.0013189315795898438], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1519a446773a54a64272fcbe3dd3698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d67650615e33d8f43692d3dddb75999(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39934444427490234, 0.07635892927646637, 0.134294331073761, 0.19782835245132446, 0.03528013825416565, 0.04937160387635231, 0.263991117477417, 0.43081825971603394], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_029b7db81591a545f610486e50fe0780(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15691722929477692, 0.3041386008262634, 0.3941383361816406, 0.3601309657096863, 0.06283599138259888, 0.32823294401168823, 0.2983897924423218, 0.025133274495601654, 0.22655150294303894, 0.24222174286842346, 0.34871628880500793, 0.4784260392189026, 0.23547732830047607, 0.03722626343369484, 0.3770420551300049, 0.03423895314335823], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4593f211359353ee0e444cd751c072a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1451416015625, 0.3076171875, 0.029571533203125, 0.42333984375, 0.412109375, 0.319580078125, 0.0765380859375, 0.263427734375, 0.01275634765625, 0.06610107421875, 0.1595458984375, 0.09356689453125], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a4669374975354d2cb97d26aed373ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95cf2c755a667a4dac63c73f692c50d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a4669374975354d2cb97d26aed373ae
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfa7d0a930a96a795dddc4b53bf763c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83bfc3ef07cbea4746117e48369e2470(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a6d051dfa976c5a12f3f3fac97617f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83bfc3ef07cbea4746117e48369e2470
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_020d7b247e0628fd2837c66e664f96be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54a34a9cb23b9de2e8ee998d94f104b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_020d7b247e0628fd2837c66e664f96be
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41c444d46c90416da5798fbf3369e011(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25194329023361206, 0.06469134986400604, 0.39174842834472656, 0.43415865302085876, 0.08552548289299011, 0.1505885124206543, 0.040716055780649185, 0.2764936685562134, 0.17049585282802582, 0.2916141450405121, 0.3539312481880188, 0.12883150577545166, 0.04574967548251152, 0.031007368117570877, 0.14149080216884613, 0.11085118353366852], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_309b90703bfac1e467a4a5ba6790ce8c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20202790200710297, 0.39147233963012695, 0.2172149270772934, 0.3104438781738281, 0.07637490332126617, 0.4444282650947571, 0.2987295091152191, 0.4190034866333008, 0.45375654101371765, 0.0862499549984932, 0.23903360962867737, 0.35195228457450867, 0.3327377140522003, 0.015063079074025154, 0.4506034851074219, 0.4097512364387512, 0.43211740255355835, 0.4619729518890381, 0.022824129089713097, 0.49165546894073486, 0.27593085169792175, 0.14189450442790985, 0.07481838762760162, 0.12157326191663742], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ba29a5314572236c2d06aff5f9f4f4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0945344939827919, 0.24895434081554413, 0.12713423371315002, 0.0909135490655899, 0.2311248481273651, 0.46323341131210327, 0.4104292392730713, 0.4477536976337433, 0.24634402990341187, 0.3701556324958801, 0.23399516940116882, 0.4005744755268097, 0.17767533659934998, 0.4342561364173889, 0.33292025327682495, 0.3827006220817566, 0.1261039674282074, 0.3618161082267761, 0.3270598351955414, 0.14204078912734985, 0.42956724762916565, 0.1433955729007721, 0.21646583080291748, 0.0008785785757936537, 0.36729830503463745], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12162a5c933a76ac7d4ea5578c8ba4dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3785487711429596, 0.2049773931503296, 0.18464137613773346, 0.28488245606422424, 0.09937495738267899, 0.06262414157390594, 0.4252054691314697, 0.009348977357149124, 0.18407832086086273, 0.3183162212371826], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9271a6cde118ab2265103c94e4b7dd5c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45542722940444946, 0.45078831911087036, 0.3839910626411438, 0.13759268820285797, 0.3028040826320648, 0.3482210338115692, 0.4321228861808777, 0.3627060651779175, 0.0017289540264755487, 0.17165012657642365, 0.4148758351802826, 0.25126224756240845, 0.2714868485927582, 0.2837449312210083, 0.3793672025203705, 0.09696994721889496, 0.25425809621810913, 0.08384227752685547, 0.36251315474510193, 0.1983405202627182, 0.14454765617847443, 0.24948330223560333, 0.21039648354053497, 0.16104815900325775], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da3cc8e81cf35b494aa0de2bd25c6ff2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14961816370487213, 0.4679696261882782, 0.38170820474624634, 0.3246340751647949, 0.26617342233657837, 0.0870680958032608, 0.06824124604463577, 0.46924230456352234, 0.43040522933006287, 0.47529202699661255, 0.2794003188610077, 0.2149907797574997, 0.3161829710006714, 0.46138033270835876, 0.2549659013748169, 0.07381010800600052], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bb14e25d0f14e0e85c2881e0904a657(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36952510476112366, 0.38168516755104065, 0.26736944913864136, 0.21078473329544067, 0.26681649684906006, 0.34484750032424927, 0.20838579535484314, 0.18829235434532166, 0.01602284610271454, 0.11152810603380203, 0.2468690276145935, 0.07728417962789536, 0.37213823199272156, 0.4975910484790802, 0.21164719760417938, 0.1925675868988037], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d72a23d43a9f1c2c4b5554b18dffa059(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4085468351840973, 0.17062672972679138, 0.45825719833374023, 0.29606807231903076, 0.28760841488838196, 0.18871311843395233], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_42c1445374bcd6fa6fc78f5a6e15a226(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af53d8486926735fd53b98e3fe822d5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_42c1445374bcd6fa6fc78f5a6e15a226
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8234f609bf23accff695727be4383158(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12022629380226135, 0.3175075054168701, 0.34866708517074585, 0.1521771252155304, 0.20116068422794342, 0.44688984751701355, 0.3414849042892456, 0.11919514089822769, 0.34674662351608276, 0.1800612211227417], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8691bbc27aabe3b3658570f9d5895932(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b375570a5ae54a82d1d5d3b5f09747f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8691bbc27aabe3b3658570f9d5895932
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f03a8d3924845c19fc33960a3a00973a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3aace01534a49af00f5b822b5b98626b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1676793098449707, 0.17979022860527039, 0.2934715747833252, 0.2781734764575958, 0.2082175314426422, 0.14475667476654053, 0.4206410348415375, 0.011708622798323631, 0.37385717034339905, 0.3521234393119812, 0.2878304123878479, 0.021541748195886612], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc1d5ecde5006aaa048820ffa08afc0a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10912984609603882], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aa7a22e5957445239889c14f8e3e2915(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10650634765625, 0.49755859375, 0.10595703125, 0.2119140625, 0.1536865234375, 0.462890625, 0.436767578125, 0.2222900390625, 0.34130859375, 0.01165771484375, 0.378173828125, 0.3271484375, 0.0153656005859375, 0.402587890625, 0.1380615234375, 0.37060546875, 0.347412109375, 0.273193359375, 0.39501953125, 0.00494384765625, 0.286376953125, 0.3662109375, 0.07867431640625, 0.2802734375, 0.306640625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f8698871de20639b493eba4e6afc19c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15514226257801056, 0.10263408720493317, 0.3570539355278015, 0.12129030376672745, 0.23557323217391968, 0.30144912004470825, 0.45777085423469543, 0.07622559368610382, 0.1706066131591797, 0.30453985929489136, 0.018266770988702774, 0.12415596097707748, 0.36293894052505493, 0.1443260908126831, 0.1880456507205963, 0.2533985674381256, 0.4619823098182678, 0.467367559671402, 0.29177606105804443, 0.44986194372177124], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7872bb5d5bd139750fed1830f3f860f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02d4e41eea3c58bcc66add609f3db63e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.009206675924360752, 0.1346907764673233, 0.29421254992485046, 0.18989990651607513, 0.27263328433036804, 0.47745853662490845, 0.320484459400177, 0.10738761723041534, 0.030798502266407013, 0.37660759687423706, 0.3771599233150482, 0.005188200622797012, 0.32512378692626953, 0.39740756154060364, 0.14224708080291748, 0.15263108909130096, 0.30226925015449524, 0.4184322655200958, 0.35889777541160583], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ce53babf27cf31b4604931d80a85421(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4027130603790283, 0.0941222757101059, 0.45729270577430725], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7710bca35b648a89caeb03e946f8fbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4033203125, 0.4951171875, 0.367431640625, 0.275634765625, 0.49609375, 0.0085906982421875, 0.00885772705078125, 0.050811767578125, 0.34326171875, 0.1748046875, 0.43994140625, 0.350830078125, 0.486572265625, 0.2264404296875, 0.0447998046875, 0.1693115234375, 0.061553955078125, 0.0193023681640625, 0.373046875, 0.00887298583984375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_307abfb526388c69ea629b37336dcf28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4a6f021731111e9eeb6bc24df57445b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4786035716533661, 0.3606211841106415, 0.4949686527252197, 0.0027120159938931465, 0.4822743833065033, 0.13422468304634094, 0.08487550914287567, 0.0845642238855362, 0.453779399394989, 0.09216813743114471, 0.3184097409248352, 0.46610793471336365, 0.48222866654396057, 0.06859660893678665, 0.4242226481437683, 0.06918448954820633], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2c47308c6624e0574ec410d953d77bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3228051960468292, 0.429750919342041, 0.4397377371788025, 0.05887148156762123, 0.3185742199420929, 0.4059774875640869, 0.2080698311328888, 0.4713241755962372, 0.2971794605255127, 0.03071005828678608, 0.4740563929080963, 0.14614959061145782, 0.06781584024429321, 0.22173984348773956, 0.2048305720090866, 0.34762606024742126, 0.23352620005607605, 0.3321458697319031, 0.002032908145338297, 0.34542885422706604, 0.18449491262435913, 0.31470417976379395, 0.2758457064628601, 0.14990775287151337], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ad594254b677c3770447e72791db5a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.382568359375, 0.43505859375, 0.0885009765625, 0.359130859375, 0.05615234375, 0.1907958984375, 0.2259521484375, 0.2119140625, 0.427490234375, 0.144287109375, 0.29833984375, 0.2003173828125, 0.043609619140625, 0.1668701171875, 0.216796875, 0.496337890625, 0.371337890625, 0.241943359375, 0.046905517578125, 0.11029052734375, 0.12420654296875, 0.0223846435546875, 0.0963134765625, 0.46923828125, 0.07208251953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_51cb7ec7a7edc563e89c6d53b7f238bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4729626178741455, 0.13636265695095062, 0.1093612089753151, 0.20567800104618073, 0.4284645617008209, 0.47321566939353943, 0.38227298855781555, 0.017177067697048187, 0.2832200527191162, 0.20666798949241638, 0.1629960536956787, 0.004013626836240292, 0.3610539138317108, 0.2942642867565155, 0.3647346496582031, 0.05675878748297691, 0.03246772661805153, 0.498212605714798, 0.38672730326652527, 0.13689285516738892], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50544a43570a3ae1e1673b6d87843b5c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49609375, 0.40234375, 0.335205078125, 0.386962890625, 0.190185546875, 0.406494140625, 0.351806640625, 0.488525390625, 0.1014404296875, 0.156982421875, 0.41748046875, 0.034820556640625, 0.00984954833984375, 0.17236328125, 0.18505859375, 0.273681640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b545e77506ca8ec33abfcccd0a276963(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4401087462902069, 0.18968552350997925, 0.2983936369419098], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a257396e76f62a68bb17bb3010d1fc07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0487060546875, 0.06707763671875, 0.221435546875, 0.1561279296875, 0.2391357421875, 0.277587890625, 0.22412109375, 0.1400146484375, 0.48779296875, 0.14697265625, 0.0814208984375, 0.494384765625, 0.13232421875, 0.460205078125, 0.0167083740234375, 0.3125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_419fd250b158f1d8dbcfaddf4fadce0b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46435546875, 0.451904296875, 0.317626953125, 0.0281524658203125, 0.1658935546875, 0.203369140625, 0.005367279052734375, 0.31201171875, 0.333984375, 0.2059326171875, 0.2115478515625, 0.32666015625, 0.316650390625, 0.045623779296875, 0.0231475830078125, 0.08551025390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_044b430a3824f3e6286db64e13750537(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_702b811ba27e7472fdcbb23ff2946810(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_044b430a3824f3e6286db64e13750537
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4df04cb6ca9ed65b27985eab150106c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42431640625, 0.31689453125, 0.1468505859375, 0.444580078125], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c74aa2f05e5912b78bd007c9c5941c66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10571150481700897, 0.3033667802810669, 0.29629018902778625, 0.10821658372879028, 0.42044299840927124, 0.017069676890969276, 0.0799904391169548, 0.408290296792984, 0.3042501211166382, 0.32212141156196594, 0.18388167023658752, 0.46834683418273926, 0.39656776189804077, 0.2987360954284668, 0.41920098662376404, 0.09295175224542618, 0.08322545140981674, 0.15256479382514954, 0.28603261709213257, 0.02421584539115429, 0.1650223284959793, 0.04628479480743408, 0.02079380676150322, 0.3675108551979065, 0.3939831554889679, 0.05279161036014557, 0.1820446252822876, 0.12170904874801636], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f864570f15bdafe5bf6a6edf12b3b9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48481687903404236, 0.03226860240101814, 0.409737229347229, 0.10667867213487625, 0.25821226835250854, 0.20652256906032562, 0.34879693388938904, 0.40778183937072754, 0.2233554571866989, 0.039552077651023865, 0.458051860332489, 0.3616539537906647, 0.19270800054073334, 0.18316145241260529, 0.12145622074604034, 0.3151646554470062], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_99bb7ecd362b1b0862189abdaad7490e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.443359375, 0.185791015625, 0.41455078125, 0.3955078125, 0.360595703125, 0.4091796875, 0.2113037109375, 0.453369140625, 0.1993408203125, 0.2305908203125, 0.30078125, 0.1390380859375, 0.1416015625, 0.253173828125, 0.0299835205078125, 0.4736328125, 0.412353515625, 0.0092010498046875, 0.427490234375, 0.353271484375, 0.11260986328125, 0.4716796875, 0.46142578125, 0.331787109375, 0.0654296875, 0.005458831787109375, 0.1749267578125, 0.235107421875, 0.415283203125, 0.150634765625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_edb1898edb59ef4c145761dfeae1d5c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.326904296875, 0.0712890625, 0.1953125, 0.3740234375, 0.286865234375, 0.136474609375, 0.06951904296875, 0.312744140625, 0.037933349609375, 0.3291015625, 0.322998046875, 0.125, 0.456787109375, 0.224853515625, 0.01056671142578125, 0.05853271484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76d8e0fb3efd102c8fde61fa9ada07c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2218017578125, 0.404296875, 0.393798828125, 0.361572265625, 0.036956787109375, 0.09112548828125, 0.09161376953125, 0.416748046875, 0.363037109375, 0.287841796875, 0.3388671875, 0.42919921875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b338f7a2995b3c659181386300add140(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.2275390625, 0.1478271484375, 0.289306640625, 0.467529296875, 0.057891845703125, 0.0711669921875, 0.384033203125, 0.1871337890625, 0.1453857421875, 0.427978515625, 0.255126953125, 0.005550384521484375, 0.40869140625, 0.005435943603515625, 0.04583740234375, 0.392578125, 0.028106689453125, 0.461181640625, 0.2469482421875, 0.359130859375, 0.20068359375, 0.465576171875, 0.472412109375, 0.341064453125, 0.1566162109375, 0.320556640625, 0.384033203125, 0.3603515625, 0.10845947265625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7eb9ede33f4c945b469dbaf3162c3c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23129329085350037, 0.35567665100097656, 0.4353750944137573, 0.2626722455024719, 0.4813111424446106, 0.07985391467809677, 0.051443494856357574, 0.452391117811203, 0.47054991126060486, 0.22347362339496613, 0.4697490334510803, 0.2317468374967575, 0.410549134016037, 0.39019984006881714, 0.4396342933177948, 0.030026312917470932, 0.33657386898994446, 0.019993893802165985, 0.34128254652023315, 0.06784695386886597, 0.06322044879198074, 0.014316456392407417, 0.005126329138875008, 0.41074058413505554], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1afff34b4d293a55decf8b869daa40c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cd3fb3264a258247cf9e197bcd7fde7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.491455078125, 0.2431640625, 0.04229736328125, 0.48974609375, 0.03253173828125, 0.479248046875, 0.3388671875, 0.1591796875, 0.26806640625, 0.02069091796875, 0.07989501953125, 0.48779296875, 0.0269012451171875, 0.1307373046875, 0.041046142578125, 0.129150390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5035737aa8e3031df3566b8e195b2c2e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20073145627975464, 0.19323916733264923, 0.08362933993339539, 0.13092714548110962, 0.27938252687454224, 0.1831156462430954, 0.22815445065498352, 0.4483563303947449, 0.13776199519634247, 0.054065361618995667, 0.05347280576825142, 0.05135173350572586, 0.3012189269065857, 0.17462705075740814, 0.4347302317619324, 0.4228975474834442, 0.20515047013759613, 0.4091939330101013, 0.469049870967865, 0.28336626291275024, 0.043662507086992264, 0.06544709205627441, 0.4159556031227112, 0.0066133951768279076], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_45d0f84e5630d090282ff45b2f982f74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f30f63c78156fe15afdfa251604523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_45d0f84e5630d090282ff45b2f982f74
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c45db6b860ccd4ab063a9bdb761c461(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3983674645423889, 0.06937843561172485, 0.08100123703479767, 0.3635607659816742, 0.03695313259959221, 0.10611724108457565, 0.31153035163879395, 0.4789060950279236, 0.3160090148448944, 0.20541639626026154, 0.2760399580001831, 0.43472111225128174, 0.33438050746917725, 0.32099276781082153, 0.3778213858604431, 0.46171244978904724, 0.03985130414366722, 0.3828893303871155, 0.39521318674087524, 0.03116767108440399, 0.22197653353214264, 0.2493797391653061, 0.07991384714841843, 0.4995659291744232, 0.029986726120114326], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a0077d5c32b4e36850eac0d383185e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1dce7872f4c994ef385ef00d8536881f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a0077d5c32b4e36850eac0d383185e58
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75f03c897655542e5790d1ee2e3852f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d370303e1d33c2d8b6f14ff60aa222a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75f03c897655542e5790d1ee2e3852f3
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc1ff6490780e6e78d466a677e51ab4f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468505859375, 0.263916015625, 0.264892578125, 0.327880859375, 0.076171875, 0.1893310546875, 0.421630859375, 0.108154296875, 0.23193359375, 0.308837890625, 0.29736328125, 0.1778564453125, 0.1708984375, 0.1480712890625, 0.359130859375, 0.364501953125, 0.408447265625, 0.17724609375, 0.43359375, 0.419677734375, 0.2015380859375, 0.31396484375, 0.273193359375, 0.2178955078125, 0.22119140625, 0.425048828125, 0.153564453125, 0.43994140625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db86cc7b39e00fb9b7af4ee4e678b8f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2822265625, 0.219970703125, 0.11199951171875, 0.03021240234375, 0.258056640625, 0.341796875, 0.0789794921875, 0.2471923828125, 0.181884765625, 0.1890869140625, 0.27197265625, 0.235107421875, 0.446044921875, 0.30126953125, 0.294189453125, 0.291015625, 0.15869140625, 0.115966796875, 0.322998046875, 0.007312774658203125, 0.032806396484375, 0.34375, 0.09686279296875, 0.148193359375, 0.42724609375, 0.43701171875, 0.262451171875, 0.264404296875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01411caba83f4ab2ccf19af905da6af9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4033203125, 0.10174560546875, 0.08599853515625, 0.4541015625, 0.05096435546875, 0.10528564453125, 0.05877685546875, 0.0892333984375, 0.427734375, 0.26953125, 0.200439453125, 0.356201171875, 0.482421875, 0.0679931640625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_97ec4acd144992c8723ff703e54ceff5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2413330078125, 0.2110595703125, 0.2169189453125, 0.28369140625, 0.45849609375, 0.11956787109375, 0.004974365234375, 0.33837890625, 0.29638671875, 0.455810546875, 0.43701171875, 0.255615234375, 0.24072265625, 0.07379150390625, 0.1644287109375, 0.133544921875, 0.36083984375, 0.12841796875, 0.46826171875, 0.039031982421875, 0.05120849609375, 0.2578125, 0.252685546875, 0.43408203125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c4a9a5fde2d51c170295b49adb0ed15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_568e60087593cc3a3f3a8c180ca91455(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.326416015625, 0.354248046875, 0.44873046875, 0.307373046875, 0.3271484375, 0.416748046875, 0.4384765625, 0.339111328125, 0.323974609375, 0.45947265625, 0.205078125, 0.2320556640625, 0.1634521484375, 0.2578125, 0.267333984375, 0.433349609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_952885a5ac2397b8827cfabc060e68b3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2744140625, 0.150390625, 0.1641845703125, 0.207763671875, 0.0167388916015625, 0.353759765625, 0.476806640625, 0.47216796875, 0.094482421875, 0.36328125, 0.367919921875, 0.222900390625, 0.205078125, 0.46142578125, 0.270751953125, 0.183349609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_688e6e6c6235f87219a2f2d0c5aa0bf9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2902373671531677, 0.20752455294132233, 0.18321511149406433, 0.386982262134552, 0.35134267807006836, 0.31281939148902893, 0.08195465803146362, 0.4057801067829132, 0.36052465438842773, 0.28591957688331604, 0.44449418783187866, 0.01628252863883972, 0.19470679759979248, 0.146096870303154, 0.012329405173659325, 0.17546376585960388], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7d7e5c7a634f7665fa1ed1c40cddd15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29150390625, 0.05560302734375, 0.35693359375, 0.287353515625, 0.2408447265625, 0.1668701171875, 0.0199737548828125, 0.06494140625, 0.339111328125, 0.41650390625, 0.2408447265625, 0.312255859375, 0.45849609375, 0.1741943359375, 0.062347412109375, 0.2498779296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b9fbf83659fd231150d3c27298da7571(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1651887595653534, 0.3823971152305603, 0.012815491296350956, 0.12544819712638855, 0.34578707814216614, 0.1590312272310257, 0.215338796377182, 0.2034866213798523, 0.3956415355205536, 0.45975786447525024, 0.35504060983657837, 0.07357422262430191, 0.2803668677806854, 0.4242789149284363, 0.3419344425201416, 0.3631197214126587], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e944766883120ad853d3fd096d95d587(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b9134b1b9390b3f5acca00a648677c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e944766883120ad853d3fd096d95d587
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49462890625, 0.280029296875, 0.28076171875, 0.1004638671875, 0.07861328125, 0.12939453125, 0.0908203125, 0.34521484375, 0.2379150390625, 0.12298583984375, 0.1728515625, 0.09832763671875, 0.293701171875, 0.08843994140625, 0.2293701171875, 0.39794921875, 0.2724609375], dtype='float16').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_603846aee6fda57b2c4be1b40395bbf4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30712890625, 0.10467529296875, 0.037689208984375, 0.2802734375, 0.4775390625, 0.437255859375, 0.1737060546875, 0.36669921875, 0.046844482421875, 0.04998779296875, 0.0728759765625, 0.452392578125, 0.394287109375, 0.319580078125, 0.3330078125, 0.2470703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_491d790e610d22513dd89eb29b4b6ca3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1303299516439438, 0.03763541206717491, 0.07520920783281326, 0.3425760269165039, 0.44307947158813477, 0.46758487820625305, 0.3308601677417755, 0.30550694465637207, 0.2729876935482025, 0.02473575994372368, 0.20587129890918732, 0.3915104568004608, 0.012858903035521507, 0.40062904357910156, 0.0284903421998024, 0.4463628828525543], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03c4130dc20514342ebbd5a4141ecf89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.465576171875, 0.322509765625, 0.08758544921875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7cb024698962738d00118509aca94e92(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06026412919163704], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e544c633d9a38d011bc632486ed78bd7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.140380859375, 0.291015625, 0.1893310546875, 0.1263427734375, 0.386962890625, 0.059326171875, 0.387939453125, 0.2203369140625, 0.061004638671875, 0.3212890625, 0.2269287109375, 0.275390625, 0.073486328125, 0.32177734375, 0.067138671875, 0.01605224609375, 0.47119140625, 0.30126953125, 0.046051025390625, 0.1405029296875, 0.1492919921875, 0.042999267578125, 0.401123046875, 0.426025390625, 0.2626953125, 0.2200927734375, 0.22509765625], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88b2b58be1f2f740e880fa8ff3123f1a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19781267642974854, 0.2387067973613739, 0.39740028977394104, 0.48518136143684387, 0.3846694827079773, 0.3808993995189667, 0.2739618122577667, 0.0014804324600845575, 0.31718719005584717, 0.24835486710071564, 0.08987484127283096, 0.10691870003938675, 0.15099146962165833, 0.12628492712974548, 0.0180512685328722, 0.3535275161266327, 0.2368859052658081, 0.12400659173727036, 0.25730958580970764, 0.1969214379787445], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f5b9308516a40dd7544461a59c9610(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8808df4979b094e72063c02093bae749(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2454833984375, 0.491943359375, 0.253662109375, 0.308349609375, 0.1329345703125, 0.15234375, 0.225830078125, 0.48876953125, 0.34912109375, 0.1640625, 0.497314453125, 0.0665283203125, 0.25439453125, 0.2200927734375, 0.361572265625, 0.2218017578125, 0.073974609375, 0.10595703125, 0.3564453125, 0.11029052734375, 0.2161865234375, 0.08258056640625, 0.364990234375, 0.05987548828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c5a6eeecf1ab5464b0e755f04ea9b5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3387245535850525, 0.3313748836517334, 0.29923883080482483, 0.30941635370254517, 0.10979581624269485, 0.4587079584598541], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8f15038350e0854a2d023863ef0ec87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05010986328125, 0.39111328125, 0.0562744140625, 0.458251953125, 0.300537109375, 0.24951171875, 0.20751953125, 0.35498046875, 0.298828125, 0.1077880859375, 0.475341796875, 0.360595703125, 0.49072265625, 0.294189453125, 0.0828857421875, 0.279296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52f1a0120bb7f876da028b96c36d7096(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18353208899497986, 0.4381841719150543, 0.43315696716308594, 0.4716637134552002, 0.4496189057826996, 0.3948098421096802, 0.19274629652500153, 0.15249179303646088, 0.19619686901569366, 0.10992196202278137, 0.39634430408477783, 0.28256726264953613, 0.3325127363204956, 0.49824029207229614, 0.010047552175819874, 0.49119874835014343, 0.4960823655128479, 0.30181294679641724, 0.23462559282779694, 0.20479154586791992], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc20f10f9a9329eb4479af7db0b5c35c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.471435546875, 0.389892578125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3c635ad0bef112060eef7f1e8a95336(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.271484375, 0.272705078125, 0.04022216796875, 0.1494140625, 0.433349609375, 0.37109375, 0.3251953125, 0.04693603515625, 0.254638671875, 0.312255859375, 0.05914306640625, 0.2423095703125, 0.2069091796875, 0.10662841796875, 0.1241455078125, 0.1895751953125, 0.380859375, 0.0550537109375, 0.003971099853515625, 0.416748046875, 0.408447265625, 0.464111328125, 0.298095703125, 0.374755859375, 0.150390625, 0.284423828125, 0.09930419921875, 0.052642822265625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63c2fffe65d7d4b426eeca96085da554(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17613212764263153], dtype='float32').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fc6b52bb4c990849a058b4e459608ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab8aa5a0c85d4f8195c1a704c966e3b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47770825028419495, 0.36548465490341187, 0.4036407768726349, 0.386543869972229, 0.14868228137493134, 0.1876913160085678, 0.22720620036125183, 0.044085126370191574], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc2a422837773e8c54137c6c5f5ed75f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.054814621806144714, 0.2213134765625, 0.06244350224733353, 0.48673316836357117, 0.1161513403058052, 0.49839362502098083, 0.2461339682340622, 0.04927139729261398, 0.19707784056663513, 0.4315173923969269, 0.2322216033935547, 0.13837380707263947, 0.32219353318214417, 0.32074275612831116, 0.013038142584264278, 0.333759605884552, 0.1301092803478241, 0.07888000458478928, 0.11192148178815842, 0.32651668787002563, 0.22108586132526398, 0.2475035935640335, 0.21045856177806854, 0.08128760755062103], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8fbb3f564804e969da86a4841a1300b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e7e1dc6abb86236780ecfb41f906037(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8fbb3f564804e969da86a4841a1300b9
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a90588dc31572926879671eb774c349(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07817330956459045, 0.47024479508399963, 0.10832461714744568, 0.20023180544376373, 0.1339307427406311, 0.3346228301525116, 0.039359960705041885, 0.019840244203805923, 0.2854189872741699, 0.42357105016708374, 0.462554007768631, 0.4714299440383911, 0.14640496671199799, 0.3264470398426056, 0.095748670399189, 0.18772536516189575], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_49901c378cd6faa05aede29130a7405f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1993408203125, 0.048065185546875, 0.06195068359375, 0.28955078125, 0.07147216796875, 0.37109375, 0.05596923828125, 0.46533203125, 0.445556640625, 0.298828125, 0.140380859375, 0.01873779296875, 0.3046875, 0.254150390625, 0.05340576171875, 0.47314453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41f945854ee5b0686db39804912c28c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.314208984375, 0.1951904296875, 0.195556640625, 0.2330322265625, 0.2900390625, 0.1270751953125, 0.45556640625, 0.30712890625, 0.330078125, 0.1600341796875, 0.4287109375, 0.2310791015625, 0.232177734375, 0.3720703125, 0.285888671875, 0.138427734375, 0.35009765625, 0.471435546875, 0.463623046875, 0.49951171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_300380de755e3c071f389576c4ceebc2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_394feea024cfab9d87b74ba3626234dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_300380de755e3c071f389576c4ceebc2
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72c1ae000d603bb2c9b656513763d1fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24495409429073334, 0.2656266689300537, 0.42185112833976746, 0.09618359804153442, 0.30824464559555054, 0.4784311056137085, 0.17042966187000275, 0.05813126638531685, 0.10628416389226913, 0.31504330039024353, 0.23479729890823364, 0.1934221237897873, 0.06193731725215912, 0.31435665488243103, 0.300762414932251, 0.06295124441385269, 0.17799273133277893, 0.19137854874134064, 0.4448186159133911, 0.03327353671193123, 0.22299808263778687, 0.2867918014526367, 0.30891767144203186, 0.4488803744316101], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_217da5d8fc303b006c256135c95add33(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09423828125, 0.028656005859375, 0.09210205078125, 0.3564453125, 0.463623046875, 0.2198486328125, 0.1788330078125, 0.319091796875, 0.391845703125, 0.37255859375, 0.4091796875, 0.31494140625, 0.417724609375, 0.0574951171875, 0.2607421875, 0.1798095703125, 0.3955078125, 0.0628662109375, 0.426513671875, 0.3388671875, 0.2296142578125, 0.09930419921875, 0.305908203125, 0.342529296875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c9d64c3405f35444e1b418749df3d6a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1348876953125, 0.445068359375, 0.45751953125, 0.305908203125, 0.0640869140625, 0.06744384765625, 0.38623046875, 0.3232421875, 0.41845703125, 0.2337646484375, 0.2496337890625, 0.344482421875, 0.305908203125, 0.47900390625, 0.45703125, 0.379638671875, 0.387939453125, 0.36865234375, 0.285400390625, 0.194580078125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d81c6f168c7d191ccfe1d3b04e54fee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01802189275622368, 0.2889241874217987, 0.433701753616333, 0.4120091497898102, 0.05242191627621651, 0.03850168734788895, 0.1896485835313797, 0.1942872554063797, 0.1932070553302765, 0.3873414695262909, 0.3095244765281677, 0.08236957341432571, 0.3121007978916168, 0.05806032940745354, 0.20921814441680908, 0.44275781512260437], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_548822c5178e12a4ded39d29136ecc5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.223388671875, 0.2095947265625, 0.1444091796875, 0.289306640625, 0.056304931640625, 0.22412109375, 0.468505859375, 0.36279296875, 0.391845703125, 0.4150390625, 0.25439453125, 0.440673828125, 0.32421875, 0.131591796875, 0.262939453125, 0.142578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_445b6f84c836328707f5f3dedf585367(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37860774993896484, 0.29497483372688293, 0.1501675546169281, 0.22178427875041962, 0.34429827332496643, 0.3908940851688385, 0.14626739919185638, 0.1947774887084961, 0.491841584444046, 0.05667727068066597, 0.08535759150981903, 0.4773094058036804, 0.20714935660362244, 0.3450388014316559, 0.4511415958404541, 0.24482226371765137, 0.3056967258453369, 0.3366304636001587], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c9d822022d85afc15b646397e9bb3a31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4863576889038086, 0.4957694113254547, 0.11964450031518936, 0.3966739773750305, 0.3009011149406433, 0.4359879493713379, 0.05233896151185036, 0.02871358022093773, 0.3765561878681183, 0.41989997029304504, 0.19779612123966217, 0.44804006814956665, 0.16191942989826202, 0.4547794461250305, 0.42152196168899536, 0.39427649974823], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8b20a54f128a94b59f5f2303e683ca8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a136111df886895031f8bc280ddef4c7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42236328125, 0.1236572265625, 0.2110595703125, 0.2178955078125, 0.016876220703125, 0.1673583984375, 0.380615234375, 0.0860595703125, 0.473388671875, 0.26171875, 0.1658935546875, 0.287841796875, 0.03192138671875, 0.060546875, 0.318115234375, 0.4208984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ccc32bca7f9304e49d7626693d202143(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c482ede48f07d6a9638bb64b65e0284(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28173828125, 0.2249755859375, 0.067138671875, 0.16748046875, 0.19873046875, 0.44677734375, 0.206787109375, 0.0214080810546875, 0.283935546875, 0.12939453125, 0.461669921875, 0.08099365234375, 0.38330078125, 0.2027587890625, 0.049102783203125, 0.356201171875, 0.08343505859375, 0.1915283203125, 0.155517578125, 0.146240234375, 0.21533203125, 0.2939453125, 0.407958984375, 0.0841064453125, 0.31201171875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffdbaf2494f02ab9259233c892b8a760(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.424573689699173, 0.3527064025402069, 0.011664053425192833, 0.21140806376934052, 0.3060603141784668, 0.39724013209342957, 0.12772756814956665, 0.22538523375988007, 0.40063467621803284, 0.3671797811985016, 0.32044917345046997, 0.38872966170310974, 0.08131781220436096, 0.3045196235179901, 0.2474953532218933, 0.06846389919519424], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb3db4768acb65c43858c37f4b7cbee5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03204345703125, 0.1966552734375, 0.36962890625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4f091b9f6c30c5006e0da069f9f54160(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35952749848365784, 0.11570317298173904], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_108046ff2454a7114f1883cb054baef2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20849609375, 0.4306640625, 0.3076171875, 0.07366943359375, 0.037567138671875, 0.04791259765625, 0.1845703125, 0.288330078125, 0.3818359375, 0.245849609375, 0.0018863677978515625, 0.1005859375], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b280c40ef26c2dc305205e203965ec87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_042c536d1f430edc0522b9b402570713(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0555419921875, 0.2449951171875, 0.042510986328125, 0.1064453125, 0.05450439453125, 0.12017822265625, 0.455322265625, 0.393310546875, 0.307861328125, 0.20849609375, 0.38623046875, 0.353515625, 0.323486328125, 0.481201171875, 0.490966796875, 0.3720703125, 0.257080078125, 0.131591796875, 0.302490234375, 0.038970947265625, 0.1668701171875, 0.1744384765625, 0.18505859375, 0.263427734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c92a4b1197c5307ece45df23b93c1e8c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.405029296875, 0.10137939453125, 0.06011962890625, 0.339111328125, 0.45556640625, 0.256103515625, 0.17236328125, 0.11175537109375, 0.4228515625, 0.106689453125, 0.473876953125, 0.1937255859375, 0.497802734375, 0.23583984375, 0.279296875, 0.477783203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e43351706ff533d341c8e970dc21ad2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_866f37723b2b9391d3b9bb996994d395(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e43351706ff533d341c8e970dc21ad2
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ff51d4e2712d700a291cbdd2202b29d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46268564462661743, 0.28591135144233704, 0.24590671062469482, 0.015405168756842613, 0.15207087993621826, 0.23972660303115845, 0.4069848656654358, 0.39187178015708923, 0.3483235836029053, 0.19665083289146423, 0.024518953636288643, 0.24138307571411133, 0.2380891740322113, 0.3336452841758728, 0.18749438226222992, 0.3475448191165924], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8912989501c02cb907fcf56112797d00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28301334381103516, 0.4150834381580353, 0.07568085193634033, 0.3057267665863037, 0.153570294380188, 0.4884285032749176, 0.42530709505081177, 0.20497959852218628, 0.08585365861654282, 0.35066652297973633], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2dc2e33a0882c25d4c11ba764791452b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1395263671875, 0.037628173828125, 0.25341796875, 0.056549072265625, 0.2203369140625, 0.498779296875, 0.484375, 0.2978515625, 0.363525390625, 0.07647705078125, 0.424560546875, 0.41015625, 0.31005859375, 0.30126953125, 0.4501953125, 0.303955078125, 0.0238037109375, 0.047393798828125, 0.4697265625, 0.14599609375, 0.3876953125, 0.32373046875, 0.38671875, 0.272705078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_725492ca42fa6ff17014281e2164a225(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2537195384502411, 0.17678195238113403, 0.02031444013118744, 0.0836610347032547, 0.3442402482032776, 0.07396211475133896, 0.05680108442902565, 0.31502822041511536, 0.1663208156824112, 0.23262158036231995], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_139652bddcf60e0c4a2d6b9efb8c4aee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.461669921875, 0.16064453125, 0.1844482421875, 0.057891845703125, 0.404296875, 0.3837890625, 0.09478759765625, 0.445068359375, 0.2607421875, 0.10650634765625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f4f08e601215c043ad1f8b4570e9c2f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1333581805229187, 0.18253366649150848, 0.23889200389385223], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f1606fe33b3f3ab2de8aa12d610e5c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1629984974861145, 0.20385143160820007, 0.4400451183319092, 0.4380092918872833, 0.331093966960907, 0.4740174114704132, 0.3592408299446106, 0.14778074622154236, 0.2271464616060257, 0.07622098177671432, 0.03731523081660271, 0.2130957394838333, 0.07194535434246063, 0.16492339968681335, 0.39361584186553955, 0.05032511055469513, 0.3758080303668976, 0.38111168146133423], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96f5e8d3594e19aed42db9ac35f1e0cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.420654296875, 0.280517578125, 0.349853515625, 0.1458740234375, 0.456298828125, 0.050567626953125, 0.4814453125, 0.2587890625, 0.1763916015625, 0.380859375, 0.250732421875, 0.08587646484375, 0.305419921875, 0.47998046875, 0.333740234375, 0.2015380859375, 0.270263671875, 0.17333984375, 0.3564453125, 0.34619140625, 0.01412200927734375, 0.036346435546875, 0.366455078125, 0.178955078125, 0.48779296875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43c0ebee7fb8cf03109891d8b7f1fa0c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2861328125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78592e8ffafc624a8525332c0b300e4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d48d50520936e5613dbfcc6cc7f16d7d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78592e8ffafc624a8525332c0b300e4b
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7d3c5aa1970fc82be460658445407a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.300537109375, 0.166748046875, 0.25439453125, 0.146240234375, 0.121826171875, 0.1905517578125, 0.412353515625, 0.1021728515625, 0.06854248046875, 0.239990234375, 0.34716796875, 0.3388671875, 0.493408203125, 0.486083984375, 0.1044921875, 0.1802978515625, 0.345458984375, 0.3388671875], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e90a8c08f33fd8b427700289f737c575(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1990966796875, 0.341796875, 0.048065185546875, 0.29443359375, 0.08160400390625, 0.411865234375, 0.1688232421875, 0.4013671875, 0.365478515625, 0.2159423828125, 0.12646484375, 0.052490234375, 0.286376953125, 0.0516357421875, 0.0386962890625, 0.2117919921875, 0.11199951171875, 0.07989501953125, 0.233154296875, 0.11029052734375, 0.146484375, 0.373779296875, 0.36572265625, 0.440185546875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48dc93089b400087d2935fea3faf49e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0491943359375, 0.04217529296875, 0.302734375, 0.462158203125, 0.179443359375, 0.194091796875, 0.2294921875, 0.479736328125, 0.262939453125, 0.0443115234375, 0.00897979736328125, 0.1856689453125, 0.41259765625, 0.261962890625, 0.037078857421875, 0.2176513671875, 0.455322265625, 0.289306640625, 0.243896484375, 0.28515625, 0.365966796875, 0.463623046875, 0.17626953125, 0.388671875, 0.26220703125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8fdc665eb7594aafa21d3c504b293e41(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4323749840259552], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77f4cb96c4f7fe2cdfa9a57ea6275aa6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02285456471145153, 0.3495545983314514, 0.436665415763855, 0.09499970823526382, 0.3859519362449646, 0.3483177423477173, 0.4632171392440796, 0.09057342261075974, 0.4455777704715729, 0.06795509904623032, 0.4994770586490631, 0.41427847743034363, 0.26260459423065186, 0.00103371636942029, 0.32956740260124207, 0.12739808857440948, 0.14645648002624512, 0.06836924701929092], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d30aecc24f1073cef13216c14cd2159f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.255615234375, 0.2423095703125, 0.1983642578125, 0.034088134765625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a19352a5fbb422d267f581a858843945(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3565588593482971, 0.13877396285533905, 0.03354078158736229, 0.42995932698249817, 0.3250944912433624, 0.3817826211452484, 0.42482927441596985, 0.1090017780661583, 0.4384092390537262, 0.2806980013847351, 0.4544982314109802, 0.3606029748916626, 0.10790637135505676, 0.445916086435318, 0.43800073862075806, 0.20754940807819366, 0.003951363265514374, 0.30352723598480225, 0.24104928970336914, 0.04132525622844696], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19e653614307348b1f7a2e6aeca07c4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.408447265625, 0.205322265625, 0.1529541015625, 0.47900390625, 0.373779296875, 0.191162109375, 0.1346435546875, 0.195068359375, 0.095703125, 0.3154296875, 0.297607421875, 0.093017578125, 0.0209197998046875, 0.1591796875, 0.154541015625, 0.4326171875, 0.0770263671875, 0.381591796875, 0.038604736328125, 0.34033203125, 0.2357177734375, 0.08782958984375, 0.33349609375, 0.44287109375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c7dbfc6b6306f101204e347b53fa279(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17947538197040558, 0.48472583293914795, 0.3989163041114807, 0.1364959478378296, 0.097556471824646, 0.06117464229464531, 0.23437416553497314, 0.2971953749656677, 0.3635512888431549, 0.24766121804714203, 0.45630547404289246, 0.32412251830101013], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd8241c566a455047884655bcd747773(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f0cac0c28f085bf71056302e3bc1d50b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.235107421875, 0.493896484375, 0.035491943359375, 0.296630859375, 0.1453857421875, 0.368896484375, 0.295166015625, 0.431884765625, 0.1134033203125, 0.419677734375, 0.01503753662109375, 0.473388671875, 0.126220703125, 0.296142578125, 0.285888671875, 0.0081634521484375, 0.32177734375, 0.0213470458984375, 0.376953125, 0.3798828125, 0.10943603515625, 0.421630859375, 0.40625, 0.1304931640625, 0.09759521484375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_100332b817066002f9649c3c697c5215(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17325472831726074, 0.46541666984558105, 0.4025126099586487, 0.420739084482193, 0.4309469163417816, 0.45880743861198425, 0.30980828404426575, 0.3971583843231201, 0.49153274297714233, 0.3027603328227997, 0.18688729405403137, 0.1166403666138649, 0.4238711893558502, 0.05177030712366104, 0.15858671069145203, 0.3516062796115875, 0.4929848611354828, 0.3112194240093231, 0.17591919004917145, 0.32358965277671814], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b1ab49c6a8df8cf966b843792080d2e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06297207623720169, 0.33792081475257874, 0.40504589676856995, 0.17886891961097717, 0.1382949948310852, 0.03279533609747887, 0.2220579981803894, 0.45928481221199036, 0.12205998599529266, 0.2934095561504364, 0.09386192262172699, 0.10713310539722443, 0.14660027623176575, 0.22460073232650757, 0.4795312285423279, 0.4485989212989807], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d85feed62cfe68ccc4c4acb9e4bac8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2588716745376587, 0.2520657777786255, 0.48025834560394287, 0.4404697120189667, 0.16802258789539337, 0.07729380577802658, 0.2145295888185501, 0.44094884395599365, 0.47640177607536316, 0.36857032775878906, 0.05133882164955139, 0.4177512228488922, 0.43456435203552246, 0.08978839963674545], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7063051680da8a3cef4caf18bb88545c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2820851504802704, 0.1288287490606308, 0.19984491169452667, 0.24854648113250732, 0.44069594144821167, 0.04531008377671242, 0.2023015320301056, 0.060368847101926804, 0.4094560444355011, 0.10879465192556381, 0.42784279584884644, 0.46719297766685486, 0.14448796212673187, 0.13514475524425507, 0.45034539699554443, 0.14782190322875977], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed359b892d1e81ab5139813daf26cd0c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4873085916042328, 0.23952895402908325, 0.18300339579582214, 0.25620225071907043], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc6ce17b4f1c0b4ba1c315287d962d62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.384033203125, 0.366943359375, 0.339111328125, 0.378173828125, 0.16943359375, 0.113525390625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f607e9807a0945dee9afe3966ba627e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.372802734375, 0.216552734375, 0.435791015625, 0.28857421875, 0.049713134765625, 0.1573486328125, 0.10296630859375, 0.488037109375, 0.400146484375, 0.434814453125, 0.3310546875, 0.142333984375, 0.1790771484375, 0.1513671875, 0.3310546875, 0.3955078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_474ad1e6e04732f6e933cc07db03f122(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44790637493133545, 0.23521201312541962, 0.32366856932640076, 0.4392800033092499, 0.07494266331195831, 0.228024423122406, 0.457798033952713, 0.16465771198272705, 0.3905922472476959, 0.48850440979003906, 0.47952258586883545, 0.060427017509937286, 0.4729767441749573, 0.4676287770271301, 0.2955872416496277, 0.41719114780426025], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6de4f35e08888ac35593fc6853d0df0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10210411995649338, 0.1412905603647232, 0.28509703278541565, 0.0798228532075882, 0.1710391342639923, 0.4369155466556549, 0.4503181576728821, 0.1678171157836914, 0.21283580362796783, 0.401509165763855, 0.49391186237335205, 0.10506011545658112, 0.46542665362358093, 0.2626582384109497, 0.2947814166545868, 0.250232994556427, 0.0919463187456131, 0.03342333808541298, 0.1849295198917389, 0.42897486686706543, 0.012198896147310734, 0.010469159111380577, 0.4573296904563904, 0.35372841358184814, 0.13789834082126617], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_658d5fc6dd2ee2b851c9792194803914(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07ca3489ca1b2728667c846695c1d1a5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_658d5fc6dd2ee2b851c9792194803914
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0700eac203d701461995d025885211bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_443e6825f04920e270d9c0b1f6a31538(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0700eac203d701461995d025885211bf
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db5fa84c6db50741837449b5af769101(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11072216928005219, 0.33744633197784424, 0.10755173861980438, 0.275450199842453, 0.32192903757095337, 0.05662759020924568, 0.3492012023925781, 0.2221994549036026], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_37f51934e36b5eb5b31f8826b77e66c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46001148223876953, 0.3707118332386017, 0.49477189779281616, 0.2382984459400177, 0.4914191663265228, 0.2768824100494385, 0.05813585966825485, 0.29548922181129456, 0.3372844457626343, 0.38225212693214417, 0.15069611370563507, 0.02260764315724373, 0.15872587263584137, 0.2307080179452896, 0.22449705004692078, 0.1951480656862259], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4151579c52ba8ccd8c9f669a18a9982(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4072265625, 0.298583984375, 0.310546875, 0.0073394775390625, 0.08380126953125, 0.49365234375, 0.372802734375, 0.25634765625, 0.051544189453125, 0.497314453125, 0.216552734375, 0.005832672119140625, 0.158447265625, 0.4921875, 0.45849609375, 0.499267578125, 0.472900390625, 0.193603515625, 0.32568359375, 0.0289764404296875, 0.092041015625, 0.37939453125, 0.492431640625, 0.00200653076171875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f34aa60273d0b59e80c84fc1205a27fa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2042439579963684, 0.002750852843746543, 0.1693735122680664, 0.08540251851081848, 0.3516741693019867, 0.2382674664258957, 0.3974447250366211, 0.23196418583393097, 0.2751089334487915, 0.2867720425128937, 0.08249025791883469, 0.4897924065589905, 0.21626798808574677, 0.05968890339136124, 0.09951141476631165, 0.33415448665618896, 0.17638111114501953, 0.13966423273086548, 0.39453181624412537, 0.43139058351516724, 0.16148518025875092, 0.13906721770763397, 0.30093249678611755, 0.32185623049736023], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db08122c996c644a9ea7ba89c6a04124(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41357421875, 0.1475830078125, 0.47216796875, 0.4150390625, 0.425537109375, 0.2198486328125, 0.08245849609375, 0.061370849609375, 0.4951171875, 0.041290283203125, 0.06439208984375, 0.0650634765625, 0.2529296875, 0.36328125, 0.263671875, 0.243408203125, 0.4677734375, 0.045745849609375, 0.493896484375, 0.189453125, 0.34228515625, 0.1812744140625, 0.019866943359375, 0.47607421875, 0.1373291015625, 0.022308349609375, 0.38818359375, 0.170654296875, 0.0787353515625, 0.402099609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdffab070cf63805d3bf64f5c54fb8f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028961181640625, 0.321533203125, 0.427734375, 0.1346435546875, 0.1671142578125, 0.3662109375, 0.2052001953125, 0.400634765625, 0.355224609375, 0.4384765625, 0.407470703125, 0.29931640625, 0.48486328125, 0.293701171875, 0.430908203125, 0.07720947265625, 0.42041015625, 0.333740234375, 0.052490234375, 0.386962890625, 0.1253662109375, 0.429443359375, 0.4453125, 0.06671142578125, 0.279052734375, 0.41650390625, 0.36572265625, 0.398193359375, 0.489013671875, 0.0260467529296875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2fea63d3eedb2a661e48c1a014a76bf3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17724609375, 0.168701171875, 0.359130859375, 0.295654296875, 0.057769775390625, 0.159912109375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12f0c4e52b93b538b4c8c9370c1021fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_931cd9f914977c4c6dc0166cb86e9cc2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.401681512594223, 0.08993032574653625, 0.19806891679763794, 0.3791675269603729, 0.21502895653247833, 0.1682211011648178, 0.4396485388278961, 0.4589824378490448, 0.09349453449249268, 0.34417226910591125], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2695203cb97c03083cc3efd5b2d0e03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a34103bd9c5d2c827378921b227697f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364501953125, 0.1510009765625, 0.093017578125, 0.31689453125, 0.10772705078125, 0.302001953125, 0.376953125, 0.039093017578125, 0.1195068359375, 0.40625, 0.048980712890625, 0.4482421875, 0.177001953125, 0.0230865478515625, 0.10931396484375, 0.472412109375, 0.416748046875, 0.2431640625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f87facf079ee152ac8c7a7acb07f9f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.007137298583984375, 0.345703125, 0.00446319580078125, 0.40478515625, 0.019775390625, 0.059783935546875, 0.3427734375, 0.1036376953125, 0.0301361083984375, 0.4150390625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bef4667e09b4a0f98bfa53b0535c197c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.313720703125, 0.1824951171875, 0.0767822265625, 0.399169921875, 0.425048828125, 0.063232421875, 0.284912109375, 0.223388671875, 0.371826171875, 0.21923828125, 0.32568359375, 0.33984375, 0.449462890625, 0.377685546875, 0.29736328125, 0.141357421875, 0.02813720703125, 0.3076171875, 0.4716796875, 0.2122802734375, 0.0005278587341308594, 0.10101318359375, 0.1195068359375, 0.1998291015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2235fac560342fcdd8daca24090da639(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731
    def get_inputs(self):
        return [
            paddle.to_tensor([0.047515869140625, 0.42724609375, 0.1170654296875, 0.43994140625, 0.22412109375, 0.10003662109375, 0.25439453125], dtype='float16').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68dba042a89567d4b50e7b01e761dfb2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26380646228790283, 0.14260908961296082, 0.2678620517253876, 0.17077261209487915, 0.45661690831184387, 0.3511107563972473, 0.2984994053840637, 0.49089351296424866], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d7e6d633bd782bf84fe0de8de23353c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3544921875, 0.494140625, 0.0095672607421875, 0.07415771484375, 0.1806640625, 0.4501953125, 0.455810546875, 0.37890625, 0.157958984375, 0.169921875, 0.393310546875, 0.306884765625, 0.1861572265625, 0.1915283203125, 0.23291015625, 0.2208251953125, 0.021728515625, 0.0197296142578125, 0.255126953125, 0.401611328125, 0.1549072265625, 0.4462890625, 0.489990234375, 0.324951171875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43a62d142ebf0a0d573a0d76fcebc4d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.460693359375, 0.14453125, 0.34326171875, 0.37109375, 0.33154296875, 0.404541015625, 0.035003662109375, 0.161376953125, 0.16015625, 0.01010894775390625, 0.03912353515625, 0.06439208984375, 0.266357421875, 0.46630859375, 0.0150909423828125, 0.1734619140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bed5d9b74dfc27f80b5dd51bd73c6869(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46728515625, 0.31884765625, 0.180908203125, 0.0689697265625, 0.4658203125, 0.128662109375, 0.447509765625, 0.4140625, 0.406982421875, 0.451904296875, 0.12408447265625, 0.280029296875, 0.388916015625, 0.079833984375, 0.471435546875, 0.01293182373046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b311c5e1e4a9fbb86e6bcbe92ad8438(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0041861035861074924, 0.35212257504463196, 0.35556888580322266, 0.2562679350376129, 0.45307812094688416, 0.1393914818763733, 0.32075926661491394, 0.018727770075201988, 0.09198269248008728, 0.10229745507240295, 0.1847703456878662, 0.3308813273906708, 0.3903382122516632, 0.482770174741745, 0.37267613410949707, 0.2818531394004822, 0.038273997604846954, 0.17712682485580444, 0.29972314834594727, 0.3867005705833435, 0.2220589965581894, 0.4619962275028229, 0.046696003526449203, 0.36367067694664], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_199821025c96ef29aea8ed349768e3e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0266571044921875, 0.2021484375, 0.382080078125, 0.2003173828125, 0.12066650390625, 0.16748046875, 0.2457275390625, 0.07830810546875, 0.0675048828125, 0.41552734375, 0.1524658203125, 0.269287109375, 0.24560546875, 0.191162109375, 0.44482421875, 0.4599609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1626fea4589a65adadb9dbc4ba3f46a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0897216796875, 0.1416015625, 0.1070556640625, 0.271240234375, 0.337646484375, 0.296142578125, 0.09716796875, 0.32861328125, 0.26806640625, 0.2109375, 0.03851318359375, 0.447509765625, 0.1605224609375, 0.373779296875, 0.384033203125, 0.143798828125, 0.216064453125, 0.3017578125, 0.453857421875, 0.056884765625, 0.0299530029296875, 0.436767578125, 0.239990234375, 0.482666015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1e13b6092af1b44985d3edbdc87b0a6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09283258765935898, 0.40969395637512207, 0.4886060059070587, 0.23147696256637573, 0.19978544116020203, 0.30531010031700134, 0.2412845641374588, 0.08064457774162292, 0.16885784268379211, 0.4489802122116089, 0.08578339219093323, 0.33133959770202637, 0.10196564346551895, 0.40857982635498047], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_921a9e05e0cb5d8554c2113e0b27dc61(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.001163482666015625, 0.078857421875, 0.225830078125, 0.4619140625, 0.158935546875, 0.288330078125, 0.498046875, 0.437744140625, 0.3603515625, 0.332275390625, 0.2437744140625, 0.2125244140625, 0.07794189453125, 0.2017822265625, 0.049407958984375, 0.1531982421875, 0.443603515625, 0.08843994140625, 0.258056640625, 0.40966796875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c06a0bfa3c42f12a5e0d0c5aab31c5b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1915283203125, 0.21484375, 0.06927490234375, 0.12091064453125, 0.392822265625, 0.08404541015625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_908b63ed7348c1351a632359d62c8dc2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2398681640625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f2c865490521d0387fc1b2c07241f0b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_413af9990df592b40b2fcb3ca25ae8dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1705322265625, 0.34814453125, 0.0225067138671875, 0.295654296875, 0.28662109375, 0.0002701282501220703, 0.3681640625, 0.347412109375, 0.406982421875, 0.408935546875, 0.24853515625, 0.176513671875, 0.006927490234375, 0.1812744140625, 0.453857421875, 0.195068359375, 0.1365966796875, 0.3369140625, 0.33544921875, 0.489013671875, 0.135986328125, 0.489013671875, 0.154052734375, 0.2462158203125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c146e68ab334682b79b82a28f19e20a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1700439453125, 0.255615234375, 0.00970458984375, 0.04144287109375, 0.477294921875, 0.310791015625, 0.442138671875, 0.259033203125, 0.499267578125, 0.08160400390625, 0.330810546875, 0.1324462890625, 0.1929931640625, 0.270263671875, 0.40478515625, 0.39892578125, 0.10302734375, 0.1845703125, 0.475830078125, 0.2498779296875, 0.332763671875, 0.05389404296875, 0.035400390625, 0.27685546875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c3884d7dbae247bcf957b504e255053d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2685546875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9046cfbd633f09787a32b86d058cc07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_08f3ae8884b52e49e969a83489687ab8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9046cfbd633f09787a32b86d058cc07
    def get_inputs(self):
        return [
            paddle.uniform([1, 8, 3, 224, 224], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 224, 224], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b9a3e6f034902b7f382a4b5c9c6b5886(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31540465354919434, 0.006393257528543472, 0.004089457914233208, 0.24094443023204803, 0.20774677395820618, 0.33055299520492554], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00f02511ec4c290a2f458e183d862398(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6440a79334db794c7c30d753cec6b818(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21418313682079315], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86bce45f208d566388b3ddfd197fa9c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.463127076625824, 0.42197299003601074, 0.1565435826778412], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b144cae79002d39971ac01876a75b184(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.416748046875, 0.2120361328125, 0.42822265625, 0.24365234375, 0.0931396484375, 0.266845703125, 0.1187744140625, 0.300048828125, 0.10931396484375, 0.09674072265625, 0.458251953125, 0.1846923828125, 0.2705078125, 0.1361083984375, 0.1287841796875, 0.33740234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bd4032495a743834d5dbab345ec6efc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4561317563056946, 0.14909519255161285, 0.32307183742523193, 0.24312947690486908, 0.3261241018772125, 0.0058573149144649506, 0.18028020858764648, 0.2619646191596985, 0.23532791435718536, 0.341793417930603, 0.26813048124313354, 0.14829130470752716, 0.07743411511182785, 0.3958534896373749, 0.12014428526163101, 0.05877687409520149], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7bd5d12e928c1ce12c0f3d9acc75414(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21486452221870422, 0.001929558115079999, 0.004078877158463001, 0.14930610358715057, 0.2498965710401535, 0.09806037694215775, 0.4624655544757843, 0.18570122122764587, 0.2529127597808838, 0.12179187685251236, 0.2535249590873718, 0.47355854511260986, 0.3297802209854126, 0.028970375657081604, 0.0708882138133049, 0.3635740280151367], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14cd28133fae4524a1960bf9453f3355(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3766631484031677, 0.12646107375621796, 0.4534320533275604, 0.31300950050354004, 0.07098233699798584, 0.1845187097787857, 0.47414588928222656, 0.43032729625701904, 0.3184466063976288, 0.24779567122459412, 0.08940263837575912, 0.15393942594528198, 0.4610852301120758, 0.10751618444919586, 0.026363100856542587, 0.09634114056825638, 0.14108490943908691, 0.06861415505409241, 0.2862014174461365, 0.26445847749710083, 0.4430738389492035, 0.3668709695339203, 0.4376722574234009, 0.24195118248462677], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bee6cb9f86bc708c0776b97ab2def525(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3344227969646454, 0.014229249209165573, 0.10272931307554245, 0.3420673906803131, 0.30613481998443604, 0.4942672848701477, 0.15559615194797516, 0.1424221247434616, 0.4403343200683594, 0.2748509645462036, 0.0030975467525422573, 0.01684691570699215, 0.1351178139448166, 0.2679395079612732, 0.05911392346024513, 0.3142804503440857], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c0910db11465e546b6a5476882ca8e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.080322265625, 0.153076171875, 0.27783203125, 0.343017578125, 0.1280517578125, 0.339111328125, 0.4052734375, 0.2294921875, 0.265869140625, 0.11181640625, 0.12359619140625, 0.2685546875, 0.0228118896484375, 0.408203125, 0.408447265625, 0.0156402587890625, 0.3916015625, 0.32421875, 0.283447265625, 0.03680419921875, 0.46728515625, 0.12548828125, 0.294677734375, 0.418701171875, 0.486083984375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7a5ff75e3d253a83afeecf06bb88b09c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33660823106765747, 0.49909865856170654, 0.08848720788955688, 0.14645300805568695, 0.08912297338247299, 0.023123351857066154, 0.23442159593105316, 0.4375264644622803, 0.02653304487466812, 0.05448097363114357], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d627e5ef2b8d70882730d16f38cb1c80(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3612836003303528, 0.47398683428764343, 0.0677202045917511, 0.2453150749206543, 0.2361626774072647, 0.30754393339157104, 0.3878940939903259, 0.14903110265731812, 0.44045907258987427, 0.3602331280708313, 0.3167608082294464, 0.20169630646705627, 0.29083216190338135, 0.003744561690837145, 0.23313453793525696, 0.26615867018699646, 0.4528414011001587, 0.36247900128364563, 0.002565353410318494, 0.32819870114326477, 0.285214900970459, 0.3792363107204437, 0.04343303292989731, 0.15462404489517212, 0.4294907748699188, 0.051426686346530914, 0.4334579110145569, 0.32921847701072693], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e56b2998e5da3fdc98256cab61098058(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.347900390625, 0.1280517578125, 0.396728515625, 0.342041015625, 0.07586669921875, 0.05108642578125, 0.1973876953125, 0.07330322265625, 0.0234222412109375, 0.0977783203125, 0.335205078125, 0.162841796875, 0.39599609375, 0.423095703125, 0.050872802734375, 0.16259765625, 0.2236328125, 0.33837890625, 0.2352294921875, 0.01544189453125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_603b9d1bf805a1a01ad608356679a041(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13713346421718597, 0.2698829472064972, 0.2202339619398117, 0.49810922145843506, 0.26804670691490173, 0.37367239594459534, 0.39146825671195984, 0.052187513560056686, 0.2415921837091446, 0.28879135847091675, 0.44193336367607117, 0.24982517957687378, 0.01687297224998474, 0.34478574991226196, 0.08487672358751297, 0.4931636452674866, 0.4663766026496887, 0.22051408886909485, 0.48039710521698, 0.410564124584198, 0.4165014922618866, 0.3726201355457306, 0.49947479367256165, 0.22634653747081757], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8f1353c4d7d8cfe03705f98c94e6d03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.390625, 0.454833984375, 0.1431884765625, 0.3564453125, 0.2626953125, 0.07440185546875, 0.43212890625, 0.225341796875, 0.08514404296875, 0.41650390625, 0.0855712890625, 0.334716796875, 0.0350341796875, 0.2890625, 0.1900634765625, 0.47998046875, 0.248291015625, 0.19677734375, 0.2183837890625, 0.47021484375, 0.44140625, 0.0169830322265625, 0.167724609375, 0.0885009765625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6a0013bf8d47b3361a5c73adf44db08c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11474609375, 0.3623046875, 0.04376220703125, 0.2900390625, 0.2022705078125, 0.442138671875, 0.0201416015625, 0.2437744140625, 0.079833984375, 0.4462890625, 0.471435546875, 0.01026153564453125, 0.31005859375, 0.34423828125, 0.0293121337890625, 0.2196044921875, 0.29296875, 0.2216796875, 0.23291015625, 0.396728515625, 0.177978515625, 0.188232421875, 0.236572265625, 0.11614990234375, 0.388427734375, 0.055023193359375, 0.31787109375, 0.267822265625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9bfb7328299416e103814210dec6684a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24089358747005463, 0.10250615328550339, 0.242037832736969, 0.34362390637397766, 0.283862829208374, 0.22844302654266357, 0.27869632840156555, 0.4900267422199249, 0.46798691153526306, 0.2611825466156006, 0.47648411989212036, 0.03205368295311928, 0.04987823963165283, 0.04482415318489075, 0.0895497128367424, 0.21914847195148468, 0.39154139161109924, 0.32577407360076904, 0.2437455654144287, 0.4804902970790863, 0.013804791495203972, 0.1199214830994606, 0.472881555557251, 0.39249297976493835], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d5753a9a63c3f7f0dc6e6c81ae6d5c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([44], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72179faaeee280d3fa078b5dc9f8bd98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30667442083358765, 0.20085522532463074, 0.3485635221004486, 0.37532204389572144, 0.2769143879413605, 0.4771784543991089, 0.39490941166877747, 0.4048592448234558, 0.14774556457996368, 0.07752332091331482, 0.4024468958377838, 0.25368914008140564, 0.4419117271900177, 0.3346365988254547, 0.028260841965675354, 0.3861951231956482, 0.25151389837265015, 0.3810829222202301, 0.04712526127696037, 0.22148269414901733, 0.2462262213230133, 0.17382384836673737, 0.4908837676048279, 0.2526096701622009], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9bca320f3e487c7e367b93c588b4bf31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3863893151283264, 0.4103935956954956, 0.03950466960668564, 0.4254366457462311, 0.4632451832294464, 0.23741547763347626, 0.2384093850851059, 0.36194145679473877, 0.4070318341255188, 0.40877848863601685, 0.23362088203430176, 0.31827670335769653, 0.09926747530698776, 0.15811920166015625, 0.08187071233987808, 0.3431653678417206], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_067cad2cc557d137932e69220dc5a827(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2a7cb9864293ab0c2a4c3efdabb323c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_067cad2cc557d137932e69220dc5a827
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26985588669776917, 0.3207029700279236, 0.3044273555278778, 0.4107455015182495, 0.17925840616226196, 0.24870915710926056, 0.24703842401504517, 0.3178151845932007, 0.2696002423763275, 0.44130972027778625, 0.37613940238952637, 0.4722263216972351, 0.28981271386146545, 0.40099918842315674, 0.15253156423568726, 0.11555520445108414, 0.3249875009059906], dtype='float32').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98bac49a7bda99b6eb450d4923112b7f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.444580078125, 0.290771484375, 0.03076171875, 0.328857421875, 0.1746826171875, 0.3935546875, 0.302734375, 0.28759765625, 0.016632080078125, 0.178955078125, 0.4248046875, 0.09185791015625, 0.1533203125, 0.06109619140625, 0.41552734375, 0.216552734375, 0.28857421875, 0.15869140625, 0.491455078125, 0.406982421875, 0.12115478515625, 0.359619140625, 0.2275390625, 0.346923828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07664124061fc6f8435c880ccc9d7745(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4761061370372772, 0.03380073606967926, 0.4248546063899994, 0.0013897183816879988, 0.2751396894454956, 0.3750571012496948, 0.2745482325553894, 0.26850295066833496, 0.35263508558273315, 0.2676554322242737, 0.3898903727531433, 0.01225688774138689], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62d1a623a77f5139d120ea6cf1cf6a4b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.214599609375, 0.442626953125, 0.43994140625, 0.418701171875, 0.09552001953125, 0.369384765625, 0.40771484375, 0.314208984375, 0.426513671875, 0.23046875, 0.178466796875, 0.131591796875, 0.285888671875, 0.09185791015625, 0.27685546875, 0.0462646484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c0732a4c272a201eaa5e0455d0f55c62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4205988347530365, 0.004147267434746027, 0.2745193839073181, 0.3012690842151642, 0.372798889875412, 0.41295626759529114, 0.16304567456245422, 0.41078484058380127, 0.4205564260482788, 0.07773353159427643, 0.1901542842388153, 0.20638857781887054], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e81183afad0afe146cd94bda7f674a8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4423828125, 0.1754150390625, 0.0997314453125, 0.44482421875, 0.1649169921875, 0.315673828125, 0.48095703125, 0.328369140625, 0.33056640625, 0.371826171875, 0.295166015625, 0.47607421875, 0.1279296875, 0.161865234375, 0.392578125, 0.060821533203125, 0.048004150390625, 0.2744140625, 0.48876953125, 0.08489990234375, 0.47412109375, 0.41796875, 0.228515625, 0.4404296875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad3af8af9758d4b1d5f242590ab87698(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2532634735107422, 0.2000763714313507, 0.4287680685520172, 0.08636211603879929, 0.10880430042743683, 0.34325167536735535, 0.09969165176153183, 0.33204859495162964, 0.2971207797527313, 0.0037945308722555637, 0.3419665992259979, 0.007883019745349884, 0.3677130341529846, 0.42553406953811646, 0.41458001732826233, 0.2238885909318924], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f72f0ea042cfe933a8fc6724cb7de198(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25, 0.477783203125, 0.494140625, 0.464599609375, 0.384033203125, 0.1358642578125, 0.427978515625, 0.302978515625, 0.377197265625, 0.2296142578125, 0.060150146484375, 0.020843505859375, 0.033294677734375, 0.1591796875, 0.32666015625, 0.384521484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06526e97547c276697dddd3a7960dc84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43cfd72bbaa1a6929e1eae5c8e0915b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06526e97547c276697dddd3a7960dc84
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb1a144c35b2eef7664ba0498613432a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17001225054264069, 0.4498429596424103, 0.4986194372177124, 0.2547338008880615, 0.16214020550251007, 0.1296592503786087, 0.49283427000045776, 0.40879225730895996, 0.1363794207572937, 0.12761622667312622, 0.03654332086443901, 0.32190239429473877, 0.41951465606689453, 0.016943316906690598, 0.2987086772918701, 0.10115712136030197, 0.2834587097167969, 0.2528359889984131, 0.2788352370262146, 0.13451813161373138], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a2d531a35465e4e495b2b67376df6aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35201799869537354, 0.26573774218559265, 0.2134796530008316, 0.027268730103969574, 0.07666477560997009, 0.15800203382968903, 0.09968191385269165, 0.18951748311519623, 0.3087861239910126, 0.4962294101715088, 0.4088943898677826, 0.329858660697937, 0.12793153524398804, 0.42495065927505493, 0.2822103202342987, 0.014063306152820587, 0.11906680464744568, 0.31079718470573425, 0.12562710046768188, 0.38280242681503296, 0.35399943590164185, 0.28122130036354065, 0.3391014635562897, 0.4660150706768036], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fa766291689d5aa3392f9bc2a4b8495(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0599365234375, 0.351318359375, 0.176513671875, 0.032745361328125, 0.126220703125, 0.022796630859375, 0.1551513671875, 0.46142578125, 0.1259765625, 0.2303466796875, 0.2783203125, 0.055419921875, 0.11358642578125, 0.4541015625, 0.1761474609375, 0.298828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_350d688e4c2db5dcaa5e030b66909457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55303686d08886bb356b7d14832db8fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_350d688e4c2db5dcaa5e030b66909457
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f89efb840aa9af08aa6936823e5f0627(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15143072605133057, 0.16852423548698425, 0.015635207295417786, 0.4087505638599396, 0.009955156594514847, 0.3008294999599457, 0.08544605225324631, 0.0856970027089119, 0.4623056650161743, 0.4577430784702301, 0.03259417787194252, 0.48438894748687744, 0.07929103076457977, 0.005605439189821482, 0.24775271117687225, 0.46125227212905884, 0.47034192085266113, 0.26545512676239014, 0.20370064675807953, 0.10837454348802567, 0.344779372215271, 0.3090764880180359, 0.246968075633049, 0.42417290806770325, 0.19668112695217133], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2d90c2ae5be6941d1e563a0267618df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2396240234375, 0.06085205078125, 0.00516510009765625, 0.337890625, 0.497802734375, 0.137939453125, 0.468017578125, 0.27099609375, 0.1959228515625, 0.1055908203125, 0.468505859375, 0.06964111328125, 0.417724609375, 0.231689453125, 0.353759765625, 0.023651123046875, 0.387939453125, 0.172119140625, 0.07659912109375, 0.2039794921875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5b7506a8eb0b207f133a95962c3a990(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.160888671875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61ae9dc85f709d7e643e65896f00b7c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35107421875, 0.464111328125, 0.0023097991943359375, 0.210205078125, 0.375, 0.06439208984375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76f66b548a950118429229ab5e4eb55c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12451171875, 0.150390625, 0.2025146484375, 0.1983642578125, 0.049285888671875, 0.1912841796875, 0.194091796875, 0.266357421875, 0.1417236328125, 0.11431884765625, 0.322998046875, 0.0221099853515625, 0.1756591796875, 0.0869140625, 0.0626220703125, 0.1358642578125, 0.11669921875, 0.4296875, 0.1300048828125, 0.2822265625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14ba5a255ec0e7d1f8d25caae04eefbb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3212890625, 0.4248046875, 0.2235107421875, 0.364013671875, 0.386474609375, 0.400634765625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a070cd72323d81be5a59665809950f0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.310302734375, 0.215087890625, 0.1839599609375, 0.25341796875, 0.2044677734375, 0.134033203125, 0.1182861328125, 0.44287109375, 0.23583984375, 0.353515625, 0.009063720703125, 0.0307159423828125, 0.4912109375, 0.14404296875, 0.2467041015625, 0.1358642578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8802f0cf4d1920feaa0d92db1e7830e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33815380930900574], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61e3cd250ac9282c9b5770ce658158b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32467174530029297, 0.20241151750087738, 0.4390876293182373, 0.1589849889278412, 0.47033485770225525, 0.3259456157684326, 0.08147557824850082, 0.005114398896694183, 0.011842557229101658, 0.044377513229846954, 0.47573742270469666, 0.0809130072593689, 0.18306800723075867, 0.42973583936691284, 0.34135547280311584, 0.06221279501914978, 0.418990820646286, 0.2542016804218292, 0.24433787167072296, 0.49372267723083496, 0.19403408467769623, 0.41437211632728577, 0.4396198093891144, 0.309603750705719, 0.41581636667251587, 0.45894259214401245, 0.41334566473960876, 0.31013908982276917, 0.39656102657318115, 0.3204187750816345], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5aacac35dba78075dcaee42ed7c556d2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16988183557987213, 0.23917986452579498, 0.23007208108901978, 0.16664205491542816, 0.47981223464012146, 0.1135411411523819, 0.032800476998090744, 0.009687220677733421, 0.25133368372917175, 0.4334067404270172, 0.02716180682182312, 0.05041581019759178, 0.05524776503443718, 0.02182747609913349, 0.3441706597805023, 0.340177983045578, 0.135290265083313, 0.2838885188102722, 0.4526140093803406], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1af066e61e904946f2c8c8c9521ff6fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4260159432888031, 0.10568509250879288, 0.33513233065605164, 0.37989357113838196, 0.11589712649583817, 0.054678644984960556, 0.25877299904823303, 0.3012789785861969, 0.23845721781253815, 0.49008670449256897, 0.22833944857120514, 0.1726371794939041, 0.2005494087934494, 0.10617925971746445, 0.4797484874725342, 0.2031523883342743], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_956e6a11bf67fbfc16e5621a84aa0182(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e29688dde04288553dc834549b0f2eca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48178812861442566, 0.18719543516635895, 0.14969298243522644, 0.4582572877407074, 0.03811286762356758, 0.35149097442626953, 0.20453783869743347, 0.02726110629737377, 0.2945667803287506, 0.16793067753314972, 0.02300749532878399, 0.24846592545509338, 0.2171333283185959, 0.18292294442653656, 0.4810129404067993, 0.4239509105682373, 0.16973167657852173, 0.441840797662735, 0.43649694323539734, 0.025327762588858604, 0.4623086452484131, 0.052030693739652634, 0.4373071491718292, 0.04233497753739357], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c79661882e22c937f1dde06b87b5277(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2108154296875, 0.457763671875, 0.129150390625, 0.01134490966796875, 0.153564453125, 0.4345703125, 0.1632080078125, 0.23095703125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66f305930ed7184f3a7a550668fb500a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a1a91330d50de9a04cb8654d6678028b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10198974609375, 0.1602783203125, 0.046478271484375, 0.228759765625, 0.11480712890625, 0.4912109375, 0.1485595703125, 0.242431640625, 0.262939453125, 0.07293701171875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68760517ebe2884e3e14b039c3c597ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3676447868347168, 0.03246336057782173, 0.32305067777633667, 0.35807836055755615, 0.39974692463874817, 0.09656185656785965, 0.0016792200040072203, 0.4100658595561981, 0.01315458957105875, 0.11946713924407959, 0.06840913742780685, 0.4401480257511139, 0.08932814002037048, 0.13717278838157654, 0.29869017004966736, 0.06076683849096298], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_11ed43669b2877f5881331f756b03f4e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_345999a5def47a500d524aa0dc80301c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_11ed43669b2877f5881331f756b03f4e
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_970f688c522ec6a9f878e17be8307f8f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44580078125, 0.156982421875, 0.1795654296875, 0.1138916015625, 0.428955078125, 0.1705322265625, 0.0870361328125, 0.1075439453125, 0.397216796875, 0.033966064453125, 0.400146484375, 0.2568359375, 0.278076171875, 0.45263671875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad0b317e8a2be785ea77bddb0d2c77de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1663818359375, 0.381103515625, 0.10430908203125, 0.440185546875, 0.01397705078125, 0.1298828125, 0.39892578125, 0.31494140625, 0.454833984375, 0.293212890625, 0.183349609375, 0.3720703125, 0.10357666015625, 0.2318115234375, 0.08880615234375, 0.1705322265625, 0.26513671875, 0.07421875, 0.337646484375, 0.421630859375, 0.047760009765625, 0.1845703125, 0.039703369140625, 0.35498046875, 0.1546630859375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ec91439d7853d3e1a5f86a2858c3c88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42570847272872925, 0.3330879509449005, 0.054855260998010635, 0.22368018329143524, 0.33402884006500244, 0.31376081705093384, 0.3212224841117859, 0.4969833493232727, 0.05856575444340706, 0.4327399432659149, 0.24018211662769318, 0.1740272045135498, 0.08729137480258942, 0.06680198758840561, 0.40120983123779297, 0.08353203535079956], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_025feef00274996334d64dcc24d8eb50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25, 0.385986328125, 0.428466796875, 0.1971435546875, 0.35791015625, 0.295166015625, 0.25634765625, 0.413330078125, 0.490234375, 0.150390625, 0.4345703125, 0.10125732421875, 0.197265625, 0.3818359375, 0.053802490234375, 0.219482421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e09dbea24b8f1430e3f46d455f92d672(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38818359375, 0.494384765625, 0.0188751220703125, 0.33251953125, 0.24853515625, 0.31591796875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e0e25f9a2ef19073465abbe3cfa24185(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.010378758423030376, 0.41306713223457336, 0.08955047279596329, 0.009814588353037834, 0.46543261408805847, 0.30071792006492615, 0.3907915949821472, 0.20677411556243896, 0.07779836654663086, 0.28303083777427673], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec4b3965dd0ef80a2ebb683c0da25252(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.041656494140625, 0.33349609375, 0.38525390625, 0.1834716796875, 0.357177734375, 0.39453125, 0.01105499267578125, 0.04150390625, 0.38134765625, 0.485107421875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb4f7c37f762d0db6ca2d8d4f663b4ed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10235595703125, 0.42138671875, 0.09881591796875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4028a28aac04f2b09cd3153ec8e3bb3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0457763671875, 0.06390380859375, 0.00853729248046875, 0.25537109375, 0.17919921875, 0.09295654296875, 0.0161895751953125, 0.48779296875, 0.47900390625, 0.445068359375, 0.045654296875, 0.104736328125, 0.329833984375, 0.15771484375, 0.1444091796875, 0.0985107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0cc632e7b7db0717c9ca761554160a27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.119140625, 0.41943359375, 0.122802734375, 0.385986328125, 0.1534423828125, 0.2237548828125, 0.1495361328125, 0.395263671875, 0.005718231201171875, 0.2200927734375, 0.427001953125, 0.1905517578125, 0.3916015625, 0.482177734375, 0.239013671875, 0.01727294921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_486001cc8428ee66abf974956ca58bd3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.239501953125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e93016f9c5e438c5405de89cbe450d0b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.399658203125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_708de7d39b54c42a7d5bd43645032dd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2cff70d26f3c487771acdcd17147e258(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016818026080727577, 0.04481407254934311, 0.3240397870540619, 0.02608174830675125, 0.04974006861448288, 0.20831416547298431, 0.45642831921577454, 0.34371811151504517], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2914e6d76cd121d27d2b96a029510c9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31458619236946106, 0.18953047692775726, 0.20816466212272644, 0.22944682836532593, 0.47620758414268494, 0.34396231174468994, 0.13972483575344086, 0.4694695770740509, 0.2550407648086548, 0.37741440534591675, 0.3595026433467865, 0.2319735288619995], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3af6f0dffc11302d002a4584b1faf3cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.205759197473526, 0.40471386909484863, 0.4620644450187683, 0.4707305431365967, 0.17762093245983124, 0.08354965597391129, 0.1871592253446579, 0.16811113059520721, 0.011407841928303242, 0.22988088428974152, 0.11073864996433258, 0.0999319851398468, 0.3020353317260742, 0.1552119255065918, 0.18704535067081451, 0.4340682327747345, 0.10743477940559387, 0.3910045027732849, 0.0747642070055008, 0.1610254943370819, 0.40260395407676697, 0.15564164519309998, 0.4825425148010254, 0.22546710073947906], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ace95d9a90479c321a861b2577f8ea0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1968994140625, 0.078857421875, 0.266845703125, 0.1551513671875, 0.369384765625, 0.3232421875, 0.0755615234375, 0.11395263671875, 0.2783203125, 0.42236328125, 0.271728515625, 0.0836181640625, 0.2861328125, 0.44140625, 0.43017578125, 0.01238250732421875, 0.05364990234375, 0.1563720703125, 0.3955078125, 0.371826171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2152287c8a09ece89a8c89120f225d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.151611328125, 0.4453125, 0.46533203125, 0.118896484375, 0.256591796875, 0.497314453125, 0.034820556640625, 0.389892578125, 0.271728515625, 0.3212890625, 0.46875, 0.09710693359375, 0.0126953125, 0.1756591796875, 0.0968017578125, 0.080810546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b926761bd181aa9ae60c2cd47b096228(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17109796404838562, 0.24371375143527985, 0.4621039628982544, 0.07617367058992386, 0.0437704473733902, 0.33388519287109375, 0.03558773174881935, 0.27690792083740234, 0.24682053923606873, 0.021375808864831924, 0.3606601059436798, 0.38173502683639526, 0.21216799318790436, 0.16923390328884125, 0.3476967215538025, 0.4057796001434326, 0.3607390522956848, 0.4915940761566162, 0.07323624193668365, 0.36037176847457886, 0.36707803606987, 0.47334596514701843, 0.33163756132125854, 0.17076385021209717, 0.3356049656867981, 0.4749346375465393, 0.17240065336227417, 0.3763575851917267, 0.3114107549190521, 0.42395535111427307], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21d02f9a4c1ae4711718a6c7178d40de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1143798828125, 0.2578125, 0.209228515625, 0.381103515625, 0.2315673828125, 0.07830810546875, 0.298828125, 0.480224609375, 0.490478515625, 0.05902099609375, 0.3759765625, 0.12451171875, 0.382568359375, 0.474609375, 0.2646484375, 0.494384765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58f16dcae3c323c122e1ee235cec040c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4399206340312958, 0.436465859413147, 0.02987992949783802, 0.016768742352724075], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_20a259a7bc7b481cbfc2d3df6b9d1a2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4606683552265167, 0.404229074716568, 0.294563889503479, 0.35950911045074463, 0.1687779426574707, 0.0862782746553421, 0.4593212902545929, 0.21890699863433838, 0.12260880321264267, 0.48084136843681335, 0.2019035518169403, 0.48125046491622925, 0.3861072361469269, 0.4666498601436615, 0.40021756291389465, 0.3936201333999634, 0.22244901955127716, 0.410017192363739, 0.35055553913116455], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_416c9322038ba130fbc2fb9c55c60978(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06852256506681442, 0.36321592330932617, 0.07514020800590515, 0.10078898817300797, 0.3140980899333954, 0.02600102499127388, 0.32341209053993225, 0.38165032863616943, 0.1575203239917755, 0.40561333298683167, 0.013357754796743393, 0.4820545017719269, 0.4913817048072815, 0.35679250955581665, 0.23727098107337952, 0.3845924437046051], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b30cf0ce22bedd01be2b8364fbfb9c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4944763779640198, 0.005468589253723621, 0.12441892921924591, 0.32038038969039917, 0.27813854813575745, 0.33938321471214294, 0.4480140507221222, 0.227736234664917, 0.49418455362319946, 0.022618712857365608, 0.06817985326051712, 0.3474811315536499, 0.11472663283348083, 0.1925649344921112, 0.28157374262809753, 0.30646803975105286, 0.3054637014865875, 0.28273847699165344, 0.1762060970067978, 0.09928974509239197, 0.41432270407676697, 0.4970574676990509, 0.0004793893895111978, 0.2652919590473175, 0.4995008707046509], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e3e152c612bb233db96c501219ed5d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.036285400390625, 0.057464599609375, 0.414794921875, 0.416259765625, 0.48046875, 0.10858154296875, 0.35107421875, 0.29296875, 0.176513671875, 0.3359375, 0.26953125, 0.2066650390625, 0.1148681640625, 0.1370849609375, 0.05401611328125, 0.414794921875, 0.2320556640625, 0.276611328125, 0.2259521484375, 0.147216796875, 0.498779296875, 0.045654296875, 0.09869384765625, 0.39111328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f40e11372672ddba227d837854f98ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3322727680206299, 0.006355233956128359, 0.11131632328033447, 0.336580365896225, 0.4261164665222168, 0.22120779752731323, 0.1363130509853363, 0.28824368119239807, 0.19005754590034485, 0.19676055014133453, 0.4214135408401489, 0.2982270121574402, 0.47417351603507996, 0.4702834486961365, 0.4720142185688019], dtype='float32').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffcd8bb8abcf70743075b0fac6b76542(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2476806640625, 0.10223388671875, 0.1929931640625, 0.244140625, 0.160400390625, 0.232177734375, 0.1956787109375, 0.09552001953125, 0.17333984375, 0.397216796875, 0.154541015625, 0.1878662109375, 0.2432861328125, 0.266845703125, 0.40966796875, 0.0116119384765625, 0.1494140625, 0.051910400390625, 0.274169921875, 0.302490234375, 0.27783203125, 0.370361328125, 0.004436492919921875, 0.1558837890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34dd75ff3168e11cf85c14f4ef8771bd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30078125, 0.1400146484375, 0.10693359375, 0.1356201171875, 0.0350341796875, 0.412109375, 0.051788330078125, 0.34033203125, 0.33447265625, 0.104736328125, 0.3271484375, 0.411865234375, 0.1690673828125, 0.31591796875, 0.2392578125, 0.150634765625, 0.2205810546875, 0.401123046875, 0.404296875, 0.263916015625, 0.4892578125, 0.1585693359375, 0.36328125, 0.361328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_896275b6d18c2babd385262fa0a58830(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06513968855142593, 0.18017442524433136, 0.43138086795806885, 0.48977741599082947, 0.15257534384727478, 0.2857772409915924, 0.44547945261001587, 0.0060274191200733185, 0.3037022352218628, 0.16977445781230927], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30340eb7a9c2154255bc5e943f098387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.065185546875, 0.087890625, 0.177734375, 0.0682373046875, 0.4404296875, 0.30908203125, 0.27197265625, 0.2259521484375, 0.016937255859375, 0.327392578125, 0.021728515625, 0.47900390625, 0.418701171875, 0.34814453125, 0.17138671875], dtype='float16').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1cd0b372bf15e277cc6d4a83eb07bab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14762072265148163, 0.17627669870853424, 0.48887205123901367, 0.04769337177276611, 0.18854112923145294, 0.406727135181427], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c1bdfc6c318292b3cd984230e3341fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2748729884624481, 0.3774561583995819, 0.06828964501619339, 0.4202280640602112, 0.45271506905555725, 0.2144574224948883, 0.3551046848297119, 0.3917558491230011, 0.24073682725429535, 0.4894137978553772, 0.44046807289123535, 0.3845822811126709, 0.03290913254022598, 0.400393009185791, 0.21229298412799835, 0.06385008245706558], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ba3d3dfa63611b6303001ae67ac5f5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09735107421875, 0.035980224609375, 0.260498046875, 0.0245361328125, 0.09637451171875, 0.172119140625, 0.310791015625, 0.439697265625, 0.470703125, 0.28955078125, 0.2294921875, 0.3017578125, 0.0784912109375, 0.06964111328125, 0.4921875, 0.357666015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b9759c17f2bfc81412018fd28d32865(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.484130859375, 0.4521484375, 0.1490478515625, 0.10980224609375, 0.346923828125, 0.02734375, 0.48779296875, 0.431640625, 0.023712158203125, 0.029083251953125, 0.351806640625, 0.0692138671875, 0.09686279296875, 0.09698486328125, 0.413330078125, 0.1402587890625, 0.3564453125, 0.403564453125, 0.3134765625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ae76314114d27be83565b69d9dd4da0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11007650941610336, 0.27864566445350647, 0.002393155824393034, 0.1773417443037033, 0.33864665031433105, 0.443665474653244, 0.37129077315330505, 0.3560221791267395, 0.41435354948043823, 0.4898003935813904, 0.3314351737499237, 0.18585512042045593, 0.14061245322227478, 0.42332908511161804, 0.42754969000816345, 0.18155109882354736], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1e2c6e380adca9c6098631e30d98a14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43505859375, 0.1820068359375, 0.0082855224609375, 0.286376953125, 0.486083984375, 0.3896484375, 0.02392578125, 0.33544921875, 0.441162109375, 0.4345703125, 0.054656982421875, 0.47705078125, 0.371337890625, 0.352294921875, 0.015533447265625, 0.454833984375, 0.2076416015625, 0.2369384765625, 0.327392578125, 0.1075439453125, 0.260009765625, 0.169921875, 0.3681640625, 0.478271484375, 0.420166015625, 0.447509765625, 0.23681640625, 0.389404296875, 0.36376953125, 0.0994873046875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7a5e3f910b55d8a97066596445c150b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25667768716812134, 0.401640921831131, 0.30787625908851624, 0.12497753649950027, 0.03845516964793205, 0.11357328295707703, 0.48295721411705017, 0.41883978247642517, 0.1411701738834381, 0.2805270254611969, 0.2420070320367813, 0.26082077622413635, 0.3070663511753082, 0.37623950839042664, 0.23332150280475616, 0.4087965190410614], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9d06a8821c3ba3c6e10ac500795f943(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34716796875, 0.07196044921875, 0.343994140625, 0.07940673828125, 0.19970703125, 0.2020263671875, 0.2144775390625, 0.492919921875, 0.1192626953125, 0.28369140625, 0.41015625, 0.08953857421875, 0.1988525390625, 0.1978759765625, 0.393310546875, 0.1920166015625, 0.057952880859375, 0.345947265625, 0.28515625, 0.1497802734375, 0.33203125, 0.42041015625, 0.302001953125, 0.00524139404296875, 0.0765380859375, 0.1552734375, 0.2197265625, 0.412109375, 0.417724609375, 0.041656494140625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aaca997ddcf5126e2fcfae408dba2ed4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26806640625, 0.46142578125, 0.318115234375, 0.12939453125, 0.160888671875, 0.46923828125, 0.12255859375, 0.0731201171875, 0.42431640625, 0.235595703125, 0.00571441650390625, 0.40283203125], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ebd1c56cb0cf41cf28ec5130b1354b30(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.437744140625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_150bcfad42c196747ae861b9b3a50934(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.318603515625, 0.020599365234375, 0.376220703125, 0.42578125, 0.37451171875, 0.322998046875, 0.44921875, 0.319091796875, 0.015533447265625, 0.283935546875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4781facfca10e29b38b869d1997991fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06834623962640762, 0.046025458723306656, 0.3353017568588257, 0.06795992702245712, 0.2830806076526642, 0.06179269775748253, 0.13599655032157898, 0.02884865552186966, 0.48569849133491516, 0.0014765642117708921, 0.3904015123844147, 0.4393344223499298, 0.39587855339050293, 0.36871039867401123, 0.20924031734466553, 0.11343105882406235, 0.41319310665130615, 0.17271122336387634, 0.38024425506591797, 0.39196211099624634], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63c9c03900ea64594dc1d635890cf21b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0924072265625, 0.433349609375, 0.254150390625, 0.1279296875, 0.422607421875, 0.2442626953125, 0.0034809112548828125, 0.1971435546875, 0.043487548828125, 0.3203125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db1f9c9836293a925cde80c919b6e779(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.313232421875, 0.0036525726318359375, 0.0689697265625, 0.07305908203125, 0.275390625, 0.494384765625, 0.09613037109375, 0.39794921875, 0.401123046875, 0.29248046875, 0.37646484375, 0.10595703125, 0.09814453125, 0.11175537109375, 0.4794921875, 0.388427734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b925eea08e2c54d6c1c731f9792f75f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.004795074462890625, 0.48828125, 0.18310546875, 0.138916015625, 0.28515625, 0.341064453125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96ae248d3fd51b7a721153639582403a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3076171875, 0.440673828125, 0.46142578125, 0.313720703125, 0.26025390625, 0.465576171875, 0.142333984375, 0.402587890625, 0.2200927734375, 0.438232421875, 0.223876953125, 0.382568359375, 0.27490234375, 0.1661376953125, 0.134765625, 0.48779296875, 0.3759765625, 0.3525390625, 0.438232421875, 0.0160369873046875, 0.403564453125, 0.014373779296875, 0.1455078125, 0.09716796875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a49fa40a3a8a50c8253199be8fcf18e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bee15709f05926afffe879e3d3e2fff7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.003749847412109375, 0.40673828125, 0.431640625, 0.198974609375, 0.0799560546875, 0.2117919921875, 0.01271820068359375, 0.3427734375, 0.2376708984375, 0.25390625, 0.471435546875, 0.07049560546875, 0.446533203125, 0.005157470703125, 0.213134765625, 0.3408203125, 0.452880859375, 0.47900390625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40845a12f69a4015053ee4d634276944(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_631ab03f309f35a398e91877813f735a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40845a12f69a4015053ee4d634276944
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6feda9abf487281d4e4106d7deb0a146(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.339111328125, 0.373046875, 0.061614990234375, 0.1551513671875, 0.07940673828125, 0.128662109375, 0.305419921875, 0.1727294921875, 0.046356201171875, 0.2122802734375, 0.12744140625, 0.10198974609375, 0.370361328125, 0.403076171875, 0.1739501953125, 0.045989990234375, 0.3359375, 0.1636962890625, 0.1873779296875, 0.04107666015625, 0.163818359375, 0.184326171875, 0.497802734375, 0.412109375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_811e8e3329d4dee65c6709ab45537e68(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00737762451171875, 0.131591796875, 0.1553955078125, 0.1634521484375, 0.439697265625, 0.1953125, 0.466796875, 0.1212158203125, 0.22216796875, 0.12384033203125, 0.093505859375, 0.27880859375, 0.127197265625, 0.282958984375, 0.061187744140625, 0.00408172607421875, 0.437744140625, 0.316162109375, 0.245849609375, 0.180908203125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b95024d5f691233cc9bedec332bac07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_daeb1353f697d4d8ee3157bead8c6701(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b95024d5f691233cc9bedec332bac07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e52aeb47a90a69d8eff4443e2a308fe2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18738169968128204, 0.30171895027160645, 0.2858389616012573, 0.13323543965816498, 0.23109309375286102, 0.008950671181082726, 0.025088641792535782, 0.10863012075424194, 0.3955036401748657, 0.38691017031669617, 0.003466063877567649, 0.0678040161728859, 0.43946510553359985, 0.261635422706604, 0.21520806849002838, 0.3040212392807007, 0.3748994469642639, 0.4962756037712097, 0.3026280701160431, 0.23896729946136475, 0.2590213418006897, 0.36814039945602417, 0.08965133875608444, 0.3223038613796234, 0.3435894250869751, 0.47805967926979065, 0.4265664219856262, 0.21146529912948608, 0.10727140307426453, 0.09066873043775558], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f71b68057a1bb99214a7a340463ced45(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.171875, 0.304443359375, 0.123046875, 0.294921875, 0.486083984375, 0.164306640625, 0.42041015625, 0.158203125, 0.2822265625, 0.11297607421875, 0.09765625, 0.257568359375, 0.02899169921875, 0.18505859375, 0.047821044921875, 0.1116943359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3deef7ce55df14091bd0f69ecf9ed4a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9046603db13463fb42da6be37bd86bf8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3271028697490692, 0.42141714692115784, 0.2461729347705841, 0.2918940484523773, 0.030791619792580605, 0.24453264474868774, 0.4756605327129364, 0.3191494047641754, 0.16495653986930847, 0.398355633020401, 0.3645930290222168, 0.35779038071632385, 0.3627999424934387, 0.3436409533023834, 0.33678966760635376, 0.02896115556359291, 0.1397242397069931, 0.39883047342300415, 0.30226290225982666, 0.21543024480342865, 0.0004528953577391803, 0.11357982456684113, 0.033971887081861496, 0.27483704686164856, 0.11060813069343567], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0ba4caa14fcac619aedbe54f4b95ffa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5df760ccdebd0f3592363617cc655f09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9234c05eb679f10226c37a6045040d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7616d2cee120f5113b6c5adc6035553d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_811037475b19a96c723ef9f47073d2cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1ab4f1a6db4efe81d1675ce8e0e7d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_811037475b19a96c723ef9f47073d2cf
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12a47130cc30746386ca79ed37757e08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d1464b59103b0857baa69ef938270cf6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6819e26fed3f8f0e48d6b8e511514e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d1464b59103b0857baa69ef938270cf6
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6f8610dedbd86099190071dd8de14c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4a0098aaf2358d23db4fb77abfaa0d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6f8610dedbd86099190071dd8de14c8b
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ec75e0a1eac60570675662167fc12e2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ec47bd98ac432c65daee0242b7b66aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ec75e0a1eac60570675662167fc12e2e
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9fe3d204669e773ccfa2d558a08706c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9160e85b57c47fc4d4d1fb6901aa3347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_60e55af3846009a5a8e4fe82e7d2004b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45583778619766235, 0.008747951127588749, 0.28325334191322327, 0.17284299433231354, 0.44668740034103394, 0.4316466748714447, 0.42756369709968567, 0.2557156980037689, 0.19674649834632874, 0.13883069157600403, 0.36308616399765015, 0.4911988079547882, 0.43136560916900635, 0.2767798900604248, 0.2953028082847595, 0.39949530363082886, 0.43555399775505066, 0.2066013067960739, 0.10504031181335449], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38ffdd04fba913e3645cadf6e82a66cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2dee12ccd5422fe4a228da120121aa0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15983189642429352, 0.21445094048976898, 0.30672159790992737, 0.36247703433036804, 0.39451682567596436, 0.3169409930706024, 0.15527591109275818, 0.4585237503051758, 0.1428205817937851, 0.2099614143371582, 0.418809711933136, 0.34512126445770264, 0.47560566663742065, 0.21142305433750153, 0.45802152156829834, 0.19297026097774506, 0.11744830012321472, 0.3573782444000244, 0.3718077838420868, 0.2894071340560913, 0.3741054832935333, 0.4649015963077545, 0.39885199069976807, 0.1459885537624359], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ace01422747b7c6d292d2c543390d5f0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4aea0f17230329cac3ca025492f44af7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ace01422747b7c6d292d2c543390d5f0
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6dc25886605f6c99e5333e88315bbedf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73df0e3ae62a6655704f9b68999ec0fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6dc25886605f6c99e5333e88315bbedf
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af43144cb9497fa7fc8daabbb976dabe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b7646da19f75e214a5656fc8f79e163(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62341c630bc5fb1b1161047edcd20254(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b7646da19f75e214a5656fc8f79e163
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69581104dd6d13a54f3c598928764e6e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34706544876098633, 0.354500412940979, 0.03786783292889595, 0.3783652186393738, 0.007737571839243174, 0.46939194202423096, 0.33197706937789917, 0.12167567759752274, 0.45114895701408386, 0.061563413590192795, 0.1403135061264038, 0.21573999524116516, 0.3955940008163452, 0.28754428029060364, 0.4779700040817261, 0.28260886669158936, 0.26142457127571106, 0.07513990998268127, 0.4872272312641144, 0.1223837286233902], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b323fa790003ba2374ea92122a7648e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aea4c82d1095f2d6307f87ef6e819ba8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b323fa790003ba2374ea92122a7648e2
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c34f96949dd554c857b67f1590cc019(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad6281e844088fcef025fa5cfb73402f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c34f96949dd554c857b67f1590cc019
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8d5cf4af68db796e013543629413259b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c86dcd2e41fc7c913c9e5de03a343a5a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2681120038032532, 0.43960142135620117, 0.20935286581516266, 0.13933947682380676, 0.3990621268749237, 0.2470030039548874, 0.05417995899915695, 0.36647891998291016, 0.0785064548254013, 0.020219596102833748, 0.13392028212547302, 0.3829497694969177, 0.4536823034286499, 0.1336812973022461], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e61599c28ab4f77eb5904d59eef0ba8d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b6de5479dfd25b7f72ad11f4c39fd4a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5947308f7c3db5a3d07029893c7127cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cacb44bfec0254417b6ef3865acea244(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5947308f7c3db5a3d07029893c7127cc
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_125c13bd111488568f6aa2bd3b8cac79(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1265944c708a9b8bb3e117b1841a5d05(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_125c13bd111488568f6aa2bd3b8cac79
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96d116b534285f736434e079b250c07b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4e5cb28274a2b002e8d99847231742cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10ae361db0710926a630f156a8a7038f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.246337890625, 0.038787841796875, 0.07501220703125, 0.018768310546875, 0.315185546875, 0.3369140625, 0.35302734375, 0.230224609375, 0.27587890625, 0.100830078125, 0.5, 0.11578369140625, 0.310302734375, 0.1865234375, 0.140869140625, 0.32275390625, 0.34619140625, 0.203857421875, 0.1611328125, 0.2225341796875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f103316df6090d2d4303c927f0c2a85f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76ea3314d569a76d36722658f96fd141(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f103316df6090d2d4303c927f0c2a85f
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_932705cbd1e4d97aa9c055b6a1f9d156(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14461e8370acd22916b1fd1b276296b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77b24f1107af22aa9a5c0c6be7c8bac4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14461e8370acd22916b1fd1b276296b8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81ab9a45d90879bbf6e0f712103c9456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f8858012de1af9c5814c4fbb82a3feb7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21510611474514008, 0.42732641100883484, 0.25039365887641907, 0.28663986921310425, 0.12159674614667892, 0.2724835276603699, 0.29967954754829407, 0.25211936235427856], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10d867209e276180edb4ec78ad7178cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a539af6c85021eecec6a6c18ff5f820(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.489501953125, 0.47119140625, 0.391845703125, 0.30859375, 0.40234375, 0.10638427734375, 0.494140625, 0.031951904296875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cbf224eb900f965844948843be6baca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23563359677791595, 0.01393650472164154, 0.20017430186271667, 0.46746423840522766, 0.13535569608211517, 0.493337482213974, 0.044712357223033905, 0.3704719841480255, 0.1877877414226532, 0.20351828634738922, 0.28868094086647034, 0.09445687383413315, 0.20195958018302917, 0.40704235434532166, 0.25620487332344055, 0.011650947853922844], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ece2919536ae0172a3c47d1c13a0850(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c0171da79c971803bc2291f5e0fd104(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46e6c7ee377f5859c47ecfd24f38da79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c0171da79c971803bc2291f5e0fd104
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c539eaf51c81eba4feda70e41cfe0c34(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.431396484375, 0.10455322265625, 0.2025146484375, 0.1279296875, 0.38330078125, 0.21630859375, 0.45166015625, 0.34619140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_30bee08710449fc1b91a095ffc39b038(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ec0e5e5c38d89b180d265689cb0e09a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_30bee08710449fc1b91a095ffc39b038
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05499267578125, 0.0657958984375, 0.00447845458984375, 0.280029296875, 0.0625, 0.09368896484375, 0.34912109375, 0.357666015625, 0.2059326171875, 0.0170745849609375, 0.37109375, 0.215087890625, 0.32568359375, 0.327880859375, 0.44775390625, 0.36865234375, 0.3291015625, 0.373291015625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9671dd47f3820cadf432b99d5bade88f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c23017e48d87261907de5766eca4633b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9671dd47f3820cadf432b99d5bade88f
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab0a039ec87dc9bb062df2e2a98f4b01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9474d0c396e1c3653c19f71e073595d3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f811c567f8cd54d87c2a0559fa5ad19c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9474d0c396e1c3653c19f71e073595d3
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab1f0c5b58a08f99bb8dba3e9d123555(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2096860259771347, 0.003912083804607391, 0.05476532131433487, 0.03571492061018944, 0.006574236787855625, 0.13417208194732666, 0.2820621132850647, 0.28098735213279724], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cea5476dd27ae631e9110a1ddbd420a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.281005859375, 0.376708984375, 0.05810546875, 0.0038051605224609375, 0.1282958984375, 0.343017578125, 0.26611328125, 0.0308074951171875, 0.476806640625, 0.208740234375, 0.0255889892578125, 0.1859130859375, 0.059783935546875, 0.1669921875, 0.10076904296875, 0.2039794921875, 0.2423095703125, 0.251708984375, 0.1839599609375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c288a7d6e0fc0512734edc18119549f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01cd3be3df1b95e2174d692aed82e0b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c3dcac2c8035fe08076823493696330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a5230f8caab6de9b6840085fd44447(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c3dcac2c8035fe08076823493696330
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b752edbcdf8035fddd6b7e752cd702db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_27edda407f2738b3f66fdc653ce77b61(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04557406157255173, 0.1714135706424713, 0.06474565714597702, 0.27839910984039307, 0.0861019492149353, 0.33587923645973206, 0.3848743140697479, 0.18078738451004028, 0.030870411545038223, 0.00018439145060256124, 0.4018518626689911, 0.3705049455165863, 0.30119526386260986, 0.01178289856761694, 0.39807650446891785, 0.4519578516483307], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_05d07a396d2d518c1f9f355cb5ae2309(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0fa996f9de42a4c397652875fbab4511(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_05d07a396d2d518c1f9f355cb5ae2309
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47921133041381836, 0.17932221293449402, 0.11050046980381012, 0.40501338243484497, 0.32421576976776123, 0.1532193124294281, 0.4012618958950043, 0.14582036435604095, 0.23750996589660645, 0.1590421348810196, 0.279080331325531], dtype='float32').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec753a91d161ce84caf37cebfa7d6ed8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07269287109375, 0.41552734375, 0.265869140625, 0.193359375, 0.07330322265625, 0.01374053955078125, 0.189697265625, 0.44384765625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06727e7110b2fb06d07f55af090095f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1720eff484050980ab133cefbca4a66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06727e7110b2fb06d07f55af090095f5
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db2c637356ff6a9907ed3be79e224d4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_33b0fefbc5f4cc811621f6d7d837f4cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.347900390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c94b29d48a49797dc79a266692f4d1e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26502859592437744, 0.38616788387298584, 0.02576480805873871, 0.1824059933423996, 0.15343602001667023, 0.4520927667617798, 0.43783050775527954, 0.2984201908111572], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d0737907372b53e4453e75d7c0ee3ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03625106438994408], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44990f0c5021549153b6934ce2d94a88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9c11d5c597f371949854293f195642e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04100629314780235, 0.31005948781967163, 0.12818817794322968, 0.3804400861263275, 0.06010739505290985, 0.2811751663684845, 0.341748982667923, 0.47525253891944885, 0.343076229095459, 0.49104148149490356, 0.16339053213596344, 0.08946012705564499, 0.12309327721595764, 0.08478818833827972, 0.1537122279405594, 0.442065954208374, 0.4995885193347931, 0.1849902868270874, 0.08882357180118561, 0.27498680353164673, 0.18025913834571838, 0.042545098811388016, 0.012394487857818604, 0.32293376326560974], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cade4ea632749d75acea254729ff8e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33544921875, 0.328125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f059b852c8b60cb154442c664fe35a83(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4172603189945221, 0.26249271631240845, 0.14326873421669006, 0.4977559745311737, 0.28011348843574524, 0.06689542531967163, 0.2608984410762787, 0.16355478763580322, 0.15440523624420166, 0.15069043636322021, 0.3598305284976959, 0.00986636895686388, 0.029845716431736946, 0.3739493191242218, 0.13908281922340393, 0.195123553276062], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b78f81ca5f45bac85ba448da918e1637(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9639858b17d30594db9948459f11c138(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b78f81ca5f45bac85ba448da918e1637
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_89cda948e868e1ef926b5b31e96deeec(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b257e035f106435a62f501911d1b7785(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_89cda948e868e1ef926b5b31e96deeec
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51bf8263e6facdc374376d337e40606f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac2f1e7693f9b4accfc0b27d391c6d36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2095947265625, 0.41259765625, 0.28369140625, 0.372314453125, 0.49658203125, 0.29931640625, 0.3310546875, 0.421875, 0.28857421875, 0.1568603515625, 0.2666015625, 0.10601806640625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88caf10fd8864d43290106db80951116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e42f2294bc28eeee34ff04f88c3e6e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2357177734375, 0.065185546875, 0.28125, 0.0665283203125, 0.139892578125, 0.1298828125, 0.273681640625, 0.38330078125, 0.058685302734375, 0.1585693359375, 0.1376953125, 0.469482421875, 0.2022705078125, 0.373046875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c760df10fab723f31b4a3d805cec3b20(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1e088d2d22111966a0190fc703a01c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c760df10fab723f31b4a3d805cec3b20
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9df161e3f3e88246764c408dfc295be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36cf7a11860d4c701b234dc8c5b5e622(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_43b9f6546658842e4b05b14487bc284a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b057cae5486d8cc9fa3baccdc6de2d2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_43b9f6546658842e4b05b14487bc284a
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6dac7f00c569c0c6e01d62bdc071eeac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7e6e2769e24e77eb6cfc4124c1ff89a6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63509a073e0ff2f037c232e8a8f5a4a3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e6e2769e24e77eb6cfc4124c1ff89a6
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bfd9fb88c1ad6ce66e537f0d02b1dadd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.256591796875, 0.1439208984375, 0.2333984375, 0.38623046875, 0.40673828125, 0.330078125, 0.10125732421875, 0.463134765625, 0.354736328125, 0.026092529296875, 0.1971435546875, 0.3974609375, 0.1732177734375, 0.00328826904296875, 0.489013671875, 0.19775390625, 0.11541748046875, 0.1036376953125, 0.00945281982421875, 0.44580078125, 0.1854248046875, 0.272216796875, 0.04180908203125, 0.289794921875, 0.05963134765625, 0.478515625, 0.303466796875, 0.40380859375], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_432d1ebffffa755e49510ed60359a1b6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8452497b563a441e70950c4d78566179(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364990234375, 0.2578125, 0.1876220703125, 0.134521484375, 0.206298828125, 0.492431640625, 0.1732177734375, 0.459716796875, 0.3017578125, 0.03875732421875, 0.492431640625, 0.07073974609375, 0.055999755859375, 0.331787109375, 0.450927734375, 0.360107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d55e15a7824c4568ce536ba9218b649d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a16aa590a5209e043dec72f269a26b15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d55e15a7824c4568ce536ba9218b649d
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eccb75aa05485cb3d7cf34b581752339(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16552734375, 0.004482269287109375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d85e4db1f5c9f8717745d09f9e64ea61(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09023449569940567, 0.4049240052700043], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da6b520b98d0b887dce2a538218534fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a042447963a5e4f95145b5150d768520(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12764589488506317, 0.30755549669265747, 0.15330924093723297, 0.41192731261253357, 0.3970332741737366, 0.47404730319976807, 0.4474819004535675, 0.39328867197036743, 0.25742360949516296, 0.29455775022506714, 0.4830940365791321, 0.4587555527687073, 0.42899706959724426, 0.037220291793346405, 0.4901790916919708, 0.29571837186813354, 0.04404039308428764, 0.15380948781967163, 0.39119458198547363, 0.4695301055908203, 0.3732894957065582, 0.33065855503082275, 0.18074236810207367, 0.04167155176401138], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_079348931cff5420670b3500c5d60fdc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2841796875, 0.44384765625, 0.0355224609375, 0.1646728515625, 0.05078125, 0.47314453125, 0.47802734375, 0.17333984375, 0.276123046875, 0.10968017578125, 0.2320556640625, 0.34521484375, 0.2890625, 0.204345703125, 0.183837890625, 0.0071563720703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d11c331c2d3ba4f830e88199d93c951(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24838042259216309], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c63579fb15baf02867c878fcb9a7047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_952eb9f758a4c68d096cde5f377a6c2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.334228515625, 0.31298828125, 0.19970703125, 0.213623046875, 0.419189453125, 0.363525390625, 0.350341796875, 0.01192474365234375, 0.355712890625, 0.2298583984375, 0.37451171875, 0.344482421875, 0.0435791015625, 0.10211181640625, 0.1669921875, 0.164794921875, 0.341796875, 0.364501953125, 0.2744140625, 0.476318359375, 0.450439453125, 0.32958984375, 0.0258026123046875, 0.0186004638671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99db288df05fe60e2ba2083c833c3832(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5980dd3150a72753bf57580b2adb7ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99db288df05fe60e2ba2083c833c3832
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2543ee47a748e0f2ccaa520de6fdfc96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_590b776ac6411426b1b7d195238cc930(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc87dfbf59f9460b76b1837aa1cba6eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_590b776ac6411426b1b7d195238cc930
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae0b114246e4452c66d62ae5df5c6846(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2494c54ef94d2dfde06c2fbc02c9e3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b348e8000ef970ecd9caafceb501b8db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_779698d6e4e98b7800d4f2d1b2d42a50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b348e8000ef970ecd9caafceb501b8db
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bb22fbcb9c14ad1bd5b8827d486e20f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3010338842868805, 0.4737429916858673, 0.31500881910324097, 0.2913210988044739, 0.24133998155593872, 0.24662500619888306, 0.22794674336910248, 0.4565643072128296, 0.04327204450964928, 0.49664974212646484, 0.46223026514053345, 0.22535237669944763, 0.17357642948627472, 0.4694322645664215, 0.328864723443985, 0.06856122612953186, 0.38196152448654175, 0.4645146429538727, 0.42208635807037354, 0.40491658449172974, 0.44438570737838745, 0.4249876141548157, 0.3290403187274933, 0.050324540585279465], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df7339978207b900f3ad9570fc311692(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a90d9cb6eb2175fb92342421defe99d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df7339978207b900f3ad9570fc311692
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81cea8a3093e74c9e7299edd1329f869(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09417724609375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7128015721b168549497631acf9e448(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5ece0acae22299f5857b6b1f15491eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7128015721b168549497631acf9e448
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_37b253cf4c90233cc4edafe4e2532415(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1832275390625, 0.0285186767578125, 0.229736328125, 0.3095703125, 0.3359375, 0.255126953125, 0.2161865234375, 0.1944580078125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1578a290b80a60dc298c1fb4e79d247c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2119140625, 0.2392578125, 0.1712646484375, 0.1861572265625, 0.2039794921875, 0.25390625, 0.062744140625, 0.46142578125, 0.26123046875, 0.09063720703125, 0.20751953125, 0.390625, 0.04656982421875, 0.09295654296875, 0.0237579345703125, 0.2210693359375, 0.1630859375, 0.431884765625, 0.3369140625, 0.15087890625, 0.452392578125, 0.1204833984375, 0.09698486328125, 0.38330078125, 0.417236328125, 0.413818359375, 0.365478515625, 0.257080078125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e3b47131684d3be05eb3382320a358a4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8c04380e13bdf60803ac4e572777d79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e3b47131684d3be05eb3382320a358a4
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cccb2b9e947e032b6f30d953e24d25f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e43c881316d43fba0ff5d2190338ac8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2c5e8a0e36296b4f6c2e92ed2667c9c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2127685546875, 0.0047149658203125, 0.20703125, 0.26904296875, 0.14990234375, 0.38037109375, 0.1270751953125, 0.46484375, 0.11700439453125, 0.337158203125, 0.35546875, 0.210205078125, 0.459716796875, 0.099609375, 0.177001953125, 0.07550048828125, 0.4755859375, 0.342529296875, 0.052581787109375, 0.070068359375, 0.17724609375, 0.397216796875, 0.1505126953125, 0.305419921875, 0.213623046875, 0.32177734375, 0.3359375, 0.2841796875, 0.264892578125, 0.12066650390625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df31c92b16b89bfe93d32d8431a0373f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_deb5b4aaa830870071731682c5b728ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48876953125, 0.35986328125, 0.0999755859375, 0.325439453125, 0.08673095703125, 0.251708984375, 0.36962890625, 0.058685302734375, 0.400146484375, 0.439697265625, 0.467529296875, 0.437255859375, 0.370361328125, 0.208251953125, 0.221923828125, 0.1734619140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adef39f3c95114fc6dd3d48c626429f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.385986328125, 0.333251953125, 0.334716796875, 0.06793212890625, 0.1910400390625, 0.1673583984375, 0.32568359375, 0.40185546875, 0.4775390625, 0.28759765625, 0.400634765625, 0.08123779296875, 0.311279296875, 0.351806640625, 0.0887451171875, 0.267333984375, 0.3564453125, 0.49755859375, 0.2490234375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09e2c3448b98878ea8a9dcd068505bcf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29953333735466003, 0.14048199355602264, 0.09503817558288574, 0.27777937054634094, 0.03954518586397171, 0.2302182912826538, 0.21525782346725464, 0.15632948279380798, 0.26107051968574524, 0.3730330467224121, 0.3565206229686737, 0.23681162297725677, 0.1321362555027008, 0.22117017209529877, 0.17099304497241974, 0.48302316665649414], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ce9436932e0c11290f846aa6172f96d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5147afb4ff3b5e53aab3132b75820df9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21eaadd0fddc7fca9b3d5664bec48149(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c62ccbf0b4430251b82cfeef2014468(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47098490595817566, 0.1103280559182167, 0.4369451403617859, 0.46775713562965393, 0.010145529173314571, 0.40881893038749695, 0.2006591111421585, 0.1803542673587799, 0.3965291976928711, 0.11009849607944489, 0.18915928900241852, 0.002716373186558485, 0.05337166413664818, 0.4194211959838867, 0.13802571594715118, 0.4693391025066376], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da65682b4c59605c3aa383b20cd4fcb9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d69b2cc6a25ca585fb4f48417ba66ef0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33877092599868774, 0.1501975655555725, 0.18830828368663788, 0.1020621731877327, 0.29176151752471924, 0.11152896285057068, 0.09068342298269272, 0.13547582924365997], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_268c2503e1e1fe474c905ab69734c540(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4974875748157501, 0.09569000452756882, 0.23384393751621246, 0.31365737318992615, 0.3961949646472931, 0.13677676022052765, 0.4369716942310333, 0.3035373091697693, 0.12980438768863678, 0.23378348350524902], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59a9ffbc0f293949ddca76dbae04f527(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f9591a0aaf515741e8968b77e8500202(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ef928b84a28df20982e43fead5e64aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f9591a0aaf515741e8968b77e8500202
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ce6ec0c01206de1ff9a8782c2784d25(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30380719900131226, 0.31134921312332153, 0.08341967314481735, 0.3145287334918976], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dcfe8bf4570843c9938941434a69d906(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13117456436157227], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_67d3da3da644814964e3a11b071b8ea3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.334228515625, 0.459716796875, 0.20654296875, 0.1590576171875, 0.461669921875, 0.154052734375, 0.07733154296875, 0.08343505859375, 0.074462890625, 0.3857421875, 0.07562255859375, 0.1795654296875, 0.337890625, 0.29931640625, 0.30810546875, 0.455810546875, 0.474609375, 0.400146484375, 0.032684326171875, 0.310791015625, 0.3193359375, 0.2252197265625, 0.1973876953125, 0.326904296875, 0.365234375, 0.471435546875, 0.4169921875, 0.1097412109375, 0.021148681640625, 0.1939697265625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f24d9e7b6281d4dfdf85f8129c40c6da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49609375, 0.149658203125, 0.18505859375, 0.412353515625, 0.418701171875, 0.10137939453125, 0.32470703125, 0.266845703125, 0.259765625, 0.027435302734375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_396aabe45bd0843436abef9b507ac5b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39db26cd7f03a76138753964e5b993b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_396aabe45bd0843436abef9b507ac5b9
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d780af52c8e1efef99794179a2a19b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f6988adcd86bb52bda84375788fac524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2836a7c2a45ba80e537659b19a0887e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f6988adcd86bb52bda84375788fac524
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_751eea728aaf81a4677bfb6cdead452e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.228770449757576, 0.3070676624774933, 0.012506400234997272, 0.2797805368900299, 0.022481350228190422, 0.19392473995685577, 0.4236636161804199, 0.3389718532562256, 0.26210853457450867, 0.31854695081710815, 0.21146011352539062, 0.19069309532642365, 0.36751365661621094, 0.16383254528045654, 0.19763030111789703, 0.0816006064414978], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb537e74c4cbba91aa3f14df65d42d81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ae74f90d7ba1c065db531b7587a4fe0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.447021484375, 0.271484375, 0.46142578125, 0.2744140625, 0.277587890625, 0.334716796875, 0.1717529296875, 0.396240234375, 0.481689453125, 0.1007080078125, 0.018310546875, 0.395751953125, 0.38427734375, 0.1734619140625, 0.195068359375, 0.1336669921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b924ef9b1721c60340f39072963fe377(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2639538049697876, 0.11187825351953506, 0.46734365820884705, 0.3756919801235199, 0.02035297453403473, 0.41448432207107544], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5afc82ef84e0ebcb51a71a125e74aa36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b0d02a6a5265fd0e2371a17c007d406(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15346701443195343, 0.41454753279685974, 0.425022155046463, 0.432869553565979, 0.20029017329216003, 0.19872061908245087, 0.141497403383255, 0.22335919737815857, 0.03189738467335701, 0.3255617320537567, 0.13339591026306152, 0.3611944317817688, 0.3478880226612091, 0.14621604979038239, 0.13500189781188965, 0.14650028944015503], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_57a53b66eff05a2d7af36e43f159ca9b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38223016262054443, 0.39165619015693665, 0.41650617122650146, 0.16663606464862823, 0.02070820890367031, 0.015845859423279762, 0.09407474845647812, 0.41467350721359253, 0.007886075414717197, 0.3089967966079712, 0.21219834685325623, 0.19450998306274414, 0.2758464217185974, 0.42424821853637695, 0.23132529854774475, 0.11107577383518219], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69453284d7603413001fde51fad3ee7e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25816845893859863, 0.4001642167568207, 0.2050032615661621, 0.3794298768043518, 0.13416577875614166, 0.1666058897972107, 0.2232966423034668, 0.4588037133216858, 0.21713222563266754, 0.240620955824852, 0.4139060974121094, 0.3119710385799408, 0.4032934606075287, 0.3309653103351593, 0.1386215090751648, 0.3987278640270233, 0.3393310606479645, 0.47535213828086853, 0.2971802353858948, 0.08563289791345596, 0.26863160729408264, 0.29960396885871887, 0.3046574890613556, 0.24973317980766296, 0.4132726490497589, 0.37794584035873413, 0.2941853404045105, 0.0763818696141243, 0.2549571692943573, 0.44969791173934937], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25e9e590a38db5a588ded3a43a86617f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9ab673e2630f52b34b577b7acca8128(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25e9e590a38db5a588ded3a43a86617f
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9180c6c2ec67ee6b2db27fcb62b9792(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1828138828277588, 0.46402984857559204, 0.33494189381599426, 0.12569701671600342, 0.30962666869163513, 0.06738302856683731], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_042447ef91aa270c02a44071549dcff9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46871137619018555, 0.1864335685968399, 0.17219066619873047, 0.21391667425632477, 0.09396190196275711, 0.33694344758987427, 0.462715744972229, 0.032894574105739594, 0.23859229683876038, 0.22927916049957275, 0.24216651916503906, 0.18984651565551758, 0.43069717288017273, 0.43700507283210754, 0.3605944514274597, 0.013375453650951385, 0.15696458518505096, 0.26494982838630676, 0.11806044727563858, 0.24433332681655884, 0.3499873876571655, 0.4231843650341034, 0.20984815061092377, 0.0120462067425251], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_85d0090bbbb7afaf56c6b8437171f0bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1605224609375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_441929b37ca7586053ec17aaf28d5c56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.031219482421875, 0.201171875, 0.405029296875, 0.341064453125, 0.48876953125, 0.26416015625, 0.09625244140625, 0.1788330078125, 0.135498046875, 0.07781982421875, 0.37158203125, 0.219970703125, 0.0968017578125, 0.2413330078125, 0.240234375, 0.08856201171875, 0.239501953125, 0.165771484375, 0.342041015625, 0.2314453125, 0.362060546875, 0.029937744140625, 0.1322021484375, 0.393310546875, 0.07672119140625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_57f49d28787da8a67945b8ee9089f420(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45dcbac5cf7d774f090fe0e5a58f1b8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_57f49d28787da8a67945b8ee9089f420
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfc8689a095e89666d64c858d6f5eecf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d00d214de24836ff01c88f3cd35b698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c54c25954aba9e3766fbddd89979f68(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4022024869918823, 0.07014036923646927, 0.475299209356308, 0.4686344563961029, 0.1150880679488182, 0.46683400869369507, 0.2930436134338379, 0.33698368072509766, 0.33449414372444153, 0.188934788107872, 0.004047160968184471, 0.13115720450878143, 0.16497530043125153, 0.49003326892852783, 0.16370783746242523, 0.23387987911701202], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e55190ca20138f0a1dd70ebf5cd64844(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65ddb5a68ed3ca140581c7279499fede(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b902f5db1dcced054fd69912f2f4f7af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1a453fda8d5df2a33f8aa92031da232(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31396484375, 0.3125, 0.1043701171875, 0.431884765625, 0.04022216796875, 0.2037353515625, 0.2471923828125, 0.400146484375, 0.00856781005859375, 0.317138671875, 0.454833984375, 0.008575439453125, 0.32177734375, 0.191650390625, 0.10552978515625, 0.07977294921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_42829ccaaeb262da62067e363b816f25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c04a20788e3641a3108ebc23c2907d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_42829ccaaeb262da62067e363b816f25
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d8d3a8b9f64d7a3230fa7435759c2f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a224222de31045650e13d1ae36bee221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd781ee82bc35e3eeca67e5ddc2fc3f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a224222de31045650e13d1ae36bee221
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52379afe8497997a9ee6fd4b24ab5acc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19547851383686066, 0.2586682140827179, 0.1553369164466858, 0.29943615198135376, 0.49066585302352905, 0.3682379126548767, 0.4085695445537567, 0.21141298115253448, 0.4799420237541199, 0.3172178268432617, 0.4954792857170105, 0.2777649164199829, 0.2812957465648651, 0.3146669268608093, 0.010855184867978096, 0.2808789014816284], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43c10e8d3e095fbbe14d16fb2724c8bf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19788621366024017, 0.3619807958602905, 0.4617757499217987, 0.1131972223520279, 0.014421505853533745, 0.032239481806755066, 0.3677856922149658, 0.3210349380970001, 0.15419234335422516, 0.32643163204193115, 0.02658122405409813, 0.4718132019042969, 0.22340071201324463, 0.25834017992019653, 0.27714967727661133, 0.26905766129493713], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb13c540d716b09027748279262569fc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3068547546863556, 0.4261798858642578, 0.3363073170185089], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff37e92362144896865d95273ff3c89e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.382080078125, 0.036773681640625, 0.484619140625, 0.46826171875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fa6b0dccbd0b743b57e7c55202b6814(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03436279296875, 0.45654296875, 0.1405029296875, 0.0911865234375, 0.392578125, 0.41796875, 0.293701171875, 0.208740234375, 0.35595703125, 0.348388671875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87d7367db3f0872195622d445d1b86fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_701427004926d049986cfd5fffdbec2f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_524bc073e351b03f65a7e4b2a8f6b16f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_701427004926d049986cfd5fffdbec2f
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e2ea9eb83de0af63ac7ec8dcfae575d3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_79690cdc451c345b96faa20563b4f536(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e2ea9eb83de0af63ac7ec8dcfae575d3
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71984068057d651d9aa5ad377ab88f9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9919b71ae0988dc5a6f18405ff459df4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2793307900428772, 0.29374775290489197, 0.35540035367012024, 0.16818031668663025, 0.33717411756515503, 0.34204521775245667], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69315f98f4c12bfbdb4dc3ebb03455b7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3510717451572418, 0.26590102910995483, 0.3697400689125061, 0.16503383219242096, 0.06953370571136475, 0.08043193817138672, 0.14517302811145782, 0.09927701950073242, 0.4276491105556488, 0.2546904385089874, 0.238024041056633, 0.39808470010757446, 0.36840102076530457, 0.06058964133262634, 0.018979893997311592, 0.25208136439323425], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7169113b05c0edd385d9b15c9d73c523(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e04b0c95d411c4f2f6b7e2bec50b617(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7169113b05c0edd385d9b15c9d73c523
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0c75bd441700c68ce2d731248d27487a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09cf30699a5929633ad13c0db0e3425f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0c75bd441700c68ce2d731248d27487a
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e839b68f92e02938cefe2f840e1a29d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05975341796875, 0.435791015625, 0.08758544921875, 0.0965576171875, 0.4833984375, 0.05780029296875, 0.316650390625, 0.022735595703125, 0.08148193359375, 0.0634765625, 0.492431640625, 0.2386474609375, 0.35986328125, 0.3154296875, 0.204833984375, 0.00244903564453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac2e38a178e2560d0a1c47dfeac28fb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f4e73fb07dba6bb9017bfe5586d7be2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.039398193359375, 0.447509765625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_16e690690cb26dca7c72917cbd84dcd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.333740234375, 0.223876953125, 0.369140625, 0.39990234375, 0.3994140625, 0.33837890625, 0.2186279296875, 0.14892578125, 0.435791015625, 0.44482421875, 0.16845703125, 0.0179290771484375, 0.1063232421875, 0.462158203125, 0.173095703125, 0.41064453125, 0.275146484375, 0.161376953125, 0.417724609375, 0.435791015625, 0.10809326171875, 0.0024967193603515625, 0.295166015625, 0.2021484375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7034974cf9eccc8f095a428ae140f122(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48291015625, 0.03997802734375, 0.5, 0.431640625, 0.1220703125, 0.349609375, 0.3427734375, 0.4306640625, 0.37646484375, 0.0011224746704101562, 0.361328125, 0.432373046875, 0.315185546875, 0.456787109375, 0.2005615234375, 0.11138916015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ef017806a208c19c2459b24f8b0118d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.138427734375, 0.0838623046875, 0.29833984375, 0.2509765625, 0.2095947265625, 0.309326171875, 0.284423828125, 0.366455078125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc4cc8cd8b7973c6f06905a9fa039485(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f28dd262e7e08b340552622aea2227df(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb67791e6ca96c827bccf3ba7864c93b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f28dd262e7e08b340552622aea2227df
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd2e9266af049333222abbc5369b00ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_60f003d72c3b40f595880f2d4125ac61(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10369873046875, 0.308837890625, 0.39453125, 0.399169921875, 0.0860595703125, 0.409912109375, 0.059295654296875, 0.47412109375, 0.155029296875, 0.1092529296875, 0.20849609375, 0.441650390625, 0.27783203125, 0.1905517578125, 0.44482421875, 0.34228515625, 0.426025390625, 0.39892578125, 0.2259521484375, 0.0265350341796875, 0.2166748046875, 0.1749267578125, 0.27490234375, 0.282470703125, 0.3427734375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7498b9d80618c0cedd880961209380e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48221322894096375, 0.02107037603855133, 0.038059234619140625, 0.4915320575237274, 0.25906136631965637, 0.23590143024921417, 0.023573357611894608, 0.24542400240898132, 0.19440613687038422, 0.19072909653186798, 0.3573165237903595, 0.2250446081161499, 0.290025532245636, 0.4905933141708374, 0.46656471490859985, 0.17089274525642395, 0.43671464920043945, 0.24415218830108643, 0.13440604507923126], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_126127298a872858242ef92a6d59a455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1fed42ac7bace8d3316ab2b1f19b1da5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_126127298a872858242ef92a6d59a455
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfb60d655ccba2a63144de939c8dcccb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41748046875, 0.0751953125, 0.197509765625, 0.1954345703125, 0.1920166015625, 0.28076171875, 0.2030029296875, 0.10333251953125, 0.30712890625, 0.434814453125, 0.203369140625, 0.40625, 0.455078125, 0.0005984306335449219, 0.2135009765625, 0.161865234375, 0.389404296875, 0.2210693359375, 0.492431640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13e6eef1d366af3d79763d7ccdfca428(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.314208984375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06724458656cd3383d0665282f264506(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08585511893033981, 0.3989000618457794, 0.2791346609592438, 0.3581233024597168, 0.43867161870002747, 0.48880499601364136, 0.25281259417533875, 0.21201956272125244, 0.42296555638313293, 0.3246332108974457, 0.020234333351254463, 0.2562689185142517, 0.060019202530384064, 0.44436460733413696, 0.21957215666770935, 0.47982993721961975, 0.21877896785736084, 0.037908341735601425, 0.26457542181015015, 0.17235982418060303, 0.4291820526123047, 0.3214067816734314, 0.1544209122657776, 0.031061189249157906, 0.18398600816726685], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7177845c8997a43ca5c5283e068fdb97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b94ccdd48ed42d43e965155df43bb200(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7177845c8997a43ca5c5283e068fdb97
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0ec5d97b7dde4b94156985566db3079(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d774f2c411227a48ca3762b29ac90db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0ec5d97b7dde4b94156985566db3079
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a313882076e4707b8866380b6c58dc4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3796316087245941, 0.09123673290014267, 0.44970986247062683, 0.3006294071674347, 0.25468015670776367, 0.34974533319473267, 0.1231820359826088, 0.28685906529426575, 0.30852505564689636, 0.39187273383140564, 0.1739671528339386, 0.1543310284614563, 0.10314583033323288, 0.11961746960878372], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1427698a7505990c0917af2db0105bbf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.070556640625, 0.271728515625, 0.028717041015625, 0.36962890625, 0.269287109375, 0.387451171875, 0.335693359375, 0.43505859375, 0.368896484375, 0.37158203125, 0.08843994140625, 0.404541015625, 0.397216796875, 0.180908203125, 0.468994140625, 0.416259765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac780071584d906529ba3bf2eee77036(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2285173237323761, 0.22846093773841858, 0.09053981304168701, 0.1912737339735031, 0.12027612328529358, 0.05591193959116936, 0.24761857092380524, 0.13102397322654724, 0.03928789868950844, 0.04022873938083649, 0.2422853410243988, 0.0541667640209198, 0.03069944679737091, 0.23035815358161926, 0.37814000248908997, 0.1261817365884781], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3468905893d8fe3274d16d1a50655fdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bcd0b7c7f0d66aab93957fdf487f9902(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.060302734375, 0.2183837890625, 0.4912109375, 0.27685546875, 0.0889892578125, 0.40283203125, 0.465576171875, 0.189453125, 0.401123046875, 0.420654296875, 0.4951171875, 0.03265380859375, 0.3408203125, 0.1920166015625, 0.118408203125, 0.11578369140625, 0.3330078125, 0.1966552734375, 0.1741943359375, 0.3359375, 0.447998046875, 0.2259521484375, 0.01139068603515625, 0.4248046875, 0.4423828125, 0.07989501953125, 0.4140625, 0.239013671875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fabea5cf2b85774e6257123724b2446d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4677734375, 0.263916015625, 0.482177734375, 0.4638671875, 0.03192138671875, 0.236083984375, 0.11248779296875, 0.499267578125, 0.1998291015625, 0.28515625, 0.295654296875, 0.1890869140625, 0.1568603515625, 0.1981201171875, 0.453369140625, 0.2430419921875, 0.36474609375, 0.385009765625, 0.447265625, 0.497802734375, 0.10870361328125, 0.0102691650390625, 0.486572265625, 0.432373046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_51427bde3d4d12bcfa47718ac12bed60(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.286376953125, 0.273681640625, 0.287841796875, 0.2001953125, 0.389892578125, 0.2423095703125, 0.11993408203125, 0.259765625, 0.25244140625, 0.493408203125, 0.317138671875, 0.1744384765625, 0.4541015625, 0.276123046875, 0.379638671875, 0.08087158203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_edc3ed40c7920749a04e10ec0a862ef9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0178375244140625, 0.395263671875, 0.00630950927734375, 0.04327392578125, 0.12890625, 0.1669921875, 0.448974609375, 0.006839752197265625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab0cb8a80d1a66cd012199224946361d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b8f7b8ded5f8faed614005b5ee77650(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.335205078125, 0.1680908203125, 0.488037109375], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_291ac5550146552163cd1b127f4bd7da(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d47a6eaf632c2f2c05a0200e10eb09a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4789729118347168, 0.24426601827144623, 0.2053736448287964, 0.14805202186107635, 0.1719214916229248, 0.21694664657115936, 0.48200908303260803, 0.2673577070236206, 0.1909935176372528, 0.34919238090515137, 0.17692910134792328, 0.48165974020957947, 0.112911656498909, 0.19231760501861572, 0.4283224046230316, 0.11781132966279984, 0.4620648920536041, 0.45964285731315613, 0.14581096172332764, 0.17120033502578735, 0.3043971061706543, 0.45196184515953064, 0.21653664112091064, 0.49905189871788025, 0.16505193710327148, 0.03496897220611572, 0.27406299114227295, 0.416681170463562], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_35fae243d8722e86177d2f50c36b9364(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae69293fe19c308b7bbf2eae545f0341(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48681640625, 0.46044921875, 0.238525390625, 0.496337890625, 0.05584716796875, 0.298583984375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0f1f715f701f13b034b1614d1db6a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33544921875, 0.322021484375, 0.35107421875, 0.278076171875, 0.284423828125, 0.484130859375, 0.247314453125, 0.410888671875, 0.174560546875, 0.1781005859375, 0.490966796875, 0.418212890625, 0.37158203125, 0.48291015625, 0.287841796875, 0.4775390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2ec1f830bedc1abc70764ae85366400a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4027767777442932, 0.20165354013442993, 0.19733816385269165, 0.4477063715457916, 0.2500143051147461, 0.33750975131988525, 0.3439345955848694, 0.39021846652030945, 0.13744011521339417, 0.07462148368358612, 0.1331857442855835, 0.3776300251483917, 0.404992938041687, 0.1740676611661911, 0.3469834625720978, 0.06777537614107132], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_67295adf62451c5a82c6170d1459bd22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.413330078125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e792b15ed9c86d36fbdbd4cfd4bd8ed0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.017366012558341026, 0.06610836088657379, 0.2160094678401947, 0.26003292202949524, 0.3453695774078369, 0.4479909837245941, 0.3067782521247864, 0.049961674958467484, 0.0243060402572155, 0.43703123927116394, 0.12218402326107025, 0.03471870347857475, 0.4253115653991699, 0.16639481484889984, 0.0038706029299646616, 0.11735616624355316, 0.3760066032409668, 0.16532480716705322, 0.3365201950073242, 0.24196521937847137, 0.2006341516971588, 0.4742480516433716, 0.4712190628051758, 0.2303050011396408, 0.17814546823501587, 0.00822892040014267, 0.24593578279018402, 0.2632424235343933, 0.4454611539840698, 0.3233998119831085], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfb687894d1d1e87bdd5fe08e09b9ead(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2992144823074341, 0.37978413701057434, 0.2479998618364334, 0.2324618250131607, 0.31358420848846436, 0.33069324493408203, 0.46709463000297546, 0.24675393104553223, 0.37866708636283875, 0.04174048453569412, 0.49904865026474, 0.06227476894855499, 0.3286227285861969, 0.0980716198682785, 0.35584118962287903, 0.06958302855491638], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_add77af9438122b045f90b64599e751f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.497802734375, 0.0692138671875, 0.059967041015625, 0.479248046875, 0.0382080078125, 0.24755859375, 0.0037364959716796875, 0.21484375, 0.1658935546875, 0.31396484375, 0.1744384765625, 0.2384033203125, 0.2249755859375, 0.2462158203125, 0.092041015625, 0.212890625, 0.387939453125, 0.1595458984375, 0.46533203125, 0.1884765625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53c491f4b0496d796534aba3be3a21d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24355632066726685, 0.20225770771503448, 0.4387662410736084, 0.1841912418603897, 0.12117510288953781, 0.17811696231365204, 0.3331369161605835, 0.16109655797481537, 0.05322794243693352, 0.06832467019557953], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c44c3dae22354b5d792a8dfd186f4452(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22337546944618225, 0.4560365080833435, 0.17735983431339264, 0.25445225834846497, 0.11326859891414642, 0.2657611668109894, 0.29901257157325745, 0.4950510263442993, 0.4950448274612427, 0.18323709070682526, 0.08312633633613586, 0.4017690122127533, 0.010062843561172485, 0.2233823537826538, 0.3282209634780884, 0.09608469903469086], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_000dc9460f36c74439b101c24fcac585(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41162109375, 0.41650390625, 0.44384765625, 0.122314453125, 0.162353515625, 0.2705078125, 0.293701171875, 0.269287109375, 0.26513671875, 0.1356201171875, 0.0909423828125, 0.06695556640625, 0.10284423828125, 0.31298828125, 0.1710205078125, 0.055694580078125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d1707636fc1992c60fc4b126594f20d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d88cb1ef280156495406774ef55800a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29736328125, 0.1142578125, 0.27685546875, 0.018341064453125, 0.4013671875, 0.06689453125, 0.24951171875, 0.2161865234375, 0.467529296875, 0.38037109375, 0.12432861328125, 0.424560546875, 0.248779296875, 0.1561279296875, 0.20166015625, 0.0601806640625, 0.11383056640625, 0.257568359375, 0.318359375, 0.19775390625, 0.2183837890625, 0.0267333984375, 0.1524658203125, 0.489013671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_220e088420c2368699fe83426ee21471(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a5b3d35a936a9720ecc494ecc293852(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.367034375667572, 0.3803701102733612], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e3d963336ea15bc884851b8d55ab99e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45458984375, 0.35546875, 0.288330078125, 0.28857421875, 0.442626953125, 0.428466796875, 0.40380859375, 0.09942626953125, 0.4189453125, 0.31298828125, 0.470458984375, 0.369873046875, 0.145263671875, 0.1385498046875, 0.29248046875, 0.06378173828125, 0.0120391845703125, 0.2939453125, 0.198486328125, 0.388671875, 0.0797119140625, 0.07257080078125, 0.019378662109375, 0.329833984375, 0.19140625, 0.15673828125, 0.314697265625, 0.329345703125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88df5e4cb2d1bb7057159c657167165c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_61b22eaa0d4eecdb76251ee9ed5109bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0de2579f3a93cc1f49bae82fac77b73a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61b22eaa0d4eecdb76251ee9ed5109bf
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f756e50e0915cff2f21127b3c24f45ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2113037109375, 0.265380859375, 0.052154541015625, 0.23583984375, 0.029754638671875, 0.031890869140625, 0.35791015625, 0.1602783203125, 0.470458984375, 0.2044677734375, 0.288818359375, 0.353515625, 0.206298828125, 0.311767578125, 0.1253662109375, 0.1610107421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cca328bb6a9f5e1301d60ef9af03e63(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.445556640625, 0.058746337890625, 0.279541015625, 0.294921875, 0.226806640625, 0.053955078125, 0.1268310546875, 0.05523681640625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6dd808d6c3c109ceed4218ccccafb891(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2440185546875, 0.1494140625, 0.2939453125, 0.213134765625, 0.48046875, 0.36962890625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a7bccc9c8b855cb5bc7157c4c22e5ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_166b480d522edb3288b3389790f8cd57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06665477156639099, 0.24149499833583832, 0.1843189001083374, 0.2251514494419098, 0.0803493857383728, 0.10570324957370758, 0.2859632968902588, 0.15720193088054657], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06710df14faf6cc083ff73c4e6443f94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdf52523857bc908b41702df1e2bd09f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06710df14faf6cc083ff73c4e6443f94
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f305230407f986fad77a89a79ca5df2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32227046440e2b66742a955c646f82a6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f305230407f986fad77a89a79ca5df2
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_369561123a893250bd0e421a93c848be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb173633bb497f7769e4e9a3d8307f07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_369561123a893250bd0e421a93c848be
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e72cfa1c60de0ffb2780c3eb985ede26(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4921875, 0.37939453125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83e9be6ab49c9959f454c118f6870277(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1768798828125, 0.165771484375, 0.2783203125, 0.16162109375, 0.11798095703125, 0.313720703125, 0.1431884765625, 0.22265625, 0.49560546875, 0.46923828125, 0.031982421875, 0.1510009765625, 0.08148193359375, 0.1650390625, 0.3955078125, 0.45263671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cce3548625175c370c2fad79f491191f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8c8aeadfa9b25172292ccc1e0d45585(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11492237448692322, 0.35500863194465637, 0.2136552780866623, 0.42267414927482605, 0.10773646086454391, 0.4543062150478363, 0.4850323796272278, 0.36721643805503845, 0.3521881401538849, 0.057265978306531906, 0.05239595100283623, 0.1695789098739624, 0.04914446920156479, 0.4882144033908844, 0.1914212852716446, 0.41769325733184814, 0.488690584897995, 0.40214377641677856, 0.26252734661102295, 0.1856919825077057, 0.2554430067539215, 0.4497910439968109, 0.4953177571296692, 0.3650914430618286, 0.4656042158603668, 0.24772000312805176, 0.10484056174755096], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bbaccc51fd5b9510ba98b1d6168077b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20298519730567932, 0.374347448348999, 0.3854242265224457, 0.2849748432636261, 0.36028197407722473, 0.15236994624137878], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_041dbc45d31fbf4e75092de3d9344981(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.061730820685625076, 0.4200352132320404, 0.345179945230484, 0.4817410409450531, 0.21383723616600037, 0.48939889669418335, 0.2790786921977997, 0.4011266529560089, 0.47012653946876526, 0.1353830099105835, 0.4342627227306366, 0.16618949174880981, 0.024386409670114517, 0.2226143330335617, 0.07138774544000626, 0.2394409477710724], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f064efdb7a5181c1dba4ebacbdf9ff53(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.040084369480609894, 0.02506832219660282, 0.44947150349617004, 0.1402331292629242, 0.4582919478416443, 0.2614850401878357, 0.19011618196964264, 0.1247553601861, 0.11983540654182434, 0.34840577840805054, 0.30459409952163696, 0.16167321801185608, 0.030182603746652603, 0.4639908969402313, 0.02934490144252777, 0.3754202723503113, 0.22254125773906708, 0.1615632325410843, 0.2756286859512329, 0.31126487255096436, 0.40281176567077637, 0.26235431432724, 0.30989909172058105, 0.24917274713516235, 0.008542206138372421, 0.40368542075157166, 0.34037700295448303], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dcf467ba23e1ed2c6cc6a28a63b2fc2a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24150347709655762, 0.07109400629997253, 0.3206436336040497, 0.34967637062072754, 0.2374601513147354, 0.3666323721408844, 0.3446998596191406, 0.4501146972179413, 0.12410806864500046, 0.36638951301574707, 0.3178119659423828, 0.3322029113769531, 0.44204360246658325, 0.34665411710739136, 0.29571130871772766, 0.4535655081272125, 0.28362080454826355, 0.43038100004196167, 0.25375449657440186, 0.22211644053459167, 0.1271832436323166, 0.1209024041891098, 0.41473573446273804, 0.4927786588668823, 0.05854478105902672, 0.44716203212738037, 0.4518616795539856, 0.3418855667114258, 0.2879215180873871, 0.1883224993944168], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_86b6f9266468fc57624ac1a7a8325dda(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a69f21905e61c05c2c8669a41f467fd8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_86b6f9266468fc57624ac1a7a8325dda
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19309866428375244, 0.023983728140592575, 0.38822299242019653, 0.4086936414241791, 0.042207278311252594, 0.3149300217628479, 0.03774488344788551], dtype='float32').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e7bc55074d451b8da53897e288ec2ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.248779296875, 0.2236328125, 0.2705078125, 0.2327880859375, 0.1292724609375, 0.359375, 0.3896484375, 0.11419677734375, 0.288818359375, 0.335693359375, 0.3212890625, 0.00940704345703125, 0.35302734375, 0.2283935546875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3869a0aafc1a2f59661f2514817150b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18239222466945648, 0.09819332510232925, 0.3728660047054291, 0.002518775872886181, 0.017798827961087227, 0.4572797119617462], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a1c66f1f6b160866c0ff226076740be5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_230b3169a93af2342c1629bde4d92d9f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a1c66f1f6b160866c0ff226076740be5
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_884427db0bee35c0bb5c79bf2e7dcff4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2139601707458496, 0.438407838344574, 0.13260647654533386, 0.3127289414405823, 0.30903056263923645, 0.2938729524612427, 0.3808489739894867, 0.09026559442281723, 0.15545900166034698, 0.41738080978393555, 0.4580065906047821, 0.4542735815048218, 0.42342284321784973, 0.09722762554883957], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7bbb2b147bb2380600e1cb0e29333be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48280569911003113, 0.31996843218803406, 0.2914310693740845, 0.2728753089904785, 0.09326789528131485, 0.1639857143163681, 0.4472211003303528, 0.0795850157737732, 0.421001672744751, 0.3299606442451477, 0.2199867218732834, 0.13521185517311096, 0.2160603553056717, 0.4257848262786865, 0.20909182727336884, 0.00446786405518651], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6765253200d7c0118c082ef2d30068ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_33a25d8fe99425cdf3bda08faa5d1d01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0853271484375, 0.469970703125, 0.0103302001953125, 0.006099700927734375, 0.426513671875, 0.273681640625, 0.34619140625, 0.33984375, 0.374755859375, 0.058990478515625, 0.1796875, 0.27734375, 0.141845703125, 0.0748291015625, 0.181640625, 0.30419921875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb3a1da8fa6ba01d32a15be4b06ad38a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04867864027619362, 0.0533156655728817, 0.4722336530685425, 0.28279733657836914, 0.3352298438549042, 0.218780979514122, 0.06459295749664307, 0.4999854862689972, 0.39430615305900574, 0.08638004213571548, 0.02133878506720066, 0.04015287011861801, 0.002224366180598736, 0.368786484003067, 0.04809049516916275, 0.35794514417648315, 0.3359200060367584, 0.013428017497062683, 0.25874197483062744, 0.3500525653362274, 0.21431724727153778, 0.31778132915496826, 0.17021726071834564, 0.4698958396911621, 0.05613536387681961], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da946ba865da557191ee493095698164(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3057602047920227, 0.4259108901023865, 0.2687835991382599, 0.3789917528629303, 0.038891784846782684, 0.11782544106245041, 0.33715683221817017, 0.3796766996383667, 0.42676466703414917, 0.46362441778182983, 0.16018028557300568, 0.20759911835193634, 0.13958293199539185, 0.24272477626800537, 0.1276525855064392, 0.13766539096832275], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9da2844a5f390e283bbb96b13c93d5b2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26708984375, 0.016815185546875, 0.442626953125, 0.16796875, 0.437744140625, 0.0181427001953125, 0.4306640625, 0.42138671875, 0.330810546875, 0.396240234375, 0.08099365234375, 0.00281524658203125, 0.2291259765625, 0.1739501953125, 0.409423828125, 0.1268310546875, 0.06341552734375, 0.2191162109375, 0.054443359375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d69439890ea0347316278c23cc28fa4d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.084716796875, 0.05352783203125, 0.3134765625, 0.2900390625, 0.2425537109375, 0.31591796875, 0.1956787109375, 0.069580078125, 0.489990234375, 0.25, 0.245361328125, 0.1439208984375, 0.145751953125, 0.218994140625, 0.09002685546875, 0.0364990234375, 0.124267578125, 0.468017578125, 0.05230712890625, 0.10321044921875, 0.3623046875, 0.06280517578125, 0.487060546875, 0.22900390625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ca960dc3c6de5aaa288fcbdc5d72339(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4008a9aec910b2d365c07083d5067870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46833640336990356, 0.40794867277145386, 0.15605005621910095, 0.11051875352859497, 0.4357362985610962, 0.4235735237598419, 0.3221908509731293, 0.4431439936161041, 0.4913564622402191, 0.2303684949874878, 0.2880527973175049, 0.10910817235708237, 0.16882531344890594, 0.3960956633090973, 0.0665302649140358, 0.47919851541519165, 0.11864984035491943, 0.0480976402759552, 0.4318884015083313, 0.2068713754415512, 0.02755977027118206, 0.4557161033153534, 0.34266436100006104, 0.2142055630683899], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c250b44db4d8733b6cec8595c4a402b3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10972212255001068, 0.036104943603277206, 0.35186323523521423, 0.36100026965141296, 0.4455263912677765, 0.3976133465766907, 0.33828291296958923, 0.2797265946865082, 0.21524059772491455, 0.38419702649116516, 0.3660350441932678, 0.04489108920097351, 0.2917773425579071, 0.022361883893609047, 0.06113768741488457, 0.3652360737323761, 0.01235553715378046, 0.21285925805568695, 0.09489618241786957, 0.04811025410890579, 0.08407871425151825, 0.3836091458797455, 0.3463830053806305, 0.4184888005256653, 0.01668548583984375], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88822177e22108ca19b718a93b2d30de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cce3548625175c370c2fad79f491191f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2532244026660919, 0.015865741297602654, 0.21156275272369385, 0.0628231018781662, 0.29710862040519714, 0.06176914647221565, 0.4661644399166107, 0.37219634652137756, 0.258279412984848, 0.2149575799703598, 0.04853407293558121, 0.15137240290641785, 0.17512819170951843, 0.2752442955970764, 0.052924744784832, 0.14786773920059204, 0.3805826008319855, 0.13810530304908752, 0.27903079986572266, 0.17712068557739258, 0.0510115772485733, 0.40035519003868103, 0.20336933434009552, 0.17709100246429443, 0.36108502745628357, 0.20326770842075348, 0.479671835899353], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5143a35b13eed6114add7e039fa02586(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.330322265625, 0.4384765625, 0.03363037109375, 0.416748046875, 0.34814453125, 0.0703125, 0.037200927734375, 0.07928466796875, 0.3359375, 0.29638671875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_571d916cd8d0924b4adac22df614c1af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06634521484375, 0.3466796875, 0.44189453125, 0.46484375, 0.37841796875, 0.076416015625, 0.13623046875, 0.05450439453125, 0.28369140625, 0.139892578125, 0.4072265625, 0.2257080078125, 0.12445068359375, 0.217041015625, 0.46240234375, 0.14111328125, 0.034637451171875, 0.0093841552734375, 0.0687255859375, 0.1705322265625, 0.286376953125, 0.450439453125, 0.162353515625, 0.472412109375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a632d479d42bf90421b2f92e73060116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b5dc8790f7a4ea4ab5c07baedca5d4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cd03ae30de695790ce026ddee7d9d89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4013036787509918], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_34238d17a0ce790d55cc788aa535a511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bcab1049b0eb911bbe69f691f8b019c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_34238d17a0ce790d55cc788aa535a511
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_daf6c28a06badd2166429e2f551d1511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0203bc591b7633508dc4f66644c355e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_daf6c28a06badd2166429e2f551d1511
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fcf8706e6e72d11b47ce636e9b431cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46630859375, 0.0277862548828125, 0.431884765625, 0.03662109375, 0.251953125, 0.19677734375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9dd02aa382bffe553f07052c1dd0d6ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42242932319641113, 0.1176968663930893, 0.19053426384925842, 0.2913735806941986, 0.10913822054862976, 0.11439356207847595, 0.2960520386695862, 0.255048543214798, 0.39278122782707214, 0.4653633236885071, 0.20842936635017395, 0.4040623903274536, 0.025321269407868385, 0.25643256306648254, 0.01667836681008339, 0.04922308772802353, 0.3198142647743225, 0.12347227334976196, 0.1261889636516571], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09e4951c66a160672a9c6d0223cffcb7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.044952392578125, 0.27734375, 0.014495849609375, 0.447998046875, 0.4609375, 0.1961669921875, 0.304931640625, 0.44775390625, 0.2685546875, 0.451416015625, 0.25, 0.12359619140625, 0.372314453125, 0.358642578125, 0.004344940185546875, 0.414306640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a33b1e715bc71d223e4133988c43bfa3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4173808991909027, 0.16096150875091553, 0.4907238483428955, 0.48650532960891724, 0.25970178842544556, 0.37709924578666687, 0.12202100455760956, 0.3085935711860657, 0.25829294323921204, 0.26723748445510864, 0.13976797461509705, 0.2457529753446579, 0.20672984421253204, 0.449166864156723, 0.13182803988456726, 0.44988083839416504], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_536e240cab5d453a371bd948242247ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_729eb9e55c2304bea3becdd0e77e624c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00432202685624361, 0.05323328077793121, 0.13994088768959045, 0.20521032810211182, 0.46393176913261414, 0.1463203728199005, 0.3902837932109833, 0.23866769671440125, 0.07676170766353607, 0.19543413817882538, 0.34054601192474365, 0.4330064654350281, 0.19965475797653198, 0.44370368123054504, 0.3771262764930725, 0.2761792838573456, 0.47437164187431335, 0.08979591727256775, 0.31752389669418335, 0.10311323404312134, 0.4163581430912018, 0.20196247100830078, 0.005280067212879658, 0.17444239556789398, 0.2693488299846649, 0.37738239765167236, 0.19212935864925385, 0.4716111421585083], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_547329b19c13cdf6bec73f50f5be1786(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1c4b31e094934c71eb32302e6dd643bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3210175037384033, 0.14609870314598083, 0.33452364802360535, 0.4865833520889282, 0.498644083738327, 0.3476608693599701, 0.4431597590446472, 0.46477314829826355, 0.09084924310445786, 0.4555304944515228, 0.10448172688484192, 0.4222969710826874, 0.2770436108112335, 0.059814441949129105, 0.30201900005340576, 0.2146729826927185, 0.03788590803742409, 0.42070597410202026, 0.09999974071979523, 0.43933573365211487, 0.20952211320400238, 0.3566257655620575, 0.4114621877670288, 0.18917739391326904], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f40ee06915ae3a192e3571306288a310(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47392863035202026, 0.2813740074634552, 0.23555070161819458, 0.11414249986410141, 0.32965487241744995, 0.4784798324108124, 0.14609917998313904, 0.2692776322364807, 0.17543430626392365, 0.15991562604904175, 0.1222609356045723, 0.43704068660736084, 0.45299726724624634, 0.45909127593040466, 0.2301178276538849, 0.48338237404823303, 0.3788231611251831, 0.09732553362846375, 0.2238098680973053], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_978b4178f889c6fc5ee0e479c4e5f3a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4015517234802246, 0.2729862332344055, 0.37424978613853455, 0.3396391272544861, 0.16673770546913147, 0.15578576922416687, 0.41264528036117554, 0.033391792327165604, 0.2029736340045929, 0.25619176030158997, 0.1306736171245575, 0.3446349799633026, 0.4771483838558197, 0.13364000618457794, 0.4222411811351776, 0.08514730632305145, 0.1905350685119629, 0.40120187401771545, 0.2028140276670456, 0.15223591029644012, 0.14309555292129517, 0.46182283759117126, 0.04526848718523979, 0.27312394976615906], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e24341cdd0c386828737cb259fa3c958(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b085891b19d3d45d1a9cc3176c13e875(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e24341cdd0c386828737cb259fa3c958
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01b4014332480fce896b425ed4f38617(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1836998164653778, 0.163843035697937, 0.21608185768127441, 0.06654207408428192, 0.35533779859542847, 0.35320380330085754], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f8164270518cb19c00dcba50d67f21d6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3105378746986389, 0.30525848269462585, 0.33458349108695984, 0.46361440420150757, 0.28924721479415894, 0.030774420127272606, 0.30545979738235474, 0.37625652551651, 0.12671637535095215, 0.06624224036931992, 0.4482450485229492, 0.222898930311203, 0.055973127484321594, 0.22283394634723663, 0.02660764381289482, 0.25307926535606384, 0.23278242349624634, 0.466416597366333, 0.09077312052249908, 0.49889126420021057, 0.2277003973722458, 0.29875779151916504, 0.1209169402718544, 0.36430561542510986], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ce9489c03ca712dfde130eb36c06104e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02286343276500702, 0.12068427354097366, 0.0091498838737607, 0.4211653172969818, 0.07376044988632202, 0.07300873845815659, 0.12104492634534836, 0.3903884291648865, 0.03184221684932709, 0.15864446759223938, 0.09657203406095505, 0.13229136168956757, 0.3447488248348236, 0.2080352008342743, 0.0357462540268898, 0.29819244146347046], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_82f67dbd96e2522f4236c32d19cdc947(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4375, 0.397705078125, 0.411865234375, 0.298583984375, 0.09088134765625, 0.42529296875, 0.308837890625, 0.037689208984375, 0.08203125, 0.08526611328125, 0.451416015625, 0.345947265625, 0.462158203125, 0.1766357421875, 0.034393310546875, 0.423095703125, 0.049407958984375, 0.2496337890625, 0.49853515625, 0.0322265625, 0.2252197265625, 0.0011663436889648438, 0.269775390625, 0.1279296875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65fddee39c204d5a993cf7713b77765d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07281494140625, 0.01363372802734375, 0.2235107421875, 0.468017578125, 0.227783203125, 0.467041015625, 0.021087646484375, 0.22900390625, 0.32861328125, 0.371337890625, 0.00208282470703125, 0.12408447265625, 0.15966796875, 0.11865234375, 0.358154296875, 0.451904296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b34805f8bbcc0e67275ff5ab1a5eed9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27237468957901, 0.35778582096099854], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_514de12bf0b4ce47dd038b6b958edad2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.311279296875, 0.02374267578125, 0.08648681640625, 0.4755859375, 0.320556640625, 0.051910400390625, 0.44384765625, 0.344970703125, 0.007305145263671875, 0.12451171875, 0.302490234375, 0.025665283203125, 0.38720703125, 0.0010585784912109375, 0.004238128662109375, 0.12322998046875, 0.392578125, 0.055999755859375, 0.11376953125, 0.2215576171875, 0.05419921875, 0.273681640625, 0.489501953125, 0.1461181640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e41672ad4b3b3676d04e6e7acc61203(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3981516361236572, 0.3610955774784088, 0.4390685558319092, 0.45547014474868774], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc3ce461704a6db1c65965ab3562c5f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2138671875, 0.265380859375, 0.11181640625, 0.017791748046875, 0.21533203125, 0.194091796875, 0.422607421875, 0.333740234375, 0.08172607421875, 0.425048828125, 0.047271728515625, 0.4404296875, 0.1324462890625, 0.384033203125, 0.1549072265625, 0.330322265625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_33f81ba54b572fb19472bd1636113db6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4854871332645416], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04ecb9020941b54b8b86341675a90bc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1af06273128245d0ce7f5fe31dc0a1a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04ecb9020941b54b8b86341675a90bc0
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2247314453125, 0.0772705078125, 0.45947265625, 0.426513671875, 0.485107421875, 0.25244140625, 0.35888671875, 0.12841796875, 0.00749969482421875, 0.18359375, 0.24365234375], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a83dbe85f584f0be3d6a64b6140615e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1597900390625, 0.2314453125, 0.42236328125, 0.05804443359375, 0.359130859375, 0.456787109375, 0.2958984375, 0.289306640625, 0.385009765625, 0.2183837890625, 0.343994140625, 0.24462890625, 0.350341796875, 0.1834716796875, 0.02490234375, 0.10400390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de5ea45224b38e9d1054e3d9ee5cb3a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11163330078125, 0.2724609375, 0.21533203125, 0.1141357421875, 0.255126953125, 0.01751708984375, 0.2666015625, 0.16015625, 0.26904296875, 0.357421875, 0.0279693603515625, 0.05816650390625, 0.485595703125, 0.278076171875, 0.0068817138671875, 0.1483154296875, 0.2059326171875, 0.09674072265625, 0.279541015625, 0.059051513671875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b2e28bdb089b2a06f9f3c0f65620f93(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e719e527c423af3ba5c92e0b881e1ee3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1383136808872223, 0.2134973406791687, 0.007689809426665306, 0.22355741262435913, 0.24088534712791443, 0.3242819905281067, 0.2706891894340515, 0.4218330979347229, 0.10768687725067139, 0.009981006383895874, 0.3451842963695526, 0.07558248937129974, 0.1965542435646057, 0.47697722911834717, 0.47809314727783203, 0.22114765644073486, 0.4658060669898987, 0.31975188851356506, 0.45770323276519775, 0.040554530918598175, 0.006782840471714735, 0.38984325528144836, 0.1517133265733719, 0.012143034487962723, 0.11678089201450348, 0.20060601830482483, 0.43293681740760803, 0.031790368258953094, 0.48604804277420044, 0.3179565668106079], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53e7ab23444f18826f8fd999dab59d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0763e581a71952f12e0f524c50e88710(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d205c4b0f33567a650c63e6874f0d498(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a0ca5377ce1eae493dce3069e6a9146b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0cd0817ba5bdf5460ac02751f73c382f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a0ca5377ce1eae493dce3069e6a9146b
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_111d43f9efa9c16b156439ac6d03e962(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b289257a058ceff484837745ac146c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_111d43f9efa9c16b156439ac6d03e962
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a295be2984591cf007a4bd85ef764481(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5201c45d640e00e9318db1cbd316eb62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.352783203125, 0.45361328125, 0.238037109375, 0.392333984375, 0.193603515625, 0.35888671875, 0.19921875, 0.1292724609375, 0.287353515625, 0.291748046875, 0.265869140625, 0.1595458984375, 0.08056640625, 0.09716796875, 0.492919921875, 0.2220458984375, 0.2216796875, 0.3291015625, 0.2431640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbeaa8fd06d8d5cd37523d9e3d528f89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83346459f3d31a00e5264c469259215f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d49fba0ac7aec19ce8be770b383e710e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83346459f3d31a00e5264c469259215f
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6a53bfab755965dc994b327d47cb109(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21564911305904388, 0.4933849275112152, 0.18564926087856293, 0.04922419786453247, 0.30540791153907776, 0.009654508903622627, 0.04414563626050949, 0.31142014265060425, 0.30712297558784485, 0.31391316652297974, 0.10996228456497192, 0.23931480944156647, 0.11852569133043289, 0.4960204064846039, 0.26108869910240173, 0.4433358609676361], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63955eeff741241221c315576bd06cde(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.234130859375, 0.12384033203125, 0.40283203125, 0.376953125, 0.1793212890625, 0.09942626953125, 0.20263671875, 0.2320556640625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06995342cb997c469d54c8bd49714f92(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b03402038953d150f8a18fbbbe7496f4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3561233580112457, 0.2943532466888428, 0.22440490126609802, 0.20625565946102142, 0.22658465802669525, 0.23752963542938232, 0.4105497896671295, 0.21647906303405762, 0.44844135642051697, 0.08331415802240372, 0.4151829183101654, 0.40951022505760193, 0.00010771519737318158, 0.315147340297699, 0.09495915472507477, 0.13360320031642914, 0.14691327512264252, 0.49308496713638306, 0.09021469205617905, 0.3571033179759979, 0.03270016238093376, 0.011803213506937027, 0.21658027172088623, 0.44632962346076965], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ce67a133b5fbbd0253850f56475943e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2064208984375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9cb3d2bdb8c56ef5521d6bcbcd3c986c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08026123046875, 0.22900390625, 0.05987548828125, 0.451171875, 0.0853271484375, 0.179931640625, 0.39208984375, 0.44189453125, 0.2232666015625, 0.260986328125, 0.026611328125, 0.150146484375, 0.4599609375, 0.30078125, 0.158935546875, 0.23486328125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3a46d3cbcc73a9021f5bea10bd05488(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.052789539098739624, 0.2590576112270355, 0.3980639576911926, 0.18700546026229858, 0.21520720422267914, 0.3991771340370178, 0.3442930579185486, 0.3830791711807251, 0.3127639889717102, 0.32544705271720886, 0.17642679810523987, 0.24760876595973969, 0.27894023060798645, 0.2510776221752167, 0.2980796694755554, 0.23766113817691803, 0.14327587187290192, 0.037248432636260986, 0.12644615769386292, 0.43121710419654846], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8b877f2f6cb1d48e330b5b9bfeb245aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.364013671875, 0.00653076171875, 0.11248779296875, 0.0037689208984375, 0.104736328125, 0.188232421875, 0.09869384765625, 0.109375, 0.390380859375, 0.127197265625, 0.18212890625, 0.298828125, 0.159423828125, 0.4453125, 0.2763671875, 0.037628173828125, 0.253662109375, 0.2288818359375, 0.482666015625, 0.1129150390625, 0.1832275390625, 0.246826171875, 0.297607421875, 0.06085205078125, 0.427490234375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f09378402f07aa4703769c4e7c66e75e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1536865234375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06055a3471e51ca16aabfca2b2436020(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3335455656051636], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_23058785eccb6a6caa30b5b3fddf4c4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3782880a6a915fa984cb08a9bc84926b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_23058785eccb6a6caa30b5b3fddf4c4b
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb8665031b747281c0e7fb629863f706(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2235925793647766, 0.303688645362854, 0.35915884375572205, 0.38585415482521057, 0.4471566677093506, 0.27935948967933655, 0.14789894223213196, 0.22422248125076294, 0.0003513739793561399, 0.25544530153274536, 0.18737731873989105, 0.2736695408821106, 0.3923252522945404, 0.4431346356868744, 0.3997967541217804, 0.3748812675476074, 0.16857418417930603, 0.3385988473892212, 0.4500090479850769, 0.05755622312426567, 0.18012209236621857, 0.08515829592943192, 0.22080354392528534, 0.4763932526111603, 0.32246145606040955, 0.36486440896987915, 0.3418392241001129, 0.03419152647256851], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e2c7b4dffb2ba47c6fe4c04e71e221e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12339028716087341, 0.019446920603513718, 0.33636146783828735, 0.37804681062698364, 0.3007664084434509, 0.0077005489729344845, 0.32072630524635315, 0.3158107399940491, 0.4634767174720764, 0.27266010642051697, 0.3273322284221649, 0.2392278015613556, 0.15427303314208984, 0.11144084483385086, 0.39511632919311523, 0.15132401883602142, 0.23591452836990356, 0.2441965490579605, 0.28004521131515503, 0.018862998113036156, 0.1482921689748764, 0.0795593187212944, 0.47791528701782227, 0.08514200150966644, 0.4535328149795532], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fb096a8cfe2c4e417c05d0c2183173e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2869c90ecd3065282b2bacf44a26a7e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fb096a8cfe2c4e417c05d0c2183173e3
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de2595d611dd4206f0e0de58e2dc7d1f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02291596308350563, 0.27641990780830383, 0.04822036251425743, 0.3549841344356537, 0.4113180935382843, 0.24945580959320068, 0.0742613896727562, 0.3472110331058502, 0.20278260111808777, 0.09931427985429764, 0.12011076509952545, 0.3855585753917694, 0.26112207770347595, 0.459098219871521, 0.45327138900756836, 0.027673769742250443, 0.37805020809173584, 0.247306227684021, 0.03361964598298073, 0.01605992764234543, 0.49402445554733276, 0.23287349939346313, 0.18504229187965393, 0.15730975568294525, 0.2740073800086975, 0.06683294475078583, 0.053981877863407135, 0.3299989402294159], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_436d8368da5ed78a67161f82fed58e79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27070003747940063, 0.03173394128680229, 0.3761885166168213, 0.09693078696727753, 0.40899646282196045, 0.05732710659503937, 0.43634694814682007, 0.16896027326583862, 0.45100054144859314, 0.3992413282394409, 0.19125962257385254, 0.06439915299415588, 0.4144868850708008, 0.3397411108016968, 0.34757721424102783, 0.28572285175323486, 0.21073085069656372, 0.07830792665481567, 0.125510573387146, 0.1745317578315735, 0.0021711678709834814, 0.04130635783076286, 0.1022796779870987, 0.35252645611763, 0.08570723235607147], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5bb885d15b18c13d8a009e35597bc55(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06903076171875, 0.27392578125, 0.493408203125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c7f7222cb17b0080af147fbacc5b515(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.049365654587745667, 0.19443057477474213, 0.014798360876739025, 0.1181795597076416, 0.18947279453277588, 0.1724754124879837, 0.17883087694644928, 0.38178369402885437, 0.4619530737400055, 0.275246798992157, 0.24436070024967194, 0.08266683667898178, 0.18509617447853088, 0.17610003054141998, 0.2405858337879181, 0.43268367648124695], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9cb5c458b3f2a912a9e0a1334ca7aa9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.204833984375, 0.2060546875, 0.058624267578125, 0.08544921875, 0.180419921875, 0.29541015625, 0.0523681640625, 0.4111328125, 0.06640625, 0.34716796875, 0.13818359375, 0.24853515625, 0.01039886474609375, 0.211181640625, 0.228271484375, 0.18603515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89e5102a807548b9c2375cf88fe8bbcb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20975516736507416, 0.19303803145885468, 0.3620593845844269, 0.4315885007381439, 0.36087754368782043, 0.32248741388320923, 0.012132165022194386, 0.026685483753681183, 0.19119437038898468, 0.3465738594532013, 0.025056321173906326, 0.19498515129089355, 0.362766295671463, 0.4339916408061981, 0.37114399671554565, 0.10951457172632217], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_837c03e79524fd117ea43b37b09cfb31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15132801234722137, 0.16906219720840454, 0.14543208479881287, 0.4917794466018677, 0.2538255751132965, 0.2413453906774521, 0.36480388045310974, 0.2947365343570709, 0.40683305263519287, 0.46582967042922974, 0.0051023950800299644, 0.2871053218841553, 0.4586446285247803, 0.004650269169360399, 0.2540878653526306, 0.21479517221450806, 0.31037336587905884, 0.4967614412307739, 0.32211756706237793, 0.12747398018836975, 0.4954368472099304, 0.274880588054657, 0.1530090868473053, 0.12786152958869934], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdda2790ac7c375ae63e8efd200f2896(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe98b1bc7f83e18dfa6235f65089da77(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44485002756118774, 0.02295677736401558, 0.04091456159949303, 0.24348950386047363, 0.2797301411628723, 0.3816124200820923, 0.18227946758270264, 0.29252734780311584, 0.07769330590963364, 0.36635440587997437, 0.44494011998176575, 0.39758750796318054, 0.19865436851978302, 0.05391376093029976, 0.344485878944397, 0.3376796841621399, 0.2551109194755554, 0.41324010491371155, 0.49759867787361145, 0.16078314185142517, 0.008642279542982578, 0.3891935348510742, 0.10599945485591888, 0.2954951524734497, 0.26175054907798767, 0.06646257638931274, 0.18089145421981812, 0.4296361207962036, 0.25410473346710205, 0.2769271731376648], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c903bad1c5104e8a0f79667e2ecb7a2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03364485502243042, 0.3667457103729248, 0.13212579488754272, 0.22184252738952637, 0.12624090909957886, 0.4710577130317688, 0.4346298277378082, 0.04987671971321106, 0.3879614472389221, 0.4055812954902649, 0.49922168254852295, 0.47514283657073975, 0.11034201085567474, 0.2955319285392761, 0.09823618084192276, 0.3721023201942444, 0.01526346243917942, 0.08688241988420486, 0.10771416872739792, 0.002441857475787401, 0.11812272667884827, 0.4805484712123871, 0.45628324151039124, 0.24116015434265137, 0.3230252265930176, 0.11549659073352814, 0.17233331501483917, 0.044745780527591705], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d6ff195ffe8c4833553c841bc740f90e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46724948287010193, 0.3228239119052887, 0.13910481333732605, 0.46698665618896484, 0.05949760228395462, 0.47262322902679443], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53fda62ef123d2a8eef234ce21380e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8b330a8582b869b0e31f909d74bf5c11(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.00787353515625, 0.112548828125, 0.38525390625, 0.411376953125, 0.37060546875, 0.481201171875, 0.28173828125, 0.11016845703125, 0.316162109375, 0.10125732421875, 0.291259765625, 0.31591796875, 0.35693359375, 0.033294677734375, 0.32421875, 0.490966796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_457c1034fbf71b1c3753cc85023ec7f6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43a1bce2cf2395bd685119e9111fab73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_457c1034fbf71b1c3753cc85023ec7f6
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8adda8603b89470e6b52c47b6caf1018(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3310546875, 0.459228515625, 0.0019168853759765625, 0.06744384765625, 0.039520263671875, 0.42236328125, 0.448974609375, 0.0007848739624023438, 0.2320556640625, 0.11236572265625, 0.06268310546875, 0.2462158203125, 0.040679931640625, 0.0270843505859375, 0.452392578125, 0.39892578125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6388565d3a8dd7f57531e8189fad763d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d318cad6fc0ea88abd2b6aa3a2c24340(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6388565d3a8dd7f57531e8189fad763d
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da9b839c4a61e7392a69af418b7bed78(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08026330918073654, 0.40921998023986816, 0.13583475351333618, 0.08133259415626526, 0.22759094834327698, 0.22167238593101501, 0.18369750678539276, 0.044350773096084595, 0.12026704847812653, 0.1127440482378006, 0.43629273772239685, 0.19715312123298645, 0.10477705299854279, 0.23748287558555603, 0.2282858043909073, 0.2088063806295395, 0.16448970139026642, 0.43656453490257263, 0.030065713450312614, 0.10992174595594406], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3de15be46ba8dea96e6b80f0d6fee905(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3606322407722473, 0.4069778621196747, 0.25268423557281494, 0.3450815975666046, 0.2618842124938965, 0.24295729398727417, 0.30913612246513367, 0.027644094079732895, 0.43795108795166016, 0.1039961576461792, 0.46336254477500916, 0.15622112154960632, 0.3557562828063965, 0.1580706387758255, 0.24847063422203064, 0.03408050909638405, 0.03802742809057236, 0.3951541781425476, 0.34027719497680664, 0.09069836884737015], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fabe9866ee63a726b68a5012afb7e78e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.259765625, 0.07318115234375, 0.283447265625, 0.203125, 0.2071533203125, 0.005001068115234375, 0.16015625, 0.06597900390625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adde2f5281fed82c137e00d8c83a1d27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09a173d471e46dde58240c08b8f4afe7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.041103918105363846, 0.4535641074180603, 0.21733126044273376, 0.2475132942199707, 0.4808821380138397, 0.2647680938243866, 0.27811458706855774, 0.33631592988967896, 0.2861585021018982, 0.05467132106423378, 0.09114310890436172, 0.0650382936000824, 0.3248242139816284, 0.12124419957399368, 0.2367454469203949, 0.22681787610054016, 0.14389044046401978, 0.15188521146774292, 0.18539872765541077, 0.20859083533287048, 0.39123231172561646, 0.020993249490857124, 0.44685792922973633, 0.028818771243095398], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73c69a1e799ededff8aa577629e71a00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27799251675605774, 0.19256749749183655, 0.11548038572072983, 0.4734894037246704, 0.24328483641147614, 0.14044331014156342], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7168368fc2d9714a65f7f1529a86c458(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f19f13260188f5f054d6bd53b5afd622(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2529296875, 0.21435546875, 0.49853515625, 0.0279083251953125, 0.06536865234375, 0.442626953125, 0.177001953125, 0.498291015625, 0.453369140625, 0.214599609375, 0.417236328125, 0.05902099609375, 0.28515625, 0.462890625, 0.27734375, 0.378173828125, 0.45361328125, 0.300048828125, 0.332275390625, 0.49267578125, 0.3544921875, 0.2548828125, 0.292724609375, 0.4833984375, 0.38134765625, 0.3486328125, 0.333251953125], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d186b6f7258c0c720ec0b46bd85cfa09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3852052092552185, 0.4961507320404053], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af2a9436f53e5e8f66abc453c58d5d1c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.321044921875, 0.1322021484375, 0.3759765625, 0.09716796875, 0.431640625, 0.2880859375, 0.10479736328125, 0.1798095703125, 0.149658203125, 0.186767578125, 0.0198211669921875, 0.053955078125, 0.36083984375, 0.1763916015625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bfca4bd32cbc4ec1edcec3c482924c22(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a5711ffec13ae94b37bb59e0900d1b5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bfca4bd32cbc4ec1edcec3c482924c22
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dfe9aff81b22298333b53562a0df8b1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3523091971874237, 0.1127236932516098, 0.4907808303833008, 0.13777418434619904, 0.38994231820106506, 0.14153790473937988, 0.06242275610566139, 0.42054858803749084, 0.4220086932182312, 0.45978978276252747, 0.47028055787086487, 0.46909216046333313, 0.2153850495815277, 0.32732951641082764, 0.4964328110218048, 0.17712852358818054, 0.4905388653278351, 0.07705414295196533, 0.17450737953186035, 0.3284203112125397, 0.4664211869239807, 0.21081770956516266, 0.407073974609375, 0.3696712851524353, 0.30253008008003235, 0.2082945853471756, 0.17109209299087524, 0.44272321462631226], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c736ff89ac01da1a9d2ce3c3ea2b06d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22743651270866394, 0.2095925211906433, 0.30369850993156433, 0.27022528648376465, 0.1789117455482483, 0.23376502096652985, 0.12276269495487213, 0.12825791537761688, 0.2969488799571991, 0.3427037298679352, 0.08935035765171051, 0.36897924542427063, 0.007959344424307346, 0.12447959929704666, 0.4265011250972748, 0.08835320174694061, 0.474994033575058, 0.44022995233535767, 0.2661784887313843, 0.414358913898468], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ea78d00f1033f211e19138b9796d170(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23509709537029266], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9c54b154e78c78202254071019e0bb0a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15591028332710266], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32074e4944aa2c95e64c7ea3ba52f7c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.185302734375, 0.350341796875, 0.331298828125, 0.3974609375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1885d4a7adf622c5d0ef683c410a4122(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27392578125, 0.12066650390625, 0.2052001953125, 0.13525390625, 0.111328125, 0.2978515625, 0.4765625, 0.264404296875, 0.3525390625, 0.36328125, 0.442138671875, 0.0626220703125, 0.053070068359375, 0.081298828125, 0.0360107421875, 0.0706787109375, 0.045654296875, 0.369384765625, 0.07757568359375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_abccd661ba279b7c32776b00002e2590(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1861240565776825, 0.4869103729724884, 0.4760875999927521, 0.4227560758590698, 0.49862685799598694, 0.3923931419849396], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f76d6696a8b109dd3023737bfb1b876f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1607378125190735, 0.33086368441581726, 0.48351147770881653, 0.4867827296257019, 0.2078898549079895, 0.009476374834775925, 0.14497068524360657, 0.008652028627693653, 0.044510819017887115, 0.07363004237413406, 0.25495538115501404, 0.03690171614289284, 0.2969684898853302, 0.4987104535102844, 0.06758874654769897, 0.18741098046302795, 0.4421754777431488, 0.26295363903045654, 0.3124955892562866, 0.40645140409469604, 0.013307329267263412, 0.23849380016326904, 0.016621995717287064, 0.29047855734825134], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c67b4bf3be9bbc34f9b68850b4a9f31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.338623046875, 0.44580078125, 0.342529296875, 0.1339111328125, 0.312255859375, 0.49560546875, 0.292724609375, 0.408203125, 0.139892578125, 0.09930419921875, 0.410888671875, 0.1622314453125, 0.418701171875, 0.3896484375, 0.467529296875, 0.0207672119140625, 0.4033203125, 0.4462890625, 0.3837890625, 0.4931640625, 0.036468505859375, 0.2626953125, 0.10150146484375, 0.080322265625, 0.17138671875, 0.2484130859375, 0.1385498046875], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b665040e673298349f643cdce48757e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18226869404315948, 0.17136947810649872, 0.4374394714832306, 0.11121217906475067, 0.09940555691719055, 0.10673429071903229, 0.2518516182899475, 0.46257850527763367, 0.0319703072309494, 0.020469747483730316, 0.09344765543937683, 0.29241254925727844, 0.44174790382385254, 0.06748349219560623, 0.25710979104042053, 0.13576683402061462], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_288b2a526887780464010bf217a847d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48996928334236145, 0.07622731477022171, 0.15213455259799957, 0.26849162578582764, 0.23636884987354279, 0.024829354137182236, 0.20280596613883972, 0.3376026153564453, 0.2697717249393463, 0.3845614790916443, 0.46624404191970825, 0.3987833857536316, 0.0858837142586708, 0.03577658534049988], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_630dedfc33a6ae7ada30317ccd02b4d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4443359375, 0.219482421875, 0.09893798828125, 0.0200653076171875, 0.23974609375, 0.1927490234375, 0.214599609375, 0.48193359375, 0.4296875, 0.4462890625, 0.311767578125, 0.470947265625, 0.49365234375, 0.337158203125, 0.33251953125, 0.035888671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7de57bdb2aefc663ec52f96f6327e7c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2491455078125, 0.201904296875, 0.2454833984375, 0.442626953125, 0.494384765625, 0.0191802978515625, 0.209716796875, 0.3681640625, 0.3203125, 0.3564453125, 0.09930419921875, 0.002422332763671875, 0.4453125, 0.133056640625, 0.283203125, 0.2125244140625, 0.4443359375, 0.040313720703125, 0.1981201171875, 0.14306640625, 0.459716796875, 0.3720703125, 0.3330078125, 0.46044921875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fe816d42aa70be02530ac2cf05a329a2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d94b9b3de4f547796f170f7ac4bd426(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fe816d42aa70be02530ac2cf05a329a2
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffa4911001fa736283c4dda59b3d5ba5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0911865234375, 0.48046875, 0.282958984375, 0.317626953125, 0.24169921875, 0.125244140625, 0.06866455078125, 0.1951904296875, 0.260986328125, 0.498046875, 0.47314453125, 0.35888671875, 0.407470703125, 0.306396484375, 0.3349609375, 0.1884765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48f8e590aa6b8de883acaa071bcac862(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34978675842285156, 0.2920951545238495, 0.4704170525074005, 0.2657043933868408, 0.08190944790840149, 0.31052085757255554, 0.03262228146195412, 0.3518802523612976, 0.26324060559272766, 0.43060341477394104, 0.35299184918403625, 0.11967384070158005, 0.3251707851886749, 0.009811045601963997, 0.35488423705101013, 0.18538138270378113, 0.2303522229194641, 0.44733041524887085], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77d7ac6c6524fbc893827442a690981b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1650390625, 0.1485595703125, 0.398681640625, 0.2200927734375, 0.373291015625, 0.443603515625, 0.332763671875, 0.16162109375, 0.219482421875, 0.342529296875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a8ab63fbcd519926fb43e4c62d9f4fa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01029205322265625, 0.1669921875, 0.2509765625, 0.322021484375, 0.449951171875, 0.310791015625, 0.329833984375, 0.17529296875, 0.2354736328125, 0.411376953125, 0.259033203125, 0.1693115234375, 0.04449462890625, 0.2393798828125], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ea64a288ad442bf109cb5c7f09d88cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0057830810546875, 0.0364990234375, 0.017120361328125, 0.357421875, 0.43359375, 0.391357421875, 0.245849609375, 0.11468505859375, 0.337890625, 0.0223388671875, 0.3955078125, 0.11602783203125, 0.35546875, 0.2130126953125, 0.443603515625, 0.03179931640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a41f7b425d76aa21c6862f902ea64547(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6b15a1d5207c01c359681064d719ac7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30126953125, 0.457275390625, 0.18994140625, 0.28662109375, 0.389892578125, 0.466064453125, 0.431884765625, 0.411376953125, 0.28173828125, 0.07562255859375, 0.228515625, 0.3759765625, 0.0831298828125, 0.27294921875, 0.267578125, 0.2093505859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e276ec6b67226e55f70976b34a1d3294(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_64863aedfa7f8f1866b6bc1faffe18c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.184326171875, 0.2890625, 0.295654296875, 0.353271484375, 0.0301666259765625, 0.2237548828125, 0.1644287109375, 0.3330078125, 0.0465087890625, 0.11602783203125, 0.486572265625, 0.197509765625, 0.277099609375, 0.404296875, 0.04034423828125, 0.0948486328125, 0.2283935546875, 0.39306640625, 0.229248046875, 0.2110595703125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ba32a88792bcda1e7debf247a6100264(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a05f4b780fe10500dc7806c4bb07356(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ba32a88792bcda1e7debf247a6100264
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c1864750fa46d01f03d4da1d1634ebd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0665283203125, 0.441650390625, 0.170654296875, 0.389404296875, 0.1842041015625, 0.1259765625, 0.33203125, 0.271484375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_126ec6cd0f4ea5f84b324a6c08799144(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.44384765625, 0.4853515625, 0.466064453125, 0.34521484375, 0.1883544921875, 0.2156982421875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1d029d6a1657def2ceb31a2e7ed2758(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1220707893371582, 0.21642285585403442, 0.0482056625187397, 0.3596499562263489, 0.1018778383731842, 0.14494402706623077, 0.35609930753707886, 0.30328476428985596, 0.3717028498649597, 0.23974740505218506, 0.025757690891623497, 0.06963090598583221, 0.017071736976504326, 0.4191068410873413, 0.2394927591085434, 0.17213952541351318], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34a5cfb0d926aae1f70c05819930c82b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16051198542118073, 0.447366863489151, 0.43090277910232544, 0.03631577640771866, 0.3200337886810303, 0.15795603394508362, 0.4568880498409271, 0.47700613737106323, 0.17582660913467407, 0.3687911033630371, 0.0758398175239563, 0.36841511726379395, 0.010338466614484787, 0.23786665499210358, 0.20688273012638092, 0.2518761456012726], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_29081beb159b78083d7457633fde0ec3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47141897678375244], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8bacc23caf5455f7c7f6bd957cfd17ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_876d18ef68f373b7558d6a49fafa2b0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8bacc23caf5455f7c7f6bd957cfd17ae
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a23f2bef8fad1b5b35138be32eb0206(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_79b5368d1b16354e8caa1f3844190dab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37951451539993286, 0.25179219245910645, 0.31783851981163025, 0.18866609036922455, 0.04207494482398033, 0.4304063320159912, 0.2690686583518982, 0.12159594893455505], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_70b53e452f5ba6dc0cec011caa041489(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.019195556640625, 0.491455078125, 0.3310546875, 0.077880859375, 0.060882568359375, 0.01358795166015625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_04058e8fb9407b19dceb81d3bacc5d20(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.237548828125, 0.15185546875, 0.443115234375, 0.36865234375, 0.002422332763671875, 0.0013189315795898438], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_140157323802807a893bfdff45660fab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75a543643012e8f8e5ad1d8cb18a233a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_140157323802807a893bfdff45660fab
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4359f5ee7ad90b106f5d9c036414f81b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39934444427490234, 0.07635892927646637, 0.134294331073761, 0.19782835245132446, 0.03528013825416565, 0.04937160387635231, 0.263991117477417, 0.43081825971603394], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2cb15892659469fe3501cb0e7f2d86e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15691722929477692, 0.3041386008262634, 0.3941383361816406, 0.3601309657096863, 0.06283599138259888, 0.32823294401168823, 0.2983897924423218, 0.025133274495601654, 0.22655150294303894, 0.24222174286842346, 0.34871628880500793, 0.4784260392189026, 0.23547732830047607, 0.03722626343369484, 0.3770420551300049, 0.03423895314335823], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d8472377b5fcf661466c17368d5d3a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1451416015625, 0.3076171875, 0.029571533203125, 0.42333984375, 0.412109375, 0.319580078125, 0.0765380859375, 0.263427734375, 0.01275634765625, 0.06610107421875, 0.1595458984375, 0.09356689453125], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_35af1cac4b0f73665144f4f598fee6f0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25eab9acf9333b418a00a008d6bf8785(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35af1cac4b0f73665144f4f598fee6f0
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_098a3ee94b6d533e7330524d22c827d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39c230be945281668f6f15091a83830d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_098a3ee94b6d533e7330524d22c827d6
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0296f854bdc7fe23a13230a9d667cde9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_20cf577b1e96f3ddcb3dcaa7353fbc22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f830760d8a26e7920b62f3d6a1d85d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25194329023361206, 0.06469134986400604, 0.39174842834472656, 0.43415865302085876, 0.08552548289299011, 0.1505885124206543, 0.040716055780649185, 0.2764936685562134, 0.17049585282802582, 0.2916141450405121, 0.3539312481880188, 0.12883150577545166, 0.04574967548251152, 0.031007368117570877, 0.14149080216884613, 0.11085118353366852], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3d1d290f04e09be8acd467187ac59e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20202790200710297, 0.39147233963012695, 0.2172149270772934, 0.3104438781738281, 0.07637490332126617, 0.4444282650947571, 0.2987295091152191, 0.4190034866333008, 0.45375654101371765, 0.0862499549984932, 0.23903360962867737, 0.35195228457450867, 0.3327377140522003, 0.015063079074025154, 0.4506034851074219, 0.4097512364387512, 0.43211740255355835, 0.4619729518890381, 0.022824129089713097, 0.49165546894073486, 0.27593085169792175, 0.14189450442790985, 0.07481838762760162, 0.12157326191663742], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fbb348afe1de3a3174ff0ed9387889cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0945344939827919, 0.24895434081554413, 0.12713423371315002, 0.0909135490655899, 0.2311248481273651, 0.46323341131210327, 0.4104292392730713, 0.4477536976337433, 0.24634402990341187, 0.3701556324958801, 0.23399516940116882, 0.4005744755268097, 0.17767533659934998, 0.4342561364173889, 0.33292025327682495, 0.3827006220817566, 0.1261039674282074, 0.3618161082267761, 0.3270598351955414, 0.14204078912734985, 0.42956724762916565, 0.1433955729007721, 0.21646583080291748, 0.0008785785757936537, 0.36729830503463745], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d128db6f40c7e0a634d170a02a8c9753(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3785487711429596, 0.2049773931503296, 0.18464137613773346, 0.28488245606422424, 0.09937495738267899, 0.06262414157390594, 0.4252054691314697, 0.009348977357149124, 0.18407832086086273, 0.3183162212371826], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c94431f9d0010d3e702f3d11ed680a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45542722940444946, 0.45078831911087036, 0.3839910626411438, 0.13759268820285797, 0.3028040826320648, 0.3482210338115692, 0.4321228861808777, 0.3627060651779175, 0.0017289540264755487, 0.17165012657642365, 0.4148758351802826, 0.25126224756240845, 0.2714868485927582, 0.2837449312210083, 0.3793672025203705, 0.09696994721889496, 0.25425809621810913, 0.08384227752685547, 0.36251315474510193, 0.1983405202627182, 0.14454765617847443, 0.24948330223560333, 0.21039648354053497, 0.16104815900325775], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1905921a23455e7871a8c3abaf6725f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14961816370487213, 0.4679696261882782, 0.38170820474624634, 0.3246340751647949, 0.26617342233657837, 0.0870680958032608, 0.06824124604463577, 0.46924230456352234, 0.43040522933006287, 0.47529202699661255, 0.2794003188610077, 0.2149907797574997, 0.3161829710006714, 0.46138033270835876, 0.2549659013748169, 0.07381010800600052], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_23fadd8b12e5b4f3f7231bd537dbb1e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36952510476112366, 0.38168516755104065, 0.26736944913864136, 0.21078473329544067, 0.26681649684906006, 0.34484750032424927, 0.20838579535484314, 0.18829235434532166, 0.01602284610271454, 0.11152810603380203, 0.2468690276145935, 0.07728417962789536, 0.37213823199272156, 0.4975910484790802, 0.21164719760417938, 0.1925675868988037], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef2641a88209691719eb4295a069169c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4085468351840973, 0.17062672972679138, 0.45825719833374023, 0.29606807231903076, 0.28760841488838196, 0.18871311843395233], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0cc5eaa077dd1e97a00d8c75d1799c62(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array([1], paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4add4e6e26c356c8446dcff9bd1bcd77(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0cc5eaa077dd1e97a00d8c75d1799c62
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1], dtype='int32').reshape([1]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc0703bf6986d4e1c5c4cdb9447a07dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12022629380226135, 0.3175075054168701, 0.34866708517074585, 0.1521771252155304, 0.20116068422794342, 0.44688984751701355, 0.3414849042892456, 0.11919514089822769, 0.34674662351608276, 0.1800612211227417], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5fc57627e042ca460d92274720bc6a98(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9cdd8f4cd7510a802beada8a43209ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5fc57627e042ca460d92274720bc6a98
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a154a3b7444ec9f4aa9f149161f357a5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1676793098449707, 0.17979022860527039, 0.2934715747833252, 0.2781734764575958, 0.2082175314426422, 0.14475667476654053, 0.4206410348415375, 0.011708622798323631, 0.37385717034339905, 0.3521234393119812, 0.2878304123878479, 0.021541748195886612], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5ef218bfd6ec8c2def32c4f2a7c3d69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10912984609603882], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7302d38c5076d247073d456f1d6c628b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10650634765625, 0.49755859375, 0.10595703125, 0.2119140625, 0.1536865234375, 0.462890625, 0.436767578125, 0.2222900390625, 0.34130859375, 0.01165771484375, 0.378173828125, 0.3271484375, 0.0153656005859375, 0.402587890625, 0.1380615234375, 0.37060546875, 0.347412109375, 0.273193359375, 0.39501953125, 0.00494384765625, 0.286376953125, 0.3662109375, 0.07867431640625, 0.2802734375, 0.306640625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d9b7a110e25e8ec799987fe3d2b3540(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15514226257801056, 0.10263408720493317, 0.3570539355278015, 0.12129030376672745, 0.23557323217391968, 0.30144912004470825, 0.45777085423469543, 0.07622559368610382, 0.1706066131591797, 0.30453985929489136, 0.018266770988702774, 0.12415596097707748, 0.36293894052505493, 0.1443260908126831, 0.1880456507205963, 0.2533985674381256, 0.4619823098182678, 0.467367559671402, 0.29177606105804443, 0.44986194372177124], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_59233f0b453f269ed765a9ed50178ce3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f20da9eba8a4343cd0943fc9d4bc473b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_59233f0b453f269ed765a9ed50178ce3
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5c3dc12b88bc37dbb5338061ccefbb4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.009206675924360752, 0.1346907764673233, 0.29421254992485046, 0.18989990651607513, 0.27263328433036804, 0.47745853662490845, 0.320484459400177, 0.10738761723041534, 0.030798502266407013, 0.37660759687423706, 0.3771599233150482, 0.005188200622797012, 0.32512378692626953, 0.39740756154060364, 0.14224708080291748, 0.15263108909130096, 0.30226925015449524, 0.4184322655200958, 0.35889777541160583], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66ef5f1abc99f2aa1fc662db5935792c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4027130603790283, 0.0941222757101059, 0.45729270577430725], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42b417ed94906e8db99cc4003aa5433d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4033203125, 0.4951171875, 0.367431640625, 0.275634765625, 0.49609375, 0.0085906982421875, 0.00885772705078125, 0.050811767578125, 0.34326171875, 0.1748046875, 0.43994140625, 0.350830078125, 0.486572265625, 0.2264404296875, 0.0447998046875, 0.1693115234375, 0.061553955078125, 0.0193023681640625, 0.373046875, 0.00887298583984375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a6eeb081cd5c582e1d58ca7d275a607(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59baeee0f339d0ce31d8a345f625070e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4786035716533661, 0.3606211841106415, 0.4949686527252197, 0.0027120159938931465, 0.4822743833065033, 0.13422468304634094, 0.08487550914287567, 0.0845642238855362, 0.453779399394989, 0.09216813743114471, 0.3184097409248352, 0.46610793471336365, 0.48222866654396057, 0.06859660893678665, 0.4242226481437683, 0.06918448954820633], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30e3d992d4abf82385f289f325b535a7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3228051960468292, 0.429750919342041, 0.4397377371788025, 0.05887148156762123, 0.3185742199420929, 0.4059774875640869, 0.2080698311328888, 0.4713241755962372, 0.2971794605255127, 0.03071005828678608, 0.4740563929080963, 0.14614959061145782, 0.06781584024429321, 0.22173984348773956, 0.2048305720090866, 0.34762606024742126, 0.23352620005607605, 0.3321458697319031, 0.002032908145338297, 0.34542885422706604, 0.18449491262435913, 0.31470417976379395, 0.2758457064628601, 0.14990775287151337], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_744c9425924daae5fdc4d0d32d816268(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.382568359375, 0.43505859375, 0.0885009765625, 0.359130859375, 0.05615234375, 0.1907958984375, 0.2259521484375, 0.2119140625, 0.427490234375, 0.144287109375, 0.29833984375, 0.2003173828125, 0.043609619140625, 0.1668701171875, 0.216796875, 0.496337890625, 0.371337890625, 0.241943359375, 0.046905517578125, 0.11029052734375, 0.12420654296875, 0.0223846435546875, 0.0963134765625, 0.46923828125, 0.07208251953125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3eb53c4ccaaaf21ac1bb99573eeee465(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4729626178741455, 0.13636265695095062, 0.1093612089753151, 0.20567800104618073, 0.4284645617008209, 0.47321566939353943, 0.38227298855781555, 0.017177067697048187, 0.2832200527191162, 0.20666798949241638, 0.1629960536956787, 0.004013626836240292, 0.3610539138317108, 0.2942642867565155, 0.3647346496582031, 0.05675878748297691, 0.03246772661805153, 0.498212605714798, 0.38672730326652527, 0.13689285516738892], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86f7e038791b0ed7b41d981a43b36327(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49609375, 0.40234375, 0.335205078125, 0.386962890625, 0.190185546875, 0.406494140625, 0.351806640625, 0.488525390625, 0.1014404296875, 0.156982421875, 0.41748046875, 0.034820556640625, 0.00984954833984375, 0.17236328125, 0.18505859375, 0.273681640625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_290782e9d4cf7b4adcabd531e6719aa1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4401087462902069, 0.18968552350997925, 0.2983936369419098], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e301a82511b7b81e8be720714f4a79d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0487060546875, 0.06707763671875, 0.221435546875, 0.1561279296875, 0.2391357421875, 0.277587890625, 0.22412109375, 0.1400146484375, 0.48779296875, 0.14697265625, 0.0814208984375, 0.494384765625, 0.13232421875, 0.460205078125, 0.0167083740234375, 0.3125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d88cc1617e5bc61311c0f6f51dff01da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46435546875, 0.451904296875, 0.317626953125, 0.0281524658203125, 0.1658935546875, 0.203369140625, 0.005367279052734375, 0.31201171875, 0.333984375, 0.2059326171875, 0.2115478515625, 0.32666015625, 0.316650390625, 0.045623779296875, 0.0231475830078125, 0.08551025390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fba6d5beb48a497b4250dfb2c1f647bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6a8fc56952fd82bd1b336d263826782d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42431640625, 0.31689453125, 0.1468505859375, 0.444580078125], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb0ff667afde4d8bac9a07e6257685bb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10571150481700897, 0.3033667802810669, 0.29629018902778625, 0.10821658372879028, 0.42044299840927124, 0.017069676890969276, 0.0799904391169548, 0.408290296792984, 0.3042501211166382, 0.32212141156196594, 0.18388167023658752, 0.46834683418273926, 0.39656776189804077, 0.2987360954284668, 0.41920098662376404, 0.09295175224542618, 0.08322545140981674, 0.15256479382514954, 0.28603261709213257, 0.02421584539115429, 0.1650223284959793, 0.04628479480743408, 0.02079380676150322, 0.3675108551979065, 0.3939831554889679, 0.05279161036014557, 0.1820446252822876, 0.12170904874801636], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_37aafcb7a5a331a556e232701aec9c08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48481687903404236, 0.03226860240101814, 0.409737229347229, 0.10667867213487625, 0.25821226835250854, 0.20652256906032562, 0.34879693388938904, 0.40778183937072754, 0.2233554571866989, 0.039552077651023865, 0.458051860332489, 0.3616539537906647, 0.19270800054073334, 0.18316145241260529, 0.12145622074604034, 0.3151646554470062], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1654a9577ead98d9c9c4df9c2ba81baf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.443359375, 0.185791015625, 0.41455078125, 0.3955078125, 0.360595703125, 0.4091796875, 0.2113037109375, 0.453369140625, 0.1993408203125, 0.2305908203125, 0.30078125, 0.1390380859375, 0.1416015625, 0.253173828125, 0.0299835205078125, 0.4736328125, 0.412353515625, 0.0092010498046875, 0.427490234375, 0.353271484375, 0.11260986328125, 0.4716796875, 0.46142578125, 0.331787109375, 0.0654296875, 0.005458831787109375, 0.1749267578125, 0.235107421875, 0.415283203125, 0.150634765625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2229fa95df2c4e77a97cf2aaaea26b3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.326904296875, 0.0712890625, 0.1953125, 0.3740234375, 0.286865234375, 0.136474609375, 0.06951904296875, 0.312744140625, 0.037933349609375, 0.3291015625, 0.322998046875, 0.125, 0.456787109375, 0.224853515625, 0.01056671142578125, 0.05853271484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d75bf818a9dfab88df03e991db40eea4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2218017578125, 0.404296875, 0.393798828125, 0.361572265625, 0.036956787109375, 0.09112548828125, 0.09161376953125, 0.416748046875, 0.363037109375, 0.287841796875, 0.3388671875, 0.42919921875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d82917158aaeed3c05d668d8289a34d5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.2275390625, 0.1478271484375, 0.289306640625, 0.467529296875, 0.057891845703125, 0.0711669921875, 0.384033203125, 0.1871337890625, 0.1453857421875, 0.427978515625, 0.255126953125, 0.005550384521484375, 0.40869140625, 0.005435943603515625, 0.04583740234375, 0.392578125, 0.028106689453125, 0.461181640625, 0.2469482421875, 0.359130859375, 0.20068359375, 0.465576171875, 0.472412109375, 0.341064453125, 0.1566162109375, 0.320556640625, 0.384033203125, 0.3603515625, 0.10845947265625], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4363cdb942f21e5a4e2a92f24e1a3cdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23129329085350037, 0.35567665100097656, 0.4353750944137573, 0.2626722455024719, 0.4813111424446106, 0.07985391467809677, 0.051443494856357574, 0.452391117811203, 0.47054991126060486, 0.22347362339496613, 0.4697490334510803, 0.2317468374967575, 0.410549134016037, 0.39019984006881714, 0.4396342933177948, 0.030026312917470932, 0.33657386898994446, 0.019993893802165985, 0.34128254652023315, 0.06784695386886597, 0.06322044879198074, 0.014316456392407417, 0.005126329138875008, 0.41074058413505554], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6225ef866b48cd44bfa043c3c1745598(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a73fc7a0f74dc0639e77b1f691da0460(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.491455078125, 0.2431640625, 0.04229736328125, 0.48974609375, 0.03253173828125, 0.479248046875, 0.3388671875, 0.1591796875, 0.26806640625, 0.02069091796875, 0.07989501953125, 0.48779296875, 0.0269012451171875, 0.1307373046875, 0.041046142578125, 0.129150390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_226a075d00ceb9ef2b3f120f9d147442(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.20073145627975464, 0.19323916733264923, 0.08362933993339539, 0.13092714548110962, 0.27938252687454224, 0.1831156462430954, 0.22815445065498352, 0.4483563303947449, 0.13776199519634247, 0.054065361618995667, 0.05347280576825142, 0.05135173350572586, 0.3012189269065857, 0.17462705075740814, 0.4347302317619324, 0.4228975474834442, 0.20515047013759613, 0.4091939330101013, 0.469049870967865, 0.28336626291275024, 0.043662507086992264, 0.06544709205627441, 0.4159556031227112, 0.0066133951768279076], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_401eed822e3968c75ff4dfebd8abb5f1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d44669210b5d05f7f2f9039b0b3f75ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_401eed822e3968c75ff4dfebd8abb5f1
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7dc98cdc14c12d2e1c7b93c974ff9c80(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3983674645423889, 0.06937843561172485, 0.08100123703479767, 0.3635607659816742, 0.03695313259959221, 0.10611724108457565, 0.31153035163879395, 0.4789060950279236, 0.3160090148448944, 0.20541639626026154, 0.2760399580001831, 0.43472111225128174, 0.33438050746917725, 0.32099276781082153, 0.3778213858604431, 0.46171244978904724, 0.03985130414366722, 0.3828893303871155, 0.39521318674087524, 0.03116767108440399, 0.22197653353214264, 0.2493797391653061, 0.07991384714841843, 0.4995659291744232, 0.029986726120114326], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f3441b84666245f38033554359bde822(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bb135cf48c1f1568d6909255367f818(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f3441b84666245f38033554359bde822
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3f380390162d404d1c4b19a90eb3870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_243ff9aacd01bdfd0c83817c08bbe4d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468505859375, 0.263916015625, 0.264892578125, 0.327880859375, 0.076171875, 0.1893310546875, 0.421630859375, 0.108154296875, 0.23193359375, 0.308837890625, 0.29736328125, 0.1778564453125, 0.1708984375, 0.1480712890625, 0.359130859375, 0.364501953125, 0.408447265625, 0.17724609375, 0.43359375, 0.419677734375, 0.2015380859375, 0.31396484375, 0.273193359375, 0.2178955078125, 0.22119140625, 0.425048828125, 0.153564453125, 0.43994140625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e971fed1e9685aa87cbe9f48ebe0630c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2822265625, 0.219970703125, 0.11199951171875, 0.03021240234375, 0.258056640625, 0.341796875, 0.0789794921875, 0.2471923828125, 0.181884765625, 0.1890869140625, 0.27197265625, 0.235107421875, 0.446044921875, 0.30126953125, 0.294189453125, 0.291015625, 0.15869140625, 0.115966796875, 0.322998046875, 0.007312774658203125, 0.032806396484375, 0.34375, 0.09686279296875, 0.148193359375, 0.42724609375, 0.43701171875, 0.262451171875, 0.264404296875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_16afdbd357f41e9893d08d7a23ddc52d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4033203125, 0.10174560546875, 0.08599853515625, 0.4541015625, 0.05096435546875, 0.10528564453125, 0.05877685546875, 0.0892333984375, 0.427734375, 0.26953125, 0.200439453125, 0.356201171875, 0.482421875, 0.0679931640625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad90cfe6171360644c7a6bc6d1424347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2413330078125, 0.2110595703125, 0.2169189453125, 0.28369140625, 0.45849609375, 0.11956787109375, 0.004974365234375, 0.33837890625, 0.29638671875, 0.455810546875, 0.43701171875, 0.255615234375, 0.24072265625, 0.07379150390625, 0.1644287109375, 0.133544921875, 0.36083984375, 0.12841796875, 0.46826171875, 0.039031982421875, 0.05120849609375, 0.2578125, 0.252685546875, 0.43408203125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bf07801a793b77edadba595542a9761(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2a90514f4adb7b44b91749f4e041f47(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bf07801a793b77edadba595542a9761
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01d6f22d794f4695de99a51464761ec1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_8ff280ddb62c53196715d5d0eea5e0aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_98fe80f164803e504d36b49d6f728999(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_024e0d162516e413a3b18d806e6b5c57(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_ece0433b9d0463882aef95d09fc590c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_358228dfcad02c78d06faa8f561bccc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_01807d8175f7ba75ae4ff375f6b085c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_64da93602daa6cf543369e73e795beae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_108a9c741ab184c41ad6619ca78c2020(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_87451d4417be6571e9462c24b340c576(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4e7d488259349ce2de4748cbb5aca91b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_02134e8293b2caa197d34ecd0c82b64f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_03f501535c8e6a2fdd956cd0332efb52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_1de039c1dcaf14b4b27c085ecc75a49b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a20912bb4145a7f4e6b0f1d37013fe10(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_20d78d7a552b39362498c0e5aba7f2e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_d0a4c7ff355bcc25bacb885fd898a425(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 8, 3, 224, 224], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_5151870a8a25b2b6b00e2d50620190a6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_7a2c37763cd54738516fce73184f2a2b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_989c252fd4794966f21dbb118705a92a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_054bec9c87d83a07587fa079a7032b0b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4ff470d8f8e2350fe419dacf3e6760b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_25d5833cc87e7cd60e62371003a5acb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bc64d890c7f2b9184b1110ca90dd51c4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_06ba996a6b88813331f493a40b5ea446(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_c2663d99f6f518ce36630a9f9f35802e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_76507a1b521dcfd5642848299dc9dd1b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_0a78a9c91d25d66008423e7d82e44a14(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_0469ed37c14d545e4e8b93cf7d234bae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None




if __name__ == '__main__':
    unittest.main()