import os
os.environ['FLAGS_cinn_new_group_scheduler'] = '1'
os.environ['FLAGS_group_schedule_tiling_first'] = '1'
os.environ['FLAGS_enable_pir_api'] = '1'
os.environ['FLAGS_cinn_bucket_compile'] = '1'
import sys
import unittest
import numpy as np
from dataclasses import dataclass
import typing as t
import itertools

@dataclass
class Stage:
    name: str
    env_vars: t.Dict[str, str]

cinn_stages = [
    Stage(
        name="dynamic_to_static",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=False,
            FLAGS_prim_enable_dynamic=False,
        ),
    ),
    Stage(
        name="prim",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
        ),
    ),
    Stage(
        name="infer_symbolic",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=False,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=False,
            FLAGS_check_infer_symbolic=True,
        ),
    ),
	Stage(
        name="frontend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=True,
        ), 
    ),
    Stage(
        name="backend",
        env_vars=dict(
            PADDLE_DEBUG_ENABLE_CINN=True,
            FLAGS_prim_all=True,
            FLAGS_prim_enable_dynamic=True,
            FLAGS_use_cinn=True,
            FLAGS_check_infer_symbolic=False,
            FLAGS_enable_fusion_fallback=False,
        ), 
    ),
]

def GetCinnStageByName(name):
    for stage in cinn_stages:
        if stage.name == name:
            return stage
    return None

def GetCurrentCinnStage():
    name = os.getenv('PADDLE_DEBUG_CINN_STAGE_NAME')
    if name is None:
        return None
    stage_names = [stage.name for stage in cinn_stages]
    assert name in stage_names, (
        f"PADDLE_DEBUG_CINN_STAGE_NAME should be in {stage_names}"
    )
    return GetCinnStageByName(name)

def GetPrevCinnStage(stage):
    for i in range(1, len(cinn_stages)):
        if stage is cinn_stages[i]:
            return cinn_stages[i - 1]
    return None

def IsCinnStageEnableDiff():
    value = os.getenv('PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF')
    enabled = value in {
        '1',
        'true',
        'True',
    }
    if enabled:
        assert GetCurrentCinnStage() is not None
    return enabled

def GetExitCodeAndStdErr(cmd, env):
    env = {
        k:v
        for k, v in env.items()
        if v is not None
    }
    import subprocess
    result = subprocess.run(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        env=env,
    )
    return result.returncode, result.stderr

def GetStageExitCodeAndStdErr(stage):
    return GetExitCodeAndStdErr(
        [sys.executable, __file__],
        env=dict(
            PADDLE_DEBUG_CINN_STAGE_NAME=stage.name,
            PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF='0',
            PYTHONPATH=os.getenv('PYTHONPATH'),
            ATHENA_ENABLE_TRY_RUN="False",
        ),
    )

def AthenaTryRunEnabled():
    return os.getenv('ATHENA_ENABLE_TRY_RUN') not in {
        "0",
        "False",
        "false",
        "OFF"
    }

def GetNeedSkipAndSkipMessage():
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    if not IsCinnStageEnableDiff():
        return False, ""
    last_stage = GetPrevCinnStage(current_stage)
    if last_stage is None:
        return False, ""
    exitcode, stderr = GetStageExitCodeAndStdErr(last_stage)
    if exitcode != 0:
        return True, "last stage failed."
    return False, ""

def GetCurrentStageTryRunExitCodeAndStdErr():
    if not AthenaTryRunEnabled():
        return False, ""
    current_stage = GetCurrentCinnStage()
    assert current_stage is not None
    return GetStageExitCodeAndStdErr(current_stage)

def SetDefaultEnv(**env_var2value):
    for env_var, value in env_var2value.items():
        if os.getenv(env_var) is None:
            os.environ[env_var] = str(value)

SetDefaultEnv(
    PADDLE_DEBUG_CINN_STAGE_NAME="backend",
    PADDLE_DEBUG_CINN_STAGE_ENABLE_DIFF=False,
    PADDLE_DEBUG_ENABLE_CINN=True,
    FLAGS_enable_pir_api=True,
    FLAGS_prim_all=True,
    FLAGS_prim_enable_dynamic=True,
    FLAGS_use_cinn=False,
    FLAGS_check_infer_symbolic=False,
    FLAGS_enable_fusion_fallback=False,
)

import paddle

def SetEnvVar(env_var2value):
    for env_var, value in env_var2value.items():
        os.environ[env_var] = str(value)
    paddle.set_flags({
        env_var:value
        for env_var, value in env_var2value.items()
        if env_var.startswith('FLAGS_')
    })

if GetCurrentCinnStage() is not None:
    SetEnvVar(GetCurrentCinnStage().env_vars)

def GetEnvVarEnableJit():
    enable_jit = os.getenv('PADDLE_DEBUG_ENABLE_JIT')
    return enable_jit not in {
        "0",
        "False",
        "false",
        "OFF",
    }

def GetEnvVarEnableCinn():
    enable_cinn = os.getenv('PADDLE_DEBUG_ENABLE_CINN')
    if enable_cinn is None:
        return True
    return enable_cinn not in {
        "0",
        "False",
        "false",
        "OFF",
    }


def GetTolerance(dtype):
    if dtype == np.float16:
        return GetFloat16Tolerance()
    if dtype == np.float32:
        return GetFloat32Tolerance()
    return 1e-6

def GetFloat16Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT16_TOL'))
    except:
        return 1e-3

def GetFloat32Tolerance():
    try:
        return float(os.getenv('PADDLE_DEBUG_FLOAT32_TOL'))
    except:
        return 1e-6

def IsInteger(dtype):
    return np.dtype(dtype).char in np.typecodes['AllInteger']

def ApplyToStatic(net, use_cinn):
    build_strategy = paddle.static.BuildStrategy()
    build_strategy.build_cinn_pass = use_cinn
    return paddle.jit.to_static(
        net,
        input_spec=net.get_input_spec(),
        build_strategy=build_strategy,
        full_graph=True,
    )

class InstanceTrait:

    @classmethod
    def instance(cls):
        if cls.instance_ is None:
            cls.instance_ = cls()
        return cls.instance_

    @classmethod
    def static_instance_with_cinn(cls):
        if cls.static_instance_with_cinn_ is None:
            cls.static_instance_with_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=True
            )
        return cls.static_instance_with_cinn_

    @classmethod
    def static_instance_without_cinn(cls):
        if cls.static_instance_without_cinn_ is None:
            cls.static_instance_without_cinn_ = ApplyToStatic(
                cls.instance(),
                use_cinn=False
            )
        return cls.static_instance_without_cinn_


class CinnTestBase:

    def setUp(self):
        paddle.seed(2024)
        self.prepare_data()

    def _test_entry(self):
        dy_outs = self.train(use_cinn=False)
        cinn_outs = self.train(use_cinn=GetEnvVarEnableCinn())

        for cinn_out, dy_out in zip(cinn_outs, dy_outs):
          if type(cinn_out) is list and type(dy_out) is list:
            for x, y in zip(cinn_out, dy_out):
              self.assert_all_close(x, y)
          else:
            self.assert_all_close(cinn_out, dy_out)

    def train(self, use_cinn):
        if GetEnvVarEnableJit():
            net = self.prepare_static_net(use_cinn)
        else:
            net = self.prepare_net()
        paddle.seed(2024)
        out = net(*self.inputs)
        return out
    
    def prepare_data(self):
        self.inputs = self.get_inputs()
        for input in self.inputs:
            input.stop_gradient = True

    def prepare_net(self):
        return self.get_test_class().instance()

    def prepare_static_net(self, use_cinn):
        if use_cinn:
            return self.get_test_class().static_instance_with_cinn()
        else:
            return self.get_test_class().static_instance_without_cinn()

    def assert_all_close(self, x, y):
        if (hasattr(x, "numpy") and hasattr(y, "numpy")):
            x_numpy = x.numpy()
            y_numpy = y.numpy()
            assert x_numpy.dtype == y_numpy.dtype
            if IsInteger(x_numpy.dtype):
                np.testing.assert_equal(x_numpy, y_numpy)
            else:
                tol = GetTolerance(x_numpy.dtype)
                np.testing.assert_allclose(x_numpy, y_numpy, atol=tol, rtol=tol)
        else:
            assert x == y





need_skip, skip_message = GetNeedSkipAndSkipMessage()
try_run_exit_code, try_run_stderr = GetCurrentStageTryRunExitCodeAndStdErr()
class TestTryRun(unittest.TestCase):
    def test_panic(self):
        if not AthenaTryRunEnabled():
            return
        if try_run_exit_code == 0:
            # All unittest cases passed.
            return
        if try_run_exit_code > 0:
            # program failed but not panic.
            return
        # program panicked.
        kOutputLimit = 65536
        message = try_run_stderr[-kOutputLimit:]
        raise RuntimeError(f"panicked. last {kOutputLimit} characters of stderr: \n{message}")
class PrimitiveOp_8907027e1722275a0f8ac1bd491d6529(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6aca1ae391a7fd9925f852a33ddbbbc1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8907027e1722275a0f8ac1bd491d6529
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1788bee2b0184e6648ed4065d195f60c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cf4a3ed5d10991eb5afa33b875e07ab2
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_47366ba000dea28308771433e1cd6306(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91520cd20b279a31055bb1bc3b3afa8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_47366ba000dea28308771433e1cd6306
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9bc7aac9ebec4559ff7c995aa3fed06f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bef30696f2fe9f7e25c856b5b6616f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.346435546875, 0.373779296875, 0.09271240234375, 0.00563812255859375, 0.2230224609375, 0.366455078125, 0.3701171875, 0.1695556640625, 0.090576171875, 0.2490234375, 0.243408203125, 0.31396484375, 0.310302734375, 0.452392578125, 0.363037109375], dtype='float16').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1dab80e2a68dc29685d19543500b12d8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f83fa518685c319f171748be0913ad7c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1dab80e2a68dc29685d19543500b12d8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_48f9b993ff699180fbc23cc191e20a8e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b2afde5b0575b480469d60a0e57ec0af
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f49d8cb88e0c825acc2d12f6c90e3bbc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ac943856e8b91554d42fffe1bc1da2d6
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b17ac827aa037e3c431fa3f354115491(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cd88ff77d0f27585c2be0f0fb038d38
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9962276da9ce745db32c85ab2c856c4a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ed42ede22da9d554c959704486bb590(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9962276da9ce745db32c85ab2c856c4a
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_074002d010dc476fb4f6b1fde317a10f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3959c93179c104dabc01a5615673b38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75534d4fc4cfbc1b191f58e8ee98926c
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_652f465eece9e13ae7868f80d988510f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12555541098117828, 0.08439458161592484, 0.051709551364183426, 0.23691396415233612, 0.4921213984489441, 0.2483719289302826, 0.3160907030105591, 0.2707173228263855, 0.39785733819007874, 0.36417093873023987, 0.23385201394557953, 0.42667320370674133, 0.2572689652442932, 0.1158958300948143, 0.4498857855796814, 0.07251540571451187, 0.11292199045419693, 0.19554443657398224, 0.4144830107688904, 0.21148677170276642], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e95260de6333db167b544fa6886878d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5cb566008637fe80b0257fecbd0657c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e95260de6333db167b544fa6886878d
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d20619502e57f68fea535ebaca4b9970(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f46c2b4ddf325ecbdfb086bde22ac83d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d20619502e57f68fea535ebaca4b9970
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a0b65ecd4fd986024e93753bfd3c82c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48193d8e1c94015aedefa10d87b2a2a5
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_040e6fbfa405b001dba7b80ea22e51c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6dcc03d62eabd94906ffc15b58927d
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8d08aaf4af9883f9ffcbe2ad1240b5c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90f846e182ba18854cd93bd4b932695d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d08aaf4af9883f9ffcbe2ad1240b5c9
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a95afc5eb47d95b3bebf49e9f7e01db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c51ac3489f8b30f5e21b318e6e622b40
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cf7e9b59f3e4618e1c91821b9bcd5142(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c0125fd8c1f3530c70f7c14a82703e5
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a7703647190228da56677428840df221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a332fe32ef5d9c267f89a22a5636c229(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a7703647190228da56677428840df221
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a7f449863ebf05b0288ede43944d502(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a66994c8cfb055e8cafee820dfe48e66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a7f449863ebf05b0288ede43944d502
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e744bb23825681d908e64970b603532(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1426457b2f4a8aece2fe2d98d2df8816(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e744bb23825681d908e64970b603532
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_486c808b421f715ea60783b020b9ac2a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fb401baa1e511a86947d94ae47f2477(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_486c808b421f715ea60783b020b9ac2a
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c6e486a5615fb35f59ab84c186179de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5019dfac401ad8840745540dde57a5a0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c6e486a5615fb35f59ab84c186179de
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1e46a4b8d927e7523ed8feeabca50d2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.309814453125, 0.204833984375, 0.265625, 0.1124267578125, 0.4638671875, 0.2403564453125, 0.29296875, 0.40185546875, 0.1400146484375, 0.41015625, 0.05810546875, 0.4345703125, 0.1402587890625, 0.1270751953125, 0.349609375, 0.29248046875, 0.00878143310546875, 0.2371826171875, 0.141845703125, 0.389404296875, 0.349609375, 0.1484375, 0.395263671875, 0.078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f73a788df6797a4e951d8b824a54636(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04620361328125, 0.300048828125, 0.4501953125, 0.05889892578125, 0.273681640625, 0.1949462890625, 0.352294921875, 0.296630859375, 0.1925048828125, 0.26025390625, 0.351806640625, 0.1815185546875, 0.1961669921875, 0.13037109375, 0.1976318359375, 0.2069091796875, 0.444091796875, 0.177490234375, 0.0838623046875, 0.1707763671875, 0.49072265625, 0.2003173828125, 0.4013671875, 0.241943359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf5cb82337c68469d12eeec970f95c11(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fca1cb9315bba4c8a53b28e9a87864e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf5cb82337c68469d12eeec970f95c11
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_49755f13548160060eccfaac01f66762(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f577b260fc19d438f30fa43e7944a36f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_49755f13548160060eccfaac01f66762
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08d927ff4613402ffcc261794c20b188(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c036e6cb0b21757a4164cdeaac28b997(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.356201171875, 0.1463623046875, 0.038238525390625, 0.239501953125, 0.428955078125, 0.057830810546875, 0.2734375, 0.40966796875, 0.440673828125, 0.283203125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_56d15c7701954747083eaa309d460f5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e95ef843643e8ae38693ac5780b094df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_56d15c7701954747083eaa309d460f5f
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d6335c00c45156738c0ff2e61111ea9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e0505db0e19c28eb32f10bc954bdc80d
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee64821d89dd1867d8fde30aa40ae496(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c005f2fe23ec8bc4453f1659973c3e87
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_222c339fd4d1817a73fb27e327413387(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cc5f33bd40a04b24581cf5584f4c2db
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_61d37ed2584d74e6259927213baeb5ee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f5c5ec45bc887cc5b9229118fc28f8ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2662113904953003, 0.20176567137241364, 0.17085014283657074], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3acd91d5e439cb1fb2d03a06fbf074a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9009a811a2e0fb865824ef4b5fb1ae8a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028085462749004364, 0.3202022612094879, 0.05748583748936653, 0.4887322783470154, 0.41425949335098267, 0.2057247906923294, 0.26828253269195557, 0.338922917842865, 0.12681198120117188, 0.19788843393325806, 0.47575390338897705, 0.08572553098201752, 0.21394400298595428, 0.4770670533180237, 0.26810845732688904], dtype='float32').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1bb72fcb53f5d78ad55f996b90011e16(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa86bae2c43d283fe42e224e29bb1f29(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1bb72fcb53f5d78ad55f996b90011e16
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d8ecd24614754a894302b6cc2d7f78a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7337b4a2a71ae5b84c7427ea35d10b4b
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb4f6ee3de01bd814f552a6d85d729e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a58f7bb2c44ee621657824e5359bdff
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_72e1ff6cb8a5e4f482838ee0c5662edf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bffc69e0bc04eec995b51cf9f46469f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_72e1ff6cb8a5e4f482838ee0c5662edf
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90ca54ec813d2dbc0135ae05bb92682b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6aa3ea3e8dd0b7eef39753a1ee209eb8
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d670895b0c9c3bc69ef90141b6123dfa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_441bcb2fb31c6bac89e59ec1cc75beef
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64edb4d01d9b5264eacbee672737212d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71c3b681b4f05cadf0454f8f7d7a410d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3232499659061432, 0.2552849054336548, 0.39248791337013245, 0.05820149928331375, 0.328685998916626, 0.3625853955745697, 0.13756726682186127, 0.22743861377239227, 0.20983482897281647, 0.14423838257789612, 0.20747961103916168, 0.2608531415462494, 0.009836697019636631, 0.36488547921180725, 0.31449753046035767, 0.09302280098199844, 0.0914483293890953, 0.3457815647125244, 0.2164204865694046, 0.2530760169029236, 0.31111907958984375, 0.308573842048645, 0.14833882451057434, 0.2695179581642151, 0.3675696849822998, 0.41588494181632996, 0.3446323573589325, 0.11809331923723221], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f57e88aa0193c56926ff56d17bb09200(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47265625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_310618c00d619831e3f82c908e2c517a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_823a5987e415ca2993342734e38f41d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_310618c00d619831e3f82c908e2c517a
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1207025b2416dc423736d9776a3021f7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93f067a2008ed5a9e4398890d89ecfa8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1207025b2416dc423736d9776a3021f7
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2864e061d373c1f57649883b519d2d25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8d4398dd34f7e9193cad0c48addc178(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2864e061d373c1f57649883b519d2d25
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b72a712b83dd479e72e8904cc73ad9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.038421630859375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4506d7b50329fce3d573b3e13065738e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_759e501b746cbee0625400d89f609c0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.384765625, 0.041839599609375, 0.155517578125, 0.01332855224609375, 0.49169921875, 0.148681640625, 0.3603515625, 0.337890625, 0.2181396484375, 0.365478515625, 0.445068359375, 0.035064697265625, 0.310791015625, 0.01384735107421875, 0.0328369140625, 0.3466796875, 0.220458984375, 0.282958984375, 0.41162109375, 0.09814453125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1435ec68106ada9b09690ff610301a0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f209034d026402df7c7a6baa6608b033(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1435ec68106ada9b09690ff610301a0a
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_28328fab5925173473a90c5618c8b7bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5cd2f37d1246fed00ad8a1139cabd7e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_28328fab5925173473a90c5618c8b7bf
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5461f2be24dfa524749ca64cc033805c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.310791015625, 0.0567626953125, 0.254150390625, 0.329345703125, 0.370849609375, 0.1844482421875, 0.278076171875, 0.042266845703125, 0.273681640625, 0.360107421875, 0.33349609375, 0.15673828125, 0.3916015625, 0.25048828125, 0.0241851806640625, 0.01535797119140625, 0.2003173828125, 0.327880859375, 0.018829345703125, 0.3994140625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6295a2dc69caca65eba56abec5ec0683(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5abed01969dbe4c2bf809eaa1a79e9ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3989322781562805], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c10de201bce3f87606322999496df08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0bef61f8a3a5fc6a6093f948121e4887
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9650e0e03ba132d978beacb0daa67054(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71f7b31f9d38f34e5802f4ffa92572c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06390380859375, 0.07244873046875, 0.223388671875, 0.181640625, 0.24609375, 0.08709716796875, 0.48876953125, 0.45947265625, 0.27294921875, 0.1363525390625, 0.1488037109375, 0.373779296875, 0.410888671875, 0.0171661376953125, 0.18408203125, 0.0264739990234375, 0.1785888671875, 0.407958984375, 0.0418701171875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4d330a83e6c72ad2a5f4a32ba301273(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0e9be7b13cb5746af8cfd9fc043791b1
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_94988dcb02d8864c4da4e9522de4b4f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a66c02011ff2f4fa22e02f7aa8d88f13(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_94988dcb02d8864c4da4e9522de4b4f8
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c380f56e3c450ff942683a9fb13de58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2257b5c3f281dd149eb321e26748aaad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09629390388727188, 0.09746474772691727, 0.33027219772338867, 0.02451772801578045, 0.10672236233949661, 0.3898039758205414, 0.25747713446617126, 0.02935979701578617, 0.3525959551334381, 0.07846666872501373, 0.10348000377416611, 0.45187079906463623, 0.37301385402679443, 0.3273097574710846, 0.12704770267009735, 0.48907217383384705, 0.0943664088845253, 0.21760177612304688, 0.28469356894493103, 0.23947647213935852, 0.4197072684764862, 0.01705501787364483, 0.1380460411310196, 0.136412113904953, 0.3225138783454895], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dddae32fb10aa2967df8285de100133a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_454acca9b203c0b4e82d33fdd727940f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dddae32fb10aa2967df8285de100133a
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd2cb4290d95910762c4c4024dddd86f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b28f44da8bffeef6ba956f51f06609a7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b48f8ad897df4cf019c174ded30d3056(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d5915752baf0e0dafc1d62c6e4e9288(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bdacde2836f98446b9906b50142ce07c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ba2e2861851cf732031cab97c0a25e69(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bdacde2836f98446b9906b50142ce07c
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e429ba311317de0da7ead611ca98ed0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3430ff81f66cc4a5356a89e385f3f645(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e429ba311317de0da7ead611ca98ed0
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c3f2554b0d2e33dc87eb61efe4e2e57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_55328055cd73736fd82e79af9ff6ca4f
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d8157971fc7e20d1a1649847b17550f9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86d161994ba86a8298123db91c584038(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0220947265625, 0.042633056640625, 0.1669921875, 0.427001953125, 0.08599853515625, 0.1951904296875, 0.12237548828125, 0.038177490234375, 0.111328125, 0.058349609375, 0.2430419921875, 0.0823974609375, 0.033203125, 0.330078125, 0.270751953125, 0.275390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faf960d28c2b6f7ac40b0fdde1fe6d40(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_136e6f49c8e9b2a9ada79fcbc98e0405
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df8b6684b1e6fdeda70dab9ce9a9dfc4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09765625, 0.2861328125, 0.337646484375, 0.1953125, 0.050506591796875, 0.1812744140625, 0.349365234375, 0.265380859375, 0.0595703125, 0.4150390625, 0.0019283294677734375, 0.388916015625, 0.359130859375, 0.06890869140625, 0.37939453125, 0.1131591796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40845a12f69a4015053ee4d634276944(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_631ab03f309f35a398e91877813f735a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40845a12f69a4015053ee4d634276944
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6d021d91f7811013c15e196ea119243(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2eae4cc8d5f45abaf4ffdaa82d6d8b4
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c485ec025d6486261cccbc00e5629efc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25bd063daed0e2f412e215aeb00b42a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c485ec025d6486261cccbc00e5629efc
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_742a8da1082951ba5d819c21526364ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0c0dd2bbc7af14146ac682b2efffe74
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bb48ed47d99105fb3876eb192ed56704(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8415d2bc894ea3989dd098e5171f09d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bb48ed47d99105fb3876eb192ed56704
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03c8599224abbfa8cc5b1ae59ef4b566(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24298420548439026, 0.021410267800092697, 0.019521960988640785, 0.48485562205314636, 0.11908101290464401, 0.16494064033031464, 0.3843371570110321, 0.017702486366033554], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_064c55c9db61dd2826504c03a7b3196f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc83b346411f5b614cd0430827bafd7b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_064c55c9db61dd2826504c03a7b3196f
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e5262ed39ae5effcb6cff9d9e541323(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4147e8732e49de7c7a2e5b9d682b93d
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7678acb5ca6db7b77a814b72ec74784c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.413330078125, 0.380126953125, 0.299072265625, 0.1427001953125, 0.319091796875, 0.3603515625, 0.296630859375, 0.159423828125, 0.3935546875, 0.39404296875, 0.008148193359375, 0.1141357421875, 0.1629638671875, 0.23779296875, 0.042083740234375, 0.310546875, 0.292236328125, 0.1748046875, 0.023681640625, 0.056640625, 0.281494140625, 0.390625, 0.204345703125, 0.1553955078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3dbf0476a41f36d151893940ffb9da1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01294708251953125, 0.170166015625, 0.31396484375, 0.30126953125, 0.480224609375, 0.0975341796875, 0.456298828125, 0.1300048828125, 0.01042938232421875, 0.2154541015625, 0.341796875, 0.450439453125, 0.36572265625, 0.1485595703125, 0.280517578125, 0.139404296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df799e00f127b4c3ad1a650bc974527e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4783e4b44e267157676985eef807dfd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df799e00f127b4c3ad1a650bc974527e
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ce4a01077afdf6b3f8ffee74480cac6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12386525422334671, 0.1554693877696991, 0.238989919424057, 0.39538124203681946, 0.35029637813568115, 0.09218940883874893, 0.002096220152452588, 0.03989191725850105, 0.15273869037628174, 0.2943301796913147, 0.04525858908891678, 0.12185560911893845, 0.006667549721896648, 0.2109447866678238, 0.041470035910606384, 0.07895156741142273], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7bb541e40ae24f61aadb9fa21c803107(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0477294921875, 0.2890625, 0.373046875, 0.341064453125, 0.295654296875, 0.295654296875, 0.170654296875, 0.302490234375, 0.12237548828125, 0.04949951171875, 0.10626220703125, 0.44677734375, 0.01082611083984375, 0.1787109375, 0.326171875, 0.060943603515625, 0.055450439453125, 0.41943359375, 0.1683349609375, 0.1861572265625, 0.426025390625, 0.1492919921875, 0.249755859375, 0.12091064453125, 0.2294921875, 0.489013671875, 0.436279296875, 0.406982421875, 0.35400390625, 0.341552734375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a04190ea84f980d0dfa47f4c2d658276(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07219178974628448, 0.371878057718277, 0.4001528024673462, 0.07202574610710144, 0.022594405338168144, 0.1473013311624527, 0.0563000924885273, 0.44815951585769653, 0.13389401137828827, 0.2267838716506958, 0.42721253633499146, 0.17991773784160614, 0.49602627754211426, 0.24719582498073578, 0.2879067063331604, 0.1685739904642105], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b706d0df6aef14379f7b0850ce092929(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d4a841b500770fe1fc8e98e827b8f8d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b706d0df6aef14379f7b0850ce092929
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52828b3ee07cfbca61a6de8cffe68213(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5affbe76c5d3cc2cfd1f0ec1941d8e49
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14624256417a43228ec531fb6c33ae03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d5f6c501af1f629be34dfbfa20d09202(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14624256417a43228ec531fb6c33ae03
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8ccac1805637a4eb070b3c73cef73435(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b6bfd60dcbcf74f63a60b9c5678ba20(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1400146484375, 0.1767578125, 0.105712890625, 0.425537109375, 0.3330078125, 0.474609375, 0.33203125, 0.30908203125, 0.4345703125, 0.2259521484375, 0.17529296875, 0.434814453125, 0.11358642578125, 0.10076904296875, 0.282470703125, 0.05963134765625, 0.319091796875, 0.4892578125, 0.10797119140625, 0.36669921875, 0.086669921875, 0.1353759765625, 0.334228515625, 0.2049560546875, 0.258056640625, 0.46533203125, 0.050140380859375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7fcb7affb44ca3b340a56f54524ad725(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35791015625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f0874cf81d85d28b952be2932e7836f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d89f910dcc5dd27afeec4dd70233feee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([92], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fc6b52bb4c990849a058b4e459608ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fe8958a0c976a0018c4f6958f581b37f
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b29f3340116338d8fa64da0e59ef5523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae8a01ede04014f1b68e764adeac04d7
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e0c825643db18caa24dc3d0da307588(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c0c4f121258e6eef7f97c99e6bd5729
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a2999db644a51a70ea5e154c2fdcd71(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8e8f3a4f6479f70b66551697ca902a97
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_731368416622bb883988fa0e412d4506(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64507a187404ea6fbf990f8d97b5c4ef
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83a831c45cd4f1a3399a7ce8440e8c77(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40dae0cb50d1ef470f038ea4119187e3
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f03a8d3924845c19fc33960a3a00973a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f212052ff309402996e163d91a2a12a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29523786902427673, 0.4792270064353943, 0.44907060265541077, 0.037667348980903625, 0.2739139497280121, 0.2411089539527893, 0.4380562901496887, 0.16008497774600983, 0.4125996530056, 0.31804269552230835, 0.02244485728442669, 0.09552587568759918], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1afff34b4d293a55decf8b869daa40c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6a60718ee63441ed709558b4f8d2cc05
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8638f6a5232e41b346e619c536a61bdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15031655132770538, 0.31291404366493225, 0.485689252614975, 0.41298604011535645, 0.09539714455604553, 0.4495413899421692, 0.24753832817077637, 0.1845436692237854], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69b892783c91e76422e13114ead53397(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c72a932085a2184db07de3a959bfcf00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69b892783c91e76422e13114ead53397
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_807873d0f506ad298b71c19f07581295(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d372ee73ae34b67abc541411e3cf4f02(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358154296875, 0.32373046875, 0.3662109375, 0.411376953125], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_75f03c897655542e5790d1ee2e3852f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d370303e1d33c2d8b6f14ff60aa222a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_75f03c897655542e5790d1ee2e3852f3
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c97b989596db34413aa6a89e45d8b06b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.427734375, 0.437744140625, 0.400390625, 0.1661376953125, 0.0164337158203125, 0.276123046875, 0.0077056884765625, 0.045013427734375, 0.302001953125, 0.285888671875, 0.1749267578125, 0.425537109375, 0.340576171875, 0.425048828125, 0.474365234375, 0.44677734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_be84a277da65b40e2de25225f7aa3667(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d0e3a998e6dea94e9db8413d7c62c99(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be84a277da65b40e2de25225f7aa3667
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b28db5105fe0f37f3b20d2d826623f19(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93c961eaa5f4a84ab7be5acc1b28c18c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1b3d7ce978efe4b374a8732d34c7bed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19161851704120636, 0.46220359206199646], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f04eebe2554ef4d59e1a8a349de21c89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3238590955734253, 0.3485160768032074, 0.06819351017475128, 0.02563709206879139, 0.34948068857192993, 0.09268835186958313, 0.3713865578174591, 0.03083648718893528, 0.33313319087028503, 0.2746058702468872, 0.23058044910430908, 0.007815028540790081, 0.35935288667678833, 0.06436418741941452, 0.28560465574264526, 0.061555977910757065, 0.11291901767253876, 0.14555415511131287, 0.15134234726428986, 0.4825282692909241, 0.2878716289997101, 0.2413053661584854, 0.01711885631084442, 0.33373868465423584, 0.07795721292495728], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0bced1ceb414444677c01586e7046f70(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.146240234375, 0.07037353515625, 0.462890625, 0.43505859375, 0.14208984375, 0.05731201171875, 0.27001953125, 0.055999755859375, 0.087646484375, 0.040771484375, 0.309814453125, 0.365234375, 0.2147216796875, 0.2169189453125, 0.2352294921875, 0.358154296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89bc8e88562b54c1ac43db800ba6f88d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10650634765625, 0.13818359375, 0.44482421875, 0.07977294921875, 0.03546142578125, 0.0894775390625, 0.325927734375, 0.23193359375, 0.0287933349609375, 0.361572265625, 0.25927734375, 0.324951171875, 0.22021484375, 0.43310546875, 0.0293426513671875, 0.13134765625, 0.0203399658203125, 0.00785064697265625, 0.028350830078125, 0.482177734375, 0.439208984375, 0.472412109375, 0.433837890625, 0.39404296875, 0.4296875, 0.420166015625, 0.1492919921875], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_426290927cba7766e88a1404957e823e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42205342650413513, 0.17761459946632385, 0.462312251329422, 0.17492157220840454, 0.4630918502807617, 0.3194037079811096, 0.039656419306993484, 0.0215744748711586, 0.15842203795909882, 0.3663956820964813, 0.47854429483413696, 0.3844936490058899, 0.1884942203760147, 0.45576032996177673, 0.254678338766098, 0.48502254486083984, 0.3338586688041687, 0.3673407733440399, 0.132791668176651], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcabcab139b242ad1c233087264f27f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a15ce6ec09d28b1b52a16fb49b176cff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3779296875, 0.033599853515625, 0.38037109375, 0.0168304443359375, 0.365234375, 0.219970703125, 0.48046875, 0.25048828125, 0.36767578125, 0.2091064453125, 0.3330078125, 0.298583984375, 0.287841796875, 0.09344482421875, 0.2548828125, 0.301513671875, 0.313720703125, 0.05108642578125, 0.295654296875, 0.032958984375, 0.261962890625, 0.2218017578125, 0.007015228271484375, 0.00040221214294433594, 0.402099609375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f562b0c05658c4452fda7de5aa6dd72f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f6cbd8f54533f84c58a34b4013369fd
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9787ffdd88a9f13c372a745ef77bd846(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2249755859375, 0.481689453125, 0.472900390625, 0.388671875, 0.159423828125, 0.192626953125, 0.2147216796875, 0.204345703125, 0.482666015625, 0.36279296875, 0.2364501953125, 0.06597900390625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25ddcaf81ae82ccc95ba700078014547(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2753ac9960e9ef1462075707e9521e85(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1988525390625, 0.1441650390625, 0.248779296875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72ecb8c8bc45994541651dd1586cd023(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12066650390625, 0.4384765625, 0.462158203125, 0.3115234375, 0.055389404296875, 0.11456298828125, 0.1976318359375, 0.361572265625, 0.245849609375, 0.0848388671875, 0.05645751953125, 0.131591796875, 0.414794921875, 0.1461181640625, 0.2890625, 0.168701171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_999da6646151ed755b2cd54a32a3d0c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3098202347755432, 0.35644739866256714, 0.1886148452758789, 0.2488332837820053, 0.4783753752708435, 0.21368762850761414, 0.3926708400249481, 0.3235519528388977, 0.30815163254737854, 0.20421725511550903, 0.4276878535747528, 0.4342315196990967, 0.3908117115497589, 0.2930848300457001, 0.3448140025138855, 0.007687525823712349], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8b94dd95189364001a79065ef3b68b2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_302dbab8f5ed1f11de08f5acbf146ab8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03027360700070858, 0.4943152070045471, 0.4109763503074646, 0.06791537255048752, 0.3222038745880127, 0.09381504356861115, 0.15160788595676422, 0.24231797456741333, 0.10557609051465988, 0.2728056311607361, 0.35081416368484497, 0.3455953001976013, 0.008475887589156628, 0.015833457931876183, 0.11216819286346436, 0.3215119540691376, 0.3793521523475647, 0.4700605273246765, 0.31876376271247864, 0.050281841307878494, 0.1617160588502884, 0.2738285958766937, 0.47524720430374146, 0.147861510515213], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1519a446773a54a64272fcbe3dd3698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c46e4a811a4b66b9d1bbd79e9e5e51c
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6124f26b019d51da7c3faf9241470703(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.467529296875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f8aa1b4b90c5445e6b494c8d922f2917(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45582371950149536, 0.37699952721595764, 0.08261943608522415, 0.34689921140670776, 0.19890567660331726, 0.28635624051094055, 0.21120497584342957, 0.456728458404541, 0.2121465802192688, 0.09322205930948257, 0.36612656712532043, 0.24280135333538055, 0.17841415107250214, 0.23403233289718628, 0.36193591356277466, 0.14803466200828552], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_be518b7e3de955eef05f038300ab76e8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e9111db2309c10c4cf4546edbeace31(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1370849609375, 0.2191162109375, 0.37353515625, 0.077880859375, 0.47509765625, 0.10186767578125, 0.342529296875, 0.353515625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb5a43905ec097850e09dc280c8026bb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17355984449386597, 0.15402080118656158, 0.3441021740436554, 0.41034364700317383, 0.3886721730232239, 0.06629385054111481, 0.30459100008010864, 0.042075179517269135, 0.4497172236442566, 0.3539484143257141, 0.25685352087020874, 0.13589581847190857, 0.44088414311408997, 0.2190738320350647, 0.45409056544303894, 0.05855286121368408], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed62f7e4e4ce11f311803887a3e2f95a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1cb42adc943e1e5b52d9978268bf5cc6
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_77a643f7378d55f0f985cd226f1364aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3bdcaf5b6d6c0e81e03bfd4e4348c4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_77a643f7378d55f0f985cd226f1364aa
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7d58e576012041a41642f2fa5fee1c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_681abd8c88971fbd2bd1cb6d36078a63
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d8ce3cd9255711173e20ba2c229d55b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4417189955711365, 0.16919060051441193, 0.22285853326320648, 0.2391025424003601, 0.3819420039653778, 0.34169501066207886, 0.0923682451248169, 0.060427647083997726, 0.4225795865058899, 0.24477481842041016, 0.4276101887226105, 0.1284857839345932, 0.4656302034854889, 0.25043731927871704, 0.18018218874931335, 0.35182109475135803, 0.13863500952720642, 0.20980358123779297, 0.24423862993717194, 0.2340364158153534, 0.24925942718982697, 0.31668826937675476, 0.33236414194107056, 0.466546893119812, 0.22275874018669128, 0.18054373562335968, 0.446297824382782, 0.306120365858078], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_761028f4c640cf96a5b792aaa62379df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11949960142374039, 0.1556968241930008, 0.013942809775471687, 0.4781953692436218, 0.06730668246746063, 0.39221900701522827, 0.26101791858673096, 0.2225692868232727, 0.029293257743120193, 0.2977027893066406, 0.06917652487754822, 0.3487936556339264, 0.4625706970691681, 0.03164849430322647, 0.05358940362930298, 0.3305155038833618], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_63726236f090c50de07ea441f45d3bb7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36130285263061523, 0.0814686194062233, 0.4236447811126709], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4e549866563725adda46ab508abb5580(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.058074951171875, 0.333251953125, 0.0950927734375, 0.4140625, 0.335205078125, 0.4287109375, 0.4423828125, 0.23583984375, 0.266357421875, 0.44384765625, 0.176513671875, 0.30859375, 0.33935546875, 0.362548828125, 0.3466796875, 0.26416015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3165c9f9f5296fd4f143470c9944dfd7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.030489254742860794, 0.1347707360982895, 0.33416739106178284, 0.4625370502471924, 0.12024006247520447, 0.3449890613555908, 0.07909946888685226, 0.32122182846069336, 0.460727334022522, 0.057269684970378876, 0.3985432982444763, 0.03262169659137726], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e0fee3e8562b7f8c990d349b6a07dff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34814453125, 0.1622314453125, 0.2890625, 0.311767578125, 0.1610107421875, 0.2646484375, 0.11480712890625, 0.321533203125, 0.30517578125, 0.1309814453125, 0.40185546875, 0.1717529296875, 0.364501953125, 0.3115234375, 0.432861328125, 0.26513671875, 0.439453125, 0.367919921875, 0.140869140625, 0.418701171875, 0.1705322265625, 0.370361328125, 0.27880859375, 0.274169921875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2958d89fe34de2fdd330504b1c7ed10(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e72f7e9e57b598c396bdbf9cf25055a7
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_16c7797dac59553397921766eda7a158(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.396240234375, 0.479736328125, 0.348388671875, 0.32958984375, 0.11700439453125, 0.06195068359375, 0.10101318359375, 0.460693359375, 0.123779296875, 0.283203125, 0.234375, 0.337646484375, 0.429443359375, 0.434814453125, 0.034332275390625, 0.1434326171875, 0.275634765625, 0.277587890625, 0.494384765625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_faad70cf18affedd64b7596c522ae1f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5a9429fd0b39699d2b15b22df11a3314
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd97bf9c8c9f5be338ac7c9e5141970b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30419921875, 0.07708740234375, 0.2462158203125, 0.447998046875, 0.0701904296875, 0.3134765625, 0.155517578125, 0.449462890625, 0.042236328125, 0.259765625, 0.37939453125, 0.2291259765625, 0.0179443359375, 0.438232421875, 0.291748046875, 0.4853515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_02adab333a60198faa2c9e42ba6ef992(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b48f8ad897df4cf019c174ded30d3056
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4039365633906db03ec50b078309dc5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_191dc03200364a7a8918b252bce8eee8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46a12a7ec6b5d9a6abe3f810b315d317(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35546875, 0.04150390625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d39f7128fa862eeebd1c7cfd67dfde58(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358642578125, 0.484375, 0.48388671875, 0.35107421875, 0.379638671875, 0.32568359375, 0.443115234375, 0.345703125, 0.471435546875, 0.34130859375, 0.4736328125, 0.047393798828125, 0.327392578125, 0.223876953125, 0.251953125, 0.286865234375, 0.338623046875, 0.255615234375, 0.22509765625, 0.49853515625, 0.46875, 0.453857421875, 0.137939453125, 0.451416015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef3d65e87c010b92d13bd4fe6bf650f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1524384617805481, 0.31885597109794617], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_62696cfd7642932947982d9572431133(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c77d53f7598ede2d42bf98b201c4a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_62696cfd7642932947982d9572431133
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b95024d5f691233cc9bedec332bac07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_daeb1353f697d4d8ee3157bead8c6701(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b95024d5f691233cc9bedec332bac07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_872618bd67c513a0cf350d80fed43332(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.455322265625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a41f1e759f01afb45c4b1bb18453784(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da7c2a7751cb9c247c31591e2fd9dee
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_23bdc5fe3a0b4f222ba170e8d14110e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.146484375, 0.268798828125, 0.457763671875, 0.1962890625, 0.02691650390625, 0.44287109375, 0.03240966796875, 0.027435302734375, 0.44580078125, 0.366455078125, 0.09527587890625, 0.419677734375, 0.198974609375, 0.405517578125, 0.35302734375, 0.49755859375, 0.056243896484375, 0.281494140625, 0.044097900390625, 0.297607421875, 0.3642578125, 0.07208251953125, 0.07904052734375, 0.2607421875, 0.1943359375, 0.4970703125, 0.4462890625, 0.1524658203125, 0.392333984375, 0.20849609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_16804cb8959c36931ecac707ef304fc4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016863347962498665, 0.37138164043426514, 0.1187591701745987, 0.4749975800514221, 0.35007891058921814, 0.15251795947551727, 0.2675386071205139, 0.23774850368499756, 0.4007115364074707, 0.4025082290172577, 0.3532901108264923, 0.09237241744995117, 0.23621107637882233, 0.45655232667922974, 0.2761346697807312, 0.20621682703495026], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9beadc2d1b90f7e2945e418a88434fb7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1568603515625, 0.343994140625, 0.420654296875, 0.129150390625, 0.2379150390625, 0.178955078125, 0.004001617431640625, 0.369384765625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec6553b6768d9fe854feaaf26d12b31e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22877824306488037, 0.19175344705581665, 0.3526632487773895, 0.300672709941864, 0.42892885208129883, 0.16580021381378174, 0.3064415454864502, 0.03988790139555931, 0.3683987259864807, 0.006218491122126579, 0.029697397723793983, 0.04346977546811104, 0.12298870831727982, 0.4733782708644867, 0.41754257678985596, 0.09467723220586777, 0.018274040892720222, 0.34277474880218506, 0.12165680527687073, 0.4182032644748688, 0.11878146976232529, 0.34075161814689636, 0.39336106181144714, 0.17357628047466278], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_97e958d9038b20b28de597352b3c3faa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.349853515625, 0.2474365234375, 0.09661865234375, 0.308837890625, 0.35546875, 0.247314453125, 0.42041015625, 0.3173828125, 0.2427978515625, 0.2802734375, 0.43603515625, 0.0762939453125, 0.28125, 0.11883544921875, 0.06744384765625, 0.36474609375, 0.1519775390625, 0.422119140625, 0.38818359375, 0.1826171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8605b3c2902f798ddc9ed54b117d532(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468994140625, 0.0115814208984375, 0.028778076171875, 0.2724609375, 0.00428009033203125, 0.1385498046875, 0.29833984375, 0.1456298828125, 0.03009033203125, 0.376220703125, 0.3681640625, 0.39013671875, 0.0889892578125, 0.1495361328125, 0.32177734375, 0.0982666015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2c95331a2ac7078676931be5ed3d0b0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.172607421875, 0.164794921875, 0.3759765625, 0.2138671875, 0.430908203125, 0.0899658203125, 0.401611328125, 0.1842041015625, 0.4970703125, 0.290771484375, 0.1729736328125, 0.4677734375, 0.396484375, 0.08990478515625, 0.447265625, 0.0210418701171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83bfc3ef07cbea4746117e48369e2470(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1a6d051dfa976c5a12f3f3fac97617f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83bfc3ef07cbea4746117e48369e2470
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_862295c58d174235c6660429e1f1fcb3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4554820954799652, 0.38346096873283386, 0.111078180372715, 0.37164750695228577, 0.39890867471694946, 0.2669128179550171, 0.06658071279525757, 0.38600870966911316, 0.3635043799877167, 0.3007054328918457, 0.04207839444279671, 0.2505601942539215, 0.32978004217147827, 0.0666603222489357, 0.17056021094322205, 0.07452813535928726], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb8ac3cd96d567af7ded5c5b2284e29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.054168701171875, 0.054962158203125, 0.1561279296875, 0.11187744140625, 0.27099609375, 0.38671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a36644d7d9f0d2ea6f778b96b81806(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aebd140b195f4efa99f762bc9f3ecc15
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22d297f78b7eb69814acb27c5b459610(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35979318618774414, 0.016901368275284767, 0.19209332764148712, 0.20734640955924988, 0.21076755225658417, 0.3466150164604187, 0.4437355399131775, 0.45228856801986694, 0.23718547821044922, 0.4343716502189636, 0.09078094363212585, 0.4248012602329254, 0.08540099114179611, 0.029669053852558136, 0.27187007665634155, 0.38976138830184937, 0.3283609449863434, 0.11502595245838165, 0.4588667154312134, 0.11535371840000153], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_337aa9da99a143043305fe80e36197ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14491212368011475, 0.22944559156894684, 0.19359886646270752, 0.1859481930732727, 0.11450199037790298, 0.15552908182144165, 0.23105399310588837, 0.1378055363893509, 0.49097949266433716, 0.4356602430343628, 0.10937030613422394, 0.0859939306974411, 0.4273897111415863, 0.3797188699245453, 0.15844659507274628, 0.02145632728934288, 0.059474535286426544, 0.33617961406707764, 0.23495909571647644, 0.1596502810716629, 0.4651775658130646, 0.4990203082561493, 0.005478023085743189, 0.28184208273887634], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31232cbdee9766d4562a30dbd94eef49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04fbf546cbffdecbd3f10bedc045bd3a
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6d470e29fcace7e10252dcf691942d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.446044921875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8691bbc27aabe3b3658570f9d5895932(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b375570a5ae54a82d1d5d3b5f09747f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8691bbc27aabe3b3658570f9d5895932
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d6eecc9378a249ba69ae84cbdce5b978(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.072998046875, 0.152587890625, 0.37548828125, 0.1732177734375, 0.199951171875, 0.275634765625, 0.10595703125, 0.07574462890625, 0.3779296875, 0.03973388671875, 0.2027587890625, 0.11737060546875, 0.023712158203125, 0.180908203125, 0.2308349609375, 0.48681640625, 0.1903076171875, 0.0279388427734375, 0.437744140625, 0.109619140625, 0.435546875, 0.4716796875, 0.399169921875, 0.48583984375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6205d3a1635248bf37134808db4809aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09661865234375, 0.09576416015625, 0.056732177734375, 0.27294921875, 0.368408203125, 0.006465911865234375, 0.3828125, 0.2919921875, 0.364990234375, 0.030731201171875, 0.22607421875, 0.46826171875, 0.092529296875, 0.265869140625, 0.1605224609375, 0.230712890625, 0.3740234375, 0.330322265625, 0.138916015625, 0.049957275390625, 0.4091796875, 0.1885986328125, 0.49462890625, 0.43359375, 0.031494140625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_94da7e649369541f7566fac4423b5df7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47314453125, 0.495361328125, 0.40869140625, 0.3798828125, 0.337646484375, 0.18896484375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cac42a93549f9f5e140adc06880552ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f7f0d2496575a4b3a28cfd858a4507dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2679803669452667, 0.31751716136932373, 0.13997356593608856, 0.1359129548072815, 0.106258325278759, 0.4040219187736511, 0.01382177509367466, 0.10755598545074463, 0.22314134240150452, 0.3283593952655792], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22a13fcfc74c8cccef0dab82a210552e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_613b196d4099bfb372a56bafd3c0c6b7
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98d4f1e73dcb82580086d2e7414a1fa1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46142578125, 0.04656982421875, 0.2022705078125, 0.1031494140625, 0.377197265625, 0.2244873046875, 0.337158203125, 0.100830078125, 0.07269287109375, 0.0225372314453125, 0.1773681640625, 0.133544921875, 0.10205078125, 0.24462890625, 0.2398681640625, 0.451904296875, 0.44775390625, 0.4638671875, 0.0736083984375, 0.2298583984375, 0.08355712890625, 0.2919921875, 0.1619873046875, 0.1600341796875, 0.0374755859375, 0.202880859375, 0.269775390625, 0.33837890625, 0.179931640625, 0.288330078125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dde34931a83dc852a11cac5f9836a19f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4113e7fbb00d578dc0836a4b07dd2ca0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d911e02c767b5f0b7006e4d420a3a4cf
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8f82d060614b61119c80779b20f44c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42787450551986694, 0.3004800081253052, 0.12544813752174377, 0.44024091958999634, 0.10755270719528198, 0.46004024147987366, 0.45794057846069336, 0.3604251742362976, 0.2668655216693878, 0.2824160158634186, 0.3183165490627289, 0.0891309306025505, 0.3495357930660248, 0.2817324697971344, 0.07222123444080353, 0.3675139844417572], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bd550340beb69fc07f0b6639a1737f6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.046295166015625, 0.279541015625, 0.13330078125, 0.0232696533203125, 0.484619140625, 0.0382080078125, 0.025115966796875, 0.333984375, 0.054290771484375, 0.3232421875, 0.456787109375, 0.35986328125, 0.493896484375, 0.21435546875, 0.44775390625, 0.1566162109375, 0.418212890625, 0.496337890625, 0.29150390625, 0.406005859375, 0.330322265625, 0.464111328125, 0.04400634765625, 0.11846923828125, 0.41796875, 0.240966796875, 0.465576171875, 0.385498046875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73889d0f3e0a33eb45b18a5dc50b5d66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddfeaf26ec19ff9aad1d69dfa711ffca
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8942ef386dd281c98bb255f5fe4901a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07448890805244446, 0.3504820764064789, 0.3442065417766571, 0.2090628445148468, 0.44140297174453735, 0.30820101499557495, 0.3673817813396454, 0.3317652642726898, 0.13304641842842102, 0.24582713842391968, 0.1444728523492813, 0.3731484115123749, 0.05158984288573265, 0.2502354383468628, 0.28078123927116394, 0.2146865874528885, 0.027971064671874046, 0.32712045311927795, 0.23369497060775757, 0.3341354727745056], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b9bfd15b1cf12e74b91c8554f9a2d79a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.156005859375, 0.284423828125, 0.06817626953125, 0.1514892578125, 0.2135009765625, 0.447021484375, 0.05609130859375, 0.275146484375, 0.2587890625, 0.39404296875, 0.1988525390625, 0.037200927734375, 0.326416015625, 0.1290283203125, 0.414794921875, 0.048797607421875, 0.31640625, 0.331298828125, 0.225341796875, 0.2222900390625, 0.42626953125, 0.4169921875, 0.05633544921875, 0.482421875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_956ab191e51b57346b010749d7a525fc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2208251953125, 0.2022705078125, 0.460205078125, 0.0498046875, 0.42529296875, 0.4248046875, 0.348876953125, 0.3388671875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_66f305930ed7184f3a7a550668fb500a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ebf5ed08ed403d758957ac57bcfd37a9
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_267461786cf8aecc8293e471b25704aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08381591737270355, 0.2035885453224182, 0.09589486569166183, 0.20380091667175293, 0.17780017852783203, 0.1902642399072647, 0.3394381105899811, 0.31135475635528564, 0.24822498857975006, 0.28568947315216064, 0.0007836110307835042, 0.19449584186077118, 0.2673911154270172, 0.19774511456489563, 0.4589434564113617, 0.08322642743587494, 0.10069595277309418, 0.3167405426502228, 0.13330483436584473, 0.19588322937488556, 0.274286687374115, 0.3721230924129486, 0.02702895551919937, 0.03668833151459694, 0.14432506263256073], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b38e866fe70f29a1041d1ed48ff4a9d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.013189627788960934, 0.44894954562187195, 0.4715772271156311, 0.09945762157440186, 0.12202993035316467, 0.11248692870140076, 0.14798910915851593, 0.43715900182724, 0.15452618896961212, 0.33764609694480896, 0.00025439116870984435, 0.0879475399851799, 0.1962926983833313, 0.08258136361837387, 0.3772179186344147, 0.16175508499145508], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_413286eb8acc0667a7363e0fb7977144(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3239932656288147, 0.17483152449131012, 0.4512242376804352, 0.3189636766910553, 0.18274784088134766, 0.4847486615180969, 0.03583076223731041, 0.06040554866194725, 0.48948395252227783, 0.014398650266230106, 0.4336416721343994, 0.0478794127702713, 0.365053653717041, 0.3536915183067322, 0.07243369519710541, 0.35853496193885803], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a5c51eedf7bcd10f8a6a15dd60b6262(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4150390625, 0.00792694091796875, 0.148193359375, 0.40625, 0.48779296875, 0.417236328125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e5e5b1918ee707c4673f57db063f009(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4056186079978943, 0.23927821218967438, 0.3341672122478485, 0.2129172682762146, 0.22815987467765808, 0.26707226037979126, 0.03312239795923233, 0.25116369128227234, 0.46686118841171265, 0.20443305373191833, 0.33794185519218445, 0.3226454257965088, 0.1391947865486145, 0.3966268301010132, 0.0962272509932518, 0.37691378593444824], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81860008c923a4e3db6b1dec282f94ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e89e0b23be0066ad80a2c9f88ec72122
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e4dee74942b3047e19581b527d65cdea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_029cf30cfe4bb2a83f4c3681084531de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e4dee74942b3047e19581b527d65cdea
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b6c7aba6b5335f4bd83f94ebbc5e0deb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ef1bf81d605145cefb29bc1cbf1d6ea
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_675ac781163081ac7d1e7785b5b3b457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52e6223eaea5679d50365260f81192ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_675ac781163081ac7d1e7785b5b3b457
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d49b1e4aa3f4d64b22e9790c3f85443(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3525075316429138, 0.025356387719511986, 0.316127747297287, 0.04557487741112709, 0.3294887840747833, 0.29810410737991333, 0.3895878195762634, 0.3562217056751251, 0.0405406579375267, 0.49768543243408203, 0.24614115059375763, 0.326412558555603, 0.1624891310930252, 0.16005530953407288, 0.08318348973989487, 0.3594191372394562], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00f02511ec4c290a2f458e183d862398(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a445fb26eafc8e3816d9c95d235f8cf8
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bc24a2389e0faf3f8ed251f76d897c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.319091796875, 0.0267486572265625, 0.445556640625, 0.37890625, 0.243408203125, 0.39990234375, 0.2294921875, 0.039306640625, 0.03582763671875, 0.4384765625, 0.3193359375, 0.2288818359375, 0.494873046875, 0.0207672119140625, 0.0919189453125, 0.166259765625, 0.409912109375, 0.165283203125, 0.367431640625, 0.343017578125, 0.04364013671875, 0.400146484375, 0.017730712890625, 0.4921875, 0.142578125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f04a19d9475d0ae51b8ae8787a38504a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a97c7aa4b48e57efe4743de78248fa94
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13376dca82200b62886ebdf05a8b6729(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26444074511528015, 0.06949740648269653, 0.4008776545524597, 0.021179594099521637, 0.31482192873954773, 0.01806165836751461], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d926c013b07b0478e863427db4281788(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.007282364182174206, 0.32799381017684937, 0.30758529901504517, 0.06170881539583206, 0.372527152299881, 0.024441471323370934, 0.012017897330224514, 0.16874144971370697, 0.21605736017227173, 0.23687492311000824, 0.13589516282081604, 0.05073205754160881, 0.1396755576133728, 0.15931276977062225, 0.4047311842441559, 0.2850242555141449], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_226e165c49ff13fc6f518c161886d80d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.032012939453125, 0.21826171875, 0.471435546875, 0.2125244140625, 0.271240234375, 0.2958984375, 0.438232421875, 0.2335205078125, 0.27294921875, 0.31884765625, 0.2366943359375, 0.451171875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d88c9941fe82383f90f543c03395d7a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.185978502035141, 0.4861384332180023, 0.41888150572776794, 0.48365578055381775, 0.47427836060523987, 0.018453944474458694, 0.27740180492401123, 0.4997537136077881, 0.44225800037384033, 0.33047226071357727, 0.28326699137687683, 0.1817169487476349], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d8666c28a2c3f52e3ba956d6f812c5f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4867748022079468, 0.021004779264330864, 0.27099815011024475, 0.2553867697715759, 0.41668665409088135, 0.017312433570623398, 0.4741761386394501, 0.2637942135334015, 0.37284061312675476, 0.1542935073375702, 0.11586199700832367, 0.19918446242809296, 0.1223502904176712, 0.2725485861301422, 0.43167006969451904, 0.27441561222076416], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0f6eba51856b927eb4ff4e051b6efba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01231246069073677, 0.10964005440473557, 0.3499341905117035, 0.29972580075263977, 0.34022462368011475, 0.1460406333208084, 0.482201486825943, 0.31589511036872864, 0.4085014760494232, 0.2961105406284332, 0.10942662507295609, 0.3490128815174103, 0.3938077688217163, 0.4348214268684387, 0.02684374526143074, 0.37112751603126526, 0.1307087391614914, 0.07176286727190018, 0.3061084747314453, 0.44498923420906067, 0.20799647271633148, 0.019624702632427216, 0.018875470384955406, 0.11684145033359528], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f0fbb5c864800f5562bee43a3ed183e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.455078125, 0.400634765625, 0.474853515625, 0.09027099609375, 0.035675048828125, 0.405029296875, 0.2176513671875, 0.007122039794921875, 0.0755615234375, 0.4892578125, 0.481689453125, 0.3720703125, 0.3046875, 0.4267578125, 0.2320556640625, 0.066650390625, 0.38232421875, 0.08880615234375, 0.14404296875, 0.392822265625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e944766883120ad853d3fd096d95d587(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e4731d91e3f8a2e9900c7443e2154b70(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e944766883120ad853d3fd096d95d587
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1259765625, 0.4482421875, 0.456298828125, 0.417236328125, 0.0069122314453125, 0.179443359375, 0.15771484375, 0.0070953369140625, 0.08453369140625, 0.328125, 0.49365234375, 0.25341796875, 0.0908203125, 0.048248291015625, 0.302978515625, 0.455078125, 0.15771484375], dtype='float16').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8fbb3f564804e969da86a4841a1300b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e7e1dc6abb86236780ecfb41f906037(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8fbb3f564804e969da86a4841a1300b9
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c188dc9da9038308476cdbe8cf983994(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4441639482975006], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2cd575cff59c5abdddc48813519ba15a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_929e464880853bada3717612d336b864(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2cd575cff59c5abdddc48813519ba15a
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e013344503775f7c23fe4188d0e33db9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e70dd51951f06b7a54630ae5897eeb88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e013344503775f7c23fe4188d0e33db9
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ed935df547cde8d18bac94890a76300(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42626953125, 0.21875, 0.09527587890625, 0.07080078125, 0.060577392578125, 0.2177734375, 0.022125244140625, 0.1923828125, 0.050262451171875, 0.06915283203125, 0.42138671875, 0.44140625, 0.03338623046875, 0.25390625, 0.2021484375, 0.462158203125, 0.3955078125, 0.43701171875, 0.052398681640625, 0.23681640625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bb20ccf67c9eaa37bfaf0897a054323(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05436310917139053, 0.41862228512763977, 0.09242311120033264, 0.30943119525909424, 0.2372601181268692, 0.12757498025894165, 0.06609909236431122, 0.22492080926895142, 0.20284231007099152, 0.42172059416770935, 0.11448235809803009, 0.25329527258872986, 0.3703751862049103, 0.25969424843788147, 0.06488598138093948, 0.0795527994632721, 0.05990084260702133, 0.22181883454322815, 0.17133599519729614], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6213a99911c159307238785fba3d732e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_561e016c24803f84ea14602e5c934a2c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6213a99911c159307238785fba3d732e
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_13a6402fe9abbf5115466a5568661351(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f61f653a0ddb6194a246c21226d2c555(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4077087640762329, 0.030278299003839493, 0.38345324993133545, 0.4185660183429718, 0.13029073178768158, 0.15277419984340668, 0.38923779129981995, 0.26354870200157166, 0.35008350014686584, 0.19030852615833282, 0.46861785650253296, 0.27325284481048584, 0.17286436259746552, 0.42004629969596863, 0.4231778681278229, 0.1989184021949768, 0.01688314415514469, 0.31425753235816956, 0.3139069676399231, 0.3645804524421692, 0.49722957611083984, 0.3114643096923828, 0.1144416481256485, 0.44131138920783997, 0.16949641704559326, 0.0669717788696289, 0.3518614172935486, 0.12154661118984222, 0.3637464940547943, 0.4839630424976349], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b4f4705bd8af85d1a1381a903742ee99(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2814329266548157, 0.3847728371620178, 0.44163230061531067, 0.19595037400722504, 0.49252885580062866, 0.025475965812802315, 0.37888211011886597, 0.33289021253585815, 0.36890625953674316, 0.44456812739372253, 0.26526015996932983, 0.061751335859298706], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd41be7e1e486a1c4f9bde9de88b7969(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.451904296875, 0.225341796875, 0.054443359375, 0.278076171875, 0.2332763671875, 0.382568359375, 0.328125, 0.3671875, 0.176025390625, 0.1748046875, 0.444091796875, 0.400146484375, 0.365234375, 0.32568359375, 0.39501953125, 0.2529296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_66fde8df17055027a31657399c6b94e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87041aec12985f589da822a5eeda0a4b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_66fde8df17055027a31657399c6b94e4
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_031eb6adf6f400f9a56889133e06793a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39324209094047546, 0.46069663763046265, 0.0024599647149443626, 0.09711947292089462, 0.43544483184814453, 0.10433739423751831, 0.45209383964538574, 0.3345288038253784, 0.056665193289518356, 0.4398483633995056, 0.09463201463222504, 0.3988781273365021, 0.1683303564786911, 0.05194944888353348, 0.0012723167892545462, 0.0613856203854084, 0.013921764679253101, 0.3273804485797882, 0.024297015741467476, 0.35747259855270386], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b032458cdf9bbcca5c0e8f32120a0b23(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0777948722243309, 0.15079687535762787, 0.14904214441776276, 0.2812039852142334, 0.4664597511291504, 0.29750972986221313, 0.4647330343723297, 0.3327459692955017, 0.025851577520370483, 0.4814309775829315, 0.2885408401489258, 0.3694315254688263, 0.24743661284446716, 0.07690902054309845, 0.09873068332672119, 0.20861056447029114], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c78b7360e870d235814644d1dd9e1ce5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37039029598236084, 0.3300670087337494, 0.19045406579971313, 0.08190001547336578, 0.3537192940711975, 0.09726567566394806, 0.4819328188896179, 0.2085563987493515], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d69545f3a67249b830c1b6ec210d26f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43310546875, 0.498046875], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19693e09781af24c7904c874f812b038(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4315861761569977, 0.4084034264087677, 0.187907412648201, 0.3332633078098297, 0.45825207233428955, 0.40609997510910034, 0.1739930361509323, 0.35602906346321106, 0.4120011329650879, 0.2031148225069046, 0.42405521869659424, 0.07917042821645737, 0.39606693387031555, 0.36239516735076904, 0.24075673520565033, 0.18144531548023224], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a0077d5c32b4e36850eac0d383185e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1dce7872f4c994ef385ef00d8536881f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a0077d5c32b4e36850eac0d383185e58
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f4285b5c12e897bb44986ddf6ef187a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4819d91984f9cc85f28b8771cb7066bc
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc6950642fd13fe93b6bb97b7ce66826(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4437641501426697, 0.051791101694107056, 0.3039660155773163, 0.3487142324447632, 0.06368257105350494, 0.027258649468421936, 0.33213746547698975, 0.33066388964653015, 0.30892395973205566, 0.009062565863132477, 0.22353115677833557, 0.052306003868579865, 0.2808372676372528, 0.3985302150249481, 0.1214352622628212, 0.3047363758087158, 0.2625107765197754, 0.07632417231798172, 0.40461382269859314, 0.08205342292785645, 0.21826447546482086, 0.009686331264674664, 0.1709139049053192, 0.40959471464157104], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_97dfa73221fcbd36bcc8fb6c96cdc7fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27092698216438293, 0.32156071066856384, 0.128114715218544, 0.2310182750225067, 0.006085789296776056, 0.45556530356407166, 0.12295080721378326, 0.3212980628013611, 0.19197092950344086, 0.1913534253835678, 0.19112814962863922, 0.13366177678108215, 0.018189748749136925, 0.3664841055870056, 0.3369106352329254, 0.4476325213909149], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a0c9f56f0498b8e8ef4b74e8c3542b37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d7b21d401572eac4a8c6f72fd3d06b70
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3afaa0fcca5fd275004c23e82990e078(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4334592819213867, 0.3225476145744324, 0.3476894497871399, 0.028914226219058037, 0.2213485985994339, 0.2679364085197449, 0.23041030764579773, 0.45348644256591797, 0.2739523649215698, 0.01389833353459835, 0.16396300494670868, 0.08418305218219757, 0.020524371415376663, 0.44489526748657227, 0.32678112387657166, 0.4638954997062683, 0.07865135371685028, 0.1976364552974701], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75fcbdc811abdfe6a4bd72db18847b14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ccd36d7d2bfd3f254adeccb1fa58ca6
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6a095e97b5e48131b8482ee0e4f64bdd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2333984375, 0.358642578125, 0.03582763671875, 0.1087646484375, 0.49169921875, 0.36669921875, 0.457763671875, 0.12493896484375, 0.419921875, 0.42431640625, 0.048980712890625, 0.452392578125, 0.06109619140625, 0.3583984375, 0.38720703125, 0.36083984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6632152983516094597914fbd1047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None], dtype='float64'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61858562edc929e9999781fa546daa5d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6632152983516094597914fbd1047e
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19d1b254bf6ce0568694e73e7fe13a04(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.004848857410252094], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a8d993cfe0fe9039a5950b20d7226281(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de2d42daf96c9f3774ccd97da4a8698d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a8d993cfe0fe9039a5950b20d7226281
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fb03cf22ee0fae7e40584a5f3527b3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27615582942962646, 0.4496445059776306], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7c8370721ac337316a0d47f820361254(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3120848834514618, 0.2116757482290268, 0.2734512686729431, 0.22058099508285522, 0.43957048654556274, 0.2918160557746887, 0.09682117402553558, 0.4116306006908417, 0.020029425621032715, 0.4095543324947357, 0.09126174449920654, 0.10894011706113815, 0.04632699117064476, 0.3546677231788635, 0.3865682780742645, 0.18742771446704865], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a8b20a54f128a94b59f5f2303e683ca8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e3ee44f3a438a36d5750f6a5e2adb592
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72ad9fc6908e9747ba21c8d22c0f74d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.403564453125, 0.4951171875, 0.2142333984375, 0.286865234375, 0.447509765625, 0.0008473396301269531, 0.487548828125, 0.350341796875, 0.40283203125, 0.48828125, 0.00904083251953125, 0.07806396484375, 0.1729736328125, 0.3681640625, 0.1373291015625, 0.19677734375, 0.04180908203125, 0.358642578125, 0.49755859375, 0.265625, 0.1553955078125, 0.060882568359375, 0.2430419921875, 0.177734375, 0.351318359375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52f51e21e13f697968dd85e97172f23a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f0874cf81d85d28b952be2932e7836f3
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_171d4f772a40c434f697a3d093d656e7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37939453125, 0.228759765625, 0.09527587890625, 0.3271484375, 0.15869140625, 0.059173583984375, 0.3779296875, 0.07977294921875, 0.192138671875, 0.37353515625, 0.1688232421875, 2.3543834686279297e-05, 0.1641845703125, 0.10345458984375, 0.32666015625, 0.01812744140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62f431fc6dda4541f8db90ce15d9ba45(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1007080078125, 0.33154296875, 0.01322174072265625, 0.07666015625, 0.1533203125, 0.384033203125, 0.437744140625, 0.1324462890625, 0.447998046875, 0.4833984375, 0.432861328125, 0.1861572265625, 0.1806640625, 0.067138671875, 0.2117919921875, 0.293701171875, 0.386474609375, 0.41748046875, 0.36181640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c8496e5c5d7bade5873236de519cedde(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0653076171875, 0.1722412109375, 0.132568359375, 0.034515380859375, 0.08880615234375, 0.3388671875, 0.21044921875, 0.383544921875, 0.2308349609375, 0.271484375, 0.292724609375, 0.252197265625, 0.1759033203125, 0.101318359375, 0.431396484375, 0.3310546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_85d587e3316d19e80627ee23def7bc38(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1292421817779541, 0.29540035128593445, 0.2974443733692169, 0.14791005849838257, 0.32688793540000916, 0.36185309290885925, 0.14330294728279114, 0.29660677909851074, 0.36339473724365234, 0.30020764470100403, 0.3945775628089905, 0.1572084277868271, 0.4433983564376831, 0.2784888446331024, 0.24092747271060944, 0.4542325437068939, 0.21602675318717957, 0.3241960108280182, 0.19123168289661407, 0.44899290800094604, 0.43106529116630554, 0.06243378296494484, 0.18332673609256744, 0.41100966930389404], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1f869f33c020bb8724441576376edb9c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18659338355064392, 0.38672927021980286, 0.13900934159755707, 0.402378648519516, 0.04942438378930092, 0.128657728433609], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_92cf0fef99b650cb5a91b980f8443976(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.166748046875, 0.257568359375, 0.4970703125, 0.485595703125, 0.276123046875, 0.1473388671875, 0.06561279296875, 0.427490234375, 0.319580078125, 0.28369140625, 0.35595703125, 0.240966796875, 0.49462890625, 0.444091796875, 0.272705078125, 0.1622314453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8d3982d08c563e6ce77294ee1e7cf62(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a2ecbb20e621226be8c7bfe545c216cf
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f85f768808e849231866c63423f45009(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.258544921875, 0.425537109375, 0.11212158203125, 0.364990234375, 0.2293701171875, 0.33203125, 0.07037353515625, 0.053466796875, 0.07806396484375, 0.392333984375, 0.326416015625, 0.47314453125, 0.449462890625, 0.1116943359375, 0.0914306640625, 0.1773681640625, 0.057586669921875, 0.33740234375, 0.1331787109375, 0.321533203125, 0.481201171875, 0.0804443359375, 0.05303955078125, 0.2406005859375, 0.134765625, 0.48681640625, 0.40966796875, 0.133056640625, 0.1669921875, 0.1905517578125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89c4eed532dd3ab022c02ad3d92b963f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1443905532360077, 0.28207024931907654, 0.42058035731315613, 0.3953815996646881, 0.39809027314186096, 0.33751168847084045, 0.23720011115074158, 0.023688653483986855, 0.45899519324302673, 0.24492838978767395, 0.13418737053871155, 0.4783785045146942, 0.1932062804698944, 0.4115203619003296, 0.4610873758792877, 0.05837970972061157], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_451c1439fdd8dd5a5a809c4496f9f5b7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10850659012794495, 0.25606733560562134, 0.24737174808979034, 0.22341519594192505, 0.42833054065704346, 0.411776065826416, 0.23713359236717224, 0.4660511016845703], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cb58083d30eba8c2387e3cfb0cb76f26(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13158760964870453, 0.004864430520683527, 0.17243236303329468, 0.11971979588270187, 0.29573071002960205, 0.011756309308111668, 0.31599101424217224, 0.4549099802970886, 0.02441570907831192, 0.19553032517433167, 0.03839237615466118, 0.28362715244293213, 0.279435932636261, 0.13638868927955627, 0.11389747262001038, 0.3072836697101593, 0.29102081060409546, 0.12618951499462128, 0.19548320770263672], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5346be0741969f6fa6753d2a19545f7f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3daba85b0a666479fc9bbcb2fbd7abb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5346be0741969f6fa6753d2a19545f7f
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc1d95d581b93097ebf6dfa5019a4017(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.182373046875, 0.311279296875, 0.28955078125, 0.065185546875, 0.06787109375, 0.1536865234375, 0.32763671875, 0.415283203125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_846b6366d490b01253cf2bd096c2a90d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23670700192451477, 0.22943530976772308, 0.4476568102836609, 0.4642219841480255, 0.024087678641080856, 0.3806372284889221, 0.4620722830295563, 0.23301994800567627, 0.0007497683982364833, 0.4931352436542511, 0.4450569152832031, 0.4036555886268616, 0.3208926320075989, 0.4170912504196167, 0.40217325091362, 0.47269707918167114, 0.02649799734354019, 0.28509050607681274, 0.051325723528862, 0.14149567484855652, 0.4715108573436737, 0.06531073898077011, 0.013505521230399609, 0.06823761016130447], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5efc381a5bf723b0facf0c2e3f389025(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04919996112585068], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_932c68cf1c37a15dff7c115d78370e41(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35824301838874817, 0.4978264570236206, 0.12513695657253265, 0.45033982396125793, 0.39457544684410095, 0.22875669598579407, 0.1309645026922226, 0.15734855830669403, 0.3702566921710968, 0.08635210245847702, 0.34694868326187134, 0.34619614481925964, 0.0672895610332489, 0.4491562843322754, 0.04786551743745804, 0.08018672466278076, 0.4260723888874054, 0.12902773916721344, 0.2383817434310913, 0.3657945990562439, 0.4751417636871338, 0.04996306449174881, 0.014902078546583652, 0.15431617200374603, 0.057159945368766785, 0.14336499571800232, 0.01192440465092659, 0.4413700997829437, 0.17460961639881134, 0.1488478034734726], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_061ea1a545e58f525f09bad4f3abed42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3daf17f1e4c4afe3f506b4996a9edd5d
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58b699ac697a6b34815f34ff1c7807df(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.344482421875, 0.362060546875, 0.378662109375, 0.01611328125, 0.1485595703125, 0.1337890625, 0.036407470703125, 0.2423095703125, 0.048614501953125, 0.0303802490234375, 0.426513671875, 0.2166748046875, 0.370849609375, 0.19970703125, 0.285888671875, 0.293212890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fba68e146819173c75568dbea1901cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2fd5409d207ff46679b694924408e3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3227366805076599, 0.3906424045562744, 0.04912008345127106, 0.08249957114458084, 0.08870695531368256, 0.45419925451278687, 0.4058491587638855, 0.4060819447040558, 0.4072602689266205, 0.09129414707422256, 0.12295470386743546, 0.3631182610988617, 0.1258595734834671, 0.4865286648273468], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_45d0f84e5630d090282ff45b2f982f74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f30f63c78156fe15afdfa251604523(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_45d0f84e5630d090282ff45b2f982f74
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b77ba8257fc2c959becd9615688e8a5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.311279296875, 0.1107177734375, 0.1632080078125, 0.130126953125, 0.091064453125, 0.479736328125, 0.1275634765625, 0.0235595703125, 0.4443359375, 0.326171875, 0.276123046875, 0.28125, 0.2919921875, 0.2060546875, 0.05645751953125, 0.337646484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ef9d03ba740261bac0fbb3ec6c35257(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36008772253990173], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83ade4a9304be412942b6e1280cf2e36(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b723a7a28bfc7fed7de7d6e3ca44d772(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83ade4a9304be412942b6e1280cf2e36
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ada1514f5a864f746830758f1f7711b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.166748046875, 0.394775390625, 0.1864013671875, 0.438232421875, 0.0181732177734375, 0.13818359375, 0.493896484375, 0.2763671875, 0.193603515625, 0.392333984375, 0.306640625, 0.2440185546875, 0.2147216796875, 0.344482421875, 0.1751708984375, 0.2086181640625, 0.421142578125, 0.1068115234375, 0.054351806640625, 0.3388671875, 0.331787109375, 0.2149658203125, 0.29736328125, 0.0703125, 0.1475830078125, 0.220947265625, 0.413330078125, 0.348388671875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e5de91e569044126bfaa286e59a6367(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21072882413864136, 0.32770729064941406, 0.27240189909935, 0.24649974703788757, 0.4765093922615051, 0.12374928593635559, 0.3340839147567749, 0.08631373941898346, 0.37918829917907715, 0.10883933305740356, 0.014030743390321732, 0.18089008331298828, 0.3277382254600525, 0.2826434075832367, 0.06305677443742752, 0.46229124069213867, 0.057275522500276566, 0.1754920333623886, 0.3681131601333618, 0.28362515568733215, 0.08701831102371216, 0.21280784904956818, 0.1541295349597931, 0.44934791326522827, 0.03946886211633682, 0.4536668658256531, 0.12365059554576874, 0.2912982702255249, 0.19178412854671478, 0.050707604736089706], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51a36582f20d2c824477283af6cb8adc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_addeabd1e4d0c22ca60b9c471db87265(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51a36582f20d2c824477283af6cb8adc
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69ed57b33c7e4243081499be4008dff9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4218980073928833], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1003d6dbb6bdb1ce621c2890a07f8163(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.407958984375, 0.04266357421875, 0.058258056640625, 0.1688232421875, 0.462646484375, 0.03375244140625, 0.1334228515625, 0.09393310546875, 0.24072265625, 0.1824951171875, 0.45703125, 0.306884765625, 0.0112457275390625, 0.059356689453125, 0.134033203125, 0.3369140625, 0.3701171875, 0.448974609375, 0.28955078125, 0.447265625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_598f7e82e302f9daad6b7dc523e24be5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.274658203125, 0.394775390625, 0.48486328125, 0.18017578125, 0.17529296875, 0.11700439453125, 0.1033935546875, 0.467041015625, 0.4599609375, 0.494140625, 0.449462890625, 0.336669921875, 0.47265625, 0.331298828125, 0.102294921875, 0.0240631103515625, 0.37060546875, 0.1341552734375, 0.0784912109375, 0.0732421875, 0.45068359375, 0.0916748046875, 0.44970703125, 0.14990234375, 0.22998046875, 0.1478271484375, 0.250244140625, 0.360107421875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1aacc71d75af16ee37e06de72a031108(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19607578217983246, 0.10701487958431244, 0.23179960250854492, 0.4603370130062103, 0.13786198198795319, 0.2629084587097168, 0.05221543461084366, 0.2794826328754425, 0.07496561110019684, 0.4770925045013428, 0.28395673632621765, 0.17635488510131836, 0.4832097589969635, 0.2985627055168152, 0.12335655093193054, 0.06724652647972107, 0.18910683691501617, 0.41411465406417847, 0.1542513221502304, 0.4211708605289459, 0.1647423356771469, 0.28619682788848877, 0.3950602114200592, 0.17649254202842712, 0.1899755895137787], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fda008139cd4efa34e4b5e7a3a72e64e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21521727740764618, 0.048273876309394836, 0.4803882837295532, 0.3387047350406647, 0.2825843393802643, 0.33649182319641113, 0.3181987702846527, 0.37824758887290955, 0.3820567727088928, 0.03054971434175968, 0.45282480120658875, 0.14711244404315948, 0.47379595041275024, 0.03733160346746445, 0.0668751671910286, 0.0071643958799541, 0.4262039065361023, 0.31937235593795776, 0.4933563470840454, 0.14196562767028809, 0.23632711172103882, 0.04692300036549568, 0.37588825821876526, 0.05252894386649132, 0.2074493020772934], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36cd2cf8f086dbf29d4e34fc4946e0ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45323696732521057, 0.23615656793117523, 0.21830080449581146, 0.04337114840745926, 0.06206797435879707, 0.49874550104141235, 0.00977940671145916, 0.18772859871387482], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7f06ae3a7869725db2aa3ea85def5d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.208984375, 0.2413330078125, 0.378173828125, 0.45703125, 0.07659912109375, 0.3349609375, 0.08837890625, 0.2783203125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d9806abc160595409bf07e408d3abff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2784727215766907, 0.33571404218673706, 0.20874443650245667, 0.061745282262563705, 0.04531143978238106, 0.3165943920612335, 0.32740360498428345, 0.1568944901227951, 0.13167184591293335, 0.19492270052433014, 0.06662313640117645, 0.19467343389987946, 0.2985210716724396, 0.24650420248508453, 0.4227793216705322, 0.06990604102611542], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_64634b6dbf4a69fff40807fc96114a3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08148193359375, 0.14306640625, 0.185302734375, 0.49755859375, 0.033416748046875, 0.271240234375, 0.390380859375, 0.293212890625, 0.48046875, 0.32470703125, 0.444580078125, 0.08172607421875, 0.387451171875, 0.482421875, 0.449462890625, 0.04833984375, 0.097412109375, 0.123291015625, 0.4306640625, 0.1591796875, 0.041656494140625, 0.07220458984375, 0.04974365234375, 0.166748046875, 0.1334228515625, 0.045745849609375, 0.38037109375, 0.260986328125, 0.349365234375, 0.06817626953125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8d6e15d25d12723c93d98d8f15cfcea8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1702880859375, 0.12744140625, 0.337890625, 0.09423828125, 0.352783203125, 0.436279296875, 0.1802978515625, 0.496826171875, 0.376953125, 0.3896484375, 0.41748046875, 0.06597900390625, 0.0016145706176757812, 0.347900390625, 0.01171875, 0.08837890625, 0.38427734375, 0.443115234375, 0.303466796875, 0.30126953125, 0.1494140625, 0.34521484375, 0.353271484375, 0.1357421875, 0.3837890625, 0.4404296875, 0.419677734375, 0.362548828125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_956e6a11bf67fbfc16e5621a84aa0182(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf7dfccf29eccab20bc2be300491c3e1
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0047d47e5f8e9adc1e42d4bd90c82c64(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53935b5a94fe99c6810e6788e8ecd619
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3927a6ca4374e03e6193bceaf4fe5b3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.439208984375, 0.376953125, 0.442138671875, 0.1982421875, 0.306884765625, 0.408935546875, 0.2109375, 0.2481689453125, 0.2198486328125, 0.145751953125, 0.0562744140625, 0.454833984375, 0.385498046875, 0.433349609375, 0.392578125, 0.325439453125, 0.374755859375, 0.4580078125, 0.08441162109375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff21f04216eaae7ca4f9832715a51f24(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_58a7c39d6df74aa55259eb0b158c8eb0
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c4283856cd01af85802c3a3b3565b2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.349626749753952, 0.12309320271015167, 0.44366833567619324, 0.16699865460395813, 0.0544806644320488, 0.07331409305334091, 0.3044021427631378, 0.4071429669857025, 0.03934605419635773, 0.4955160617828369, 0.28530171513557434, 0.12118301540613174, 0.137227863073349, 0.2657206654548645, 0.2623327970504761, 0.07425279915332794, 0.2911894917488098, 0.1730727255344391, 0.3036777377128601, 0.03846482187509537, 0.023401420563459396, 0.25212445855140686, 0.026056932285428047, 0.4837060570716858, 0.08390335738658905], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bf0704221805286d51da82ea6044a7ff(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d48ec4098dfa2e3049d3a7aec9c1644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf0704221805286d51da82ea6044a7ff
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91bcaf46228a4776c31c00bb6664a415(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23350492119789124, 0.137669175863266, 0.18320795893669128, 0.22264930605888367, 0.3969826102256775, 0.19634345173835754, 0.4403505027294159, 0.09188330173492432, 0.49840888381004333, 0.21181902289390564, 0.43831637501716614, 0.15322110056877136, 0.45452216267585754, 0.05465150624513626, 0.38757824897766113, 0.13659889996051788], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_17891957112386b62bd55365629fe27e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c97e623509268f91f66b728b4c7ad30d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_17891957112386b62bd55365629fe27e
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95da164521e99966201eecc1066613bb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4439946413040161, 0.0456448569893837, 0.2162300944328308, 0.4172280728816986, 0.25016963481903076, 0.38578617572784424, 0.20988358557224274, 0.30350691080093384, 0.014725204557180405, 0.1838054656982422, 0.45088598132133484, 0.2352747917175293, 0.0022374410182237625, 0.4182588756084442, 0.23659440875053406, 0.14038152992725372, 0.37091103196144104, 0.18695136904716492, 0.23153643310070038, 0.0411449670791626, 0.04737096652388573, 0.012600885704159737, 0.19716161489486694, 0.35817959904670715, 0.015905875712633133], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bffa5d75f72fc212d8f719038501a8d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.258056640625, 0.047393798828125, 0.135498046875, 0.08026123046875, 0.08673095703125, 0.1787109375, 0.305908203125, 0.217041015625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1da4f4e753036a1daf82d22b64334a51(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.345458984375, 0.2183837890625, 0.1397705078125, 0.476318359375, 0.1806640625, 0.31005859375, 0.491943359375, 0.246826171875, 0.484375, 0.23779296875, 0.024688720703125, 0.384521484375, 0.1368408203125, 0.265380859375, 0.376220703125, 0.16748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dfc68ed88e1949d3f6b4e4b489f06020(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.325927734375, 0.15234375, 0.484619140625, 0.2666015625, 0.3173828125, 0.453857421875, 0.401123046875, 0.022308349609375, 0.31982421875, 0.28662109375, 0.1512451171875, 0.2340087890625, 0.482421875, 0.40966796875, 0.257568359375, 0.1527099609375, 0.36865234375, 0.180908203125, 0.093017578125, 0.328125, 0.1942138671875, 0.423583984375, 0.0214996337890625, 0.273681640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_763d8840a34016e01d86be54a0073a63(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27398356795310974, 0.3518955111503601, 0.2626301050186157, 0.07616665214300156, 0.4024274945259094, 0.2658936679363251, 0.28046083450317383, 0.340314120054245, 0.00917826034128666, 0.0028696623630821705, 0.18889647722244263, 0.4768354892730713, 0.3236595392227173, 0.29492464661598206, 0.359581857919693, 0.2915124297142029], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d97ad3531c9fd438d81f60436a7359b2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2018381953239441, 0.13716579973697662, 0.03764430060982704, 0.38414663076400757, 0.1528141349554062, 0.03531742841005325, 0.36531054973602295, 0.23433543741703033, 0.22136519849300385, 0.20216017961502075, 0.14956019818782806, 0.3747914433479309, 0.13757085800170898, 0.16559816896915436, 0.27155801653862, 0.28706660866737366, 0.048292264342308044, 0.09805895388126373, 0.04432808607816696, 0.22150349617004395, 0.08675660938024521, 0.4986693263053894, 0.3740580379962921, 0.02512369304895401], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b3962d035af6853d2e26894524115583(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01670844666659832], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68d8d908c50b752522d09f347f3bfbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1408d95e5ebf41e6a333c3c7e351a483
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42d30cc6ffa78274fc6ca5655525e927(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40702706575393677, 0.02903268113732338, 0.2016904652118683, 0.028461985290050507, 0.29951953887939453, 0.4931461215019226, 0.013538547791540623, 0.05855470523238182, 0.19230535626411438, 0.23849663138389587, 0.4774373173713684, 0.4962987005710602, 0.28730693459510803, 0.11166639626026154, 0.2909291684627533, 0.2712816894054413, 0.3992334008216858, 0.42854753136634827, 0.04091647267341614, 0.3697821795940399], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53564ba522bacb38c544962dfcc6798c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6d1a33e801d0a9f6512aba0db61e931(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53564ba522bacb38c544962dfcc6798c
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a7e9b0cc8ff8dd9e0e5f712b0ad3af3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4995173513889313, 0.08590815216302872, 0.37525099515914917, 0.008356062695384026, 0.1582167148590088, 0.4949248135089874, 0.3120322823524475, 0.2866515815258026, 0.22930462658405304, 0.08314517140388489, 0.15856584906578064, 0.2113020122051239, 0.27808424830436707, 0.43985509872436523, 0.08127132058143616, 0.46350836753845215], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ab73f3c78bea6e31b849105f2a4c1d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3350617289543152, 0.43730708956718445, 0.4338540732860565, 0.17020289599895477, 0.32390427589416504, 0.03317287936806679, 0.46197110414505005, 0.3553280234336853, 0.25695663690567017, 0.10847463458776474, 0.4795367419719696, 0.4939495921134949, 0.4461205303668976, 0.1828923523426056, 0.43571799993515015, 0.21069355309009552, 0.45045799016952515, 0.09642846882343292, 0.26890209317207336, 0.16731999814510345, 0.11680539697408676, 0.1864147186279297, 0.36258798837661743, 0.25761470198631287], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_397e5ae7f96ede8ae2a6400ac9855673(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2136135846376419, 0.10556087642908096, 0.0839155837893486, 0.4428970515727997, 0.1290404051542282, 0.07411988824605942, 0.10925143957138062, 0.47344666719436646, 0.06782221049070358, 0.44748273491859436, 0.36382296681404114, 0.005776361096650362, 0.35384541749954224, 0.49747344851493835, 0.43282410502433777, 0.013360043987631798, 0.1503511667251587, 0.40190693736076355, 0.08337514102458954, 0.25823360681533813, 0.0882505476474762, 0.4781316816806793, 0.4458066523075104, 0.2421126812696457], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_789ba31156b200a518b66ec3ffc17090(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16626931726932526, 0.10510753840208054, 0.47247472405433655, 0.12553434073925018, 0.19958725571632385, 0.3861769735813141, 0.20873694121837616, 0.42229366302490234, 0.4647309482097626, 0.43047034740448, 0.14192785322666168, 0.1646406203508377, 0.39944541454315186, 0.06285671889781952, 0.3652728796005249, 0.03019886277616024, 0.2332223802804947, 0.3938963711261749, 0.39128321409225464, 0.3247261345386505, 0.19918513298034668, 0.10943208634853363, 0.34898385405540466, 0.1337210237979889], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2bd2845671761dcf5153557334a09cd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01565fc97cc7fee808a22a96fc0e62a7
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b500a5464964ebfc40cbdf9a38f7d16b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4492545425891876, 0.18225283920764923, 0.4764709174633026, 0.37315475940704346, 0.3103294372558594, 0.4934350550174713, 0.39515501260757446, 0.023267002776265144, 0.30291593074798584, 0.06513597816228867, 0.166373610496521, 0.4581826329231262, 0.31548261642456055, 0.3191181719303131, 0.16552087664604187, 0.432416707277298, 0.28596076369285583, 0.3157816529273987, 0.17281803488731384, 0.4976722300052643, 0.0861528143286705, 0.4418433904647827, 0.3345571756362915, 0.044201772660017014, 0.2169753909111023, 0.28505074977874756, 0.04047517105937004, 0.4551415741443634], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5ead841357e8ca51f57be566c10861f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4867d2ba1a42406557cea8b81eb4f7da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5ead841357e8ca51f57be566c10861f
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_494827fdb53a40920464fe5e02640f07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3111949563026428, 0.13407142460346222, 0.23052819073200226, 0.25286269187927246], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0e7768e68fc0eac123e4f633bd65fbc4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04968055710196495, 0.10709799081087112, 0.10917261242866516, 0.38140225410461426, 0.31308412551879883, 0.10744120180606842, 0.2193748652935028, 0.23019413650035858, 0.009438463486731052, 0.025476744398474693, 0.250601589679718, 0.07279182225465775, 0.4294925034046173, 0.48431867361068726, 0.35977646708488464, 0.14413510262966156, 0.29759299755096436, 0.4527822434902191, 0.35196995735168457, 0.4746178984642029, 0.25892576575279236, 0.47580263018608093, 0.10768833011388779, 0.2810710072517395], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_818dc80482b3c8f10ee679e64f105b6b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2088623046875, 0.40869140625, 0.38427734375, 0.46240234375, 0.0015726089477539062, 0.337646484375, 0.340576171875, 0.00643157958984375, 0.10833740234375, 0.04150390625, 0.07684326171875, 0.269775390625, 0.07623291015625, 0.10308837890625, 0.266845703125, 0.389892578125, 0.4306640625, 0.453125, 0.2386474609375, 0.360595703125, 0.2440185546875, 0.177490234375, 0.1107177734375, 0.344970703125, 0.1409912109375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d88e0f6fdf4d58481de9bae95f0a1870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.463134765625, 0.300537109375, 0.47705078125, 0.154296875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc3b3a274e8cfb3cc4aee4428f7c5f97(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28076171875, 0.259765625, 0.133056640625, 0.03289794921875, 0.07080078125, 0.234130859375, 0.351318359375, 0.1634521484375, 0.26904296875, 0.0931396484375, 0.138916015625, 0.1654052734375, 0.1922607421875, 0.353759765625, 0.2509765625, 0.313720703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbc4376193b7c9b25d41a1f3045d9ddb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.057952880859375, 0.496337890625, 0.3876953125, 0.08697509765625, 0.3037109375, 0.3505859375, 0.395751953125, 0.028900146484375, 0.403564453125, 0.17724609375, 0.21533203125, 0.2578125, 0.334716796875, 0.4287109375, 0.339111328125, 0.0938720703125, 0.2337646484375, 0.2386474609375, 0.23876953125, 0.467529296875, 0.03546142578125, 0.379638671875, 0.1546630859375, 0.285888671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d766c5dbe0d8b16d899f718c8bc1d426(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16842639446258545, 0.32901033759117126, 0.1401299238204956, 0.18649506568908691, 0.33982735872268677, 0.21859969198703766, 0.3059883415699005, 0.2946043312549591, 0.38769519329071045, 0.05943356081843376, 0.4772965908050537, 0.1080322191119194, 0.31273341178894043, 0.017448369413614273, 0.3280765116214752, 0.31132733821868896, 0.13393400609493256, 0.3131738305091858, 0.3507319986820221, 0.11971811205148697], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61574d457113048d138ce1c1afe25ff0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27978515625, 0.30859375, 0.35498046875, 0.419921875, 0.10235595703125, 0.022003173828125, 0.1805419921875, 0.30126953125, 0.483642578125, 0.340576171875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1f6c555ef65305613fdc8dbb39fc403(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10077788680791855, 0.3313148021697998, 0.42874547839164734, 0.4262281358242035, 0.09295227378606796, 0.046803779900074005, 0.23276874423027039, 0.4478447735309601, 0.45936089754104614, 0.24525126814842224, 0.3143059313297272, 0.1810169219970703, 0.4522085189819336, 0.1549081653356552, 0.27648040652275085, 0.10792437940835953], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_462fba61abb8f82a4246cec12bd0bbb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.062103271484375, 0.02130126953125, 0.268798828125, 0.33056640625, 0.41845703125, 0.00704193115234375, 0.26171875, 0.0643310546875, 0.32666015625, 0.477294921875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fee56cbdca2c2e06c68f5ce2206a6f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15720312297344208, 0.484328031539917, 0.3076353073120117, 0.31833234429359436, 0.0507979616522789, 0.49161097407341003, 0.4601306617259979, 0.17980648577213287, 0.2311210334300995, 0.15041831135749817, 0.4643666744232178, 0.1797327846288681, 0.050918471068143845, 0.051483895629644394, 0.13393710553646088, 0.40713173151016235], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e6523c10e1384e533d9a899db6aa146f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2529296875, 0.2293701171875, 0.214599609375, 0.233154296875, 0.37548828125, 0.2166748046875, 0.356201171875, 0.16796875, 0.3935546875, 0.34765625, 0.318603515625, 0.40673828125, 0.11395263671875, 0.3984375, 0.25390625, 0.358642578125, 0.212890625, 0.4150390625, 0.488525390625, 0.349609375, 0.498779296875, 0.27783203125, 0.19287109375, 0.4140625, 0.032470703125, 0.371826171875, 0.037384033203125, 0.1326904296875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fec036e98cce00e15c6f68fd71bc3385(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4640263319015503, 0.4361037313938141, 0.3823237717151642, 0.21594274044036865, 0.07913217693567276, 0.43336719274520874, 0.12900112569332123, 0.48941290378570557, 0.19323019683361053, 0.28255486488342285, 0.13895870745182037, 0.35310888290405273, 0.32611218094825745, 0.36667853593826294, 0.43810606002807617, 0.05625567212700844], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58c6afd9773fbc4b472a1d44b00ab372(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.371337890625, 0.353515625, 0.45654296875, 0.375244140625, 0.1292724609375, 0.30517578125, 0.2861328125, 0.46875, 0.30078125, 0.194091796875, 0.0030155181884765625, 0.316162109375, 0.01006317138671875, 0.1861572265625, 0.1256103515625, 0.2073974609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4967eee78d8e0e8f83861b5720d3db81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29857e41a9dbbd0565f94f187d6ab7d9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.150390625, 0.4228515625, 0.0880126953125, 0.4482421875, 0.329833984375, 0.375732421875, 0.366943359375, 0.004085540771484375, 0.2447509765625, 0.266357421875, 0.405517578125], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_077ca0db962e7ba80a636fa3a0664d8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.279052734375, 0.02587890625, 0.1785888671875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7603b449ff81ad9e4910e5d6a4d17f78(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45947265625, 0.1953125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ccc32bca7f9304e49d7626693d202143(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9e2bd2f561bd0a6da5c9814f745a3455
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae9afefcd68262c7a65755dbf272feb7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.018218994140625, 0.1121826171875, 0.0360107421875, 0.11785888671875, 0.413818359375, 0.347412109375, 0.322509765625, 0.0931396484375, 0.1156005859375, 0.0303802490234375, 0.42724609375, 0.2109375, 0.401611328125, 0.339599609375, 0.250732421875, 0.0190277099609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c45493c9b3b39a45bcd700c419c29fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.047576904296875, 0.3544921875, 0.48095703125, 0.0178680419921875, 0.383056640625, 0.239501953125, 0.2161865234375, 0.429443359375, 0.10760498046875, 0.2120361328125, 0.402099609375, 0.31640625, 0.02490234375, 0.454833984375, 0.071533203125, 0.482421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ef6eb9ae1e4f6d8f7e8514511af57acb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5f3deecc12455cacd7016a7eff776fc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ef6eb9ae1e4f6d8f7e8514511af57acb
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f7843fd80c97ed083e981c8c17656ada(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4475509226322174, 0.14861147105693817, 0.45555537939071655, 0.24464409053325653, 0.3381383717060089, 0.21763160824775696, 0.3740750551223755, 0.22566963732242584, 0.00794291216880083, 0.4526844024658203, 0.3640343248844147, 0.219601109623909, 0.23941367864608765, 0.11004038900136948, 0.1422126442193985, 0.2535657286643982, 0.4615385830402374, 0.3626229166984558, 0.010676529258489609, 0.41040414571762085], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_69f24bcff300e051624f7e93999e3905(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8d2f9237c82cb1b4938424dfb01e456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_69f24bcff300e051624f7e93999e3905
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45e9f4b65fa3e5a0544030efeb94c0b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38775303959846497, 0.23832924664020538, 0.4428471028804779, 0.15296673774719238, 0.0922059491276741, 0.2245105504989624, 0.08879987895488739, 0.02123451977968216], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e386321ab46864fd7a7e918c5ed23428(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1512451171875, 0.089111328125, 0.38330078125, 0.44189453125, 0.1536865234375, 0.12225341796875, 0.038604736328125, 0.0136871337890625, 0.281982421875, 0.333984375, 0.219482421875, 0.0298004150390625, 0.367919921875, 0.009002685546875, 0.289306640625, 0.27392578125, 0.371826171875, 0.0732421875, 0.1365966796875, 0.173583984375, 0.230712890625, 0.307861328125, 0.0826416015625, 0.3349609375, 0.404052734375, 0.049407958984375, 0.2388916015625, 0.479248046875, 0.1268310546875, 0.1517333984375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_276c6d0dc6b9b05b0d626b3c6da0e091(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0325927734375, 0.08807373046875, 0.384521484375, 0.0281219482421875, 0.011871337890625, 0.254150390625, 0.391357421875, 0.125244140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e43351706ff533d341c8e970dc21ad2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_866f37723b2b9391d3b9bb996994d395(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e43351706ff533d341c8e970dc21ad2
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0700eac203d701461995d025885211bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_443e6825f04920e270d9c0b1f6a31538(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0700eac203d701461995d025885211bf
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87f5b9308516a40dd7544461a59c9610(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b465a0eb367c2f1c0e71e6b04c7766b
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f66c02c34d0a4b3602154b3fe45bee3f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04500638693571091, 0.45336899161338806, 0.20853982865810394, 0.2592999041080475, 0.41868075728416443, 0.05847788229584694, 0.46310144662857056, 0.36129599809646606, 0.40502527356147766, 0.1316889077425003, 0.35096269845962524, 0.37519025802612305, 0.4531368017196655, 0.18732571601867676, 0.3663831949234009, 0.11728351563215256, 0.12320467829704285, 0.02813231572508812, 0.2814176380634308, 0.29348599910736084, 0.4952561557292938, 0.3518025279045105, 0.3582592308521271, 0.0780247300863266, 0.009146248921751976, 0.431018590927124, 0.26806333661079407, 0.39056217670440674], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6bee81de476a4487fb42fea163491400(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ccac1805637a4eb070b3c73cef73435
    def get_inputs(self):
        return [
            paddle.to_tensor([0.412841796875, 0.129638671875, 0.171142578125, 0.0019102096557617188, 0.296142578125, 0.422119140625, 0.40185546875, 0.022552490234375, 0.2357177734375, 0.265625, 0.1904296875, 0.423583984375, 0.33056640625, 0.24267578125, 0.13134765625, 0.397216796875, 0.273193359375, 0.34912109375, 0.0455322265625, 0.30615234375, 0.295166015625, 0.162109375, 0.45751953125, 0.402099609375, 0.4716796875, 0.1297607421875, 0.1966552734375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d1903320a467beba49e98ff80901dee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.414794921875, 0.179931640625, 0.4267578125, 0.061004638671875, 0.330322265625, 0.328369140625, 0.12347412109375, 0.01210784912109375, 0.270263671875, 0.020538330078125, 0.315185546875, 0.1097412109375, 0.26953125, 0.40380859375, 0.085205078125, 0.1295166015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2640ad1255d78888f35725de2811a822(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.196044921875, 0.392822265625, 0.2489013671875, 0.281982421875, 0.2388916015625, 0.2283935546875, 0.357421875, 0.1671142578125, 0.0262298583984375, 0.159423828125, 0.459228515625, 0.06951904296875, 0.28955078125, 0.417724609375, 0.44677734375, 0.416748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2b539a01e820fdba7f281e654d503da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19921875, 0.422119140625, 0.3974609375, 0.39990234375, 0.424560546875, 0.44287109375, 0.454345703125, 0.377685546875, 0.2042236328125, 0.130615234375, 0.459228515625, 0.1409912109375, 0.489013671875, 0.268798828125, 0.3837890625, 0.054962158203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e491fcbe408a62d31a2b239af479a302(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01274871826171875, 0.11590576171875, 0.278564453125, 0.39697265625, 0.38916015625, 0.42919921875, 0.012603759765625, 0.225830078125, 0.2626953125, 0.06317138671875, 0.42333984375, 0.38232421875, 0.093017578125, 0.1212158203125, 0.346923828125, 0.291259765625, 0.1219482421875, 0.1837158203125, 0.1519775390625, 0.1962890625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c65c167d24e83a4e4931e87d8cb1654(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.010833262465894222, 0.04370860010385513, 0.2525560259819031, 0.1384875625371933, 0.3507295548915863, 0.1032349094748497, 0.23377464711666107, 0.3555319011211395, 0.32821449637413025, 0.42277777194976807, 0.3286503553390503, 0.30995485186576843, 0.27838125824928284, 0.12803879380226135, 0.12292268872261047, 0.3585125505924225], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_93afa811994c197405d5b535a411202f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8035e9eb58be42444fdbf9a98bca4ec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03973388671875, 0.416015625, 0.400634765625, 0.438232421875, 0.363037109375, 0.16650390625, 0.1484375, 0.033935546875, 0.380126953125, 0.28515625, 0.490478515625, 0.2181396484375, 0.2244873046875, 0.41748046875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_82dc1dc385614d660b834bec39c2c1ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49755859375, 0.20263671875, 0.1148681640625, 0.06671142578125, 0.492919921875, 0.436279296875, 0.156982421875, 0.058441162109375, 0.33154296875, 0.207763671875, 0.234375, 0.3828125, 0.379638671875, 0.072509765625, 0.034149169921875, 0.263916015625, 0.28173828125, 0.042327880859375, 0.33935546875, 0.486328125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a3470612488a3fb85657eb3cc7bf0fe6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1741943359375, 0.1697998046875, 0.303955078125, 0.260498046875, 0.48193359375, 0.353271484375, 0.0010242462158203125, 0.2225341796875, 0.01032257080078125, 0.15673828125, 0.30517578125, 0.357421875, 0.3330078125, 0.00893402099609375], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34c947ff4000312bdd49c908eb634897(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04610992223024368, 0.033614665269851685, 0.4879123866558075, 0.054698143154382706, 0.4078785479068756, 0.28237900137901306, 0.16927489638328552, 0.08726810663938522, 0.2967455983161926, 0.3193119466304779, 0.2255278378725052, 0.31844282150268555, 0.26683878898620605, 0.2918645143508911, 0.2847483158111572, 0.2623177766799927], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58de4c3e89f9e18e24dbba42b87b91e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11482325941324234, 0.050651855766773224, 0.16561231017112732, 0.2745702564716339, 0.3859924077987671, 0.02579706534743309, 0.2765229344367981, 0.393702894449234, 0.0010149991139769554, 0.44557324051856995, 0.1953551173210144, 0.4494115114212036, 0.1014837771654129, 0.408260315656662, 0.02388191781938076, 0.22618317604064941, 0.12759482860565186, 0.3883602023124695, 0.4463888108730316, 0.09509862959384918, 0.15697215497493744, 0.03258834779262543, 0.3853498101234436, 0.49479421973228455], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8aa4503afb766550e8b25d4049bd8224(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.208984375, 0.173095703125, 0.243408203125, 0.0679931640625, 0.255126953125, 0.427490234375, 0.212890625, 0.340087890625, 0.3203125, 0.2188720703125, 0.1558837890625, 0.326904296875, 0.285888671875, 0.2861328125, 0.056060791015625, 0.27099609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3442070628940174468d589ab0e64bcb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03204345703125, 0.08428955078125, 0.18212890625, 0.043701171875, 0.1317138671875, 0.1285400390625, 0.0821533203125, 0.051055908203125, 0.2467041015625, 0.029266357421875, 0.02874755859375, 0.0645751953125, 0.343017578125, 0.057830810546875, 0.406005859375, 0.4248046875, 0.489990234375, 0.385986328125, 0.31103515625, 0.43359375, 0.1656494140625, 0.414794921875, 0.15087890625, 0.1334228515625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a91a9ae81d170e02ba4d91d38b88ddc0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1541748046875, 0.40087890625, 0.1368408203125, 0.474365234375, 0.26171875, 0.272216796875, 0.0904541015625, 0.1234130859375, 0.32421875, 0.172607421875, 0.275634765625, 0.287841796875, 0.138671875, 0.360595703125, 0.321533203125, 0.052276611328125, 0.386962890625, 0.370361328125], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_896988a099c54763bd385d2ae3a09ee3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4482421875, 0.045867919921875, 0.34765625, 0.35205078125, 0.4208984375, 0.215087890625, 0.48388671875, 0.0225067138671875, 0.453369140625, 0.2744140625, 0.364501953125, 0.2303466796875, 0.037841796875, 0.14892578125, 0.06671142578125, 0.09503173828125, 0.498779296875, 0.296875, 0.317138671875, 0.1947021484375, 0.376220703125, 0.052581787109375, 0.435302734375, 0.30224609375, 0.372802734375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83112dd3a253ea9864691627a69cb68f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2626953125, 0.240478515625, 0.013214111328125, 0.0623779296875, 0.28271484375, 0.043212890625, 0.1812744140625, 0.42626953125, 0.383544921875, 0.357421875, 0.1749267578125, 0.2064208984375, 0.1337890625, 0.44482421875, 0.2144775390625, 0.1497802734375, 0.130859375, 0.10699462890625, 0.2010498046875, 0.0897216796875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ea57545351435e3a7d28770f7d26969(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15437819063663483, 0.3939301371574402, 0.49213162064552307, 0.06055779010057449, 0.4415058493614197, 0.05111313611268997, 0.40950873494148254, 0.048607174307107925, 0.07030276209115982, 0.28657108545303345, 0.45233529806137085, 0.2891625463962555, 0.016158685088157654, 0.296549528837204, 0.01695815846323967, 0.14658519625663757, 0.27471667528152466, 0.17084386944770813, 0.49594172835350037, 0.16645944118499756, 0.3113914430141449, 0.486692875623703, 0.005716230254620314, 0.1446666419506073, 0.06382720917463303], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6a28b7715b9297a7a48254432a233843(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4100847542285919, 0.0026526902802288532, 0.3496270775794983, 0.2686752676963806, 0.1191045418381691, 0.1878172606229782, 0.3527151644229889, 0.016130411997437477, 0.017339175567030907, 0.2167779505252838, 0.3094863295555115, 0.12056680768728256, 0.42763954401016235, 0.10931345075368881, 0.043813567608594894, 0.27756232023239136], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a023170464138ebac4469e52fee75e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07461483031511307, 0.22218193113803864, 0.017556995153427124, 0.32493990659713745, 0.054411593824625015, 0.10512319207191467, 0.12293127924203873, 0.2751806676387787, 0.07489749044179916, 0.2147655189037323, 0.49262189865112305, 0.01640486530959606, 0.41327813267707825, 0.1957605928182602, 0.23078662157058716, 0.15117709338665009], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fbf7b141f052693d61b451323b3dcd57(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05459520220756531, 0.0050529595464468, 0.03824198991060257, 0.12602733075618744, 0.1366257220506668, 0.3658880293369293, 0.41222453117370605, 0.16664855182170868, 0.23440051078796387, 0.17015337944030762, 0.47376909852027893, 0.02431810460984707, 0.48024076223373413, 0.34267428517341614, 0.1774466633796692, 0.10398996621370316], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7c9296fbaadcc696a41f2cb28bc06b75(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
            paddle.static.InputSpec(shape=[None], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_27e5d812dc9c67293ae0f8d68302abd4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7c9296fbaadcc696a41f2cb28bc06b75
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9697677a4eafa688abfb14e6ebef5dfe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4515414834022522, 0.2951059937477112, 0.22613079845905304, 0.10554845631122589, 0.4552172124385834, 0.06098969653248787, 0.3485111594200134, 0.3349703550338745, 0.18643151223659515, 0.24030911922454834, 0.4299953877925873, 0.47919610142707825, 0.06537667661905289, 0.3693789839744568, 0.11031702160835266, 0.04185257479548454, 0.030584650114178658, 0.11480093747377396], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e361355317cc79661641399f11ec696(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48300668597221375, 0.49525967240333557, 0.3078211545944214, 0.029539121314883232, 0.19232484698295593, 0.06503241509199142, 0.34910348057746887, 0.2964183986186981, 0.45333054661750793, 0.00288009294308722, 0.34788984060287476, 0.16586314141750336, 0.49082887172698975, 0.30902010202407837, 0.32042622566223145, 0.29930001497268677, 0.021618347615003586, 0.11456932872533798, 0.3821125030517578, 0.38306257128715515, 0.3048461675643921, 0.20036201179027557, 0.26390379667282104, 0.02734619565308094, 0.15370972454547882, 0.372647762298584, 0.06313510239124298, 0.2348465472459793], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f266536aec900eb0483d6d3419edb59(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0016069412231445312, 0.039581298828125, 0.417236328125, 0.171875, 0.467041015625, 0.037445068359375, 0.3017578125, 0.24609375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34006cc93d5f3f6bb63af4dcf5d987d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_296a6726fcd463fc713c0a6f9459b8ba
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06716042757034302], dtype='float32').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_005707c47dba7217e64969df426e6a3c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.025539707392454147, 0.15876193344593048, 0.4339127242565155], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53c0178e389584d9da7ddfc27d0709ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25524312257766724, 0.16116374731063843, 0.11350709199905396, 0.48152270913124084, 0.4768016040325165, 0.48134753108024597, 0.11648228019475937, 0.20236192643642426, 0.22222769260406494, 0.44156762957572937, 0.4010055959224701, 0.0035455015022307634, 0.2188507467508316, 0.040076907724142075, 0.28638437390327454, 0.1720028966665268], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75673c322b4b394d391bcb5f9fc9ac89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2827039361000061, 0.09310745447874069, 0.42100176215171814, 0.2439761608839035, 0.3987937271595001, 0.4360203146934509, 0.06461724638938904, 0.022213604301214218, 0.3606147766113281, 0.23523882031440735, 0.26935985684394836, 0.2339969426393509, 0.45561572909355164, 0.05154559016227722], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e02e16ee12444cfe63071748d905d213(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.042755126953125, 0.402587890625, 0.128662109375, 0.47998046875, 0.1964111328125, 0.01727294921875, 0.00617218017578125, 0.288330078125, 0.2025146484375, 0.00951385498046875, 0.0219573974609375, 0.264892578125, 0.438720703125, 0.216064453125, 0.09210205078125, 0.09625244140625, 0.46875, 0.1558837890625, 0.3984375, 0.25830078125, 0.490234375, 0.375, 0.472900390625, 0.343994140625, 0.44873046875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_97c8fb42be2ad08f7480323ebe7e2dbf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.256591796875, 0.36865234375, 0.1522216796875, 0.41943359375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_012f19189650dad87be60335a3a8882e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfc158246c15c9c5c8e41b1e27d20f40
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b192e9908d83534b389e686a117366b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.1031494140625, 0.2332763671875, 0.206298828125, 0.27197265625, 0.1279296875, 0.26025390625, 0.1956787109375, 0.40185546875, 0.2314453125, 0.31298828125, 0.01102447509765625, 0.470703125, 0.2012939453125, 0.062103271484375, 0.05145263671875, 0.382568359375, 0.2017822265625, 0.1033935546875, 0.0291290283203125, 0.419189453125, 0.31005859375, 0.33984375, 0.124755859375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_928b97d02f15a0febb5ca07e07aa3b83(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31298828125, 0.334228515625, 0.1519775390625, 0.37109375, 0.07861328125, 0.40185546875, 0.3330078125, 0.276611328125, 0.390380859375, 0.01166534423828125, 0.1646728515625, 0.304443359375, 0.108154296875, 0.049468994140625, 0.2010498046875, 0.02294921875, 0.2283935546875, 0.07623291015625, 0.339111328125, 0.1793212890625, 0.290771484375, 0.24658203125, 0.391357421875, 0.1962890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed037ba3e4760cbf21a9e17ba626cc83(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.043670654296875, 0.190185546875, 0.4599609375, 0.48828125, 0.255859375, 0.389404296875, 0.494140625, 0.44580078125, 0.33935546875, 0.362548828125, 0.11163330078125, 0.36328125, 0.1131591796875, 0.4150390625, 0.35498046875, 0.2734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71a0d717f1e2931e8eab1e0a204e5fbe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4984331727027893, 0.12290620058774948, 0.1177855134010315, 0.30374476313591003, 0.4601786732673645, 0.42964133620262146, 0.1553705781698227, 0.3908553421497345, 0.03383813798427582, 0.020396512001752853], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_020d7b247e0628fd2837c66e664f96be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54a34a9cb23b9de2e8ee998d94f104b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_020d7b247e0628fd2837c66e664f96be
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5461dd40525c41e503848f409e5f1cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4981860816478729, 0.36979538202285767, 0.16839401423931122, 0.49088752269744873, 0.16327016055583954, 0.38753002882003784, 0.488735556602478, 0.4788663983345032, 0.22687485814094543, 0.12008079141378403, 0.09482309967279434, 0.260708212852478, 0.0451606847345829, 0.04953755810856819, 0.08325565606355667, 0.05844924971461296, 0.27533069252967834, 0.05739938095211983, 0.196486234664917, 0.09111441671848297, 0.11734043806791306, 0.2441006302833557, 0.047029197216033936, 0.23344607651233673], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b280c40ef26c2dc305205e203965ec87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c59ffa83fe8e4a6b03e9dbbdeca75b4
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b260bf979929c5e0c1e6b7afd926b06a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17529296875, 0.33056640625, 0.125244140625, 0.039154052734375, 0.027435302734375, 0.4169921875, 0.1390380859375, 0.03558349609375, 0.463134765625, 0.037078857421875, 0.49072265625, 0.1641845703125, 0.31884765625, 0.279052734375, 0.288818359375, 0.46630859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39901a0d8b17b6429b4a8c2ddff78586(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40807968378067017, 0.003697648411616683, 0.4960094690322876, 0.2118896245956421, 0.46068882942199707, 0.4769827425479889], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_19ffa6060b3fe43bffc1bccecbdbdc01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3e3bf1911aecc5ee97c0889125ce769c
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e518cc436f4a23d3f3aaf9a536ee94cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41160255670547485, 0.18868540227413177, 0.20919594168663025, 0.034152839332818985, 0.2743588387966156, 0.08735733479261398, 0.39252138137817383, 0.10983427613973618, 0.4378513693809509, 0.12596482038497925, 0.1059042289853096, 0.15913397073745728, 0.33988693356513977, 0.07317008823156357, 0.38338741660118103, 0.10368868708610535, 0.12237421423196793, 0.4194718897342682, 0.4529085159301758, 0.06519794464111328, 0.48107197880744934, 0.24272283911705017, 0.0759514570236206, 0.16870783269405365], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7391675cfa50157f3bcaf231d3ee1bfe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2888963520526886, 0.23640626668930054, 0.16708078980445862, 0.49072739481925964, 0.3472626507282257, 0.3785771131515503, 0.16580206155776978, 0.2764646112918854, 0.08603810518980026, 0.4584783911705017, 0.4929220974445343, 0.18982692062854767, 0.2344115823507309, 0.4491366446018219, 0.329652339220047, 0.05514753609895706, 0.3117515444755554, 0.040043383836746216, 0.060389891266822815, 0.1742098331451416], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed80f1a8154726dedfd575d3495bcc00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3822598457336426, 0.23850490152835846, 0.011778200045228004, 0.05785755440592766, 0.27013665437698364, 0.47606128454208374, 0.4194249212741852, 0.0510203093290329, 0.13522134721279144, 0.21947823464870453, 0.2721214294433594, 0.28527188301086426, 0.4690231382846832, 0.41241809725761414, 0.31676626205444336, 0.3327076733112335, 0.3679405748844147, 0.2653482258319855, 0.2176898717880249, 0.24358081817626953], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b859927b31cb02314545c050df9c81c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8f890d8f3eca720bc39107044d8ecf00
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0be5aa33c0d047598db85be4da246193(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.366173654794693, 0.41095584630966187, 0.4262462556362152, 0.1438690423965454, 0.3642902672290802, 0.25847965478897095, 0.38296636939048767, 0.333723247051239, 0.3899328112602234, 0.20680005848407745, 0.38138577342033386, 0.38330787420272827, 0.43708059191703796, 0.06434024125337601], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_658d5fc6dd2ee2b851c9792194803914(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07ca3489ca1b2728667c846695c1d1a5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_658d5fc6dd2ee2b851c9792194803914
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_003ea3c5466608e094cbc368765927fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1712646484375, 0.308837890625, 0.451171875, 0.021026611328125, 0.048187255859375, 0.29150390625, 0.20703125, 0.11297607421875, 0.3037109375, 0.158203125, 0.07049560546875, 0.361083984375, 0.498046875, 0.345703125, 0.476806640625, 0.467529296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cc808f079bfc65d31f0c8a0415a83d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.325439453125, 0.38037109375, 0.333984375, 0.3642578125, 0.458251953125, 0.28662109375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71e6cf95f67bac8b8e02a8bc1d5e4b0d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3321860134601593, 0.07230065762996674, 0.23288212716579437, 0.036210797727108, 0.05145813152194023, 0.0014886804856359959, 0.3112884759902954, 0.3985934257507324, 0.32807815074920654, 0.3294103443622589, 0.30834394693374634, 0.20128875970840454, 0.06796851009130478, 0.2496422827243805, 0.2820616066455841, 0.13967576622962952, 0.3168518543243408, 0.07640381157398224, 0.26477813720703125, 0.29087963700294495, 0.236050546169281, 0.48731017112731934, 0.40924644470214844, 0.0849803015589714], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_103811544fadc2e04033f3f48b32a8c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2991655170917511, 0.32745376229286194, 0.39339327812194824, 0.4262450933456421, 0.47525468468666077, 0.12239953130483627], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd2362a871f61510d17f36642e2b75e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4860215187072754, 0.19621947407722473, 0.003407440148293972, 0.49306735396385193, 0.0629291981458664, 0.1446533501148224, 0.16274502873420715, 0.3632383942604065, 0.04764346778392792, 0.043523725122213364], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13e277f93b5f9547b264c2844a27b32c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03533935546875, 0.255859375, 0.04541015625, 0.4833984375, 0.07696533203125, 0.074951171875, 0.32421875, 0.44091796875, 0.47607421875, 0.4892578125, 0.259765625, 0.2374267578125, 0.414794921875, 0.447021484375, 0.1962890625, 0.057220458984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f4fff77041c6a7fcb96154c846c61605(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1952660083770752], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e386e9dff95effc77a104c30fdf36ef6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2108154296875, 0.487060546875, 0.1533203125, 0.317626953125, 0.4619140625, 0.059173583984375, 0.172607421875, 0.2413330078125, 0.187255859375, 0.345947265625, 0.374755859375, 0.39794921875, 0.1412353515625, 0.1287841796875, 0.406494140625, 0.386474609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3c632958ffed66ed7a872f79811d14a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19586974382400513, 0.29113003611564636, 0.1722937822341919, 0.3909839987754822, 0.2985207736492157, 0.0813755914568901, 0.34531399607658386, 0.31980985403060913], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e3173fc39dfca792e36cc5b01d3a3f93(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.479736328125, 0.1881103515625, 0.03704833984375, 0.405029296875, 0.1910400390625, 0.148681640625, 0.491455078125, 0.12335205078125, 0.273193359375, 0.42236328125, 0.186279296875, 0.294189453125, 0.387451171875, 0.074462890625, 0.1771240234375, 0.426513671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21fd7d614bbc4a833f71214891470364(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26394370198249817], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c45638301a94c7de5636e67946d53e7c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ae83da67cf7bf19af200be4e7d32e35(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c45638301a94c7de5636e67946d53e7c
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eff3a43989d6319e96dba0557b403ffd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1342964917421341, 0.37979021668434143, 0.23251521587371826, 0.3390282094478607, 0.1049843281507492, 0.31654658913612366, 0.36645883321762085, 0.27894142270088196, 0.08610132336616516, 0.05556832626461983, 0.42468568682670593, 0.4790683090686798, 0.18750016391277313, 0.4497629404067993, 0.10598848015069962, 0.43285492062568665, 0.3077908456325531, 0.08989544957876205, 0.3248269259929657, 0.4868243336677551, 0.30610498785972595, 0.46719494462013245, 0.2225741446018219, 0.42060574889183044, 0.18984825909137726, 0.12369072437286377, 0.26226744055747986, 0.0965171754360199, 0.06604090332984924, 0.14494533836841583], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa64e4a1a76e7bf09c630e1283c5d610(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02596975676715374, 0.06567396223545074, 0.4338372051715851, 0.3542535901069641, 0.0942763090133667, 0.34899577498435974, 0.28291985392570496, 0.40341681241989136, 0.30715468525886536, 0.1679488718509674, 0.47327300906181335, 0.08948874473571777, 0.4326556324958801, 0.16781632602214813, 0.1849031299352646, 0.3754350543022156, 0.09064552187919617, 0.07872678339481354, 0.4762146472930908, 0.093681700527668, 0.15968799591064453, 0.31442558765411377, 0.36627644300460815, 0.45430123805999756, 0.4247727394104004, 0.19935105741024017, 0.43765875697135925, 0.35280901193618774, 0.4475608766078949, 0.47326213121414185], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78592e8ffafc624a8525332c0b300e4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d48d50520936e5613dbfcc6cc7f16d7d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78592e8ffafc624a8525332c0b300e4b
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6e39c017f1bc62cfc2bd0fefc59f5263(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28369140625, 0.10504150390625, 0.341796875, 0.06689453125, 0.2003173828125, 0.2193603515625, 0.480224609375, 0.290283203125, 0.317138671875, 0.189208984375, 0.188232421875, 0.06689453125, 0.222412109375, 0.2325439453125, 0.431884765625, 0.037994384765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c7b47c44437cb7319f96277ecfb3b68b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.376953125, 0.1893310546875, 0.2276611328125, 0.232177734375, 0.454833984375, 0.472412109375, 0.053863525390625, 0.4794921875, 0.37353515625, 0.488525390625, 0.1617431640625, 0.485595703125, 0.416259765625, 0.10223388671875, 0.0214385986328125, 0.41650390625, 0.4765625, 0.09893798828125, 0.467529296875, 0.473388671875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39d034ee1c9102b923e43dd7e39c2983(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08c031bfdc4c0d22ab303b19c3b17524
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ff9fa83c3bd9b32ca13a249288881e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37404125928878784, 0.14029169082641602, 0.18770663440227509, 0.08821602910757065, 0.3216068148612976, 0.07255217432975769, 0.06401525437831879, 0.45921972393989563, 0.1192849725484848, 0.36813586950302124, 0.3798208236694336, 0.33749493956565857, 0.11738570779561996, 0.49788081645965576, 0.4712342321872711, 0.23054206371307373, 0.06255124509334564, 0.3064593970775604, 0.14108602702617645, 0.08832202106714249, 0.32570862770080566, 0.1033015251159668, 0.019524144008755684, 0.4596898555755615, 0.33400440216064453, 0.23303531110286713, 0.11582830548286438, 0.37168896198272705], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_611ad246e79225024b9ccab8cc30a458(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46421700716018677, 0.1186988353729248, 0.47928839921951294], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38b09de3ab78231dc2c93d9a49e91c09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2eed9ba677b2f6915ca6b9ee341fbb7d
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2c7aa1f7679e8b471a7f37b557cc48e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.093994140625, 0.401123046875, 0.295166015625, 0.10498046875, 0.208740234375, 0.28076171875, 0.1923828125, 0.42919921875, 0.450439453125, 0.287353515625, 0.010345458984375, 0.3564453125, 0.16455078125, 0.1446533203125, 0.0465087890625, 0.140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a0231374685825eaaba6f245fca07e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.258056640625, 0.1195068359375, 0.368896484375, 0.206787109375, 0.32373046875, 0.12384033203125, 0.315673828125, 0.408935546875, 0.282470703125, 0.1795654296875, 0.1285400390625, 0.1864013671875, 0.47265625, 0.09912109375, 0.377685546875, 0.345458984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f68052952a611e99ca683b7fc1fbe587(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ce3eb99027f96cd72b475aa037fe6e12
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36f0c943386837b485ad588dd1a8ea00(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.169921875, 0.3125, 0.169921875, 0.2015380859375, 0.295166015625, 0.395263671875, 0.05609130859375, 0.343505859375, 0.150390625, 0.48388671875, 0.2392578125, 0.14306640625, 0.33447265625, 0.439208984375, 0.2474365234375, 0.463623046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e481be3839c69a66297add976314c8a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43051016330718994, 0.09250113368034363, 0.3062034547328949, 0.053071364760398865, 0.4302600622177124, 0.33610016107559204, 0.35577887296676636, 0.2398597151041031, 0.24321366846561432, 0.10999759286642075, 0.35338735580444336, 0.21873939037322998, 0.39852073788642883, 0.32677820324897766, 0.4242386519908905, 0.18966999650001526], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1025953e9368efe421efe150b3544a0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08445482701063156, 0.15130241215229034, 0.38093581795692444, 0.4712432324886322, 0.2949954867362976, 0.33694228529930115, 0.3983725309371948, 0.18592794239521027, 0.20455224812030792, 0.3121640682220459], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a5c73696313a58bef0bc4b67dc42a09b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05950927734375, 0.0002620220184326172, 0.468994140625, 0.33349609375, 0.1514892578125, 0.49462890625, 0.43896484375, 0.09906005859375, 0.360595703125, 0.006832122802734375, 0.27197265625, 0.461669921875, 0.365234375, 0.4951171875, 0.034942626953125, 0.23095703125, 0.2435302734375, 0.44287109375, 0.088623046875, 0.2254638671875, 0.13134765625, 0.154541015625, 0.28369140625, 0.304931640625, 0.165283203125, 0.285888671875, 0.2490234375, 0.42919921875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfbc786bb0fb5729bb10e531b01a5dba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2644968628883362, 0.2582935094833374, 0.3061598241329193, 0.09280376881361008, 0.35174086689949036, 0.28388625383377075, 0.4104284942150116, 0.14128108322620392, 0.2682090699672699, 0.3807123303413391, 0.2511208951473236, 0.1622089445590973, 0.11085188388824463, 0.04097210615873337, 0.4579932391643524, 0.4716559946537018, 0.171672061085701, 0.2816564738750458, 0.11512601375579834], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d4875917902a77867301ee2d7d200e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26001524925231934, 0.31900110840797424, 0.41747021675109863, 0.33629682660102844, 0.13773582875728607, 0.49214085936546326, 0.17069809138774872, 0.2989502549171448, 0.08835500478744507, 0.18949899077415466, 0.4075441062450409, 0.2045947015285492, 0.24880751967430115, 0.17246198654174805, 0.3049999475479126, 0.43194958567619324], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c789c65473dae7567c7bbbae7b44ed06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9c120de5dd674b40917a1c6fa5a18012
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9d4a87704479351b9508daa83c4ff17(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2907898426055908, 0.28687360882759094, 0.2678211033344269, 0.22865141928195953, 0.31246593594551086, 0.04308965057134628, 0.37370920181274414, 0.4148435592651367, 0.03677377104759216, 0.17029310762882233, 0.08473778516054153, 0.2871255576610565, 0.29274705052375793, 0.4573240578174591, 0.024653062224388123, 0.2878033220767975, 0.16993215680122375, 0.48934245109558105, 0.1626395583152771, 0.30466893315315247, 0.4784393012523651, 0.2704809904098511, 0.29503360390663147, 0.09147217869758606], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_665b9a995a5c187216e7541f0f5aafd2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2581578493118286, 0.4069618284702301, 0.3577655553817749, 0.027774767950177193, 0.2608072757720947, 0.11846662312746048], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_807ce4140e22b9a03a79449423521512(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09094324707984924, 0.37069544196128845, 0.285530149936676, 0.3729270100593567, 0.15090212225914001, 0.24695034325122833, 0.29620611667633057, 0.4346746802330017, 0.13139352202415466, 0.2140757292509079, 0.12470591068267822, 0.06371964514255524, 0.44273698329925537, 0.09546156227588654, 0.039502788335084915, 0.49189603328704834, 0.3931814730167389, 0.27451953291893005, 0.021158793941140175, 0.005048288963735104, 0.16757114231586456, 0.3291144073009491, 0.022245589643716812, 0.3974687457084656], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7872bb5d5bd139750fed1830f3f860f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5b6afc615714600f1a8f151a4ff3948f
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6844079073b7d7cd4decc53f9405fde4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3014868497848511, 0.10195162892341614, 0.32108157873153687, 0.3639165759086609, 0.2305137664079666, 0.25021761655807495], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_06aeab4b354d02c1bb03dc08e8034a13(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34814453125, 0.3583984375, 0.484375], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2064803adc884f60fd063ebd28653858(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14099828898906708, 0.14884373545646667, 0.3730734884738922, 0.2855542302131653, 0.2772567570209503, 0.06792563945055008], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10d4af4ec529d780e75aaa13d977067e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10968017578125, 0.1932373046875, 0.418701171875, 0.489013671875, 0.385009765625, 0.167724609375, 0.0816650390625, 0.192626953125, 0.39892578125, 0.017425537109375, 0.449462890625, 0.483642578125, 0.30908203125, 0.437744140625, 0.458740234375, 0.4990234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7c799526ffe398cb0148ebb84076066f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_32e4f5b70a67c7ddfdbe0746eea0ba22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7c799526ffe398cb0148ebb84076066f
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d740493d18489abb9b7e717dcc04a429(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4672566056251526, 0.1955115646123886, 0.2048926204442978, 0.04685205966234207, 0.13911093771457672, 0.013031226582825184, 0.41277360916137695, 0.4458710551261902], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c88eb4048931fb3eae72187d68ba484a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4230532944202423, 0.11403891444206238, 0.41427719593048096, 0.3514882028102875, 0.45127424597740173, 0.48764657974243164, 0.32225286960601807, 0.47277259826660156, 0.03163620084524155, 0.08795836567878723, 0.3512660264968872, 0.35713550448417664, 0.2724481225013733, 0.027525220066308975, 0.22310619056224823, 0.08739892393350601, 0.4819950759410858, 0.1875266134738922, 0.3860885500907898, 0.138950377702713, 0.4902603328227997, 0.14579929411411285, 0.3197440803050995, 0.029966387897729874, 0.0027583218179643154, 0.262982040643692, 0.23516781628131866, 0.3693026304244995, 0.38513627648353577, 0.3305981457233429], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89211b51623c1afda6df2b98beb7026a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4042978286743164, 0.27739831805229187, 0.1779942363500595, 0.39333757758140564, 0.19231083989143372, 0.45884039998054504, 0.12751422822475433, 0.3371831178665161, 0.1375877410173416, 0.4729136824607849, 0.47165513038635254, 0.3940558433532715, 0.3070954978466034, 0.13317643105983734, 0.44817614555358887, 0.025057073682546616], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6d6fbb5095df2b8e4bd8bb3c8d2ec0e2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61d37ed2584d74e6259927213baeb5ee
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22917838394641876, 0.19841855764389038, 0.25614917278289795], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bf9bb8a1c2e3d0279662ffe13de45b27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26318359375, 0.260986328125, 0.39697265625, 0.033355712890625, 0.11065673828125, 0.2386474609375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1deb81891649e2b8d1fc7ad5553446d8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0491006076335907, 0.02594643458724022, 0.2602977156639099, 0.3834911584854126, 0.10967905074357986, 0.11517275869846344, 0.13603909313678741, 0.09567701071500778, 0.01129639521241188, 0.016771677881479263, 0.13592202961444855, 0.042968884110450745, 0.41325247287750244, 0.2473873794078827, 0.025752272456884384, 0.3369235098361969, 0.40211760997772217, 0.2554355561733246, 0.17068877816200256, 0.2403976172208786, 0.03899746015667915, 0.4700515866279602, 0.36935868859291077, 0.22472666203975677], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c315152c0811fd55d29e4c20c84622f4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04019169881939888, 0.23456011712551117, 0.3255489766597748, 0.028488188982009888, 0.04860835149884224, 0.04652759060263634, 0.33119696378707886, 0.02399793080985546, 0.24850738048553467, 0.1063927710056305, 0.16071464121341705, 0.4188442826271057, 0.4135349690914154, 0.29886579513549805, 0.26943445205688477, 0.43852704763412476], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78be90690f4d0d6865975a13e19b042a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_710cba486e25da70c9376ba50fa4e9bf
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73c75bd0c8789d17ee77104ed212d41f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34114423394203186, 0.49436408281326294, 0.17771218717098236, 0.03148385509848595, 0.14674261212348938, 0.11578193306922913, 0.13492034375667572, 0.30281689763069153, 0.39292633533477783, 0.3889903128147125, 0.06857460737228394, 0.3903404176235199, 0.3954383432865143, 0.23469342291355133, 0.03978581726551056, 0.3573482036590576], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b0531980b7f2a44fd37edc3a6f3232eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e03eacf7d516976ffe4ff4719ca42a07
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2f356402f04d3e9d34a0dd2f890e4d6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a4585bb1cd557e7c0e59ad4f290b731
    def get_inputs(self):
        return [
            paddle.to_tensor([0.111328125, 0.047210693359375, 0.005859375, 0.234130859375, 0.25341796875, 0.25048828125, 0.01531219482421875], dtype='float16').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cfa7d0a930a96a795dddc4b53bf763c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c68055d6cc3d65dbce7561aa0e86a974
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_986e6baa848d2c75ea089102e8497d84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_104f4bfe7eacd7010083733b0824b859(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_986e6baa848d2c75ea089102e8497d84
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe2d2e7571fae3898f67ee89fdc62c68(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14497661590576172, 0.33067095279693604, 0.3627813160419464, 0.1457638442516327, 0.36213430762290955, 0.3665009140968323], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c20070dcdcbc5a976d851e99a2ea4efc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2568359375, 0.190673828125, 0.30615234375, 0.283447265625, 0.40380859375, 0.11724853515625, 0.43896484375, 0.0255126953125, 0.40869140625, 0.22216796875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_20e494a7865d305624e63c2dfd0a9766(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39794921875, 0.345947265625, 0.384765625, 0.0599365234375, 0.03070068359375, 0.48095703125, 0.08294677734375, 0.1947021484375, 0.0849609375, 0.11737060546875, 0.233154296875, 0.10809326171875, 0.34912109375, 0.06951904296875, 0.336669921875, 0.2020263671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_986f2ef7ea50546075ae7ea1d4e0e4c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25497233867645264, 0.053748760372400284, 0.020324215292930603, 0.1237228661775589, 0.47372758388519287, 0.2663513123989105], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93621e7576abf8c63df57f9e38b7d2d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36089715361595154, 0.23206928372383118, 0.3884216547012329, 0.4573812186717987, 0.25854170322418213, 0.3286946415901184, 0.3049786388874054, 0.1971065104007721, 0.361317902803421, 0.48959243297576904, 0.3253251910209656, 0.1849585771560669, 0.2711620330810547, 0.38393914699554443, 0.10313867032527924, 0.11444845050573349, 0.45783090591430664, 0.3838466703891754, 0.20134809613227844, 0.2754078209400177], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab92ba270100f625e64a660ea8eae72e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd1df9ff6539d495984fda2360e0d729(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab92ba270100f625e64a660ea8eae72e
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2c11f347654121d6936dc449fc5175bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a7fcdc4d8c28e638b61f5bc62ea9040b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2c11f347654121d6936dc449fc5175bf
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d3d25914804b3e80ce958cd92df52d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab17dfe844c3e0f7ec345d7c88612e76
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7af21199bc35c12eb4303edfb0aca265(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06695556640625, 0.142578125, 0.22216796875, 0.2236328125, 0.0134735107421875, 0.2113037109375, 0.02484130859375, 0.13818359375, 0.22216796875, 0.1436767578125, 0.38720703125, 0.10479736328125, 0.40625, 0.439208984375, 0.312255859375, 0.10272216796875, 0.04644775390625, 0.465576171875, 0.26025390625, 0.1693115234375, 0.2381591796875, 0.142333984375, 0.416259765625, 0.45654296875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77421e5b79ae3499ec2925c6be9d1453(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32936689257621765, 0.3389880955219269, 0.07858779281377792, 0.09803839772939682, 0.19272121787071228, 0.02585768885910511, 0.22554783523082733, 0.48210400342941284, 0.14417478442192078, 0.07004570960998535, 0.3364701569080353, 0.3429379165172577, 0.47157177329063416, 0.10269730538129807, 0.4365145266056061, 0.30048829317092896, 0.014389611780643463, 0.48761674761772156, 0.1450350135564804, 0.1764823943376541, 0.19303354620933533, 0.4516178369522095, 0.3321157693862915, 0.4327006936073303], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e4178c16e07f783abf19cc6c0c9b11e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1489ad40ac05a6c1d4c61edc40b1e02
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14920663833618164, 0.18331599235534668, 0.22129300236701965, 0.40550750494003296, 0.46513479948043823, 0.12591958045959473, 0.0767025277018547, 0.44629013538360596, 0.2767253816127777, 0.07790996879339218, 0.3587455749511719], dtype='float32').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ed553a43dca9b0acae895ac890bddd3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.065673828125, 0.2265625, 0.0030517578125, 0.2310791015625, 0.2398681640625, 0.275390625, 0.1048583984375, 0.1724853515625, 0.0169525146484375, 0.318359375], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_477bb9cb8283369a4fcd3b03f876fa13(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4658203125, 0.222900390625, 0.2359619140625, 0.0297088623046875, 0.27001953125, 0.00710296630859375, 0.4970703125, 0.2188720703125, 0.1165771484375, 0.09063720703125, 0.470947265625, 0.08856201171875, 0.047088623046875, 0.32666015625, 0.3818359375, 0.486572265625, 0.0845947265625, 0.362060546875, 0.2490234375, 0.19970703125, 0.261474609375, 0.4736328125, 0.1700439453125, 0.0882568359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1c21cef5f7817accb5a3ddc114dfcf1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32668179273605347, 0.4950109124183655, 0.08899939805269241, 0.2928124666213989, 0.284118115901947, 0.09040567278862, 0.02227100543677807, 0.4485892057418823, 0.36574795842170715, 0.16877195239067078, 0.46241387724876404, 0.2869957387447357, 0.14824362099170685, 0.2006044089794159], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9121c865154be801aa9dd383dfa838f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2939453125, 0.326171875, 0.345703125, 0.427001953125, 0.249755859375, 0.07940673828125, 0.484375, 0.2052001953125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f080f2a318bccb4bb20ebd3fad5620a8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3702813982963562], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d858415399d7413702bef3f6caa8c40e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1184605062007904, 0.25100642442703247, 0.3185548782348633, 0.029219012707471848, 0.19397792220115662, 0.35698947310447693, 0.4111611843109131, 0.49603646993637085, 0.1849580705165863, 0.14147290587425232, 0.4324955642223358, 0.29397544264793396, 0.03277534618973732, 0.3273244798183441, 0.23990054428577423, 0.40838998556137085], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b45871fb3acd85df104e492a9d6ac1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1280517578125, 0.478759765625, 0.429931640625, 0.45458984375, 0.412353515625, 0.002765655517578125, 0.458740234375, 0.135986328125, 0.026336669921875, 0.4228515625, 0.482421875, 0.416748046875, 0.2335205078125, 0.38720703125, 0.0458984375, 0.041839599609375, 0.01183319091796875, 0.048095703125], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ae17223cb752624fa426322194a630f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33316197991371155, 0.0030818763189017773, 0.47130173444747925, 0.4429004490375519, 0.3625473380088806, 0.3124789297580719, 0.3652721643447876, 0.1869165003299713, 0.07802527397871017, 0.028288669884204865, 0.09469959884881973, 0.2158058136701584, 0.22145532071590424, 0.48267507553100586, 0.26514703035354614, 0.2284197360277176, 0.09384220838546753, 0.4836146831512451, 0.25042590498924255, 0.36127161979675293, 0.24218586087226868, 0.38266831636428833, 0.08378151059150696, 0.07441259920597076, 0.18617773056030273, 0.41041499376296997, 0.48308005928993225], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88cbbac48ac231ea2ae3456aace115f2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.415283203125, 0.25732421875, 0.06890869140625, 0.01025390625, 0.480224609375, 0.40283203125, 0.1290283203125, 0.40869140625, 0.311767578125, 0.1741943359375, 0.2379150390625, 0.4697265625, 0.049407958984375, 0.1829833984375, 0.365966796875, 0.156982421875, 0.1669921875, 0.4033203125, 0.391845703125, 0.388671875, 0.470703125, 0.23046875, 0.472900390625, 0.22900390625, 0.49169921875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3ca2c1da8fe8783888a7cf2f4e2d7fc2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12511694431304932, 0.44329994916915894, 0.035996753722429276, 0.0757298693060875, 0.23717522621154785, 0.19388477504253387, 0.4036697447299957, 0.17655324935913086, 0.2374378740787506, 0.22117286920547485], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a40553fe1d88acc4da0ee73f37aebfc4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.018320733681321144, 0.47382256388664246], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76ee9b0ba883cc122bd8dcdbde424c48(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37601757049560547, 0.08260108530521393, 0.09998404234647751, 0.11392155289649963, 0.006016625557094812, 0.23400090634822845, 0.2661876678466797, 0.4106420576572418, 0.09018658101558685, 0.2875753343105316, 0.2893626093864441, 0.06793799996376038, 0.2320224642753601, 0.45950525999069214, 0.4458945691585541, 0.22790765762329102], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3482d6d4610750ef13b6d9093ce94a18(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09237464517354965, 0.08830692619085312, 0.36166802048683167, 0.1443430781364441, 0.19312429428100586, 0.02840954065322876, 0.3731042742729187, 0.14653418958187103], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d4a369349bf80e7c8c9c02c842306ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18212890625, 0.477294921875, 0.155517578125, 0.339599609375, 0.01375579833984375, 0.401123046875, 0.044921875, 0.2132568359375, 0.287841796875, 0.2135009765625, 0.388427734375, 0.1492919921875, 0.1922607421875, 0.1077880859375, 0.49365234375, 0.177734375, 0.211669921875, 0.370849609375, 0.313232421875, 0.427978515625, 0.07257080078125, 0.336669921875, 0.10504150390625, 0.2666015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c825f1519e03e216b58cd2442558b34(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.009326638653874397, 0.49991366267204285, 0.01319793425500393, 0.09760336577892303, 0.0526558980345726, 0.4987621605396271, 0.168419748544693, 0.45120754837989807, 0.4955347180366516, 0.47640931606292725, 0.0007466782699339092, 0.035890594124794006, 0.12207528948783875, 0.0059192911721765995, 0.02042592130601406, 0.26609545946121216], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_50637c8a6a363ad4eb9e07712fa9aa58(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15283203125, 0.255126953125, 0.228759765625, 0.18701171875, 0.2568359375, 0.363037109375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da58eb76587389c6748041db8adf0fc2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29833984375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_350d688e4c2db5dcaa5e030b66909457(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_55303686d08886bb356b7d14832db8fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_350d688e4c2db5dcaa5e030b66909457
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84489b57b4723c57e7c804773b692a73(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1251220703125, 0.2333984375, 0.04986572265625, 0.4287109375, 0.41650390625, 0.296875, 0.09521484375, 0.301025390625, 0.256103515625, 0.0875244140625, 0.2364501953125, 0.26953125, 0.427490234375, 0.05181884765625, 0.1156005859375, 0.04608154296875, 0.0426025390625, 0.359619140625, 0.287841796875, 0.1041259765625, 0.186767578125, 0.0587158203125, 0.448974609375, 0.08038330078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09d87652e40b1705c7570f0144a567cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4931640625, 0.056915283203125, 0.42626953125, 0.2225341796875, 0.451171875, 0.2451171875, 0.06610107421875, 0.0172882080078125, 0.195068359375, 0.041900634765625, 0.310791015625, 0.2177734375, 0.311767578125, 0.32666015625, 0.302001953125, 0.08331298828125, 0.47314453125, 0.0086212158203125, 0.48583984375, 0.3974609375, 0.415283203125, 0.465576171875, 0.47607421875, 0.4931640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e205f3e1d5fe6bd428f13b002902b4ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.482421875, 0.2232666015625, 0.477294921875, 0.479248046875, 0.07025146484375, 0.380615234375, 0.046142578125, 0.28466796875, 0.25390625, 0.2347412109375, 0.227783203125, 0.453369140625, 0.21923828125, 0.453857421875, 0.062286376953125, 0.458984375, 0.0244140625, 0.34619140625, 0.02020263671875, 0.31298828125, 0.263916015625, 0.207275390625, 0.279541015625, 0.18896484375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_73348ee52662eb3cd42534d1697d67e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9ffa77c135abef5e7697d1b9cec7b2d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_73348ee52662eb3cd42534d1697d67e4
    def get_inputs(self):
        return [
            paddle.to_tensor([0.316446453332901, 0.44502687454223633, 0.23694217205047607, 0.47485366463661194, 0.3953251540660858, 0.37000179290771484, 0.431232750415802], dtype='float32').reshape([7]),
            paddle.to_tensor([1, 7, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_82478623b385c85d4dd88394efc464b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.457275390625, 0.333740234375, 0.313720703125, 0.1981201171875, 0.29052734375, 0.243896484375, 0.2283935546875, 0.2012939453125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a49fa40a3a8a50c8253199be8fcf18e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a325fa4d8d22a2183674446f6fc7eab
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_708de7d39b54c42a7d5bd43645032dd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e967b3d1020b15afcfdff371ba3af2f5
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b244f224831be39f7f5ebdd4f0902afd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0094146728515625, 0.06878662109375, 0.039886474609375, 0.025146484375, 0.0273895263671875, 0.007205963134765625, 0.41015625, 0.2288818359375, 0.2235107421875, 0.17041015625, 0.378173828125, 0.04083251953125, 0.2047119140625, 0.1529541015625, 0.49560546875, 0.1451416015625, 0.349609375, 0.0013895034790039062, 0.382568359375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df1034ffe38f8123da1106377b1d9271(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32952362298965454, 0.3148702383041382, 0.24335668981075287, 0.3474328815937042, 0.4920688569545746, 0.20213289558887482, 0.11540534347295761, 0.3262653648853302, 0.21441049873828888, 0.17579123377799988], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab3fff3dcd304a3e38bd922503910ffb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.020642191171646118, 0.4947812855243683, 0.08333177119493484, 0.34472402930259705, 0.2864239811897278, 0.22602710127830505, 0.06745350360870361, 0.4002435505390167], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36edfd567487cc01e5b8b7c64ce6d5f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.184391051530838, 0.061272889375686646, 0.12281560897827148, 0.35219311714172363, 0.2381143420934677, 0.4448433518409729, 0.43662410974502563, 0.1918477714061737, 0.40338748693466187, 0.32862308621406555, 0.29520314931869507, 0.4474436342716217, 0.139650359749794, 0.2285994440317154, 0.4586067795753479, 0.3821488618850708], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_91b19ff2cee2f257b62224dcbcf78ef9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47216796875, 0.3095703125, 0.366455078125, 0.0011224746704101562, 0.1318359375, 0.3173828125, 0.139892578125, 0.194580078125, 0.48291015625, 0.298828125, 0.03570556640625, 0.442138671875, 0.4833984375, 0.3408203125, 0.0197906494140625, 0.307373046875, 0.06304931640625, 0.1661376953125, 0.2890625, 0.10302734375, 0.329345703125, 0.483154296875, 0.34130859375, 0.28955078125, 0.0004870891571044922, 0.15283203125, 0.00994110107421875, 0.374755859375, 0.366943359375, 0.34423828125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_80055ed427c94ec7c4ad6280209bbb1d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3681640625, 0.353515625, 0.46142578125, 0.186279296875, 0.0274658203125, 0.4970703125, 0.3642578125, 0.11273193359375, 0.34521484375, 0.328125, 0.088134765625, 0.07830810546875, 0.0038700103759765625, 0.457763671875, 0.39501953125, 0.265869140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee20432f3e80bbbf8a074c9f1de00250(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28466796875, 0.1881103515625, 0.462646484375, 0.09942626953125, 0.2354736328125, 0.383544921875, 0.02716064453125, 0.1907958984375, 0.26318359375, 0.2841796875, 0.35302734375, 0.1258544921875, 0.287841796875, 0.1488037109375, 0.1185302734375, 0.09307861328125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f200a53625d754733141c12dacbb308f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_81f7c26aa1c46854adebfcf26e2bb1ec
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41942262649536133, 0.08163216710090637], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9be8976739941b7633a8e6234d2a4dac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.156494140625, 0.0545654296875], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3eba3600fdbd72670b7ae3f8724707de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21466760337352753, 0.3225524127483368, 0.4383443593978882, 0.4553377628326416, 0.196415513753891, 0.16210094094276428, 0.2300279438495636, 0.2715175151824951, 0.18985824286937714, 0.08347231894731522, 0.19701766967773438, 0.18675966560840607, 0.4812271296977997, 0.020942101255059242, 0.26062875986099243, 0.2169821560382843, 0.37377068400382996, 0.33652356266975403, 0.44655948877334595, 0.48447948694229126, 0.25854435563087463, 0.31035375595092773, 0.30652132630348206, 0.31154030561447144, 0.16738566756248474, 0.07366074621677399, 0.1206422820687294, 0.020388726145029068, 0.3916878402233124, 0.34751108288764954], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_209c863241f452420c5bf224538cd9f0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_13a6402fe9abbf5115466a5568661351
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04897184297442436, 0.4110373854637146, 0.08712556213140488, 0.151009202003479, 0.2632744014263153, 0.38941532373428345, 0.27687472105026245, 0.2054377645254135, 0.433574914932251, 0.1327568143606186, 0.4193238914012909, 0.2557225823402405, 0.16931428015232086, 0.20238171517848969, 0.4832780957221985, 0.2535259425640106, 0.14904801547527313, 0.2538166344165802, 0.20356708765029907, 0.18276803195476532, 0.22989612817764282, 0.34596166014671326, 0.2647203505039215, 0.02955055795609951, 0.4407508671283722, 0.320474773645401, 0.24254687130451202, 0.3664565086364746, 0.21181118488311768, 0.22324207425117493], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_575c4bd56366a136c04a6af69a25e408(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45654296875, 0.2447509765625, 0.0247955322265625, 0.2305908203125, 0.006580352783203125, 0.1861572265625, 0.172119140625, 0.0670166015625, 0.4970703125, 0.056365966796875, 0.237060546875, 0.197265625, 0.4345703125, 0.1575927734375, 0.2286376953125, 0.18798828125, 0.3359375, 0.1932373046875, 0.1431884765625, 0.038726806640625, 0.032623291015625, 0.391357421875, 0.293212890625, 0.2308349609375, 0.459716796875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2b5e1fd0bc7da3057e934ab98a7dab1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.376953125, 0.49072265625, 0.295166015625, 0.43603515625, 0.21240234375, 0.017791748046875, 0.4384765625, 0.378662109375, 0.365966796875, 0.2022705078125, 0.09014892578125, 0.32177734375], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2c4a9a5fde2d51c170295b49adb0ed15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_48cd549c925e17ddbd8d9b724fc18c74
    def get_inputs(self):
        return [
            paddle.uniform([504], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 504, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_262ab900b246ef8dc7a232e1e0d93330(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10905934125185013, 0.05492310971021652, 0.3529885709285736, 0.056788064539432526, 0.4584392011165619, 0.0820750892162323, 0.3232748508453369, 0.2644471526145935, 0.4642476737499237, 0.024882853031158447], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a14e1f98657e5574d8bd9a7d324838b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c010305ea63a171fd0b31e5594bfaa3d
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30263761c985ac0d32a1ba995b1114af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.383056640625, 0.09442138671875, 0.2354736328125, 0.0288848876953125, 0.03631591796875, 0.4072265625, 0.103515625, 0.25048828125, 0.3291015625, 0.08428955078125, 0.365966796875, 0.153076171875, 0.06414794921875, 0.261962890625, 0.096435546875, 0.1485595703125, 0.2470703125, 0.0275421142578125, 0.4609375, 0.2568359375, 0.1468505859375, 0.046661376953125, 0.323974609375, 0.33251953125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b504ff3f2846cf692b27eab3633b9b32(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39386749267578125], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_315897f3abc863dae318231732cff9a2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2166748046875, 0.448974609375, 0.12249755859375, 0.099365234375, 0.11920166015625, 0.49853515625, 0.464111328125, 0.00576019287109375, 0.142822265625, 0.3955078125, 0.3779296875, 0.499755859375, 0.46875, 0.286865234375, 0.382080078125, 0.10931396484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da9a4186ede271585486a52c94c36488(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31120729446411133, 0.478329598903656, 0.1984085738658905, 0.00911771785467863, 0.06907019764184952, 0.44363924860954285], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7babd274dd25de677ec54842e246fba7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4712301790714264, 0.49837395548820496, 0.15392954647541046, 0.005020628683269024, 0.371571809053421, 0.4120885729789734, 0.14031380414962769, 0.1144443079829216, 0.2765560746192932, 0.32036110758781433, 0.3281739056110382, 0.0319843515753746, 0.02037118189036846, 0.3615238666534424, 0.2888815104961395, 0.24233697354793549, 0.2184535562992096, 0.2675899267196655, 0.028462205082178116, 0.4796053469181061], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_155d45be7d739b92669051e3dd663444(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10749238729476929, 0.46106255054473877, 0.4124862849712372, 0.22312241792678833, 0.036786943674087524, 0.32433727383613586, 0.04932130500674248, 0.392854243516922, 0.04036745801568031, 0.49267104268074036, 0.30662524700164795, 0.10691997408866882, 0.11355721205472946, 0.14453944563865662, 0.3645327389240265, 0.4661325216293335, 0.3824217915534973, 0.1537473499774933, 0.37931981682777405, 0.3786858916282654, 0.051693376153707504, 0.058966074138879776, 0.3839714825153351, 0.04809553548693657, 0.3385644853115082], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab4acc24041bb16eda93ccfa84c029ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4717463552951813, 0.12032477557659149, 0.0004698112024925649, 0.11521561443805695, 0.26966699957847595, 0.030316846445202827, 0.4226014316082001, 0.13830745220184326, 0.2555183172225952, 0.0186732430011034, 0.30248022079467773, 0.05363927781581879, 0.2750329375267029, 0.08021610230207443, 0.4664633572101593, 0.002397512784227729], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25fd803954876a54f3a6bc6d33b9df86(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12646484375, 0.148681640625, 0.078857421875, 0.126220703125, 0.435302734375, 0.1939697265625, 0.052276611328125, 0.43212890625, 0.21142578125, 0.359130859375, 0.270263671875, 0.34912109375], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f7570c1bb36aba87a434f0635cea69d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.276611328125, 0.28466796875, 0.028228759765625, 0.0306549072265625, 0.4677734375, 0.138916015625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f193c0a5f3078025ce7b2074baa3a8cc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10955942422151566, 0.32316675782203674, 0.40608006715774536, 0.0552448108792305, 0.3807793855667114, 0.1288631111383438, 0.04042504355311394, 0.3949253559112549, 0.3061181306838989, 0.42042362689971924, 0.2059866487979889, 0.2825857698917389, 0.28183674812316895, 0.04413874074816704, 0.14130134880542755, 0.03490171208977699, 0.36220797896385193, 0.04809301719069481, 0.4206814169883728, 0.12382273375988007, 0.32493117451667786, 0.39275431632995605, 0.05080700293183327, 0.49196934700012207], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_845aca33ec36c18bb6732c2827f7a316(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3843262791633606, 0.37661978602409363, 0.22100605070590973, 0.025102317333221436, 0.4772328734397888, 0.4218147099018097], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ea9dd4aed0d4b19daf543494636b776(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07830810546875, 0.01537322998046875, 0.022613525390625, 0.255859375, 0.3720703125, 0.0198822021484375, 0.077392578125, 0.309326171875, 0.2939453125, 0.357177734375, 0.40087890625, 0.286376953125, 0.314208984375, 0.44384765625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f3a57ba4ec59618e00ae0e1c6ac57efe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0204376932233572, 0.0323338620364666, 0.07166671007871628, 0.12272921204566956], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb3f9f3cfe4e59e3b02bca1e2294f662(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16333837807178497, 0.05650578439235687, 0.32544833421707153, 0.43573811650276184, 0.025379467755556107, 0.3111278712749481, 0.3043232262134552, 0.09857937693595886, 0.1540784388780594, 0.3638123869895935, 0.1108023077249527, 0.43539735674858093, 0.4333573877811432, 0.2938336730003357, 0.37827441096305847, 0.05052550137042999, 0.23839478194713593, 0.14061084389686584, 0.01970985345542431, 0.14087077975273132, 0.11331421881914139, 0.2095424085855484, 0.10331740975379944, 0.43679115176200867], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5df25aa30e6ef055bfb63bbbeeddf9ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29638671875, 0.341064453125, 0.423583984375, 0.326904296875, 0.07763671875, 0.3408203125, 0.1868896484375, 0.0479736328125, 0.11358642578125, 0.037200927734375, 0.460693359375, 0.1982421875, 0.06817626953125, 0.244140625, 0.40283203125, 0.330810546875, 0.1304931640625, 0.475341796875, 0.42333984375, 0.271728515625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e90efd793f8e8f786856bcc4aae7e80e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0168304443359375, 0.150634765625, 0.3515625, 0.1806640625, 0.1600341796875, 0.25439453125, 0.26171875, 0.37158203125, 0.40234375, 0.0321044921875, 0.41796875, 0.0218658447265625, 0.4052734375, 0.1517333984375, 0.49609375, 0.086181640625, 0.43310546875, 0.344482421875, 0.4423828125, 0.412841796875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f5f11929c19986f5c2e936c5370c088(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27490234375, 0.1680908203125, 0.13623046875, 0.3798828125, 0.4091796875, 0.365234375, 0.1768798828125, 0.460693359375, 0.415771484375, 0.065673828125, 0.2421875, 0.06646728515625, 0.2100830078125, 0.27685546875, 0.30029296875, 0.2274169921875, 0.383056640625, 0.482666015625, 0.268798828125, 0.307861328125, 0.039337158203125, 0.2568359375, 0.48046875, 0.413330078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dfadb443e62f102304ad3e18dc68f726(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.269287109375, 0.2939453125, 0.08636474609375, 0.46875, 0.2188720703125, 0.2479248046875, 0.045867919921875, 0.1307373046875, 0.27734375, 0.1429443359375, 0.33349609375, 0.28173828125, 0.27734375, 0.2059326171875, 0.054901123046875, 0.3232421875, 0.032012939453125, 0.320556640625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24a0416c7d8df35e4192b4f161e978c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4248046875, 0.298095703125, 0.46728515625, 0.393798828125, 0.264404296875, 0.4560546875, 0.200927734375, 0.2098388671875, 0.34033203125, 0.388671875, 0.271728515625, 0.484130859375, 0.420654296875, 0.025054931640625, 0.419677734375, 0.2484130859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_07a1d9dafd10ed3731dd6ce8ed4addeb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06689453125, 0.154296875, 0.226318359375, 0.038970947265625, 0.28076171875, 0.233642578125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec7db6711389070692719950225497f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.025390625, 0.450439453125, 0.198974609375, 0.1624755859375, 0.212890625, 0.433837890625, 0.492431640625, 0.229248046875, 0.3349609375, 0.398681640625, 0.349853515625, 0.289794921875, 0.376953125, 0.259765625, 0.32666015625, 0.0552978515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d7f0269c3394d0055878cc764b4d2282(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0210723876953125, 0.25927734375, 0.418701171875, 0.28369140625, 0.418212890625, 0.12060546875, 0.490966796875, 0.359619140625, 0.339599609375, 0.32470703125, 0.357421875, 0.36279296875, 0.0169219970703125, 0.241455078125, 0.4560546875, 0.03271484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef5c833ae9f1e9ce4104a88e73629a2a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.377197265625, 0.0849609375, 0.214599609375, 0.2034912109375, 0.1571044921875, 0.347412109375, 0.19482421875, 0.34521484375, 0.1641845703125, 0.1866455078125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_067cad2cc557d137932e69220dc5a827(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_788ca5cc83a525cb07506d03d208961d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_067cad2cc557d137932e69220dc5a827
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06031513959169388, 0.02125594951212406, 0.42279917001724243, 0.2765023112297058, 0.016395920887589455, 0.26062020659446716, 0.2762754559516907, 0.09731771796941757, 0.3076263964176178, 0.47265031933784485, 0.14776243269443512, 0.31678733229637146, 0.14127685129642487, 0.09308063238859177, 0.2989286482334137, 0.4056053161621094, 0.42969077825546265], dtype='float32').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_936634538d648a95577c546a75d7955d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0f22705f7a99e3560d92b3ac25b9c026
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2957603335380554, 0.37701675295829773, 0.4374884068965912, 0.3218545615673065, 0.25256234407424927, 0.12322930246591568, 0.33452075719833374, 0.07991699129343033], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46f292cf49b71d336786a99de3eb6eb3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2002800554037094, 0.07307000458240509, 0.05689344182610512, 0.38055527210235596, 0.47681504487991333, 0.035212449729442596, 0.11275791376829147, 0.31206461787223816, 0.3401212990283966, 0.39798399806022644, 0.043966904282569885, 0.0022649762686342, 0.13459008932113647, 0.23768500983715057, 0.4584232568740845, 0.04041426256299019, 0.4681978225708008, 0.3698512315750122, 0.39196640253067017, 0.44255730509757996, 0.04984695464372635, 0.17221595346927643, 0.27587780356407166, 0.12445783615112305, 0.33716145157814026, 0.3939802646636963, 0.3198447525501251], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1130b6bca5c09fadff2632209ff03852(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01600603014230728, 0.39518994092941284, 0.41279923915863037, 0.39265677332878113, 0.4703611135482788, 0.3310905694961548, 0.3173846900463104, 0.18129026889801025, 0.4822605848312378, 0.048619695007801056, 0.013119597919285297, 0.24435628950595856, 0.44871756434440613, 0.024630114436149597, 0.018717804923653603, 0.20939309895038605], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec1f4f85f9d6d0be741bb7698efc923a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_807873d0f506ad298b71c19f07581295
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04473876953125, 0.31689453125, 0.20068359375, 0.0582275390625], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_307abfb526388c69ea629b37336dcf28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_29bd309af88ee37825f6ccd9a9d14e29
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1c7f1e6911e6d283e828cdf4797a98b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15079420804977417, 0.08235612511634827, 0.12644174695014954, 0.14891375601291656, 0.2633305490016937, 0.153241828083992, 0.16543695330619812, 0.07532041519880295, 0.3519841432571411, 0.17647391557693481, 0.1968385875225067, 0.33501169085502625, 0.2458166778087616, 0.4976131319999695, 0.036304082721471786, 0.2647953927516937, 0.3099781274795532, 0.3136996030807495, 0.1250353902578354, 0.44237643480300903, 0.0975228026509285, 0.22537772357463837, 0.02532806806266308, 0.3213350176811218, 0.4191790223121643], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0fe029cddcf74d9f79bf5b68bf771d05(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.059478759765625, 0.232177734375, 0.190185546875, 0.148193359375, 0.1256103515625, 0.419921875, 0.2235107421875, 0.383056640625, 0.228515625, 0.490478515625, 0.1751708984375, 0.044891357421875, 0.444091796875, 0.1517333984375, 0.470703125, 0.1405029296875, 0.384765625, 0.005687713623046875, 0.3203125, 0.363525390625, 0.397216796875, 0.392333984375, 0.326416015625, 0.1141357421875, 0.28271484375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de27446f4dafc78868307534a044b769(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23367145657539368, 0.2657872438430786, 0.3805924355983734, 0.18786932528018951, 0.06627979129552841, 0.11135400086641312, 0.046035900712013245, 0.19229209423065186, 0.3560803234577179, 0.4355556070804596], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd913236ee224210befed3a419fc36f9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11944580078125, 0.427001953125, 0.362060546875, 0.25830078125, 0.41455078125, 0.023529052734375, 0.444091796875, 0.34814453125, 0.1976318359375, 0.37548828125, 0.1956787109375, 0.0023632049560546875, 0.34716796875, 0.314208984375, 0.423095703125, 0.1990966796875, 0.16748046875, 0.330078125, 0.136962890625, 0.494384765625, 0.0955810546875, 0.261962890625, 0.0706787109375, 0.29052734375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_53736879c88e2100fb705e29b9c3fd52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e5517fd2ef87341634c6e8797dec0ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_53736879c88e2100fb705e29b9c3fd52
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d72cebee37f46c4018df33ffdce98a3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.347412109375, 0.220458984375, 0.140869140625, 0.4833984375, 0.1724853515625, 0.454833984375, 0.3271484375, 0.417236328125, 0.16796875, 0.432861328125, 0.1429443359375, 0.301025390625, 0.260498046875, 0.3564453125, 0.36376953125, 0.4404296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2182d5d9adba58e8fa3ee045b0cc47dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3251686096191406, 0.4866979122161865, 0.01926010102033615, 0.16125881671905518, 0.3001192510128021, 0.32506686449050903, 0.30944111943244934, 0.10474631935358047, 0.24687373638153076, 0.047193244099617004, 0.10012631118297577, 0.4664052724838257, 0.01845167949795723, 0.0934879407286644], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95e2506e63f49b6d4eec79019b1775c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12149688601493835, 0.036133259534835815, 0.45381686091423035, 0.03938356414437294], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fcfcbd4fd84ad8efebbebdb23f89ca23(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17431640625, 0.09490966796875, 0.1448974609375, 0.05169677734375, 0.254150390625, 0.340576171875, 0.226806640625, 0.363525390625, 0.41943359375, 0.0271148681640625], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_25f849b03cbc2ce50ff8c7bb95edb8c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1eeb0d87565710ccfef0291c7b29d48c
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05749218165874481, 0.4158543050289154, 0.3495539128780365, 0.12422379851341248], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_47a51844d0f54511d5ab47a362d7a961(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.164794921875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39203c12ef0b57dd3fff69991dded576(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cb80da65230d4bf3db2a2d974357d4e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1414794921875, 0.353271484375, 0.008453369140625, 0.261474609375, 0.446044921875, 0.40087890625, 0.413330078125, 0.430908203125, 0.0306243896484375, 0.0780029296875, 0.36279296875, 0.320556640625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f90d481d6ce45c5ea747bca4c2fc791(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.304931640625, 0.20166015625, 0.1705322265625, 0.222900390625, 0.2484130859375, 0.26806640625, 0.251708984375, 0.1168212890625, 0.09844970703125, 0.206298828125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_999124407b0259c2f914b3e36ca2da28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02927805855870247, 0.3005523383617401, 0.3847048282623291, 0.14713235199451447, 0.1613071709871292, 0.053822003304958344], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d7be14b02cada308046c790fcaaecac2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12310791015625, 0.0046844482421875, 0.39013671875, 0.2489013671875, 0.1138916015625, 0.34716796875, 0.273681640625, 0.42626953125, 0.16796875, 0.12408447265625, 0.36474609375, 0.0831298828125, 0.12445068359375, 0.03558349609375, 0.2391357421875, 0.3125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a6002eebe0224d6b9e0fa7c16edaecb2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.355712890625, 0.07672119140625, 0.161865234375, 0.40771484375, 0.295166015625, 0.044708251953125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9194c3227790c890b183ad59e358a89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2243541032075882, 0.31061750650405884, 0.3044310212135315, 0.4853728413581848, 0.14171284437179565, 0.11948361247777939, 0.2525973320007324, 0.2992488741874695, 0.22293798625469208, 0.41232579946517944, 0.49171215295791626, 0.255411833524704, 0.19351187348365784, 0.07245709747076035, 0.48178622126579285, 0.39661648869514465], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_773b387124d3a67eeb79f0295d1fc2c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.145751953125, 0.09344482421875, 0.049163818359375, 0.334716796875, 0.30712890625, 0.2413330078125, 0.487548828125, 0.334228515625, 0.03662109375, 0.061126708984375, 0.31884765625, 0.404052734375, 0.2093505859375, 0.314697265625, 0.0164794921875, 0.340576171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_044b430a3824f3e6286db64e13750537(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_702b811ba27e7472fdcbb23ff2946810(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_044b430a3824f3e6286db64e13750537
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0b3230111d3aee57d79788d57cb99159(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ab43d7e073db67176a4fe7cd500fa8f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0b3230111d3aee57d79788d57cb99159
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_30fdfa17e31482d7a33229bb85aaaca2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08953857421875, 0.48046875, 0.26171875, 0.05731201171875, 0.4287109375, 0.3349609375, 0.29638671875, 0.2171630859375, 0.146240234375, 0.0131683349609375, 0.409423828125, 0.00525665283203125, 0.07550048828125, 0.203857421875, 0.12164306640625, 0.17578125, 0.053955078125, 0.372802734375, 0.1630859375, 0.383056640625, 0.32470703125, 0.003662109375, 0.360595703125, 0.29248046875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c24a057d27a74b8d50f42f8895083e5e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4423828125, 0.456298828125, 0.2239990234375, 0.2568359375, 0.48095703125, 0.10870361328125, 0.36279296875, 0.2021484375, 0.356689453125, 0.467529296875, 0.311279296875, 0.2239990234375, 0.1298828125, 0.433349609375, 0.492919921875, 0.1162109375, 0.452880859375, 0.3623046875, 0.0223388671875, 0.422119140625, 0.0112762451171875, 0.2220458984375, 0.469970703125, 0.11712646484375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9af21e3920cc6432caddf5240055ceb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1676025390625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6aaf7d68f9dd12343dc86ebfeb044328(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.031762443482875824, 0.434054434299469, 0.19780978560447693, 0.040602054446935654, 0.25049442052841187, 0.3288693130016327, 0.06622425466775894, 0.029092714190483093, 0.4524334967136383, 0.14539605379104614, 0.21996834874153137, 0.1637151539325714, 0.4062097668647766, 0.18786202371120453, 0.48659616708755493, 0.4941270649433136, 0.47276169061660767, 0.3160490393638611, 0.4177537262439728, 0.014380947686731815, 0.08355545252561569, 0.39133602380752563, 0.24778708815574646, 0.28409603238105774], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9c710ae01e08d35304af5abacb787c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48974609375, 0.371826171875, 0.3466796875, 0.256103515625, 0.155029296875, 0.28564453125, 0.3828125, 0.12255859375, 0.1611328125, 0.45166015625, 0.4306640625, 0.436767578125, 0.459228515625, 0.03656005859375, 0.27001953125, 0.1693115234375, 0.493408203125, 0.2169189453125, 0.1982421875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12f0c4e52b93b538b4c8c9370c1021fe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d0ad1fef8b0f5e5bf36b8c27fee07487
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62a0dbea6e6295fdf9e76cba979ecbfc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.280029296875, 0.3330078125, 0.458251953125, 0.474853515625, 0.087646484375, 0.49853515625, 0.364501953125, 0.490234375, 0.04156494140625, 0.11346435546875, 0.2125244140625, 0.2061767578125, 0.354736328125, 0.467041015625, 0.1571044921875, 0.053253173828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a32167327140392acfe085f3dc615f1c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19347721338272095, 0.25494247674942017, 0.25724032521247864, 0.013196253217756748, 0.0554363951086998, 0.45116692781448364, 0.3900919258594513, 0.1994352489709854, 0.04181523248553276, 0.3174302577972412, 0.0036496627144515514, 0.08396239578723907, 0.3591018617153168, 0.09920410811901093, 0.13141387701034546, 0.1676580160856247], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f2c865490521d0387fc1b2c07241f0b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_76f61fc74df508e297cfd70ef4715fb0
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f92865a6f0a5bd4472d633e8ddcb2059(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6cfd83b0e26c229026e74520c92a4fe5
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12600630521774292, 0.4308997094631195, 0.03446517139673233, 0.46089404821395874, 0.39691612124443054, 0.374233603477478], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec2c2553e4a290d93e683b593bf25853(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3608103096485138, 0.08362208306789398, 0.4082232713699341, 0.026525290682911873, 0.19259671866893768, 0.2944856286048889, 0.28332310914993286, 0.35481855273246765, 0.06702812016010284, 0.04833230376243591, 0.314937025308609, 0.35153308510780334, 0.41713154315948486, 0.1422298550605774, 0.26443949341773987, 0.24698098003864288, 0.05540908873081207, 0.47646549344062805, 0.2373531609773636], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_89de14e7b56f043450017e73ceb05145(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0010700225830078125, 0.2401123046875, 0.168701171875, 0.039276123046875, 0.1370849609375, 0.07647705078125, 0.408203125, 0.450927734375, 0.468994140625, 0.287353515625, 0.039947509765625, 0.39794921875, 0.248779296875, 0.405517578125, 0.294677734375, 0.08489990234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5778cea37b5515f1777f057cc5d0f42c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2861328125, 0.269775390625, 0.238037109375, 0.1787109375, 0.11651611328125, 0.335693359375, 0.00838470458984375, 0.1309814453125, 0.17724609375, 0.11553955078125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e3c424696fe149965e437d2c2819a79(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4506d7b50329fce3d573b3e13065738e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01052093505859375, 0.3857421875, 0.2449951171875, 0.300537109375, 0.360595703125, 0.204345703125, 0.478271484375, 0.359375, 0.433837890625, 0.4375, 0.2144775390625, 0.2489013671875, 0.323974609375, 0.287353515625, 0.0770263671875, 0.47509765625, 0.41748046875, 0.319580078125, 0.482666015625, 0.031341552734375], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8cda7b140721cb4e94b49a280314b22e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0888671875, 0.304931640625, 0.1412353515625, 0.40771484375, 0.483642578125, 0.412841796875, 0.043426513671875, 0.45263671875, 0.29296875, 0.199462890625, 0.2193603515625, 0.453125, 0.302001953125, 0.027069091796875, 0.25537109375, 0.41796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_552c1db4dcf9616b73cc33c9af2545a4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2042236328125, 0.1700439453125, 0.250732421875, 0.08642578125, 0.254638671875, 0.06298828125, 0.087646484375, 0.42822265625, 0.27392578125, 0.44189453125, 0.2666015625, 0.0287933349609375, 0.219482421875, 0.4990234375, 0.1630859375, 0.329345703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b2924bce3b61a45477843183cfd5e06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3818359375, 0.1568603515625, 0.1639404296875, 0.11895751953125, 0.467041015625, 0.492919921875, 0.215576171875, 0.2734375, 0.26171875, 0.143798828125, 0.1123046875, 0.378173828125, 0.011932373046875, 0.3017578125, 0.2958984375, 0.474609375, 0.395263671875, 0.2369384765625, 0.379638671875, 0.07110595703125, 0.0075836181640625, 0.316650390625, 0.0654296875, 0.08746337890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ae47a834d06adaaaeba65d45347b373e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_46dd01a152b5548d94603558c46d911d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ae47a834d06adaaaeba65d45347b373e
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a24f1a40d8a7c6bc4dbd1d1d47f8e8bf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09151492267847061, 0.4392663538455963, 0.20436961948871613, 0.4614485502243042, 0.31364718079566956, 0.1548159420490265, 0.44082358479499817, 0.27648425102233887, 0.3324589729309082, 0.38960033655166626, 0.2933935523033142, 0.4795447587966919, 0.2572076618671417, 0.34618982672691345, 0.45767509937286377, 0.17537643015384674, 0.4030701518058777, 0.2924230396747589, 0.2539742588996887], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_74cc4b8188b27c15f9fac86646091d76(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.159912109375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_67567addbdcaec47b8c99f3d993d7131(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_be518b7e3de955eef05f038300ab76e8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.404296875, 0.49072265625, 0.41845703125, 0.09100341796875, 0.212890625, 0.1336669921875, 0.404052734375, 0.0175628662109375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87e2236248110a49d98118f584e95ea1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1789817065000534], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a54bd27d18046cab56a476f0b124ebf6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40625, 0.158447265625, 0.482421875, 0.409912109375, 0.324951171875, 0.11468505859375, 0.370849609375, 0.41015625, 0.28857421875, 0.26171875, 0.19384765625, 0.259521484375, 0.028839111328125, 0.0299072265625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_61788eb574e2224a34aa2a0610ec9cf8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.147216796875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac5d8286d5a11280615a1db7f1a0f551(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4214524030685425, 0.16516618430614471, 0.3016028106212616, 0.17342206835746765, 0.10739703476428986, 0.38842466473579407, 0.14762580394744873, 0.4821145832538605, 0.2569582164287567, 0.020320355892181396, 0.4632199704647064, 0.14225128293037415, 0.2777804732322693, 0.4340393543243408, 0.08319519460201263, 0.03524100035429001, 0.021393928676843643, 0.04087149724364281, 0.472769170999527, 0.13353657722473145, 0.0613856315612793, 0.08263131231069565, 0.013862866908311844, 0.04835783317685127], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_477f77cfa8c4ec09a303d09107532d32(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36139237880706787, 0.01069301925599575, 0.3703586161136627, 0.31080082058906555, 0.39891064167022705, 0.15172633528709412, 0.05079831928014755, 0.3181132376194, 0.20583713054656982, 0.37333083152770996, 0.11382167786359787, 0.3173675835132599, 0.4461837708950043, 0.3374246656894684, 0.40155747532844543, 0.3628475069999695, 0.024918213486671448, 0.02501363307237625, 0.3024534285068512, 0.13408273458480835, 0.23735082149505615, 0.4227730333805084, 0.13677994906902313, 0.27672094106674194], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a75a5f5fc42e8b152b636a86254ff01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37725651264190674, 0.024768522009253502, 0.4368703067302704, 0.22512538731098175, 0.4738302528858185, 0.10588719695806503, 0.2431650608778, 0.3296978771686554, 0.21087375283241272, 0.08043091744184494, 0.27120083570480347, 0.029067976400256157, 0.38466304540634155, 0.14178405702114105, 0.2618066668510437, 0.47089993953704834, 0.4092404842376709, 0.19994881749153137, 0.2245779186487198, 0.07140500098466873, 0.2697869837284088, 0.3597795069217682, 0.3529410660266876, 0.15234269201755524, 0.09570875763893127, 0.2657221853733063, 0.11627671122550964, 0.348123699426651], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8270d8999a0621bc68d4484038f30852(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3681640625, 0.479248046875, 0.07879638671875, 0.290283203125, 0.383056640625, 0.1448974609375, 0.084716796875, 0.37158203125, 0.193359375, 0.0105743408203125, 0.021820068359375, 0.288818359375, 0.28564453125, 0.11236572265625, 0.2366943359375, 0.2261962890625, 0.0201873779296875, 0.1815185546875, 0.42333984375, 0.287353515625, 0.11810302734375, 0.253662109375, 0.411865234375, 0.028076171875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b8c70bf3dd050e95e41bbd8cdbc306da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b8d0c7e4f4b5e4119fe3a3723738b5e9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1873779296875, 0.1260986328125, 0.04461669921875, 0.2320556640625, 0.2568359375, 0.340087890625, 0.11090087890625, 0.224609375, 0.0687255859375, 0.461181640625, 0.1517333984375, 0.049560546875, 0.2420654296875, 0.410888671875, 0.0478515625, 0.342041015625, 0.201904296875, 0.2161865234375, 0.170166015625, 0.0401611328125, 0.456298828125, 0.4443359375, 0.29833984375, 0.300048828125, 0.415771484375, 0.287353515625, 0.296142578125, 0.47119140625, 0.46337890625, 0.2166748046875], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffc563b679d4b7bd5161bc4f75048570(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.338134765625, 0.41162109375, 0.285400390625, 0.310302734375, 0.056427001953125, 0.1761474609375, 0.24853515625, 0.2137451171875, 0.1907958984375, 0.427490234375, 0.2235107421875, 0.214599609375, 0.0037078857421875, 0.23291015625, 0.047119140625, 0.449951171875, 0.029205322265625, 0.245361328125, 0.496337890625, 0.430908203125, 0.416748046875, 0.343017578125, 0.10760498046875, 0.378173828125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_109b809de5de7af5f0bfae30e3c1f734(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1627197265625, 0.447509765625, 0.302001953125, 0.0511474609375, 0.414306640625, 0.30810546875, 0.282958984375, 0.20556640625, 0.2213134765625, 0.4638671875, 0.42041015625, 0.40087890625, 0.089111328125, 0.2322998046875, 0.29248046875, 0.3359375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93ec4edf423189e9ae634d7d750b5fca(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0721435546875, 0.149169921875, 0.051422119140625], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4bae6b6b23d68d792585e63fa42f16cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5e0ecc028de7ecc06995669aa4b3f9e4
    def get_inputs(self):
        return [
            paddle.uniform([58], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 58, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_242356f6da4ccca117b8c9f3b09d9339(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33846333622932434, 0.32798466086387634, 0.2903437316417694, 0.38155320286750793, 0.20379726588726044, 0.4923279583454132, 0.4592277705669403, 0.10471484810113907, 0.4039391279220581, 0.26321977376937866, 0.23683305084705353, 0.10054738074541092, 0.3371299207210541, 0.12678778171539307, 0.45344993472099304, 0.3061719238758087, 0.3209660053253174, 0.13899382948875427], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_11ed43669b2877f5881331f756b03f4e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_345999a5def47a500d524aa0dc80301c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_11ed43669b2877f5881331f756b03f4e
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8664925e2d9823d9b11fe588d079960(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46923828125, 0.186279296875, 0.379638671875, 0.356201171875, 0.28076171875, 0.0399169921875, 0.2420654296875, 0.0789794921875, 0.036834716796875, 0.380615234375, 0.3916015625, 0.272216796875, 0.383544921875, 0.372314453125, 0.11163330078125, 0.417724609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7d125a8e533049ce464b1cfb8c02de16(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2066650390625, 0.18603515625, 0.0247955322265625, 0.4931640625, 0.35693359375, 0.42626953125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_31cd62c83dec09c149e3f755099a7088(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3873516619205475, 0.22295258939266205, 0.21661019325256348, 0.15769821405410767, 0.45980104804039, 0.07980141788721085, 0.10135987401008606, 0.23209257423877716, 0.09171298891305923, 0.11246119439601898, 0.42171379923820496, 0.12016639113426208, 0.31932035088539124, 0.03470892831683159, 0.46252015233039856, 0.3550551235675812], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a3f9a31b38fabdbf37d7531c606418ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4775390625, 0.0089874267578125, 0.244873046875, 0.2073974609375, 0.42724609375, 0.266845703125, 0.1640625, 0.045654296875, 0.12213134765625, 0.491455078125, 0.490234375, 0.42626953125, 0.1640625, 0.379638671875, 0.1820068359375, 0.031768798828125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d88edbbade7a6f68d0be95766f630b40(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fba68e146819173c75568dbea1901cf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.072316475212574, 0.04302200302481651, 0.11945438385009766, 0.32365599274635315, 0.19560670852661133, 0.3569600284099579, 0.34224313497543335, 0.24808412790298462, 0.07349056750535965, 0.1370367556810379, 0.010086983442306519, 0.023302648216485977, 0.1973351687192917, 0.1331525444984436], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_47f7bcaa7b3849638cf598151c33e202(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9650e0e03ba132d978beacb0daa67054
    def get_inputs(self):
        return [
            paddle.to_tensor([0.491943359375, 0.3271484375, 0.1695556640625, 0.177734375, 0.08416748046875, 0.07867431640625, 0.0304412841796875, 0.22998046875, 0.353759765625, 0.442626953125, 0.0693359375, 0.12335205078125, 0.3759765625, 0.401123046875, 0.41748046875, 0.1658935546875, 0.44091796875, 0.0311126708984375, 0.42529296875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_90d11a96bf905f6e0d0773471b346918(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_fa1554f46c743a7bff7db2fd21cfcb2d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04606372490525246, 0.032322581857442856, 0.4005391597747803, 0.38374409079551697, 0.31625717878341675, 0.27605587244033813, 0.10403832793235779, 0.09421658515930176, 0.46493300795555115, 0.4440058171749115, 0.3096161186695099, 0.03218458965420723, 0.3119139075279236, 0.221403107047081, 0.051604896783828735, 0.4699520766735077, 0.4873373806476593, 0.26609066128730774], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41658deaee1c439582e3b69292b9ebbf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.398193359375, 0.18017578125, 0.327392578125, 0.348876953125, 0.0850830078125, 0.08453369140625, 0.396728515625, 0.2052001953125, 0.402587890625, 0.293212890625, 0.334228515625, 0.253662109375, 0.475341796875, 0.411865234375, 0.1767578125, 0.3271484375, 0.17724609375, 0.10919189453125, 0.12420654296875, 0.2489013671875, 0.344970703125, 0.342041015625, 0.31640625, 0.29736328125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9ce3521d146515be0885be75962cf34(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33299267292022705, 0.06195637956261635, 0.4832639694213867, 0.07277762144804001, 0.03576692193746567, 0.3044533133506775, 0.1413774937391281, 0.23210550844669342, 0.29167911410331726, 0.3417583107948303, 0.10530973225831985, 0.48427677154541016, 0.2823566198348999, 0.33478644490242004, 0.10495126992464066, 0.39669179916381836, 0.4001215696334839, 0.45132285356521606, 0.2221340537071228, 0.09053778648376465, 0.2614789307117462, 0.2374010682106018, 0.23915937542915344, 0.03855244442820549], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df10d6de661563012ee8b55b20962745(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05936785787343979], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a82325afc195bbdf0169ceb7a268ec47(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12393154203891754, 0.2546563148498535, 0.41173818707466125, 0.3707948625087738, 0.18982389569282532, 0.15220388770103455, 0.13377805054187775, 0.020322546362876892, 0.4038151800632477, 0.2099638283252716, 0.49042370915412903, 0.3969763219356537, 0.24551984667778015, 0.17917655408382416, 0.4229961335659027, 0.21175619959831238], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_83bec284bf81bb6dac2ecef4acf7d181(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25ddcaf81ae82ccc95ba700078014547
    def get_inputs(self):
        return [
            paddle.to_tensor([0.431884765625, 0.1314697265625, 0.36767578125], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7abadb07e9e6b27f2a67dd7fd99621e6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64edb4d01d9b5264eacbee672737212d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3335745334625244, 0.15718556940555573, 0.44718265533447266, 0.1588234007358551, 0.2595701515674591, 0.07327824831008911, 0.25049251317977905, 0.23402026295661926, 0.3234332799911499, 0.25372442603111267, 0.06302468478679657, 0.3819205164909363, 0.3651410639286041, 0.23550336062908173, 0.12229514122009277, 0.41061699390411377, 0.3559087812900543, 0.32594209909439087, 0.31491708755493164, 0.2597629427909851, 0.27338361740112305, 0.2277456521987915, 0.4969608187675476, 0.04866228625178337, 0.4851047396659851, 0.23884686827659607, 0.40911489725112915, 0.19856449961662292], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_58f84d1d360fefd7f1ae4b2c98684591(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ecff720ab3c6a90a9d6aa35fedb45605
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ffc88bad4143fd45cc0dce794157873a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f03a8d3924845c19fc33960a3a00973a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08803664147853851, 0.20499388873577118, 0.08971572667360306, 0.20765481889247894, 0.26131972670555115, 0.4273689091205597, 0.3686174154281616, 0.29952484369277954, 0.12306736409664154, 0.2088988721370697, 0.22992387413978577, 0.24331322312355042], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d69fffd755608c826b1219463cc4755(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4894886314868927, 0.38572680950164795, 0.14511705935001373, 0.14067307114601135, 0.3211309313774109, 0.24404758214950562, 0.06314717233181, 0.39944732189178467, 0.4836719334125519, 0.12338996678590775, 0.044533904641866684, 0.20265594124794006, 0.3861061632633209, 0.21362318098545074, 0.111801378428936, 0.027480443939566612], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1a14e576cd52b1884a833f39632834f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d9eb920469f43d872055b68cd6ea34d7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.009970493614673615, 0.02026408538222313, 0.17761753499507904, 0.18238002061843872, 0.3436865508556366, 0.2828386723995209, 0.11416377872228622, 0.48105335235595703, 0.12193993479013443, 0.011220618151128292, 0.03951676934957504, 0.20534615218639374, 0.3970469534397125, 0.3466833531856537, 0.022160867229104042, 0.3645557463169098, 0.2764429450035095, 0.39209067821502686, 0.2813449203968048], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ce6445216cfe6ef3a01b86981350fd97(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1282033920288086, 0.3209453523159027, 0.013884919695556164, 0.06605498492717743, 0.247552752494812, 0.15308277308940887, 0.028994152322411537, 0.4121607542037964, 0.2315666675567627, 0.026995304971933365], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc60779bfe33bd568af7d93904c0c695(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.147415891289711, 0.2064061313867569, 0.18874922394752502, 0.4823567271232605, 0.4077923893928528, 0.28992098569869995, 0.006208772771060467, 0.05781038478016853, 0.07823509722948074, 0.24696923792362213, 0.3889721930027008, 0.3461049497127533, 0.30596306920051575, 0.03677191957831383, 0.1450180560350418, 0.24074828624725342, 0.47025609016418457, 0.07769925892353058, 0.41858938336372375, 0.12978079915046692, 0.2943914234638214, 0.11394739151000977, 0.3943808674812317, 0.40422895550727844], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cef7c27a1e52644ef864b458538f7575(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cac42a93549f9f5e140adc06880552ae
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05745082348585129, 0.14647985994815826, 0.15443813800811768, 0.1430196911096573, 0.19576069712638855, 0.27907004952430725, 0.2089248150587082, 0.39446964859962463, 0.28229349851608276, 0.476492315530777], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_560eb0efb9498ce468a9e494a254e00a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23935610055923462, 0.4659229516983032, 0.36649709939956665, 0.3523533344268799, 0.4329209625720978, 0.43415310978889465, 0.10569076240062714, 0.09362766146659851, 0.1259651780128479, 0.08088025450706482, 0.0169794000685215, 0.49047866463661194, 0.0984114408493042, 0.1930471807718277, 0.007382416166365147, 0.48478710651397705], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f89566e96d9dc6e048f429fd6e5ae4ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.138916015625, 0.11090087890625, 0.0831298828125, 0.415283203125, 0.0831298828125, 0.3056640625, 0.020782470703125, 0.201416015625, 0.453125, 0.09942626953125, 0.426513671875, 0.201171875, 0.044097900390625, 0.234619140625, 0.2047119140625, 0.08416748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dd8241c566a455047884655bcd747773(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f822f6367027d17f6a049f89cd71f0f
    def get_inputs(self):
        return [
            paddle.uniform([304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7edb5eb7e9c144a224344d87e77cd0de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.343994140625, 0.311279296875, 0.30029296875, 0.0212249755859375, 0.37841796875, 0.1851806640625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8352eb0c7222b838435b52d3de3d4e14(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08209061622619629, 0.3954125642776489, 0.3846661448478699, 0.4317621886730194, 0.38813450932502747, 0.06479643285274506, 0.41254889965057373, 0.3776039779186249, 0.018637828528881073, 0.4913640022277832, 0.26972371339797974, 0.01302085630595684, 0.45546361804008484, 0.13139498233795166, 0.4323408603668213, 0.40808722376823425], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_94712ea9541aa8936495e80f602ef7ce(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b80c8c51963f704e03b61ad985cf000f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_94712ea9541aa8936495e80f602ef7ce
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f500951d2fff5b81dbe5219bd0e8f49(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8b94dd95189364001a79065ef3b68b2
    def get_inputs(self):
        return [
            paddle.to_tensor([0.33073508739471436, 0.20729535818099976, 0.050409797579050064, 0.0951174721121788, 0.04245026409626007, 0.24284958839416504, 0.14578266441822052, 0.08958536386489868, 0.36221829056739807, 0.23439697921276093, 0.3927617073059082, 0.15000462532043457, 0.3766458332538605, 0.1263107806444168, 0.13397376239299774, 0.22671867907047272, 0.16548746824264526, 0.3732208013534546, 0.2503302991390228, 0.08161173015832901, 0.45678383111953735, 0.3377158045768738, 0.3575723469257355, 0.020308220759034157], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52fdd45091fed99e5082d39b378694f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0750732421875, 0.41162109375, 0.102783203125, 0.437744140625, 0.1314697265625, 0.2044677734375, 0.099609375, 0.163330078125, 0.321044921875, 0.43896484375, 0.390869140625, 0.1171875, 0.417236328125, 0.298583984375, 0.11346435546875, 0.37939453125, 0.447265625, 0.409912109375, 0.47900390625, 0.396728515625, 0.37060546875, 0.359619140625, 0.37255859375, 0.05975341796875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2695203cb97c03083cc3efd5b2d0e03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cb0ff7246c9de4a79fea01a3dcf0a
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a100ce18432eb5f6836f57c4b8ce38c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_cc54fad0b4d76f1f70ba2af34b7e5738
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_69874b8bae11d47cd1f7e6f6cf2d933a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2022705078125, 0.341064453125, 0.08880615234375, 0.034454345703125, 0.224853515625, 0.0570068359375, 0.052520751953125, 0.429443359375, 0.11187744140625, 0.34912109375, 0.259765625, 0.262451171875, 0.468017578125, 0.389404296875, 0.0673828125, 0.09429931640625, 0.385009765625, 0.224609375, 0.3779296875, 0.11883544921875, 0.055908203125, 0.426513671875, 0.49853515625, 0.1414794921875, 0.0843505859375, 0.160888671875, 0.34912109375, 0.33642578125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7caa0c55720fe32858144c0653a4c23(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1807721108198166, 0.10709831863641739, 0.07339106500148773, 0.35111576318740845, 0.43282365798950195, 0.06609732657670975, 0.3211379051208496, 0.09052493423223495, 0.348186194896698, 0.42137664556503296, 0.05222566798329353, 0.22774334251880646, 0.1859401911497116, 0.16958165168762207, 0.08915305882692337, 0.08185941725969315], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c6b3a2a182e8a341cb1c775c1edbe011(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c380f56e3c450ff942683a9fb13de58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47608137130737305, 0.06990817934274673, 0.41950464248657227, 0.009292347356677055, 0.1755790263414383, 0.4604000449180603, 0.35676273703575134, 0.2747640013694763, 0.2817966043949127, 0.32748275995254517, 0.2575394809246063, 0.11081325262784958, 0.362868070602417, 0.2611210346221924, 0.45033979415893555, 0.01775520108640194, 0.2481231987476349, 0.23910202085971832, 0.23992936313152313, 0.2420385181903839, 0.33273497223854065, 0.011744789779186249, 0.19184011220932007, 0.20425842702388763, 0.3184586763381958], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e996aed5dfa94e4fc4ad84fede551728(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.134033203125, 0.245361328125, 0.495361328125, 0.376708984375, 0.258544921875, 0.42236328125, 0.15380859375, 0.38720703125, 0.3984375, 0.217529296875, 0.10986328125, 0.048492431640625, 0.1409912109375, 0.395751953125, 0.40283203125, 0.0300750732421875, 0.0986328125, 0.11395263671875, 0.362060546875, 0.24267578125, 0.365234375, 0.2252197265625, 0.47216796875, 0.326171875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ee53303c54a660605505c257944f1f42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bfabf20ba0a2d7e37cdbaefb15050fcd
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_eb5d595f2406e5c6865a5eea3ea96484(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dfd8ea20a48b11ce4980a8ca0ecf8c8b
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a295b67faf0331938194dd20b457accf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.312873512506485, 0.45132991671562195, 0.32535746693611145, 0.12013757228851318, 0.36994990706443787, 0.25376278162002563, 0.4032039940357208, 0.0630626454949379, 0.4241499602794647, 0.08382826298475266, 0.13718381524085999, 0.49830371141433716, 0.3086738884449005, 0.33753702044487, 0.1798257678747177, 0.10932321101427078], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28d76b7daa07dd51ad299d52138724ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7c29ce67d79fff3a345c11ebc4bdf50
    def get_inputs(self):
        return [
            paddle.to_tensor([0.132080078125, 0.240234375, 0.270751953125, 0.192626953125, 0.33740234375, 0.2069091796875, 0.10302734375, 0.261962890625, 0.2086181640625, 0.08966064453125, 0.07928466796875, 0.0295562744140625, 0.330810546875, 0.2099609375, 0.2474365234375, 0.1612548828125, 0.235107421875, 0.3046875, 0.442138671875, 0.42822265625, 0.29736328125, 0.00276947021484375, 0.448486328125, 0.34912109375, 0.289306640625, 0.253173828125, 0.0185089111328125, 0.289306640625], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6ba1fdc284c485eafbd0e775eb21c599(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.214376300573349, 0.03326192498207092, 0.3870669901371002, 0.11559886485338211, 0.27209457755088806, 0.27375006675720215, 0.07519196718931198, 0.2137451171875, 0.30914899706840515, 0.09522924572229385, 0.20608921349048615, 0.2906041443347931, 0.4008182883262634, 0.4356660842895508, 0.2144984006881714, 0.4805862605571747], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9e4d789d9c07f46b12567031f4e9606(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24875371158123016, 0.305434912443161, 0.035644445568323135, 0.000595004006754607, 0.3679305613040924, 0.3172166049480438, 0.13998140394687653, 0.013142110779881477, 0.496858686208725, 0.23806743323802948, 0.2890104055404663, 0.07329057157039642, 0.22560185194015503, 0.42114511132240295, 0.0140819838270545, 0.2766505479812622, 0.21182750165462494, 0.12288795411586761, 0.08104768395423889, 0.21290981769561768], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06526e97547c276697dddd3a7960dc84(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_43cfd72bbaa1a6929e1eae5c8e0915b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06526e97547c276697dddd3a7960dc84
    def get_inputs(self):
        return [
            paddle.uniform([636], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 636, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff405f142207a37b00d3c52263d86698(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.496826171875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9046cfbd633f09787a32b86d058cc07(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, None, None, None, None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_08f3ae8884b52e49e969a83489687ab8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9046cfbd633f09787a32b86d058cc07
    def get_inputs(self):
        return [
            paddle.uniform([1, 8, 3, 224, 224], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 224, 224], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9a4669374975354d2cb97d26aed373ae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95cf2c755a667a4dac63c73f692c50d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9a4669374975354d2cb97d26aed373ae
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5fce84c6a63c2e50b4adbe178ad1cd9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_08d927ff4613402ffcc261794c20b188
    def get_inputs(self):
        return [
            paddle.to_tensor([0.034423828125, 0.3466796875, 0.2099609375, 0.3310546875, 0.294921875, 0.33349609375, 0.2783203125, 0.107177734375, 0.099365234375, 0.458251953125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2dc68865193f4f7a19cb82f6a04b1f93(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.186279296875, 0.473876953125, 0.261474609375, 0.263916015625, 0.038818359375, 0.4580078125, 0.23095703125, 0.3818359375, 0.0135498046875, 0.10595703125, 0.09869384765625, 0.059478759765625, 0.260986328125, 0.371826171875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc87e5faa9dadbdc7a3e956c9faa9dba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05306622013449669, 0.3386465907096863, 0.48100823163986206, 0.056870147585868835, 0.2952021360397339, 0.2274714559316635, 0.274725079536438, 0.2868214249610901, 0.18556924164295197, 0.1612706333398819, 0.31010377407073975, 0.17630569636821747, 0.05970100313425064, 0.19950708746910095, 0.3926861584186554, 0.3717782497406006], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6753390487da3962e743de062afbf366(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcabcab139b242ad1c233087264f27f8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.293701171875, 0.156494140625, 0.06536865234375, 0.388916015625, 0.041534423828125, 0.156982421875, 0.1710205078125, 0.1495361328125, 0.34033203125, 0.0909423828125, 0.3173828125, 0.23681640625, 0.2269287109375, 0.02740478515625, 0.378173828125, 0.440185546875, 0.043853759765625, 0.1986083984375, 0.368896484375, 0.0206146240234375, 0.354248046875, 0.48779296875, 0.388671875, 0.30078125, 0.05792236328125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d83717fefe3323e619653c548a5d17c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b25b7383254aaa057e3e407cb578ce1c
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_152c38339e925c47a8ca06f28ff15a02(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f72fb9f0eddfe736c2d024287d4732fa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1959228515625, 0.2071533203125, 0.01513671875, 0.08343505859375, 0.1849365234375, 0.457275390625, 0.04437255859375, 0.0296783447265625, 0.4912109375, 0.375, 0.2474365234375, 0.441650390625, 0.45166015625, 0.159912109375, 0.214111328125, 0.443359375, 0.4853515625, 0.3662109375, 0.0699462890625, 0.00966644287109375, 0.32861328125, 0.39013671875, 0.322998046875, 0.454833984375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ea6fb1d99c09f6608f6a6718c0122971(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_191dc03200364a7a8918b252bce8eee8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.454833984375, 0.2113037109375], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fa7e0b97fac9395d46bb5ea6c04c52a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1502685546875, 0.47900390625, 0.170166015625, 0.263427734375, 0.25439453125, 0.1025390625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3a44e02e7dcfe9597a244dec60fc0923(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bf6c7d7a9d4d37dac80fe6945d55c35b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08038330078125, 0.1378173828125, 0.060638427734375, 0.344482421875, 0.2110595703125, 0.36181640625], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_000989294cc6292eeb88200cb887ab38(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa07935ee51c9691258c16905ef29166(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_000989294cc6292eeb88200cb887ab38
    def get_inputs(self):
        return [
            paddle.uniform([53], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 53, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e1d0e81f7b14211dc3befda067cfcef7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3519926965236664, 0.13604071736335754, 0.10535194724798203, 0.2973427176475525, 0.11414159089326859, 0.2922147214412689, 0.15541750192642212, 0.20004373788833618, 0.48178309202194214, 0.3766692280769348, 0.43723249435424805, 0.41669222712516785, 0.44558480381965637, 0.0888567566871643, 0.1725206822156906, 0.4150165617465973], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3257dc5af8d5935edfb5aa9e9371c39e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_422d7f73a91b9b613ebf604659cfe8cd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2412109375, 0.497802734375, 0.0771484375, 0.1563720703125, 0.462646484375, 0.055572509765625, 0.31640625, 0.1566162109375, 0.321533203125, 0.349853515625, 0.0712890625, 0.0103912353515625, 0.2442626953125, 0.49365234375, 0.224609375, 0.132080078125, 0.2353515625, 0.47900390625], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_028cbed3db9d1f1d3445b1d1f98f3bda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0408935546875, 0.1595458984375, 0.365478515625, 0.4599609375, 0.43212890625, 0.293212890625, 0.476806640625, 0.369140625, 0.0142059326171875, 0.202392578125, 0.279541015625, 0.07244873046875, 0.267578125, 0.42431640625, 0.375732421875, 0.25], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b98df854e98a5e65a5e9a84630fa6d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2281494140625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4dfbe38f669795b621a33c916c2d7905(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6295a2dc69caca65eba56abec5ec0683
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3080318570137024], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3187352b9239e5bd0c75201029f6727b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7c29d46e0eca3037cb77115c3de7fff
    def get_inputs(self):
        return [
            paddle.to_tensor([0.32613736391067505, 0.37886717915534973, 0.40056678652763367, 0.23200058937072754, 0.40684401988983154, 0.08110367506742477, 0.46849969029426575, 0.2257097065448761, 0.49179181456565857, 0.15201610326766968, 0.07685109972953796, 0.4812556505203247, 0.3219328820705414, 0.3415236175060272, 0.18079078197479248, 0.06943178176879883, 0.037111058831214905, 0.17539246380329132, 0.23178915679454803, 0.43848076462745667], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1cc47c39d73e583c5b5a4d87c858c29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a5fc3a4743e7443cc0eda27cf07f6e32
    def get_inputs(self):
        return [
            paddle.uniform([432], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 432, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8767e91221af282dfe7f8ccca36a9307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7e578c766ab7c0c9766296259fedc3e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8767e91221af282dfe7f8ccca36a9307
    def get_inputs(self):
        return [
            paddle.uniform([570], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 570, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9ed987b872909637bfc831f9dd0f189b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_93afa811994c197405d5b535a411202f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.337646484375, 0.142822265625, 0.30029296875, 0.2005615234375, 0.173095703125, 0.29736328125, 0.31201171875, 0.048614501953125, 0.1883544921875, 0.4794921875, 0.2440185546875, 0.11651611328125, 0.1612548828125, 0.2666015625], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f1e3f6a276b61e28fee24404203d9058(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d8157971fc7e20d1a1649847b17550f9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1507568359375, 0.08880615234375, 0.2347412109375, 0.348388671875, 0.060821533203125, 0.292236328125, 0.451171875, 0.28955078125, 0.274169921875, 0.363525390625, 0.49609375, 0.057861328125, 0.474365234375, 0.075927734375, 0.36865234375, 0.453857421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_74e61bb8693e911191fbbf269839225d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a4ff3581d81308b8d952a9eaafa2f3b8
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45438727736473083, 0.3530404567718506, 0.2254796177148819, 0.3667827248573303, 0.2486986368894577, 0.2800399363040924, 0.02261856198310852, 0.4131075441837311, 0.13473401963710785, 0.4365902543067932, 0.39816614985466003, 0.32968103885650635, 0.07318858057260513, 0.28361913561820984, 0.303193062543869, 0.06051407754421234, 0.08946921676397324, 0.48775097727775574, 0.42285484075546265, 0.48747697472572327, 0.08569855988025665, 0.04870381951332092, 0.3005731701850891, 0.17099717259407043, 0.4221613109111786, 0.11068444699048996, 0.23883776366710663], dtype='float32').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e39c30cc85f2fca700a57453f843145(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_54fdecc18e3c7015b07699cac1e5d8fd
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41801023483276367, 0.292540043592453, 0.1165551245212555, 0.3341812193393707, 0.2836726903915405, 0.31231680512428284, 0.2354327291250229, 0.3984687328338623, 0.49981489777565, 0.13059702515602112, 0.3215855658054352, 0.19771365821361542, 0.14825713634490967, 0.001555070048198104, 0.16067159175872803, 0.2763822078704834], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9dd3ad2100308c9642c7e2855affce32(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e33d0a0ac0fa53b994440fd35141840
    def get_inputs(self):
        return [
            paddle.to_tensor([0.175048828125], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_300380de755e3c071f389576c4ceebc2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[None], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_394feea024cfab9d87b74ba3626234dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_300380de755e3c071f389576c4ceebc2
    def get_inputs(self):
        return [
            paddle.uniform([366], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 366, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d0ba4caa14fcac619aedbe54f4b95ffa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6c6d9d56322f20d1d5c36cc1bd518b44
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3deef7ce55df14091bd0f69ecf9ed4a9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9cdbdbb62a8ef46634e39bb94ab16dc
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8e43c881316d43fba0ff5d2190338ac8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_706e5d73232c23a2f275c78fac3ce7c6
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2663d99f6f518ce36630a9f9f35802e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e8640a0c014f4ddfc4add1ae23f0f5a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2663d99f6f518ce36630a9f9f35802e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.346435546875, 0.373779296875, 0.09271240234375, 0.00563812255859375, 0.2230224609375, 0.366455078125, 0.3701171875, 0.1695556640625, 0.090576171875, 0.2490234375, 0.243408203125, 0.31396484375, 0.310302734375, 0.452392578125, 0.363037109375], dtype='float16').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14461e8370acd22916b1fd1b276296b8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77b24f1107af22aa9a5c0c6be7c8bac4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14461e8370acd22916b1fd1b276296b8
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8b7646da19f75e214a5656fc8f79e163(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62341c630bc5fb1b1161047edcd20254(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8b7646da19f75e214a5656fc8f79e163
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ec75e0a1eac60570675662167fc12e2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ec47bd98ac432c65daee0242b7b66aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ec75e0a1eac60570675662167fc12e2e
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d55e15a7824c4568ce536ba9218b649d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a16aa590a5209e043dec72f269a26b15(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d55e15a7824c4568ce536ba9218b649d
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9fe3d204669e773ccfa2d558a08706c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06ea28cfe55d1fe7f8452cb6ed157345
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0ec5d97b7dde4b94156985566db3079(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d774f2c411227a48ca3762b29ac90db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0ec5d97b7dde4b94156985566db3079
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b323fa790003ba2374ea92122a7648e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 64, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[64], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aea4c82d1095f2d6307f87ef6e819ba8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b323fa790003ba2374ea92122a7648e2
    def get_inputs(self):
        return [
            paddle.uniform([64], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 64, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f13b923fae6b5106d48a12c4503f3e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12555541098117828, 0.08439458161592484, 0.051709551364183426, 0.23691396415233612, 0.4921213984489441, 0.2483719289302826, 0.3160907030105591, 0.2707173228263855, 0.39785733819007874, 0.36417093873023987, 0.23385201394557953, 0.42667320370674133, 0.2572689652442932, 0.1158958300948143, 0.4498857855796814, 0.07251540571451187, 0.11292199045419693, 0.19554443657398224, 0.4144830107688904, 0.21148677170276642], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 192, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[192], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10d867209e276180edb4ec78ad7178cb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_44368614231e3e4cd1deef5760c1b0d9
    def get_inputs(self):
        return [
            paddle.uniform([192], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 192, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 32, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[32], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_38ffdd04fba913e3645cadf6e82a66cf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b616656ed5d6e105229cfeee0eb5f046
    def get_inputs(self):
        return [
            paddle.uniform([32], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 32, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6f8610dedbd86099190071dd8de14c8b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 256, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[256], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c4a0098aaf2358d23db4fb77abfaa0d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6f8610dedbd86099190071dd8de14c8b
    def get_inputs(self):
        return [
            paddle.uniform([256], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 256, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 128, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[128], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_12a47130cc30746386ca79ed37757e08(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33289750d8d06cbe99ae5402a1f3b307
    def get_inputs(self):
        return [
            paddle.uniform([128], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 128, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e126bc336e7acd4f3cfe19578218bd66(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5e496bc5d893c73546d5821dbd4df88f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e126bc336e7acd4f3cfe19578218bd66
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f103316df6090d2d4303c927f0c2a85f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 96, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[96], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76ea3314d569a76d36722658f96fd141(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f103316df6090d2d4303c927f0c2a85f
    def get_inputs(self):
        return [
            paddle.uniform([96], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 96, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d9234c05eb679f10226c37a6045040d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d80703deff9f3c7d8051c887ffdc29f8
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5947308f7c3db5a3d07029893c7127cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 384, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[384], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cacb44bfec0254417b6ef3865acea244(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5947308f7c3db5a3d07029893c7127cc
    def get_inputs(self):
        return [
            paddle.uniform([384], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 384, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ab0a039ec87dc9bb062df2e2a98f4b01(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_853de3a75c6051629ef25005a9b1e3a9
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a23f2bef8fad1b5b35138be32eb0206(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4c35389a18fd2e4f5e76cc23c4e9ec0c
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7169113b05c0edd385d9b15c9d73c523(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3e04b0c95d411c4f2f6b7e2bec50b617(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7169113b05c0edd385d9b15c9d73c523
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([1, 20, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_81ab9a45d90879bbf6e0f712103c9456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_862c3c3c60d641afb2a12f14c6ec9089
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c63579fb15baf02867c878fcb9a7047e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e454f060b7d86ac151b57fb1266daf0f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.309814453125, 0.204833984375, 0.265625, 0.1124267578125, 0.4638671875, 0.2403564453125, 0.29296875, 0.40185546875, 0.1400146484375, 0.41015625, 0.05810546875, 0.4345703125, 0.1402587890625, 0.1270751953125, 0.349609375, 0.29248046875, 0.00878143310546875, 0.2371826171875, 0.141845703125, 0.389404296875, 0.349609375, 0.1484375, 0.395263671875, 0.078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_685bcfacf9dafc032eff91853a9c91e3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04620361328125, 0.300048828125, 0.4501953125, 0.05889892578125, 0.273681640625, 0.1949462890625, 0.352294921875, 0.296630859375, 0.1925048828125, 0.26025390625, 0.351806640625, 0.1815185546875, 0.1961669921875, 0.13037109375, 0.1976318359375, 0.2069091796875, 0.444091796875, 0.177490234375, 0.0838623046875, 0.1707763671875, 0.49072265625, 0.2003173828125, 0.4013671875, 0.241943359375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_87d7367db3f0872195622d445d1b86fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3fd26c624b01e57ef0e0cdf3bd4ad561
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 350, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 700, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78873c3ec918e24b5095a6cb3ee608be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6fc6b8ec8f0c2cd0aac465e2595231ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78873c3ec918e24b5095a6cb3ee608be
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_24b9871e92e13db54a21f726552f9f90(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.356201171875, 0.1463623046875, 0.038238525390625, 0.239501953125, 0.428955078125, 0.057830810546875, 0.2734375, 0.40966796875, 0.440673828125, 0.283203125], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 784, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[784], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ece2919536ae0172a3c47d1c13a0850(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_248bb9eda5bc1df06570c77cce5d2b03
    def get_inputs(self):
        return [
            paddle.uniform([784], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 784, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_811037475b19a96c723ef9f47073d2cf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d1ab4f1a6db4efe81d1675ce8e0e7d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_811037475b19a96c723ef9f47073d2cf
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_61b22eaa0d4eecdb76251ee9ed5109bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0de2579f3a93cc1f49bae82fac77b73a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_61b22eaa0d4eecdb76251ee9ed5109bf
    def get_inputs(self):
        return [
            paddle.uniform([960], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 960, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_590b776ac6411426b1b7d195238cc930(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc87dfbf59f9460b76b1837aa1cba6eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_590b776ac6411426b1b7d195238cc930
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_837511ec6df0d14d745c55fba85d3111(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2662113904953003, 0.20176567137241364, 0.17085014283657074], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06ba996a6b88813331f493a40b5ea446(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 15, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[15], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6cdeee106ff8d1446661796ce34ad8d0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06ba996a6b88813331f493a40b5ea446
    def get_inputs(self):
        return [
            paddle.to_tensor([0.028085462749004364, 0.3202022612094879, 0.05748583748936653, 0.4887322783470154, 0.41425949335098267, 0.2057247906923294, 0.26828253269195557, 0.338922917842865, 0.12681198120117188, 0.19788843393325806, 0.47575390338897705, 0.08572553098201752, 0.21394400298595428, 0.4770670533180237, 0.26810845732688904], dtype='float32').reshape([15]),
            paddle.to_tensor([1, 15, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ed5d4ac1d9fb58b3e843382a30206882(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([196], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([384], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13d0e6ffdd7842770897099a5bb6ac06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ed5d4ac1d9fb58b3e843382a30206882
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([196], dtype='int32').reshape([1]),
            paddle.to_tensor([384], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_65ddb5a68ed3ca140581c7279499fede(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_10ea7b0a9eefd9d2b716fe4d8fa57431
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_83346459f3d31a00e5264c469259215f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d49fba0ac7aec19ce8be770b383e710e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_83346459f3d31a00e5264c469259215f
    def get_inputs(self):
        return [
            paddle.uniform([228], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 228, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f4ebc316be4f2adbc86ea9d153f2d031(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_973a4160953dec006baaabe0ad5aaebd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f4ebc316be4f2adbc86ea9d153f2d031
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06727e7110b2fb06d07f55af090095f5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1720eff484050980ab133cefbca4a66(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06727e7110b2fb06d07f55af090095f5
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_220e088420c2368699fe83426ee21471(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a3cce6fdf6ae8a9be3d14e8451347e3
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_291ac5550146552163cd1b127f4bd7da(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_872007bbe5a37e904cb71d44e58d3f2a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3232499659061432, 0.2552849054336548, 0.39248791337013245, 0.05820149928331375, 0.328685998916626, 0.3625853955745697, 0.13756726682186127, 0.22743861377239227, 0.20983482897281647, 0.14423838257789612, 0.20747961103916168, 0.2608531415462494, 0.009836697019636631, 0.36488547921180725, 0.31449753046035767, 0.09302280098199844, 0.0914483293890953, 0.3457815647125244, 0.2164204865694046, 0.2530760169029236, 0.31111907958984375, 0.308573842048645, 0.14833882451057434, 0.2695179581642151, 0.3675696849822998, 0.41588494181632996, 0.3446323573589325, 0.11809331923723221], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44c334947b527817c57de46e332bfcd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47265625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b6de5479dfd25b7f72ad11f4c39fd4a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_00d09763a1d7d66a9af7aad1c9915e2c
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 768, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[768], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7616d2cee120f5113b6c5adc6035553d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_869c1e7cb8d6224af0acb24db7950d5f
    def get_inputs(self):
        return [
            paddle.uniform([768], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 768, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5df760ccdebd0f3592363617cc655f09(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_14a649ab76ab88934d4bd218ec8c8fcc
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9bb13841da42f92fef6f02e4fa98f46(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.038421630859375], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4e5cb28274a2b002e8d99847231742cc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 20, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d4c34a29f09a996e2ec6b1e0ddb6e48f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.384765625, 0.041839599609375, 0.155517578125, 0.01332855224609375, 0.49169921875, 0.148681640625, 0.3603515625, 0.337890625, 0.2181396484375, 0.365478515625, 0.445068359375, 0.035064697265625, 0.310791015625, 0.01384735107421875, 0.0328369140625, 0.3466796875, 0.220458984375, 0.282958984375, 0.41162109375, 0.09814453125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1c34f96949dd554c857b67f1590cc019(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 320, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ad6281e844088fcef025fa5cfb73402f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1c34f96949dd554c857b67f1590cc019
    def get_inputs(self):
        return [
            paddle.uniform([320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 320, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2543ee47a748e0f2ccaa520de6fdfc96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a50b5b7ec85631a59c353bcd97f01918
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff65108d103022fcfa87aa5a3feb537f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.310791015625, 0.0567626953125, 0.254150390625, 0.329345703125, 0.370849609375, 0.1844482421875, 0.278076171875, 0.042266845703125, 0.273681640625, 0.360107421875, 0.33349609375, 0.15673828125, 0.3916015625, 0.25048828125, 0.0241851806640625, 0.01535797119140625, 0.2003173828125, 0.327880859375, 0.018829345703125, 0.3994140625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7f47ec35b356338d36ee8f36f1a11c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3989322781562805], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44990f0c5021549153b6934ce2d94a88(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c39b01d7bf557ee2140cd0b12a96bc4c
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_819e26de38a80f05afa11e7f3a937085(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06390380859375, 0.07244873046875, 0.223388671875, 0.181640625, 0.24609375, 0.08709716796875, 0.48876953125, 0.45947265625, 0.27294921875, 0.1363525390625, 0.1488037109375, 0.373779296875, 0.410888671875, 0.0171661376953125, 0.18408203125, 0.0264739990234375, 0.1785888671875, 0.407958984375, 0.0418701171875], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53e7ab23444f18826f8fd999dab59d0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bab059105b5ca10fe76aabadb24cb1e2
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c36167b7261bc12b7ea46dee7ec3c964(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae35ee57ee5531d331f0cfd7cc2240c8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c36167b7261bc12b7ea46dee7ec3c964
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9fc9c7015a95fe9b59eb33342cdd2fb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09629390388727188, 0.09746474772691727, 0.33027219772338867, 0.02451772801578045, 0.10672236233949661, 0.3898039758205414, 0.25747713446617126, 0.02935979701578617, 0.3525959551334381, 0.07846666872501373, 0.10348000377416611, 0.45187079906463623, 0.37301385402679443, 0.3273097574710846, 0.12704770267009735, 0.48907217383384705, 0.0943664088845253, 0.21760177612304688, 0.28469356894493103, 0.23947647213935852, 0.4197072684764862, 0.01705501787364483, 0.1380460411310196, 0.136412113904953, 0.3225138783454895], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc4cc8cd8b7973c6f06905a9fa039485(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b679b3f598b7cac2ad3329782b47a49c
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_af43144cb9497fa7fc8daabbb976dabe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9cbf2b94fc2417f25a0b6199f494b8a5
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7177845c8997a43ca5c5283e068fdb97(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 64, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b94ccdd48ed42d43e965155df43bb200(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7177845c8997a43ca5c5283e068fdb97
    def get_inputs(self):
        return [
            paddle.uniform([1, 64, 350, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01cd3be3df1b95e2174d692aed82e0b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df2918f2d6cf6ed22049646afea0fad7
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_df7339978207b900f3ad9570fc311692(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1024, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1024], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a90d9cb6eb2175fb92342421defe99d9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_df7339978207b900f3ad9570fc311692
    def get_inputs(self):
        return [
            paddle.uniform([1024], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1024, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_88caf10fd8864d43290106db80951116(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_aa3a316080d8d436667ebc9e59178bbc
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_432d1ebffffa755e49510ed60359a1b6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_14b38b03be4baec2aaa696ac41d00146(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0220947265625, 0.042633056640625, 0.1669921875, 0.427001953125, 0.08599853515625, 0.1951904296875, 0.12237548828125, 0.038177490234375, 0.111328125, 0.058349609375, 0.2430419921875, 0.0823974609375, 0.033203125, 0.330078125, 0.270751953125, 0.275390625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb537e74c4cbba91aa3f14df65d42d81(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ab1c3bd7f9f4bd42101aff6dd2c53bf
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_85aa0197ce270ccee9c65f4f7903325c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09765625, 0.2861328125, 0.337646484375, 0.1953125, 0.050506591796875, 0.1812744140625, 0.349365234375, 0.265380859375, 0.0595703125, 0.4150390625, 0.0019283294677734375, 0.388916015625, 0.359130859375, 0.06890869140625, 0.37939453125, 0.1131591796875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0a78a9c91d25d66008423e7d82e44a14(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ac88cf68cf5ce9d78c84347e7d7adeb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0a78a9c91d25d66008423e7d82e44a14
    def get_inputs(self):
        return [
            paddle.uniform([2560], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2560, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 255, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[255], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ac2e38a178e2560d0a1c47dfeac28fb6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_acfcc27ecd94115fbc1910c1ec284b4f
    def get_inputs(self):
        return [
            paddle.uniform([255], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 255, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9671dd47f3820cadf432b99d5bade88f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 160, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[160], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c23017e48d87261907de5766eca4633b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9671dd47f3820cadf432b99d5bade88f
    def get_inputs(self):
        return [
            paddle.uniform([160], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 160, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1ca960dc3c6de5aaa288fcbdc5d72339(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36c2914821ab42cbfd4d55b8b52ee262
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b348e8000ef970ecd9caafceb501b8db(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_779698d6e4e98b7800d4f2d1b2d42a50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b348e8000ef970ecd9caafceb501b8db
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d397ac6370d7be6b5fc740b5c3ee4291(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.24298420548439026, 0.021410267800092697, 0.019521960988640785, 0.48485562205314636, 0.11908101290464401, 0.16494064033031464, 0.3843371570110321, 0.017702486366033554], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 40, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[40], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5147afb4ff3b5e53aab3132b75820df9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3215cddfef4f87785d975523f3cd8ae5
    def get_inputs(self):
        return [
            paddle.uniform([40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 40, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_da6b520b98d0b887dce2a538218534fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5d9672ce8ca48aba2e431e247aadce70
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2f0c3986931a753e609590d17730dad4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.413330078125, 0.380126953125, 0.299072265625, 0.1427001953125, 0.319091796875, 0.3603515625, 0.296630859375, 0.159423828125, 0.3935546875, 0.39404296875, 0.008148193359375, 0.1141357421875, 0.1629638671875, 0.23779296875, 0.042083740234375, 0.310546875, 0.292236328125, 0.1748046875, 0.023681640625, 0.056640625, 0.281494140625, 0.390625, 0.204345703125, 0.1553955078125], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d94ca3508395c5666367ef60ee8cb8b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01294708251953125, 0.170166015625, 0.31396484375, 0.30126953125, 0.480224609375, 0.0975341796875, 0.456298828125, 0.1300048828125, 0.01042938232421875, 0.2154541015625, 0.341796875, 0.450439453125, 0.36572265625, 0.1485595703125, 0.280517578125, 0.139404296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25e9e590a38db5a588ded3a43a86617f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 480, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[480], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9ab673e2630f52b34b577b7acca8128(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25e9e590a38db5a588ded3a43a86617f
    def get_inputs(self):
        return [
            paddle.uniform([480], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 480, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 16, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[16], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59236b22500d3b983ed80538ccd99a45(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12386525422334671, 0.1554693877696991, 0.238989919424057, 0.39538124203681946, 0.35029637813568115, 0.09218940883874893, 0.002096220152452588, 0.03989191725850105, 0.15273869037628174, 0.2943301796913147, 0.04525858908891678, 0.12185560911893845, 0.006667549721896648, 0.2109447866678238, 0.041470035910606384, 0.07895156741142273], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec76e605d8efe1b2cb60e2959f529ffc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0477294921875, 0.2890625, 0.373046875, 0.341064453125, 0.295654296875, 0.295654296875, 0.170654296875, 0.302490234375, 0.12237548828125, 0.04949951171875, 0.10626220703125, 0.44677734375, 0.01082611083984375, 0.1787109375, 0.326171875, 0.060943603515625, 0.055450439453125, 0.41943359375, 0.1683349609375, 0.1861572265625, 0.426025390625, 0.1492919921875, 0.249755859375, 0.12091064453125, 0.2294921875, 0.489013671875, 0.436279296875, 0.406982421875, 0.35400390625, 0.341552734375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e8bc03ff1334dcb6b19b6b49977c3ee5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07219178974628448, 0.371878057718277, 0.4001528024673462, 0.07202574610710144, 0.022594405338168144, 0.1473013311624527, 0.0563000924885273, 0.44815951585769653, 0.13389401137828827, 0.2267838716506958, 0.42721253633499146, 0.17991773784160614, 0.49602627754211426, 0.24719582498073578, 0.2879067063331604, 0.1685739904642105], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_36c5b3eabfae62af376e19ef0292bc47(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([128], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 128, 6, 40], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b20d58a32fe68095761f726f962c1c4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_36c5b3eabfae62af376e19ef0292bc47
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 6, 40], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([128], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d1707636fc1992c60fc4b126594f20d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e1bfe87da50134417c2fb5ffd60303de
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_126127298a872858242ef92a6d59a455(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1fed42ac7bace8d3316ab2b1f19b1da5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_126127298a872858242ef92a6d59a455
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7168368fc2d9714a65f7f1529a86c458(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_467869104fcd48bd7ddb366609748bfa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1400146484375, 0.1767578125, 0.105712890625, 0.425537109375, 0.3330078125, 0.474609375, 0.33203125, 0.30908203125, 0.4345703125, 0.2259521484375, 0.17529296875, 0.434814453125, 0.11358642578125, 0.10076904296875, 0.282470703125, 0.05963134765625, 0.319091796875, 0.4892578125, 0.10797119140625, 0.36669921875, 0.086669921875, 0.1353759765625, 0.334228515625, 0.2049560546875, 0.258056640625, 0.46533203125, 0.050140380859375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e74cb704a11faaf67852c1c91f534390(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35791015625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_43b9f6546658842e4b05b14487bc284a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='int64'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c26fb2567e24d297fb755e3a6e8b2822(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_43b9f6546658842e4b05b14487bc284a
    def get_inputs(self):
        return [
            paddle.to_tensor([92], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1e8da62c0b3b86604e20ffc701398757(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_18dbf517f37e3de817b5cd0021e402c8
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a224222de31045650e13d1ae36bee221(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 240, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[240], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bd781ee82bc35e3eeca67e5ddc2fc3f7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a224222de31045650e13d1ae36bee221
    def get_inputs(self):
        return [
            paddle.uniform([240], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 240, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 120, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[120], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1d8d3a8b9f64d7a3230fa7435759c2f5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ddf28a42f05d54d46c7f9378d65e5f9b
    def get_inputs(self):
        return [
            paddle.uniform([120], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 120, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 60, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[60], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6765253200d7c0118c082ef2d30068ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_494c6e8ea922a280cb0ae4aa7ac09246
    def get_inputs(self):
        return [
            paddle.uniform([60], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 60, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 392, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[392], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b2e28bdb089b2a06f9f3c0f65620f93(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cffd7c1fbc17ce9bf9205c6a3bdb640
    def get_inputs(self):
        return [
            paddle.uniform([392], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 392, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd2e9266af049333222abbc5369b00ff(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1e6d76e12169f33d21df39c45ea232f4
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_175832106832b3c3868e00d3de8d643f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.29523786902427673, 0.4792270064353943, 0.44907060265541077, 0.037667348980903625, 0.2739139497280121, 0.2411089539527893, 0.4380562901496887, 0.16008497774600983, 0.4125996530056, 0.31804269552230835, 0.02244485728442669, 0.09552587568759918], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6225ef866b48cd44bfa043c3c1745598(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_78a0d7516ce6b7304de9593617e4ec58
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fe36d3461e30bd1de2e1edf5ac309240(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15031655132770538, 0.31291404366493225, 0.485689252614975, 0.41298604011535645, 0.09539714455604553, 0.4495413899421692, 0.24753832817077637, 0.1845436692237854], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_db2c637356ff6a9907ed3be79e224d4e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2e64510bd49eb08c5e12d31c06b0cfcc
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9af4cb855258bc9963ad750f6e5305ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358154296875, 0.32373046875, 0.3662109375, 0.411376953125], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1000, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1000], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d3f380390162d404d1c4b19a90eb3870(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7fdf01fd3d3edfc98fc99b1a9b16bedb
    def get_inputs(self):
        return [
            paddle.uniform([1000], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1000, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a0be70bf7de2b5fc70234eaed4e4c82(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.427734375, 0.437744140625, 0.400390625, 0.1661376953125, 0.0164337158203125, 0.276123046875, 0.0077056884765625, 0.045013427734375, 0.302001953125, 0.285888671875, 0.1749267578125, 0.425537109375, 0.340576171875, 0.425048828125, 0.474365234375, 0.44677734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_25d707a3f2bd7968108cf4e380c79804(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([512], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([240], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 512, 6, 40], dtype='float32'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_688f63e9669f001af155addec47926fb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_25d707a3f2bd7968108cf4e380c79804
    def get_inputs(self):
        return [
            paddle.uniform([1, 512, 6, 40], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([512], dtype='int32').reshape([1]),
            paddle.to_tensor([240], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f28dd262e7e08b340552622aea2227df(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb67791e6ca96c827bccf3ba7864c93b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f28dd262e7e08b340552622aea2227df
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1dafeee7cb0655808e50c0e0f616f55e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19161851704120636, 0.46220359206199646], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_352b7c67cd45ab47cd1f59666d8eafbf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3238590955734253, 0.3485160768032074, 0.06819351017475128, 0.02563709206879139, 0.34948068857192993, 0.09268835186958313, 0.3713865578174591, 0.03083648718893528, 0.33313319087028503, 0.2746058702468872, 0.23058044910430908, 0.007815028540790081, 0.35935288667678833, 0.06436418741941452, 0.28560465574264526, 0.061555977910757065, 0.11291901767253876, 0.14555415511131287, 0.15134234726428986, 0.4825282692909241, 0.2878716289997101, 0.2413053661584854, 0.01711885631084442, 0.33373868465423584, 0.07795721292495728], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4267c64d5d5712cc511e15e7da51962d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.146240234375, 0.07037353515625, 0.462890625, 0.43505859375, 0.14208984375, 0.05731201171875, 0.27001953125, 0.055999755859375, 0.087646484375, 0.040771484375, 0.309814453125, 0.365234375, 0.2147216796875, 0.2169189453125, 0.2352294921875, 0.358154296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c2aafafa3a0f2804a2b27a1756fc1170(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10650634765625, 0.13818359375, 0.44482421875, 0.07977294921875, 0.03546142578125, 0.0894775390625, 0.325927734375, 0.23193359375, 0.0287933349609375, 0.361572265625, 0.25927734375, 0.324951171875, 0.22021484375, 0.43310546875, 0.0293426513671875, 0.13134765625, 0.0203399658203125, 0.00785064697265625, 0.028350830078125, 0.482177734375, 0.439208984375, 0.472412109375, 0.433837890625, 0.39404296875, 0.4296875, 0.420166015625, 0.1492919921875], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 19, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[19], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb87151a08f41082927b45ae87f601d7(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42205342650413513, 0.17761459946632385, 0.462312251329422, 0.17492157220840454, 0.4630918502807617, 0.3194037079811096, 0.039656419306993484, 0.0215744748711586, 0.15842203795909882, 0.3663956820964813, 0.47854429483413696, 0.3844936490058899, 0.1884942203760147, 0.45576032996177673, 0.254678338766098, 0.48502254486083984, 0.3338586688041687, 0.3673407733440399, 0.132791668176651], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 25, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[25], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_04651f445ae10188c0710f25e3f5521a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3779296875, 0.033599853515625, 0.38037109375, 0.0168304443359375, 0.365234375, 0.219970703125, 0.48046875, 0.25048828125, 0.36767578125, 0.2091064453125, 0.3330078125, 0.298583984375, 0.287841796875, 0.09344482421875, 0.2548828125, 0.301513671875, 0.313720703125, 0.05108642578125, 0.295654296875, 0.032958984375, 0.261962890625, 0.2218017578125, 0.007015228271484375, 0.00040221214294433594, 0.402099609375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_99db288df05fe60e2ba2083c833c3832(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5980dd3150a72753bf57580b2adb7ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99db288df05fe60e2ba2083c833c3832
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_51bf8263e6facdc374376d337e40606f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 12, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[12], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e0bc4ef542049397ec99ad9f9f204785(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2249755859375, 0.481689453125, 0.472900390625, 0.388671875, 0.159423828125, 0.192626953125, 0.2147216796875, 0.204345703125, 0.482666015625, 0.36279296875, 0.2364501953125, 0.06597900390625], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ab0cb8a80d1a66cd012199224946361d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 3, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[3], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bdc2ce159c78ea5114381d3f6d7c9d91(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1988525390625, 0.1441650390625, 0.248779296875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8bcc5fc7225aac3f52d8d3096d8768aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.12066650390625, 0.4384765625, 0.462158203125, 0.3115234375, 0.055389404296875, 0.11456298828125, 0.1976318359375, 0.361572265625, 0.245849609375, 0.0848388671875, 0.05645751953125, 0.131591796875, 0.414794921875, 0.1461181640625, 0.2890625, 0.168701171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_006cae7a2eb0e5da01d327a0943b1099(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3098202347755432, 0.35644739866256714, 0.1886148452758789, 0.2488332837820053, 0.4783753752708435, 0.21368762850761414, 0.3926708400249481, 0.3235519528388977, 0.30815163254737854, 0.20421725511550903, 0.4276878535747528, 0.4342315196990967, 0.3908117115497589, 0.2930848300457001, 0.3448140025138855, 0.007687525823712349], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 24, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[24], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ac270a7e0ae3137c550133bf7fe6655(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03027360700070858, 0.4943152070045471, 0.4109763503074646, 0.06791537255048752, 0.3222038745880127, 0.09381504356861115, 0.15160788595676422, 0.24231797456741333, 0.10557609051465988, 0.2728056311607361, 0.35081416368484497, 0.3455953001976013, 0.008475887589156628, 0.015833457931876183, 0.11216819286346436, 0.3215119540691376, 0.3793521523475647, 0.4700605273246765, 0.31876376271247864, 0.050281841307878494, 0.1617160588502884, 0.2738285958766937, 0.47524720430374146, 0.147861510515213], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_140157323802807a893bfdff45660fab(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_75a543643012e8f8e5ad1d8cb18a233a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_140157323802807a893bfdff45660fab
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f06b1ba242bc8385294d6b6a9fe2bc06(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.467529296875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b5bfde743a46c022962ac391aae86d42(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45582371950149536, 0.37699952721595764, 0.08261943608522415, 0.34689921140670776, 0.19890567660331726, 0.28635624051094055, 0.21120497584342957, 0.456728458404541, 0.2121465802192688, 0.09322205930948257, 0.36612656712532043, 0.24280135333538055, 0.17841415107250214, 0.23403233289718628, 0.36193591356277466, 0.14803466200828552], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 8, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[8], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0b809f38a5b5b059eef28b18db8dc004(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1370849609375, 0.2191162109375, 0.37353515625, 0.077880859375, 0.47509765625, 0.10186767578125, 0.342529296875, 0.353515625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_407c87ece97ee13cd718313ff6612816(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17355984449386597, 0.15402080118656158, 0.3441021740436554, 0.41034364700317383, 0.3886721730232239, 0.06629385054111481, 0.30459100008010864, 0.042075179517269135, 0.4497172236442566, 0.3539484143257141, 0.25685352087020874, 0.13589581847190857, 0.44088414311408997, 0.2190738320350647, 0.45409056544303894, 0.05855286121368408], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9474d0c396e1c3653c19f71e073595d3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f811c567f8cd54d87c2a0559fa5ad19c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9474d0c396e1c3653c19f71e073595d3
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 48, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[48], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df31c92b16b89bfe93d32d8431a0373f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f85a83650aea66ec931f14c38f7aad1
    def get_inputs(self):
        return [
            paddle.uniform([48], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 48, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f9591a0aaf515741e8968b77e8500202(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0ef928b84a28df20982e43fead5e64aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f9591a0aaf515741e8968b77e8500202
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_742d3754f80e579ba6ede8d5b8058863(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4417189955711365, 0.16919060051441193, 0.22285853326320648, 0.2391025424003601, 0.3819420039653778, 0.34169501066207886, 0.0923682451248169, 0.060427647083997726, 0.4225795865058899, 0.24477481842041016, 0.4276101887226105, 0.1284857839345932, 0.4656302034854889, 0.25043731927871704, 0.18018218874931335, 0.35182109475135803, 0.13863500952720642, 0.20980358123779297, 0.24423862993717194, 0.2340364158153534, 0.24925942718982697, 0.31668826937675476, 0.33236414194107056, 0.466546893119812, 0.22275874018669128, 0.18054373562335968, 0.446297824382782, 0.306120365858078], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_247d9b74d19e874ba278a54a64a6047e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11949960142374039, 0.1556968241930008, 0.013942809775471687, 0.4781953692436218, 0.06730668246746063, 0.39221900701522827, 0.26101791858673096, 0.2225692868232727, 0.029293257743120193, 0.2977027893066406, 0.06917652487754822, 0.3487936556339264, 0.4625706970691681, 0.03164849430322647, 0.05358940362930298, 0.3305155038833618], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5605e9e71718c76905d34dfd01721475(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36130285263061523, 0.0814686194062233, 0.4236447811126709], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5fb9208c3eed1b342c5b2261f2578d2f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.058074951171875, 0.333251953125, 0.0950927734375, 0.4140625, 0.335205078125, 0.4287109375, 0.4423828125, 0.23583984375, 0.266357421875, 0.44384765625, 0.176513671875, 0.30859375, 0.33935546875, 0.362548828125, 0.3466796875, 0.26416015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4c61a843621bb833716fe1cb9cd31a50(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.030489254742860794, 0.1347707360982895, 0.33416739106178284, 0.4625370502471924, 0.12024006247520447, 0.3449890613555908, 0.07909946888685226, 0.32122182846069336, 0.460727334022522, 0.057269684970378876, 0.3985432982444763, 0.03262169659137726], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_28c72fdfb6434a39ba24b5044dac6fc5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34814453125, 0.1622314453125, 0.2890625, 0.311767578125, 0.1610107421875, 0.2646484375, 0.11480712890625, 0.321533203125, 0.30517578125, 0.1309814453125, 0.40185546875, 0.1717529296875, 0.364501953125, 0.3115234375, 0.432861328125, 0.26513671875, 0.439453125, 0.367919921875, 0.140869140625, 0.418701171875, 0.1705322265625, 0.370361328125, 0.27880859375, 0.274169921875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6dc25886605f6c99e5333e88315bbedf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 257, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[257], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_73df0e3ae62a6655704f9b68999ec0fd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6dc25886605f6c99e5333e88315bbedf
    def get_inputs(self):
        return [
            paddle.uniform([257], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 257, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_76110e373b34b5f6be6b2d1a6f3342b9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.396240234375, 0.479736328125, 0.348388671875, 0.32958984375, 0.11700439453125, 0.06195068359375, 0.10101318359375, 0.460693359375, 0.123779296875, 0.283203125, 0.234375, 0.337646484375, 0.429443359375, 0.434814453125, 0.034332275390625, 0.1434326171875, 0.275634765625, 0.277587890625, 0.494384765625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1152, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1152], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d780af52c8e1efef99794179a2a19b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_85ebe7380276c0d142277d8d96f2ace7
    def get_inputs(self):
        return [
            paddle.uniform([1152], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1152, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_18339e153648bb497908662f4539af4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.30419921875, 0.07708740234375, 0.2462158203125, 0.447998046875, 0.0701904296875, 0.3134765625, 0.155517578125, 0.449462890625, 0.042236328125, 0.259765625, 0.37939453125, 0.2291259765625, 0.0179443359375, 0.438232421875, 0.291748046875, 0.4853515625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e55190ca20138f0a1dd70ebf5cd64844(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8da03184ce139718c84ce6d9fdf793d9
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_def9cd5b2aef9bf7f5cc7f2ed65eabfe(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d20d78a9a47e3176bf97f5a162d7fbf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35546875, 0.04150390625], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd4dd9da6c8d302195803971fa4799de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.358642578125, 0.484375, 0.48388671875, 0.35107421875, 0.379638671875, 0.32568359375, 0.443115234375, 0.345703125, 0.471435546875, 0.34130859375, 0.4736328125, 0.047393798828125, 0.327392578125, 0.223876953125, 0.251953125, 0.286865234375, 0.338623046875, 0.255615234375, 0.22509765625, 0.49853515625, 0.46875, 0.453857421875, 0.137939453125, 0.451416015625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_962c37a605eb907fce36f0470bdfee8d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1524384617805481, 0.31885597109794617], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_111d43f9efa9c16b156439ac6d03e962(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7b289257a058ceff484837745ac146c1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_111d43f9efa9c16b156439ac6d03e962
    def get_inputs(self):
        return [
            paddle.uniform([36], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 36, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0469ed37c14d545e4e8b93cf7d234bae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float16'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fcd6439e944b9c4a2f2be12d620e234d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0469ed37c14d545e4e8b93cf7d234bae
    def get_inputs(self):
        return [
            paddle.uniform([512], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 512, 1, 1, 1], dtype='int64').reshape([5]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a005d579d8286c41688de9e5f84a329b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.455322265625], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e24341cdd0c386828737cb259fa3c958(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b085891b19d3d45d1a9cc3176c13e875(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e24341cdd0c386828737cb259fa3c958
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_03b796b537c2de0e5a85847717fc81c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.146484375, 0.268798828125, 0.457763671875, 0.1962890625, 0.02691650390625, 0.44287109375, 0.03240966796875, 0.027435302734375, 0.44580078125, 0.366455078125, 0.09527587890625, 0.419677734375, 0.198974609375, 0.405517578125, 0.35302734375, 0.49755859375, 0.056243896484375, 0.281494140625, 0.044097900390625, 0.297607421875, 0.3642578125, 0.07208251953125, 0.07904052734375, 0.2607421875, 0.1943359375, 0.4970703125, 0.4462890625, 0.1524658203125, 0.392333984375, 0.20849609375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_00c90ab23b4ad34f9aa5c5e787fa5781(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.016863347962498665, 0.37138164043426514, 0.1187591701745987, 0.4749975800514221, 0.35007891058921814, 0.15251795947551727, 0.2675386071205139, 0.23774850368499756, 0.4007115364074707, 0.4025082290172577, 0.3532901108264923, 0.09237241744995117, 0.23621107637882233, 0.45655232667922974, 0.2761346697807312, 0.20621682703495026], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e3e7c86b98a939359ae78d68a4cc72e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1568603515625, 0.343994140625, 0.420654296875, 0.129150390625, 0.2379150390625, 0.178955078125, 0.004001617431640625, 0.369384765625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_582b977c15640984d3971fa7ee66d821(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.22877824306488037, 0.19175344705581665, 0.3526632487773895, 0.300672709941864, 0.42892885208129883, 0.16580021381378174, 0.3064415454864502, 0.03988790139555931, 0.3683987259864807, 0.006218491122126579, 0.029697397723793983, 0.04346977546811104, 0.12298870831727982, 0.4733782708644867, 0.41754257678985596, 0.09467723220586777, 0.018274040892720222, 0.34277474880218506, 0.12165680527687073, 0.4182032644748688, 0.11878146976232529, 0.34075161814689636, 0.39336106181144714, 0.17357628047466278], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5cc1d65d5541373a97413a796a56089a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.349853515625, 0.2474365234375, 0.09661865234375, 0.308837890625, 0.35546875, 0.247314453125, 0.42041015625, 0.3173828125, 0.2427978515625, 0.2802734375, 0.43603515625, 0.0762939453125, 0.28125, 0.11883544921875, 0.06744384765625, 0.36474609375, 0.1519775390625, 0.422119140625, 0.38818359375, 0.1826171875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8424ef08dee68d61695035c432ff627e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.468994140625, 0.0115814208984375, 0.028778076171875, 0.2724609375, 0.00428009033203125, 0.1385498046875, 0.29833984375, 0.1456298828125, 0.03009033203125, 0.376220703125, 0.3681640625, 0.39013671875, 0.0889892578125, 0.1495361328125, 0.32177734375, 0.0982666015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_49f64992a1ab47fa9735098724d1856c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.172607421875, 0.164794921875, 0.3759765625, 0.2138671875, 0.430908203125, 0.0899658203125, 0.401611328125, 0.1842041015625, 0.4970703125, 0.290771484375, 0.1729736328125, 0.4677734375, 0.396484375, 0.08990478515625, 0.447265625, 0.0210418701171875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0296f854bdc7fe23a13230a9d667cde9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_521ca35be08e654eeb85f3beff33fa9a
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3f143c0ca8971c9cb0aee3e1ef982158(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4554820954799652, 0.38346096873283386, 0.111078180372715, 0.37164750695228577, 0.39890867471694946, 0.2669128179550171, 0.06658071279525757, 0.38600870966911316, 0.3635043799877167, 0.3007054328918457, 0.04207839444279671, 0.2505601942539215, 0.32978004217147827, 0.0666603222489357, 0.17056021094322205, 0.07452813535928726], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_35fae243d8722e86177d2f50c36b9364(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c0cda151ca61b8a20209b88bc9ea409(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.054168701171875, 0.054962158203125, 0.1561279296875, 0.11187744140625, 0.27099609375, 0.38671875], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b7128015721b168549497631acf9e448(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 68, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[68], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e5ece0acae22299f5857b6b1f15491eb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b7128015721b168549497631acf9e448
    def get_inputs(self):
        return [
            paddle.uniform([68], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 68, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13b81363f093a3990560ed0e15692509(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35979318618774414, 0.016901368275284767, 0.19209332764148712, 0.20734640955924988, 0.21076755225658417, 0.3466150164604187, 0.4437355399131775, 0.45228856801986694, 0.23718547821044922, 0.4343716502189636, 0.09078094363212585, 0.4248012602329254, 0.08540099114179611, 0.029669053852558136, 0.27187007665634155, 0.38976138830184937, 0.3283609449863434, 0.11502595245838165, 0.4588667154312134, 0.11535371840000153], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ff7487baa05f3c6fb4cf14f36f08d9c2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14491212368011475, 0.22944559156894684, 0.19359886646270752, 0.1859481930732727, 0.11450199037790298, 0.15552908182144165, 0.23105399310588837, 0.1378055363893509, 0.49097949266433716, 0.4356602430343628, 0.10937030613422394, 0.0859939306974411, 0.4273897111415863, 0.3797188699245453, 0.15844659507274628, 0.02145632728934288, 0.059474535286426544, 0.33617961406707764, 0.23495909571647644, 0.1596502810716629, 0.4651775658130646, 0.4990203082561493, 0.005478023085743189, 0.28184208273887634], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 640, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[640], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c288a7d6e0fc0512734edc18119549f3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9f55af7132d3d175e1d310ec312a77a9
    def get_inputs(self):
        return [
            paddle.uniform([640], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 640, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_262cd89aa9403805bd0a4a5e6847344a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_427ab4bd596e9bbb26d9620a20b06ff3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.446044921875], dtype='float16').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5fc57627e042ca460d92274720bc6a98(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a9cdd8f4cd7510a802beada8a43209ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5fc57627e042ca460d92274720bc6a98
    def get_inputs(self):
        return [
            paddle.uniform([840], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 840, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2319c765fb219df2e7dcd7462c1669da(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.072998046875, 0.152587890625, 0.37548828125, 0.1732177734375, 0.199951171875, 0.275634765625, 0.10595703125, 0.07574462890625, 0.3779296875, 0.03973388671875, 0.2027587890625, 0.11737060546875, 0.023712158203125, 0.180908203125, 0.2308349609375, 0.48681640625, 0.1903076171875, 0.0279388427734375, 0.437744140625, 0.109619140625, 0.435546875, 0.4716796875, 0.399169921875, 0.48583984375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d420f6c6d75e7e06602a10c8b3822613(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09661865234375, 0.09576416015625, 0.056732177734375, 0.27294921875, 0.368408203125, 0.006465911865234375, 0.3828125, 0.2919921875, 0.364990234375, 0.030731201171875, 0.22607421875, 0.46826171875, 0.092529296875, 0.265869140625, 0.1605224609375, 0.230712890625, 0.3740234375, 0.330322265625, 0.138916015625, 0.049957275390625, 0.4091796875, 0.1885986328125, 0.49462890625, 0.43359375, 0.031494140625], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f47c83fa213437f0987cb673c7fa398b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.47314453125, 0.495361328125, 0.40869140625, 0.3798828125, 0.337646484375, 0.18896484375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 10, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[10], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_17383d4b1eeffdbf1104a7ff7da33467(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2679803669452667, 0.31751716136932373, 0.13997356593608856, 0.1359129548072815, 0.106258325278759, 0.4040219187736511, 0.01382177509367466, 0.10755598545074463, 0.22314134240150452, 0.3283593952655792], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3c3dcac2c8035fe08076823493696330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 193, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[193], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a4a5230f8caab6de9b6840085fd44447(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3c3dcac2c8035fe08076823493696330
    def get_inputs(self):
        return [
            paddle.uniform([193], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 193, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22587594e3339496a9c1b5d4727d6bef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46142578125, 0.04656982421875, 0.2022705078125, 0.1031494140625, 0.377197265625, 0.2244873046875, 0.337158203125, 0.100830078125, 0.07269287109375, 0.0225372314453125, 0.1773681640625, 0.133544921875, 0.10205078125, 0.24462890625, 0.2398681640625, 0.451904296875, 0.44775390625, 0.4638671875, 0.0736083984375, 0.2298583984375, 0.08355712890625, 0.2919921875, 0.1619873046875, 0.1600341796875, 0.0374755859375, 0.202880859375, 0.269775390625, 0.33837890625, 0.179931640625, 0.288330078125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c9c274d600ca9a441881f8831170d129(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensordtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_21eaadd0fddc7fca9b3d5664bec48149(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c54deec2dc8e1c9974ee9516d10be6c7
    def get_inputs(self):
        return [
            paddle.uniform([2304], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 2304, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_033875d5272aa12ce055357e8df7a811(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42787450551986694, 0.3004800081253052, 0.12544813752174377, 0.44024091958999634, 0.10755270719528198, 0.46004024147987366, 0.45794057846069336, 0.3604251742362976, 0.2668655216693878, 0.2824160158634186, 0.3183165490627289, 0.0891309306025505, 0.3495357930660248, 0.2817324697971344, 0.07222123444080353, 0.3675139844417572], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 28, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[28], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_182851d7423039baca24813f68a0b789(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.046295166015625, 0.279541015625, 0.13330078125, 0.0232696533203125, 0.484619140625, 0.0382080078125, 0.025115966796875, 0.333984375, 0.054290771484375, 0.3232421875, 0.456787109375, 0.35986328125, 0.493896484375, 0.21435546875, 0.44775390625, 0.1566162109375, 0.418212890625, 0.496337890625, 0.29150390625, 0.406005859375, 0.330322265625, 0.464111328125, 0.04400634765625, 0.11846923828125, 0.41796875, 0.240966796875, 0.465576171875, 0.385498046875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 80, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[80], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a7bccc9c8b855cb5bc7157c4c22e5ad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_49ef9b4be240e6b0c5a0ddeb27ec7b0e
    def get_inputs(self):
        return [
            paddle.uniform([80], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 80, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a4dcff6a6f96456fc1eddff996cb456(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07448890805244446, 0.3504820764064789, 0.3442065417766571, 0.2090628445148468, 0.44140297174453735, 0.30820101499557495, 0.3673817813396454, 0.3317652642726898, 0.13304641842842102, 0.24582713842391968, 0.1444728523492813, 0.3731484115123749, 0.05158984288573265, 0.2502354383468628, 0.28078123927116394, 0.2146865874528885, 0.027971064671874046, 0.32712045311927795, 0.23369497060775757, 0.3341354727745056], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0803f0b832b826a7125c503cd2508b7e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.156005859375, 0.284423828125, 0.06817626953125, 0.1514892578125, 0.2135009765625, 0.447021484375, 0.05609130859375, 0.275146484375, 0.2587890625, 0.39404296875, 0.1988525390625, 0.037200927734375, 0.326416015625, 0.1290283203125, 0.414794921875, 0.048797607421875, 0.31640625, 0.331298828125, 0.225341796875, 0.2222900390625, 0.42626953125, 0.4169921875, 0.05633544921875, 0.482421875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d095cab41cbb4c1b9b8f69c0a602aef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2208251953125, 0.2022705078125, 0.460205078125, 0.0498046875, 0.42529296875, 0.4248046875, 0.348876953125, 0.3388671875], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_4ff470d8f8e2350fe419dacf3e6760b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e7e4645932acd54522d946af4b54e5c9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4ff470d8f8e2350fe419dacf3e6760b9
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cc2fb7182ef99507116908d74b165d39(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08381591737270355, 0.2035885453224182, 0.09589486569166183, 0.20380091667175293, 0.17780017852783203, 0.1902642399072647, 0.3394381105899811, 0.31135475635528564, 0.24822498857975006, 0.28568947315216064, 0.0007836110307835042, 0.19449584186077118, 0.2673911154270172, 0.19774511456489563, 0.4589434564113617, 0.08322642743587494, 0.10069595277309418, 0.3167405426502228, 0.13330483436584473, 0.19588322937488556, 0.274286687374115, 0.3721230924129486, 0.02702895551919937, 0.03668833151459694, 0.14432506263256073], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b06d1948ed3a8d78f55436a6b3fe6e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.013189627788960934, 0.44894954562187195, 0.4715772271156311, 0.09945762157440186, 0.12202993035316467, 0.11248692870140076, 0.14798910915851593, 0.43715900182724, 0.15452618896961212, 0.33764609694480896, 0.00025439116870984435, 0.0879475399851799, 0.1962926983833313, 0.08258136361837387, 0.3772179186344147, 0.16175508499145508], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df99342e9f4cf153184fa970b39fec4f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3239932656288147, 0.17483152449131012, 0.4512242376804352, 0.3189636766910553, 0.18274784088134766, 0.4847486615180969, 0.03583076223731041, 0.06040554866194725, 0.48948395252227783, 0.014398650266230106, 0.4336416721343994, 0.0478794127702713, 0.365053653717041, 0.3536915183067322, 0.07243369519710541, 0.35853496193885803], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4d90018c17281a7f87d4bf9c072ea7dc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4150390625, 0.00792694091796875, 0.148193359375, 0.40625, 0.48779296875, 0.417236328125], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f6e02aa4c10b1c37921f74bbef3ca227(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4056186079978943, 0.23927821218967438, 0.3341672122478485, 0.2129172682762146, 0.22815987467765808, 0.26707226037979126, 0.03312239795923233, 0.25116369128227234, 0.46686118841171265, 0.20443305373191833, 0.33794185519218445, 0.3226454257965088, 0.1391947865486145, 0.3966268301010132, 0.0962272509932518, 0.37691378593444824], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_57f49d28787da8a67945b8ee9089f420(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45dcbac5cf7d774f090fe0e5a58f1b8a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_57f49d28787da8a67945b8ee9089f420
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 672, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[672], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d00d214de24836ff01c88f3cd35b698e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6166b7bb2b7b0b4e7f88f6882660841e
    def get_inputs(self):
        return [
            paddle.uniform([672], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 672, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5afc82ef84e0ebcb51a71a125e74aa36(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_91588c38fcbdae72f59a79e4f0a7450f
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_adde2f5281fed82c137e00d8c83a1d27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d382eecaa6445ab601fa9ee1b987d2c2
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6c6b9b06eed8f640554e4404155bbe4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3525075316429138, 0.025356387719511986, 0.316127747297287, 0.04557487741112709, 0.3294887840747833, 0.29810410737991333, 0.3895878195762634, 0.3562217056751251, 0.0405406579375267, 0.49768543243408203, 0.24614115059375763, 0.326412558555603, 0.1624891310930252, 0.16005530953407288, 0.08318348973989487, 0.3594191372394562], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_719b0fe264e9986f5e8aa4b075fc6377(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9951767dc7856079f2d15d49cbf7fd94
    def get_inputs(self):
        return [
            paddle.uniform([216], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 216, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7ccca1711c4fa12692c88fa09a7a19fc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.319091796875, 0.0267486572265625, 0.445556640625, 0.37890625, 0.243408203125, 0.39990234375, 0.2294921875, 0.039306640625, 0.03582763671875, 0.4384765625, 0.3193359375, 0.2288818359375, 0.494873046875, 0.0207672119140625, 0.0919189453125, 0.166259765625, 0.409912109375, 0.165283203125, 0.367431640625, 0.343017578125, 0.04364013671875, 0.400146484375, 0.017730712890625, 0.4921875, 0.142578125], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b78f81ca5f45bac85ba448da918e1637(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9639858b17d30594db9948459f11c138(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b78f81ca5f45bac85ba448da918e1637
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 6, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[6], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10b0acc2c4f4abb9163a9df1afc2115e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26444074511528015, 0.06949740648269653, 0.4008776545524597, 0.021179594099521637, 0.31482192873954773, 0.01806165836751461], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5631557ad99353b4d507fe9d57144ce5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.007282364182174206, 0.32799381017684937, 0.30758529901504517, 0.06170881539583206, 0.372527152299881, 0.024441471323370934, 0.012017897330224514, 0.16874144971370697, 0.21605736017227173, 0.23687492311000824, 0.13589516282081604, 0.05073205754160881, 0.1396755576133728, 0.15931276977062225, 0.4047311842441559, 0.2850242555141449], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36e172d429dddba9674a7aa4f0019795(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_51bf8263e6facdc374376d337e40606f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.032012939453125, 0.21826171875, 0.471435546875, 0.2125244140625, 0.271240234375, 0.2958984375, 0.438232421875, 0.2335205078125, 0.27294921875, 0.31884765625, 0.2366943359375, 0.451171875], dtype='float16').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fead472cf04f8a97d021aab55d8fc4be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.185978502035141, 0.4861384332180023, 0.41888150572776794, 0.48365578055381775, 0.47427836060523987, 0.018453944474458694, 0.27740180492401123, 0.4997537136077881, 0.44225800037384033, 0.33047226071357727, 0.28326699137687683, 0.1817169487476349], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d2180e6e75221a06a66339a15779938(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4867748022079468, 0.021004779264330864, 0.27099815011024475, 0.2553867697715759, 0.41668665409088135, 0.017312433570623398, 0.4741761386394501, 0.2637942135334015, 0.37284061312675476, 0.1542935073375702, 0.11586199700832367, 0.19918446242809296, 0.1223502904176712, 0.2725485861301422, 0.43167006969451904, 0.27441561222076416], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5ebdbf40f9ad8864af85007eb91de901(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01231246069073677, 0.10964005440473557, 0.3499341905117035, 0.29972580075263977, 0.34022462368011475, 0.1460406333208084, 0.482201486825943, 0.31589511036872864, 0.4085014760494232, 0.2961105406284332, 0.10942662507295609, 0.3490128815174103, 0.3938077688217163, 0.4348214268684387, 0.02684374526143074, 0.37112751603126526, 0.1307087391614914, 0.07176286727190018, 0.3061084747314453, 0.44498923420906067, 0.20799647271633148, 0.019624702632427216, 0.018875470384955406, 0.11684145033359528], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6f7fe067b231c4a75e28155071f8b9c3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.455078125, 0.400634765625, 0.474853515625, 0.09027099609375, 0.035675048828125, 0.405029296875, 0.2176513671875, 0.007122039794921875, 0.0755615234375, 0.4892578125, 0.481689453125, 0.3720703125, 0.3046875, 0.4267578125, 0.2320556640625, 0.066650390625, 0.38232421875, 0.08880615234375, 0.14404296875, 0.392822265625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01d6f22d794f4695de99a51464761ec1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0997cc89c6338c7b76864ae846e00ba4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01d6f22d794f4695de99a51464761ec1
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1259765625, 0.4482421875, 0.456298828125, 0.417236328125, 0.0069122314453125, 0.179443359375, 0.15771484375, 0.0070953369140625, 0.08453369140625, 0.328125, 0.49365234375, 0.25341796875, 0.0908203125, 0.048248291015625, 0.302978515625, 0.455078125, 0.15771484375], dtype='float16').reshape([17]),
            paddle.to_tensor([1, 17, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_024e0d162516e413a3b18d806e6b5c57(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_77dfd02fb9c93e0dace3aa7f138069ac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_024e0d162516e413a3b18d806e6b5c57
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_68863052d6a72b3e185177b407a177bc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4441639482975006], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_ba32a88792bcda1e7debf247a6100264(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5a05f4b780fe10500dc7806c4bb07356(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ba32a88792bcda1e7debf247a6100264
    def get_inputs(self):
        return [
            paddle.uniform([72], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 72, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22528, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 256, 88, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b752edbcdf8035fddd6b7e752cd702db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_27f8ed6a4421b5db04bc7a074edd663d
    def get_inputs(self):
        return [
            paddle.uniform([1, 256, 88, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22528, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_98d804b1c9d4b140797fc82e90002768(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.42626953125, 0.21875, 0.09527587890625, 0.07080078125, 0.060577392578125, 0.2177734375, 0.022125244140625, 0.1923828125, 0.050262451171875, 0.06915283203125, 0.42138671875, 0.44140625, 0.03338623046875, 0.25390625, 0.2021484375, 0.462158203125, 0.3955078125, 0.43701171875, 0.052398681640625, 0.23681640625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e58bf7bce2b0ca3db5b8cbdefc403de3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05436310917139053, 0.41862228512763977, 0.09242311120033264, 0.30943119525909424, 0.2372601181268692, 0.12757498025894165, 0.06609909236431122, 0.22492080926895142, 0.20284231007099152, 0.42172059416770935, 0.11448235809803009, 0.25329527258872986, 0.3703751862049103, 0.25969424843788147, 0.06488598138093948, 0.0795527994632721, 0.05990084260702133, 0.22181883454322815, 0.17133599519729614], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 56, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[56], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cccb2b9e947e032b6f30d953e24d25f8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_bd4b4a18837c08d3069584a6ba8999b0
    def get_inputs(self):
        return [
            paddle.uniform([56], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 56, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 30, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[30], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6359a4fc62fdb61b35da30548db3e36f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4077087640762329, 0.030278299003839493, 0.38345324993133545, 0.4185660183429718, 0.13029073178768158, 0.15277419984340668, 0.38923779129981995, 0.26354870200157166, 0.35008350014686584, 0.19030852615833282, 0.46861785650253296, 0.27325284481048584, 0.17286436259746552, 0.42004629969596863, 0.4231778681278229, 0.1989184021949768, 0.01688314415514469, 0.31425753235816956, 0.3139069676399231, 0.3645804524421692, 0.49722957611083984, 0.3114643096923828, 0.1144416481256485, 0.44131138920783997, 0.16949641704559326, 0.0669717788696289, 0.3518614172935486, 0.12154661118984222, 0.3637464940547943, 0.4839630424976349], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_943bc72a04ef4b87799a46828ada7104(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d28c5fa7bca5afa47bfe8e1b82414baa
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2814329266548157, 0.3847728371620178, 0.44163230061531067, 0.19595037400722504, 0.49252885580062866, 0.025475965812802315, 0.37888211011886597, 0.33289021253585815, 0.36890625953674316, 0.44456812739372253, 0.26526015996932983, 0.061751335859298706], dtype='float32').reshape([12]),
            paddle.to_tensor([1, 12, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ecd1fbeaa52164bfeac57d7e3bfc6e4d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.451904296875, 0.225341796875, 0.054443359375, 0.278076171875, 0.2332763671875, 0.382568359375, 0.328125, 0.3671875, 0.176025390625, 0.1748046875, 0.444091796875, 0.400146484375, 0.365234375, 0.32568359375, 0.39501953125, 0.2529296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5b5dc8790f7a4ea4ab5c07baedca5d4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_40e92ab1dce2f913b5fda62bd0b25a23
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1322c9b46a6d8c68dfba8484d5835f0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.39324209094047546, 0.46069663763046265, 0.0024599647149443626, 0.09711947292089462, 0.43544483184814453, 0.10433739423751831, 0.45209383964538574, 0.3345288038253784, 0.056665193289518356, 0.4398483633995056, 0.09463201463222504, 0.3988781273365021, 0.1683303564786911, 0.05194944888353348, 0.0012723167892545462, 0.0613856203854084, 0.013921764679253101, 0.3273804485797882, 0.024297015741467476, 0.35747259855270386], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_93d918f2f638e1adb49145717a1168a1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0777948722243309, 0.15079687535762787, 0.14904214441776276, 0.2812039852142334, 0.4664597511291504, 0.29750972986221313, 0.4647330343723297, 0.3327459692955017, 0.025851577520370483, 0.4814309775829315, 0.2885408401489258, 0.3694315254688263, 0.24743661284446716, 0.07690902054309845, 0.09873068332672119, 0.20861056447029114], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae15d44e31f6ebb0019ac3bfd436855a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37039029598236084, 0.3300670087337494, 0.19045406579971313, 0.08190001547336578, 0.3537192940711975, 0.09726567566394806, 0.4819328188896179, 0.2085563987493515], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8eeb641a613638ea1eb375dc8224378f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43310546875, 0.498046875], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5e45b16b6750ada8d63e51dfbbbbab82(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4315861761569977, 0.4084034264087677, 0.187907412648201, 0.3332633078098297, 0.45825207233428955, 0.40609997510910034, 0.1739930361509323, 0.35602906346321106, 0.4120011329650879, 0.2031148225069046, 0.42405521869659424, 0.07917042821645737, 0.39606693387031555, 0.36239516735076904, 0.24075673520565033, 0.18144531548023224], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_f3441b84666245f38033554359bde822(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bb135cf48c1f1568d6909255367f818(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f3441b84666245f38033554359bde822
    def get_inputs(self):
        return [
            paddle.uniform([168], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 168, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 108, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[108], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e61599c28ab4f77eb5904d59eef0ba8d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8c69c30a3f171c9db2252d178907b4b7
    def get_inputs(self):
        return [
            paddle.uniform([108], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 108, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36ff33576f756b4e49e1d4419dfb1bf3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4437641501426697, 0.051791101694107056, 0.3039660155773163, 0.3487142324447632, 0.06368257105350494, 0.027258649468421936, 0.33213746547698975, 0.33066388964653015, 0.30892395973205566, 0.009062565863132477, 0.22353115677833557, 0.052306003868579865, 0.2808372676372528, 0.3985302150249481, 0.1214352622628212, 0.3047363758087158, 0.2625107765197754, 0.07632417231798172, 0.40461382269859314, 0.08205342292785645, 0.21826447546482086, 0.009686331264674664, 0.1709139049053192, 0.40959471464157104], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f560b8b295e73db319b7e3a0cecc47ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27092698216438293, 0.32156071066856384, 0.128114715218544, 0.2310182750225067, 0.006085789296776056, 0.45556530356407166, 0.12295080721378326, 0.3212980628013611, 0.19197092950344086, 0.1913534253835678, 0.19112814962863922, 0.13366177678108215, 0.018189748749136925, 0.3664841055870056, 0.3369106352329254, 0.4476325213909149], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c760df10fab723f31b4a3d805cec3b20(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 576, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[576], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c1e088d2d22111966a0190fc703a01c0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c760df10fab723f31b4a3d805cec3b20
    def get_inputs(self):
        return [
            paddle.uniform([576], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 576, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9128fe825b82cea56be71d949feed95f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4334592819213867, 0.3225476145744324, 0.3476894497871399, 0.028914226219058037, 0.2213485985994339, 0.2679364085197449, 0.23041030764579773, 0.45348644256591797, 0.2739523649215698, 0.01389833353459835, 0.16396300494670868, 0.08418305218219757, 0.020524371415376663, 0.44489526748657227, 0.32678112387657166, 0.4638954997062683, 0.07865135371685028, 0.1976364552974701], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 42, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[42], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9160e85b57c47fc4d4d1fb6901aa3347(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e8eee5c8180a7e2753fe9046b4704f88
    def get_inputs(self):
        return [
            paddle.uniform([42], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 42, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1fae871360f45169ad8c88e069e32780(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2333984375, 0.358642578125, 0.03582763671875, 0.1087646484375, 0.49169921875, 0.36669921875, 0.457763671875, 0.12493896484375, 0.419921875, 0.42431640625, 0.048980712890625, 0.452392578125, 0.06109619140625, 0.3583984375, 0.38720703125, 0.36083984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([20, 1, 2], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[20, 2], dtype='float64'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53fda62ef123d2a8eef234ce21380e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_571ec8d35feae27c8c24919e7c8b0ae5
    def get_inputs(self):
        return [
            paddle.uniform([20, 2], dtype='float64', min=0, max=0.5),
            paddle.to_tensor([20, 1, 2], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_99c89cd3ab783f43c50e13b68cc8e426(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.004848857410252094], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_606476b92a490f5269c59c50bbb8d990(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([40], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 20, 2], dtype='float16'),
            paddle.static.InputSpec(shape=[], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4888794676c3ebc171ace38b1cf5d77e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_606476b92a490f5269c59c50bbb8d990
    def get_inputs(self):
        return [
            paddle.uniform([1, 20, 2], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([40], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_254ce3e0e11caee003464519535bccd5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c2b5b5142c3edfa730bba17de3b57ab7
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27615582942962646, 0.4496445059776306], dtype='float32').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fd974295d093084e8b42d08f69e6ee95(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3120848834514618, 0.2116757482290268, 0.2734512686729431, 0.22058099508285522, 0.43957048654556274, 0.2918160557746887, 0.09682117402553558, 0.4116306006908417, 0.020029425621032715, 0.4095543324947357, 0.09126174449920654, 0.10894011706113815, 0.04632699117064476, 0.3546677231788635, 0.3865682780742645, 0.18742771446704865], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_358228dfcad02c78d06faa8f561bccc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b010893aee798d3462fd68432f22b644(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_358228dfcad02c78d06faa8f561bccc0
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2b3d927b413b2e0ffa9d9daee253ebef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.403564453125, 0.4951171875, 0.2142333984375, 0.286865234375, 0.447509765625, 0.0008473396301269531, 0.487548828125, 0.350341796875, 0.40283203125, 0.48828125, 0.00904083251953125, 0.07806396484375, 0.1729736328125, 0.3681640625, 0.1373291015625, 0.19677734375, 0.04180908203125, 0.358642578125, 0.49755859375, 0.265625, 0.1553955078125, 0.060882568359375, 0.2430419921875, 0.177734375, 0.351318359375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b057cae5486d8cc9fa3baccdc6de2d2b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_43b9f6546658842e4b05b14487bc284a
    def get_inputs(self):
        return [
            paddle.to_tensor([0], dtype='int64').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a3abca6cf1e0750f9892e014db44c3ed(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37939453125, 0.228759765625, 0.09527587890625, 0.3271484375, 0.15869140625, 0.059173583984375, 0.3779296875, 0.07977294921875, 0.192138671875, 0.37353515625, 0.1688232421875, 2.3543834686279297e-05, 0.1641845703125, 0.10345458984375, 0.32666015625, 0.01812744140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_10fe4586625351bfc38a768861e751b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1007080078125, 0.33154296875, 0.01322174072265625, 0.07666015625, 0.1533203125, 0.384033203125, 0.437744140625, 0.1324462890625, 0.447998046875, 0.4833984375, 0.432861328125, 0.1861572265625, 0.1806640625, 0.067138671875, 0.2117919921875, 0.293701171875, 0.386474609375, 0.41748046875, 0.36181640625], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_95e041d4d3dce00b3dfe3bc15c0c87a2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0653076171875, 0.1722412109375, 0.132568359375, 0.034515380859375, 0.08880615234375, 0.3388671875, 0.21044921875, 0.383544921875, 0.2308349609375, 0.271484375, 0.292724609375, 0.252197265625, 0.1759033203125, 0.101318359375, 0.431396484375, 0.3310546875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dc19b2abccae2f09fe91b001603052e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1292421817779541, 0.29540035128593445, 0.2974443733692169, 0.14791005849838257, 0.32688793540000916, 0.36185309290885925, 0.14330294728279114, 0.29660677909851074, 0.36339473724365234, 0.30020764470100403, 0.3945775628089905, 0.1572084277868271, 0.4433983564376831, 0.2784888446331024, 0.24092747271060944, 0.4542325437068939, 0.21602675318717957, 0.3241960108280182, 0.19123168289661407, 0.44899290800094604, 0.43106529116630554, 0.06243378296494484, 0.18332673609256744, 0.41100966930389404], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e7bd8a6af82c28516c0b8bafc83e31f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.18659338355064392, 0.38672927021980286, 0.13900934159755707, 0.402378648519516, 0.04942438378930092, 0.128657728433609], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_df0029950492bb0929959ec81b3494e8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.166748046875, 0.257568359375, 0.4970703125, 0.485595703125, 0.276123046875, 0.1473388671875, 0.06561279296875, 0.427490234375, 0.319580078125, 0.28369140625, 0.35595703125, 0.240966796875, 0.49462890625, 0.444091796875, 0.272705078125, 0.1622314453125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6388565d3a8dd7f57531e8189fad763d(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 100, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[100], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d318cad6fc0ea88abd2b6aa3a2c24340(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6388565d3a8dd7f57531e8189fad763d
    def get_inputs(self):
        return [
            paddle.uniform([100], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 100, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54636161f6377e921f5347d768620cd1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.258544921875, 0.425537109375, 0.11212158203125, 0.364990234375, 0.2293701171875, 0.33203125, 0.07037353515625, 0.053466796875, 0.07806396484375, 0.392333984375, 0.326416015625, 0.47314453125, 0.449462890625, 0.1116943359375, 0.0914306640625, 0.1773681640625, 0.057586669921875, 0.33740234375, 0.1331787109375, 0.321533203125, 0.481201171875, 0.0804443359375, 0.05303955078125, 0.2406005859375, 0.134765625, 0.48681640625, 0.40966796875, 0.133056640625, 0.1669921875, 0.1905517578125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4ec3770f6a4961cd3c34be6d17b435e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1443905532360077, 0.28207024931907654, 0.42058035731315613, 0.3953815996646881, 0.39809027314186096, 0.33751168847084045, 0.23720011115074158, 0.023688653483986855, 0.45899519324302673, 0.24492838978767395, 0.13418737053871155, 0.4783785045146942, 0.1932062804698944, 0.4115203619003296, 0.4610873758792877, 0.05837970972061157], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_52c17a2dfda53c1df62891577724f840(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10850659012794495, 0.25606733560562134, 0.24737174808979034, 0.22341519594192505, 0.42833054065704346, 0.411776065826416, 0.23713359236717224, 0.4660511016845703], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3d26668ee6b7471c6e4355b4bf311da1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.13158760964870453, 0.004864430520683527, 0.17243236303329468, 0.11971979588270187, 0.29573071002960205, 0.011756309308111668, 0.31599101424217224, 0.4549099802970886, 0.02441570907831192, 0.19553032517433167, 0.03839237615466118, 0.28362715244293213, 0.279435932636261, 0.13638868927955627, 0.11389747262001038, 0.3072836697101593, 0.29102081060409546, 0.12618951499462128, 0.19548320770263672], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_06710df14faf6cc083ff73c4e6443f94(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2048, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2048], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdf52523857bc908b41702df1e2bd09f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_06710df14faf6cc083ff73c4e6443f94
    def get_inputs(self):
        return [
            paddle.uniform([2048], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 2048, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_605b83ce3f3ed5303a9c672f189390ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.182373046875, 0.311279296875, 0.28955078125, 0.065185546875, 0.06787109375, 0.1536865234375, 0.32763671875, 0.415283203125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f137fde34dada00cd77cca34c2e23a28(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23670700192451477, 0.22943530976772308, 0.4476568102836609, 0.4642219841480255, 0.024087678641080856, 0.3806372284889221, 0.4620722830295563, 0.23301994800567627, 0.0007497683982364833, 0.4931352436542511, 0.4450569152832031, 0.4036555886268616, 0.3208926320075989, 0.4170912504196167, 0.40217325091362, 0.47269707918167114, 0.02649799734354019, 0.28509050607681274, 0.051325723528862, 0.14149567484855652, 0.4715108573436737, 0.06531073898077011, 0.013505521230399609, 0.06823761016130447], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0982c9ea040910982512a6e91ba57670(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04919996112585068], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3708fe6e4fd51d4f329aee94165ed4ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.35824301838874817, 0.4978264570236206, 0.12513695657253265, 0.45033982396125793, 0.39457544684410095, 0.22875669598579407, 0.1309645026922226, 0.15734855830669403, 0.3702566921710968, 0.08635210245847702, 0.34694868326187134, 0.34619614481925964, 0.0672895610332489, 0.4491562843322754, 0.04786551743745804, 0.08018672466278076, 0.4260723888874054, 0.12902773916721344, 0.2383817434310913, 0.3657945990562439, 0.4751417636871338, 0.04996306449174881, 0.014902078546583652, 0.15431617200374603, 0.057159945368766785, 0.14336499571800232, 0.01192440465092659, 0.4413700997829437, 0.17460961639881134, 0.1488478034734726], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 22400, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 128, 175, 25], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_932705cbd1e4d97aa9c055b6a1f9d156(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d53ae1aef6ff2d75d00066f86e814c63
    def get_inputs(self):
        return [
            paddle.uniform([1, 128, 175, 25], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 22400, 25], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3556fa641af275e8361b35b3002114af(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.344482421875, 0.362060546875, 0.378662109375, 0.01611328125, 0.1485595703125, 0.1337890625, 0.036407470703125, 0.2423095703125, 0.048614501953125, 0.0303802490234375, 0.426513671875, 0.2166748046875, 0.370849609375, 0.19970703125, 0.285888671875, 0.293212890625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8d5cf4af68db796e013543629413259b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5f4735683b4882960c90e3f4dfb55bb3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3227366805076599, 0.3906424045562744, 0.04912008345127106, 0.08249957114458084, 0.08870695531368256, 0.45419925451278687, 0.4058491587638855, 0.4060819447040558, 0.4072602689266205, 0.09129414707422256, 0.12295470386743546, 0.3631182610988617, 0.1258595734834671, 0.4865286648273468], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_401eed822e3968c75ff4dfebd8abb5f1(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 720, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[720], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d44669210b5d05f7f2f9039b0b3f75ce(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_401eed822e3968c75ff4dfebd8abb5f1
    def get_inputs(self):
        return [
            paddle.uniform([720], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 720, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aa29dc0eb7819a9b725a381299406760(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.311279296875, 0.1107177734375, 0.1632080078125, 0.130126953125, 0.091064453125, 0.479736328125, 0.1275634765625, 0.0235595703125, 0.4443359375, 0.326171875, 0.276123046875, 0.28125, 0.2919921875, 0.2060546875, 0.05645751953125, 0.337646484375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3427e8cdd0b596c8278651fce49d2c02(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.36008772253990173], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9df161e3f3e88246764c408dfc295be(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c8f342e8a8fc71439e35c1a435c1379b
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_605d61fdabdf179ea19b64c338dc3470(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.166748046875, 0.394775390625, 0.1864013671875, 0.438232421875, 0.0181732177734375, 0.13818359375, 0.493896484375, 0.2763671875, 0.193603515625, 0.392333984375, 0.306640625, 0.2440185546875, 0.2147216796875, 0.344482421875, 0.1751708984375, 0.2086181640625, 0.421142578125, 0.1068115234375, 0.054351806640625, 0.3388671875, 0.331787109375, 0.2149658203125, 0.29736328125, 0.0703125, 0.1475830078125, 0.220947265625, 0.413330078125, 0.348388671875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_259537676528715e442173234c480522(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21072882413864136, 0.32770729064941406, 0.27240189909935, 0.24649974703788757, 0.4765093922615051, 0.12374928593635559, 0.3340839147567749, 0.08631373941898346, 0.37918829917907715, 0.10883933305740356, 0.014030743390321732, 0.18089008331298828, 0.3277382254600525, 0.2826434075832367, 0.06305677443742752, 0.46229124069213867, 0.057275522500276566, 0.1754920333623886, 0.3681131601333618, 0.28362515568733215, 0.08701831102371216, 0.21280784904956818, 0.1541295349597931, 0.44934791326522827, 0.03946886211633682, 0.4536668658256531, 0.12365059554576874, 0.2912982702255249, 0.19178412854671478, 0.050707604736089706], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 196, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[196], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0763e581a71952f12e0f524c50e88710(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd30cd3f2974bc06833ca3790a1b5354
    def get_inputs(self):
        return [
            paddle.uniform([196], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 196, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b22a58b89590957cd12b9f8eb7078d23(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4218980073928833], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d4092cecdbdc4e1f6a2e613acc4b5f20(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.407958984375, 0.04266357421875, 0.058258056640625, 0.1688232421875, 0.462646484375, 0.03375244140625, 0.1334228515625, 0.09393310546875, 0.24072265625, 0.1824951171875, 0.45703125, 0.306884765625, 0.0112457275390625, 0.059356689453125, 0.134033203125, 0.3369140625, 0.3701171875, 0.448974609375, 0.28955078125, 0.447265625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d74fe0c4f15904905404bd760e94194(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.274658203125, 0.394775390625, 0.48486328125, 0.18017578125, 0.17529296875, 0.11700439453125, 0.1033935546875, 0.467041015625, 0.4599609375, 0.494140625, 0.449462890625, 0.336669921875, 0.47265625, 0.331298828125, 0.102294921875, 0.0240631103515625, 0.37060546875, 0.1341552734375, 0.0784912109375, 0.0732421875, 0.45068359375, 0.0916748046875, 0.44970703125, 0.14990234375, 0.22998046875, 0.1478271484375, 0.250244140625, 0.360107421875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a8c2fa17dd98b717adc3b4bdfe18192(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19607578217983246, 0.10701487958431244, 0.23179960250854492, 0.4603370130062103, 0.13786198198795319, 0.2629084587097168, 0.05221543461084366, 0.2794826328754425, 0.07496561110019684, 0.4770925045013428, 0.28395673632621765, 0.17635488510131836, 0.4832097589969635, 0.2985627055168152, 0.12335655093193054, 0.06724652647972107, 0.18910683691501617, 0.41411465406417847, 0.1542513221502304, 0.4211708605289459, 0.1647423356771469, 0.28619682788848877, 0.3950602114200592, 0.17649254202842712, 0.1899755895137787], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cd3e65dadd77c79a04f43966af496384(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.21521727740764618, 0.048273876309394836, 0.4803882837295532, 0.3387047350406647, 0.2825843393802643, 0.33649182319641113, 0.3181987702846527, 0.37824758887290955, 0.3820567727088928, 0.03054971434175968, 0.45282480120658875, 0.14711244404315948, 0.47379595041275024, 0.03733160346746445, 0.0668751671910286, 0.0071643958799541, 0.4262039065361023, 0.31937235593795776, 0.4933563470840454, 0.14196562767028809, 0.23632711172103882, 0.04692300036549568, 0.37588825821876526, 0.05252894386649132, 0.2074493020772934], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_399de58b057a1986cd0488e3fb267e1a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45323696732521057, 0.23615656793117523, 0.21830080449581146, 0.04337114840745926, 0.06206797435879707, 0.49874550104141235, 0.00977940671145916, 0.18772859871387482], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d83b6239e88637a149ca62dc0a95786c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.208984375, 0.2413330078125, 0.378173828125, 0.45703125, 0.07659912109375, 0.3349609375, 0.08837890625, 0.2783203125], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2a62e67e202b08ea3227294736d0d39a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2784727215766907, 0.33571404218673706, 0.20874443650245667, 0.061745282262563705, 0.04531143978238106, 0.3165943920612335, 0.32740360498428345, 0.1568944901227951, 0.13167184591293335, 0.19492270052433014, 0.06662313640117645, 0.19467343389987946, 0.2985210716724396, 0.24650420248508453, 0.4227793216705322, 0.06990604102611542], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_321b0351df6daa32ec7b99c27b6fed60(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08148193359375, 0.14306640625, 0.185302734375, 0.49755859375, 0.033416748046875, 0.271240234375, 0.390380859375, 0.293212890625, 0.48046875, 0.32470703125, 0.444580078125, 0.08172607421875, 0.387451171875, 0.482421875, 0.449462890625, 0.04833984375, 0.097412109375, 0.123291015625, 0.4306640625, 0.1591796875, 0.041656494140625, 0.07220458984375, 0.04974365234375, 0.166748046875, 0.1334228515625, 0.045745849609375, 0.38037109375, 0.260986328125, 0.349365234375, 0.06817626953125], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_84512f7da18cc14369aed151ec816d96(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1702880859375, 0.12744140625, 0.337890625, 0.09423828125, 0.352783203125, 0.436279296875, 0.1802978515625, 0.496826171875, 0.376953125, 0.3896484375, 0.41748046875, 0.06597900390625, 0.0016145706176757812, 0.347900390625, 0.01171875, 0.08837890625, 0.38427734375, 0.443115234375, 0.303466796875, 0.30126953125, 0.1494140625, 0.34521484375, 0.353271484375, 0.1357421875, 0.3837890625, 0.4404296875, 0.419677734375, 0.362548828125], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_054bec9c87d83a07587fa079a7032b0b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4a065e137d26a242da04f7ec6bcea9aa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_054bec9c87d83a07587fa079a7032b0b
    def get_inputs(self):
        return [
            paddle.uniform([300], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 300, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 336, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[336], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_59a9ffbc0f293949ddca76dbae04f527(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_eed146ce0f681dc52cc7c61b2b2a31e4
    def get_inputs(self):
        return [
            paddle.uniform([336], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 336, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d6b9588a61cfed3d2baa6a7fab373e3d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dd1e83d1ff082ffb3545e8c596b81f32
    def get_inputs(self):
        return [
            paddle.to_tensor([0.439208984375, 0.376953125, 0.442138671875, 0.1982421875, 0.306884765625, 0.408935546875, 0.2109375, 0.2481689453125, 0.2198486328125, 0.145751953125, 0.0562744140625, 0.454833984375, 0.385498046875, 0.433349609375, 0.392578125, 0.325439453125, 0.374755859375, 0.4580078125, 0.08441162109375], dtype='float16').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 360, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[360], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae0b114246e4452c66d62ae5df5c6846(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_74e29a21ed99fad1024ca08e48db01bc
    def get_inputs(self):
        return [
            paddle.uniform([360], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 360, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d7fb9e9769408a2762518cf7df8ce12c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.349626749753952, 0.12309320271015167, 0.44366833567619324, 0.16699865460395813, 0.0544806644320488, 0.07331409305334091, 0.3044021427631378, 0.4071429669857025, 0.03934605419635773, 0.4955160617828369, 0.28530171513557434, 0.12118301540613174, 0.137227863073349, 0.2657206654548645, 0.2623327970504761, 0.07425279915332794, 0.2911894917488098, 0.1730727255344391, 0.3036777377128601, 0.03846482187509537, 0.023401420563459396, 0.25212445855140686, 0.026056932285428047, 0.4837060570716858, 0.08390335738658905], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a1c66f1f6b160866c0ff226076740be5(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 129, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[129], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_230b3169a93af2342c1629bde4d92d9f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a1c66f1f6b160866c0ff226076740be5
    def get_inputs(self):
        return [
            paddle.uniform([129], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 129, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_42612fe09048b8c439d29b01459e8626(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.23350492119789124, 0.137669175863266, 0.18320795893669128, 0.22264930605888367, 0.3969826102256775, 0.19634345173835754, 0.4403505027294159, 0.09188330173492432, 0.49840888381004333, 0.21181902289390564, 0.43831637501716614, 0.15322110056877136, 0.45452216267585754, 0.05465150624513626, 0.38757824897766113, 0.13659889996051788], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 288, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[288], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_96d116b534285f736434e079b250c07b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c76aebbd3ecd7bb7c11d6baca92fad
    def get_inputs(self):
        return [
            paddle.uniform([288], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 288, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f4112af0e28549744cb2676bfa244fc3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4439946413040161, 0.0456448569893837, 0.2162300944328308, 0.4172280728816986, 0.25016963481903076, 0.38578617572784424, 0.20988358557224274, 0.30350691080093384, 0.014725204557180405, 0.1838054656982422, 0.45088598132133484, 0.2352747917175293, 0.0022374410182237625, 0.4182588756084442, 0.23659440875053406, 0.14038152992725372, 0.37091103196144104, 0.18695136904716492, 0.23153643310070038, 0.0411449670791626, 0.04737096652388573, 0.012600885704159737, 0.19716161489486694, 0.35817959904670715, 0.015905875712633133], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3b1529bd36dfae329aff567b01e7f309(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.258056640625, 0.047393798828125, 0.135498046875, 0.08026123046875, 0.08673095703125, 0.1787109375, 0.305908203125, 0.217041015625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e94c933be2e0481a0dad9ae4aeef839d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.345458984375, 0.2183837890625, 0.1397705078125, 0.476318359375, 0.1806640625, 0.31005859375, 0.491943359375, 0.246826171875, 0.484375, 0.23779296875, 0.024688720703125, 0.384521484375, 0.1368408203125, 0.265380859375, 0.376220703125, 0.16748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fce286990027de4231f9cf3eaa568b56(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.325927734375, 0.15234375, 0.484619140625, 0.2666015625, 0.3173828125, 0.453857421875, 0.401123046875, 0.022308349609375, 0.31982421875, 0.28662109375, 0.1512451171875, 0.2340087890625, 0.482421875, 0.40966796875, 0.257568359375, 0.1527099609375, 0.36865234375, 0.180908203125, 0.093017578125, 0.328125, 0.1942138671875, 0.423583984375, 0.0214996337890625, 0.273681640625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d4cd9267663d82231e7f06c4c2b5f581(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27398356795310974, 0.3518955111503601, 0.2626301050186157, 0.07616665214300156, 0.4024274945259094, 0.2658936679363251, 0.28046083450317383, 0.340314120054245, 0.00917826034128666, 0.0028696623630821705, 0.18889647722244263, 0.4768354892730713, 0.3236595392227173, 0.29492464661598206, 0.359581857919693, 0.2915124297142029], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d480d95051b190bc173e78cf7317e7d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2018381953239441, 0.13716579973697662, 0.03764430060982704, 0.38414663076400757, 0.1528141349554062, 0.03531742841005325, 0.36531054973602295, 0.23433543741703033, 0.22136519849300385, 0.20216017961502075, 0.14956019818782806, 0.3747914433479309, 0.13757085800170898, 0.16559816896915436, 0.27155801653862, 0.28706660866737366, 0.048292264342308044, 0.09805895388126373, 0.04432808607816696, 0.22150349617004395, 0.08675660938024521, 0.4986693263053894, 0.3740580379962921, 0.02512369304895401], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a758ecac13437ee01f3ba848a0256c03(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01670844666659832], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 84, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[84], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_36cf7a11860d4c701b234dc8c5b5e622(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e259bc37f08df1bbcfbc2af80077c8c3
    def get_inputs(self):
        return [
            paddle.uniform([84], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 84, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ce9134faced67f829833370ee0e15926(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40702706575393677, 0.02903268113732338, 0.2016904652118683, 0.028461985290050507, 0.29951953887939453, 0.4931461215019226, 0.013538547791540623, 0.05855470523238182, 0.19230535626411438, 0.23849663138389587, 0.4774373173713684, 0.4962987005710602, 0.28730693459510803, 0.11166639626026154, 0.2909291684627533, 0.2712816894054413, 0.3992334008216858, 0.42854753136634827, 0.04091647267341614, 0.3697821795940399], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a41f7b425d76aa21c6862f902ea64547(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b9b0b508bae260f29b63cd813a2cea62
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e73bf9cdce8651cc8df1464410f8ea0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4995173513889313, 0.08590815216302872, 0.37525099515914917, 0.008356062695384026, 0.1582167148590088, 0.4949248135089874, 0.3120322823524475, 0.2866515815258026, 0.22930462658405304, 0.08314517140388489, 0.15856584906578064, 0.2113020122051239, 0.27808424830436707, 0.43985509872436523, 0.08127132058143616, 0.46350836753845215], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a331e051f925410f1c4d236a0ab65a3c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3350617289543152, 0.43730708956718445, 0.4338540732860565, 0.17020289599895477, 0.32390427589416504, 0.03317287936806679, 0.46197110414505005, 0.3553280234336853, 0.25695663690567017, 0.10847463458776474, 0.4795367419719696, 0.4939495921134949, 0.4461205303668976, 0.1828923523426056, 0.43571799993515015, 0.21069355309009552, 0.45045799016952515, 0.09642846882343292, 0.26890209317207336, 0.16731999814510345, 0.11680539697408676, 0.1864147186279297, 0.36258798837661743, 0.25761470198631287], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5c4e8132f94051bd9a01e6b5e09004ae(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2136135846376419, 0.10556087642908096, 0.0839155837893486, 0.4428970515727997, 0.1290404051542282, 0.07411988824605942, 0.10925143957138062, 0.47344666719436646, 0.06782221049070358, 0.44748273491859436, 0.36382296681404114, 0.005776361096650362, 0.35384541749954224, 0.49747344851493835, 0.43282410502433777, 0.013360043987631798, 0.1503511667251587, 0.40190693736076355, 0.08337514102458954, 0.25823360681533813, 0.0882505476474762, 0.4781316816806793, 0.4458066523075104, 0.2421126812696457], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2a538c1f5ff27acd1ae7fc2705f29de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16626931726932526, 0.10510753840208054, 0.47247472405433655, 0.12553434073925018, 0.19958725571632385, 0.3861769735813141, 0.20873694121837616, 0.42229366302490234, 0.4647309482097626, 0.43047034740448, 0.14192785322666168, 0.1646406203508377, 0.39944541454315186, 0.06285671889781952, 0.3652728796005249, 0.03019886277616024, 0.2332223802804947, 0.3938963711261749, 0.39128321409225464, 0.3247261345386505, 0.19918513298034668, 0.10943208634853363, 0.34898385405540466, 0.1337210237979889], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_369561123a893250bd0e421a93c848be(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fb173633bb497f7769e4e9a3d8307f07(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_369561123a893250bd0e421a93c848be
    def get_inputs(self):
        return [
            paddle.uniform([87], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 87, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_85bb86d2f528c7763a013239ec028d98(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4492545425891876, 0.18225283920764923, 0.4764709174633026, 0.37315475940704346, 0.3103294372558594, 0.4934350550174713, 0.39515501260757446, 0.023267002776265144, 0.30291593074798584, 0.06513597816228867, 0.166373610496521, 0.4581826329231262, 0.31548261642456055, 0.3191181719303131, 0.16552087664604187, 0.432416707277298, 0.28596076369285583, 0.3157816529273987, 0.17281803488731384, 0.4976722300052643, 0.0861528143286705, 0.4418433904647827, 0.3345571756362915, 0.044201772660017014, 0.2169753909111023, 0.28505074977874756, 0.04047517105937004, 0.4551415741443634], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 112, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[112], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_71984068057d651d9aa5ad377ab88f9e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a61d7434c9a10b27c640fb3f25ee19f3
    def get_inputs(self):
        return [
            paddle.uniform([112], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 112, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 4, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[4], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_01a7ab90d2e62201b89c22b8e2a1ccba(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_781d8fb40541caa7ae0574915e49b4fe
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3111949563026428, 0.13407142460346222, 0.23052819073200226, 0.25286269187927246], dtype='float32').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_53f97f2127d35d635670406072cf383a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04968055710196495, 0.10709799081087112, 0.10917261242866516, 0.38140225410461426, 0.31308412551879883, 0.10744120180606842, 0.2193748652935028, 0.23019413650035858, 0.009438463486731052, 0.025476744398474693, 0.250601589679718, 0.07279182225465775, 0.4294925034046173, 0.48431867361068726, 0.35977646708488464, 0.14413510262966156, 0.29759299755096436, 0.4527822434902191, 0.35196995735168457, 0.4746178984642029, 0.25892576575279236, 0.47580263018608093, 0.10768833011388779, 0.2810710072517395], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_def6cfc0c5ec2db50bd565f56cef6ead(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2088623046875, 0.40869140625, 0.38427734375, 0.46240234375, 0.0015726089477539062, 0.337646484375, 0.340576171875, 0.00643157958984375, 0.10833740234375, 0.04150390625, 0.07684326171875, 0.269775390625, 0.07623291015625, 0.10308837890625, 0.266845703125, 0.389892578125, 0.4306640625, 0.453125, 0.2386474609375, 0.360595703125, 0.2440185546875, 0.177490234375, 0.1107177734375, 0.344970703125, 0.1409912109375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c62c199b90e993c4369709f9cd2e2e59(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.463134765625, 0.300537109375, 0.47705078125, 0.154296875], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2e2da2ef2d59988716c9e7a11fae09d4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28076171875, 0.259765625, 0.133056640625, 0.03289794921875, 0.07080078125, 0.234130859375, 0.351318359375, 0.1634521484375, 0.26904296875, 0.0931396484375, 0.138916015625, 0.1654052734375, 0.1922607421875, 0.353759765625, 0.2509765625, 0.313720703125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_117662e553277996f7588c7beab81326(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.057952880859375, 0.496337890625, 0.3876953125, 0.08697509765625, 0.3037109375, 0.3505859375, 0.395751953125, 0.028900146484375, 0.403564453125, 0.17724609375, 0.21533203125, 0.2578125, 0.334716796875, 0.4287109375, 0.339111328125, 0.0938720703125, 0.2337646484375, 0.2386474609375, 0.23876953125, 0.467529296875, 0.03546142578125, 0.379638671875, 0.1546630859375, 0.285888671875], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_13244ab984edf7e67a6ddde387484cec(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.16842639446258545, 0.32901033759117126, 0.1401299238204956, 0.18649506568908691, 0.33982735872268677, 0.21859969198703766, 0.3059883415699005, 0.2946043312549591, 0.38769519329071045, 0.05943356081843376, 0.4772965908050537, 0.1080322191119194, 0.31273341178894043, 0.017448369413614273, 0.3280765116214752, 0.31132733821868896, 0.13393400609493256, 0.3131738305091858, 0.3507319986820221, 0.11971811205148697], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4cdb320c1068cc2284e13ba68e741223(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.27978515625, 0.30859375, 0.35498046875, 0.419921875, 0.10235595703125, 0.022003173828125, 0.1805419921875, 0.30126953125, 0.483642578125, 0.340576171875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_62ce126ee3cae45e3c42278b64da0470(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10077788680791855, 0.3313148021697998, 0.42874547839164734, 0.4262281358242035, 0.09295227378606796, 0.046803779900074005, 0.23276874423027039, 0.4478447735309601, 0.45936089754104614, 0.24525126814842224, 0.3143059313297272, 0.1810169219970703, 0.4522085189819336, 0.1549081653356552, 0.27648040652275085, 0.10792437940835953], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ec06700e1ae4a7028ae892f13b3d7ccb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3b1fb9698ddbd3ea0beca7baa5704430
    def get_inputs(self):
        return [
            paddle.to_tensor([0.062103271484375, 0.02130126953125, 0.268798828125, 0.33056640625, 0.41845703125, 0.00704193115234375, 0.26171875, 0.0643310546875, 0.32666015625, 0.477294921875], dtype='float16').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a534019633c9447ac9712ec2b26be4c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15720312297344208, 0.484328031539917, 0.3076353073120117, 0.31833234429359436, 0.0507979616522789, 0.49161097407341003, 0.4601306617259979, 0.17980648577213287, 0.2311210334300995, 0.15041831135749817, 0.4643666744232178, 0.1797327846288681, 0.050918471068143845, 0.051483895629644394, 0.13393710553646088, 0.40713173151016235], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0a90a7b5c86ad3a573f10b1a11369351(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2529296875, 0.2293701171875, 0.214599609375, 0.233154296875, 0.37548828125, 0.2166748046875, 0.356201171875, 0.16796875, 0.3935546875, 0.34765625, 0.318603515625, 0.40673828125, 0.11395263671875, 0.3984375, 0.25390625, 0.358642578125, 0.212890625, 0.4150390625, 0.488525390625, 0.349609375, 0.498779296875, 0.27783203125, 0.19287109375, 0.4140625, 0.032470703125, 0.371826171875, 0.037384033203125, 0.1326904296875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_34b77b2c1fbd5ba6798eac05b280b4db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4640263319015503, 0.4361037313938141, 0.3823237717151642, 0.21594274044036865, 0.07913217693567276, 0.43336719274520874, 0.12900112569332123, 0.48941290378570557, 0.19323019683361053, 0.28255486488342285, 0.13895870745182037, 0.35310888290405273, 0.32611218094825745, 0.36667853593826294, 0.43810606002807617, 0.05625567212700844], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bc930e9cd4a2344759c21b0f50edc7e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.371337890625, 0.353515625, 0.45654296875, 0.375244140625, 0.1292724609375, 0.30517578125, 0.2861328125, 0.46875, 0.30078125, 0.194091796875, 0.0030155181884765625, 0.316162109375, 0.01006317138671875, 0.1861572265625, 0.1256103515625, 0.2073974609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_04ecb9020941b54b8b86341675a90bc0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5bb85ba84149d0fae57f5deeacfa2213(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_04ecb9020941b54b8b86341675a90bc0
    def get_inputs(self):
        return [
            paddle.to_tensor([0.150390625, 0.4228515625, 0.0880126953125, 0.4482421875, 0.329833984375, 0.375732421875, 0.366943359375, 0.004085540771484375, 0.2447509765625, 0.266357421875, 0.405517578125], dtype='float16').reshape([11]),
            paddle.to_tensor([1, 11, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d533cade100b4cc00950fc25a2480351(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.279052734375, 0.02587890625, 0.1785888671875], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_79995f657730be614aa59788e435927b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_f1780e35fbb753ba6182168fcb9a63c3
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45947265625, 0.1953125], dtype='float16').reshape([2]),
            paddle.to_tensor([1, 2, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_01807d8175f7ba75ae4ff375f6b085c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 196, 384], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 16, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8808622a7cb5223d0633241adc21a697(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_01807d8175f7ba75ae4ff375f6b085c9
    def get_inputs(self):
        return [
            paddle.uniform([196, 16, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([-1, 196, 384], dtype='int64').reshape([3]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_22829a54719d12d7249f0712bc7bb29a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.018218994140625, 0.1121826171875, 0.0360107421875, 0.11785888671875, 0.413818359375, 0.347412109375, 0.322509765625, 0.0931396484375, 0.1156005859375, 0.0303802490234375, 0.42724609375, 0.2109375, 0.401611328125, 0.339599609375, 0.250732421875, 0.0190277099609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a21571129b677f4ad8d1e10ff1e58d7f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.047576904296875, 0.3544921875, 0.48095703125, 0.0178680419921875, 0.383056640625, 0.239501953125, 0.2161865234375, 0.429443359375, 0.10760498046875, 0.2120361328125, 0.402099609375, 0.31640625, 0.02490234375, 0.454833984375, 0.071533203125, 0.482421875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_1753213a328ee6c27c428ef7bb6644d4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float16'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9d1d3ea1e87d1e42c840b14ecd5945f1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1753213a328ee6c27c428ef7bb6644d4
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float16', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_dccab498ec277fefea37b85d4a9e8e11(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4475509226322174, 0.14861147105693817, 0.45555537939071655, 0.24464409053325653, 0.3381383717060089, 0.21763160824775696, 0.3740750551223755, 0.22566963732242584, 0.00794291216880083, 0.4526844024658203, 0.3640343248844147, 0.219601109623909, 0.23941367864608765, 0.11004038900136948, 0.1422126442193985, 0.2535657286643982, 0.4615385830402374, 0.3626229166984558, 0.010676529258489609, 0.41040414571762085], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3468905893d8fe3274d16d1a50655fdf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2542de0b187d5ba8e30c83ca6ea46fcf
    def get_inputs(self):
        return [
            paddle.uniform([232], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 232, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_773707fe079a602b250c5a1fd045506f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.38775303959846497, 0.23832924664020538, 0.4428471028804779, 0.15296673774719238, 0.0922059491276741, 0.2245105504989624, 0.08879987895488739, 0.02123451977968216], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_288e35e85c1552062868aaf68a60f1f0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_46d6be0ba0cc73698de6f9519fe23e58
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1512451171875, 0.089111328125, 0.38330078125, 0.44189453125, 0.1536865234375, 0.12225341796875, 0.038604736328125, 0.0136871337890625, 0.281982421875, 0.333984375, 0.219482421875, 0.0298004150390625, 0.367919921875, 0.009002685546875, 0.289306640625, 0.27392578125, 0.371826171875, 0.0732421875, 0.1365966796875, 0.173583984375, 0.230712890625, 0.307861328125, 0.0826416015625, 0.3349609375, 0.404052734375, 0.049407958984375, 0.2388916015625, 0.479248046875, 0.1268310546875, 0.1517333984375], dtype='float16').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_671bb108f6e77e701cfb2352a79704bd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0325927734375, 0.08807373046875, 0.384521484375, 0.0281219482421875, 0.011871337890625, 0.254150390625, 0.391357421875, 0.125244140625], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_108a9c741ab184c41ad6619ca78c2020(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 258, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[258], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_431a33accbb4f4ca5fdbe45313433b87(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_108a9c741ab184c41ad6619ca78c2020
    def get_inputs(self):
        return [
            paddle.uniform([258], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 258, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_02134e8293b2caa197d34ecd0c82b64f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 47, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[47], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ae7930fdf63f17f5ed5388fd08e319a6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_02134e8293b2caa197d34ecd0c82b64f
    def get_inputs(self):
        return [
            paddle.uniform([47], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 47, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8ff280ddb62c53196715d5d0eea5e0aa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2bc8b37402ef89b4603787ae24904a6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8ff280ddb62c53196715d5d0eea5e0aa
    def get_inputs(self):
        return [
            paddle.uniform([81], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 81, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c5cdb854988b3abd8b1dbd41ce63b4f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04500638693571091, 0.45336899161338806, 0.20853982865810394, 0.2592999041080475, 0.41868075728416443, 0.05847788229584694, 0.46310144662857056, 0.36129599809646606, 0.40502527356147766, 0.1316889077425003, 0.35096269845962524, 0.37519025802612305, 0.4531368017196655, 0.18732571601867676, 0.3663831949234009, 0.11728351563215256, 0.12320467829704285, 0.02813231572508812, 0.2814176380634308, 0.29348599910736084, 0.4952561557292938, 0.3518025279045105, 0.3582592308521271, 0.0780247300863266, 0.009146248921751976, 0.431018590927124, 0.26806333661079407, 0.39056217670440674], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7872fe02e24d2b5d931f855367599664(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7168368fc2d9714a65f7f1529a86c458
    def get_inputs(self):
        return [
            paddle.to_tensor([0.412841796875, 0.129638671875, 0.171142578125, 0.0019102096557617188, 0.296142578125, 0.422119140625, 0.40185546875, 0.022552490234375, 0.2357177734375, 0.265625, 0.1904296875, 0.423583984375, 0.33056640625, 0.24267578125, 0.13134765625, 0.397216796875, 0.273193359375, 0.34912109375, 0.0455322265625, 0.30615234375, 0.295166015625, 0.162109375, 0.45751953125, 0.402099609375, 0.4716796875, 0.1297607421875, 0.1966552734375], dtype='float16').reshape([27]),
            paddle.to_tensor([1, 27, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f8d0c9a8631b9b341d658b1b58663bda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.414794921875, 0.179931640625, 0.4267578125, 0.061004638671875, 0.330322265625, 0.328369140625, 0.12347412109375, 0.01210784912109375, 0.270263671875, 0.020538330078125, 0.315185546875, 0.1097412109375, 0.26953125, 0.40380859375, 0.085205078125, 0.1295166015625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f38105314d5b1503794eafa5b885d3e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.196044921875, 0.392822265625, 0.2489013671875, 0.281982421875, 0.2388916015625, 0.2283935546875, 0.357421875, 0.1671142578125, 0.0262298583984375, 0.159423828125, 0.459228515625, 0.06951904296875, 0.28955078125, 0.417724609375, 0.44677734375, 0.416748046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_7e072dc169a778ba5a6cfd6a25f3aedc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19921875, 0.422119140625, 0.3974609375, 0.39990234375, 0.424560546875, 0.44287109375, 0.454345703125, 0.377685546875, 0.2042236328125, 0.130615234375, 0.459228515625, 0.1409912109375, 0.489013671875, 0.268798828125, 0.3837890625, 0.054962158203125], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0f1a24889d0b3ea4ce1382632fae33d3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.01274871826171875, 0.11590576171875, 0.278564453125, 0.39697265625, 0.38916015625, 0.42919921875, 0.012603759765625, 0.225830078125, 0.2626953125, 0.06317138671875, 0.42333984375, 0.38232421875, 0.093017578125, 0.1212158203125, 0.346923828125, 0.291259765625, 0.1219482421875, 0.1837158203125, 0.1519775390625, 0.1962890625], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1b9b34f8750086e9081eef704143d4d1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.010833262465894222, 0.04370860010385513, 0.2525560259819031, 0.1384875625371933, 0.3507295548915863, 0.1032349094748497, 0.23377464711666107, 0.3555319011211395, 0.32821449637413025, 0.42277777194976807, 0.3286503553390503, 0.30995485186576843, 0.27838125824928284, 0.12803879380226135, 0.12292268872261047, 0.3585125505924225], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 14, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[14], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fc597cd024c9b1ef144bd14c8a46f391(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03973388671875, 0.416015625, 0.400634765625, 0.438232421875, 0.363037109375, 0.16650390625, 0.1484375, 0.033935546875, 0.380126953125, 0.28515625, 0.490478515625, 0.2181396484375, 0.2244873046875, 0.41748046875], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ade286ab078bf718b652a8140a1e79b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.49755859375, 0.20263671875, 0.1148681640625, 0.06671142578125, 0.492919921875, 0.436279296875, 0.156982421875, 0.058441162109375, 0.33154296875, 0.207763671875, 0.234375, 0.3828125, 0.379638671875, 0.072509765625, 0.034149169921875, 0.263916015625, 0.28173828125, 0.042327880859375, 0.33935546875, 0.486328125], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_37dd2076db87dd8329f9d77f559b7170(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_33fc74596bb4d8dd723aefadb5f0f053
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1741943359375, 0.1697998046875, 0.303955078125, 0.260498046875, 0.48193359375, 0.353271484375, 0.0010242462158203125, 0.2225341796875, 0.01032257080078125, 0.15673828125, 0.30517578125, 0.357421875, 0.3330078125, 0.00893402099609375], dtype='float16').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45157127cf26607e40fe35d26fb4b1bf(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.04610992223024368, 0.033614665269851685, 0.4879123866558075, 0.054698143154382706, 0.4078785479068756, 0.28237900137901306, 0.16927489638328552, 0.08726810663938522, 0.2967455983161926, 0.3193119466304779, 0.2255278378725052, 0.31844282150268555, 0.26683878898620605, 0.2918645143508911, 0.2847483158111572, 0.2623177766799927], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f9687121dc7aaab78a6394529b57fdcc(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.11482325941324234, 0.050651855766773224, 0.16561231017112732, 0.2745702564716339, 0.3859924077987671, 0.02579706534743309, 0.2765229344367981, 0.393702894449234, 0.0010149991139769554, 0.44557324051856995, 0.1953551173210144, 0.4494115114212036, 0.1014837771654129, 0.408260315656662, 0.02388191781938076, 0.22618317604064941, 0.12759482860565186, 0.3883602023124695, 0.4463888108730316, 0.09509862959384918, 0.15697215497493744, 0.03258834779262543, 0.3853498101234436, 0.49479421973228455], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_c0f119e22edb66271f42d153c37b1824(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.208984375, 0.173095703125, 0.243408203125, 0.0679931640625, 0.255126953125, 0.427490234375, 0.212890625, 0.340087890625, 0.3203125, 0.2188720703125, 0.1558837890625, 0.326904296875, 0.285888671875, 0.2861328125, 0.056060791015625, 0.27099609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_2d80ebbeaa66b5f0ae2910c461555475(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03204345703125, 0.08428955078125, 0.18212890625, 0.043701171875, 0.1317138671875, 0.1285400390625, 0.0821533203125, 0.051055908203125, 0.2467041015625, 0.029266357421875, 0.02874755859375, 0.0645751953125, 0.343017578125, 0.057830810546875, 0.406005859375, 0.4248046875, 0.489990234375, 0.385986328125, 0.31103515625, 0.43359375, 0.1656494140625, 0.414794921875, 0.15087890625, 0.1334228515625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_30bee08710449fc1b91a095ffc39b038(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 18, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[18], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_bb487348178c512ff830ef04637ad584(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_30bee08710449fc1b91a095ffc39b038
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1541748046875, 0.40087890625, 0.1368408203125, 0.474365234375, 0.26171875, 0.272216796875, 0.0904541015625, 0.1234130859375, 0.32421875, 0.172607421875, 0.275634765625, 0.287841796875, 0.138671875, 0.360595703125, 0.321533203125, 0.052276611328125, 0.386962890625, 0.370361328125], dtype='float16').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ef220a3da424f8ff839f900d76c2b9d1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4482421875, 0.045867919921875, 0.34765625, 0.35205078125, 0.4208984375, 0.215087890625, 0.48388671875, 0.0225067138671875, 0.453369140625, 0.2744140625, 0.364501953125, 0.2303466796875, 0.037841796875, 0.14892578125, 0.06671142578125, 0.09503173828125, 0.498779296875, 0.296875, 0.317138671875, 0.1947021484375, 0.376220703125, 0.052581787109375, 0.435302734375, 0.30224609375, 0.372802734375], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fa2104b66f6fad34e7e6036ab0e5320a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2626953125, 0.240478515625, 0.013214111328125, 0.0623779296875, 0.28271484375, 0.043212890625, 0.1812744140625, 0.42626953125, 0.383544921875, 0.357421875, 0.1749267578125, 0.2064208984375, 0.1337890625, 0.44482421875, 0.2144775390625, 0.1497802734375, 0.130859375, 0.10699462890625, 0.2010498046875, 0.0897216796875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_408270def4a380a235b396ac987bded2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_a39d74ff0ae84727d7e6c81dd07c713a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.15437819063663483, 0.3939301371574402, 0.49213162064552307, 0.06055779010057449, 0.4415058493614197, 0.05111313611268997, 0.40950873494148254, 0.048607174307107925, 0.07030276209115982, 0.28657108545303345, 0.45233529806137085, 0.2891625463962555, 0.016158685088157654, 0.296549528837204, 0.01695815846323967, 0.14658519625663757, 0.27471667528152466, 0.17084386944770813, 0.49594172835350037, 0.16645944118499756, 0.3113914430141449, 0.486692875623703, 0.005716230254620314, 0.1446666419506073, 0.06382720917463303], dtype='float32').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8ad4f58b91edec74b58b09cb0b324745(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4100847542285919, 0.0026526902802288532, 0.3496270775794983, 0.2686752676963806, 0.1191045418381691, 0.1878172606229782, 0.3527151644229889, 0.016130411997437477, 0.017339175567030907, 0.2167779505252838, 0.3094863295555115, 0.12056680768728256, 0.42763954401016235, 0.10931345075368881, 0.043813567608594894, 0.27756232023239136], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_35ee1755f7fe71d17c91b4a14163029c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.07461483031511307, 0.22218193113803864, 0.017556995153427124, 0.32493990659713745, 0.054411593824625015, 0.10512319207191467, 0.12293127924203873, 0.2751806676387787, 0.07489749044179916, 0.2147655189037323, 0.49262189865112305, 0.01640486530959606, 0.41327813267707825, 0.1957605928182602, 0.23078662157058716, 0.15117709338665009], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_45e3acdfc2fb0d8661435d372fad4dee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05459520220756531, 0.0050529595464468, 0.03824198991060257, 0.12602733075618744, 0.1366257220506668, 0.3658880293369293, 0.41222453117370605, 0.16664855182170868, 0.23440051078796387, 0.17015337944030762, 0.47376909852027893, 0.02431810460984707, 0.48024076223373413, 0.34267428517341614, 0.1774466633796692, 0.10398996621370316], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_3a1c474660662f45a20f749d37f32717(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1_0, arg_1_1, arg_1_2):
        arg_1_0 = paddle._C_ops.full_int_array(1, paddle.int32, paddle.core.CPUPlace())
        arg_1_1 = paddle._C_ops.full_int_array([17], paddle.int32, paddle.core.CPUPlace())
        arg_1_2 = paddle._C_ops.full_int_array([768], paddle.int32, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = [arg_1_0, arg_1_1, arg_1_2]
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, [x.reshape([1]) for x in input_1]), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 17, 32, 24], dtype='float32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
            paddle.static.InputSpec(shape=[1], dtype='int32'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0d73efa4b0a73749f87f5fa48a5f371d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_3a1c474660662f45a20f749d37f32717
    def get_inputs(self):
        return [
            paddle.uniform([1, 17, 32, 24], dtype='float32', min=0, max=0.5),
            paddle.to_tensor(1, dtype='int32').reshape([]),
            paddle.to_tensor([17], dtype='int32').reshape([1]),
            paddle.to_tensor([768], dtype='int32').reshape([1]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f0e473636f9bfe66ebb8b86c5a94c0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_5f8581ec67ce31a1eb974a39ad05a631
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4515414834022522, 0.2951059937477112, 0.22613079845905304, 0.10554845631122589, 0.4552172124385834, 0.06098969653248787, 0.3485111594200134, 0.3349703550338745, 0.18643151223659515, 0.24030911922454834, 0.4299953877925873, 0.47919610142707825, 0.06537667661905289, 0.3693789839744568, 0.11031702160835266, 0.04185257479548454, 0.030584650114178658, 0.11480093747377396], dtype='float32').reshape([18]),
            paddle.to_tensor([1, 18, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_1119d9b1707f9e2e00040f0d40933e9c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.48300668597221375, 0.49525967240333557, 0.3078211545944214, 0.029539121314883232, 0.19232484698295593, 0.06503241509199142, 0.34910348057746887, 0.2964183986186981, 0.45333054661750793, 0.00288009294308722, 0.34788984060287476, 0.16586314141750336, 0.49082887172698975, 0.30902010202407837, 0.32042622566223145, 0.29930001497268677, 0.021618347615003586, 0.11456932872533798, 0.3821125030517578, 0.38306257128715515, 0.3048461675643921, 0.20036201179027557, 0.26390379667282104, 0.02734619565308094, 0.15370972454547882, 0.372647762298584, 0.06313510239124298, 0.2348465472459793], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_ed3eb66b7da2ed255eb28892362cc726(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4cf5b0888dbd4319d0b6379378ff7a15
    def get_inputs(self):
        return [
            paddle.to_tensor([0.0016069412231445312, 0.039581298828125, 0.417236328125, 0.171875, 0.467041015625, 0.037445068359375, 0.3017578125, 0.24609375], dtype='float16').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_98fe80f164803e504d36b49d6f728999(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float32'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9e4165916696c68645a601899a79e276(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_98fe80f164803e504d36b49d6f728999
    def get_inputs(self):
        return [
            paddle.to_tensor([0.06716042757034302], dtype='float32').reshape([1]),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_27a121f994af5b0e3170dd22b4eed2dd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.025539707392454147, 0.15876193344593048, 0.4339127242565155], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c74c1a48f1388278410e29093b79eb0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.25524312257766724, 0.16116374731063843, 0.11350709199905396, 0.48152270913124084, 0.4768016040325165, 0.48134753108024597, 0.11648228019475937, 0.20236192643642426, 0.22222769260406494, 0.44156762957572937, 0.4010055959224701, 0.0035455015022307634, 0.2188507467508316, 0.040076907724142075, 0.28638437390327454, 0.1720028966665268], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cdf5b1a144fef534b94a5933ba299dc9(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2827039361000061, 0.09310745447874069, 0.42100176215171814, 0.2439761608839035, 0.3987937271595001, 0.4360203146934509, 0.06461724638938904, 0.022213604301214218, 0.3606147766113281, 0.23523882031440735, 0.26935985684394836, 0.2339969426393509, 0.45561572909355164, 0.05154559016227722], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9f000bcf3c2b559657a0545d2f96bed3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b6eb857ff92b6856a7e1f1d210174d8f
    def get_inputs(self):
        return [
            paddle.to_tensor([0.042755126953125, 0.402587890625, 0.128662109375, 0.47998046875, 0.1964111328125, 0.01727294921875, 0.00617218017578125, 0.288330078125, 0.2025146484375, 0.00951385498046875, 0.0219573974609375, 0.264892578125, 0.438720703125, 0.216064453125, 0.09210205078125, 0.09625244140625, 0.46875, 0.1558837890625, 0.3984375, 0.25830078125, 0.490234375, 0.375, 0.472900390625, 0.343994140625, 0.44873046875], dtype='float16').reshape([25]),
            paddle.to_tensor([1, 25, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_3bd67dd84d223ab19c9bc16c05b66131(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_1f64f8ae3084391d0a9f37b8fe1a5e8e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.256591796875, 0.36865234375, 0.1522216796875, 0.41943359375], dtype='float16').reshape([4]),
            paddle.to_tensor([1, 4, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 144, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[144], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d2494c54ef94d2dfde06c2fbc02c9e3b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_9581fbd93d84ba59ddca43caf30b5330
    def get_inputs(self):
        return [
            paddle.uniform([144], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 144, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8c8ac961c263074ed3391d133d5fe5ea(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.45849609375, 0.1031494140625, 0.2332763671875, 0.206298828125, 0.27197265625, 0.1279296875, 0.26025390625, 0.1956787109375, 0.40185546875, 0.2314453125, 0.31298828125, 0.01102447509765625, 0.470703125, 0.2012939453125, 0.062103271484375, 0.05145263671875, 0.382568359375, 0.2017822265625, 0.1033935546875, 0.0291290283203125, 0.419189453125, 0.31005859375, 0.33984375, 0.124755859375], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_72f9754ecd6ccfdc3bfbcdbf1de973b6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_c63579fb15baf02867c878fcb9a7047e
    def get_inputs(self):
        return [
            paddle.to_tensor([0.31298828125, 0.334228515625, 0.1519775390625, 0.37109375, 0.07861328125, 0.40185546875, 0.3330078125, 0.276611328125, 0.390380859375, 0.01166534423828125, 0.1646728515625, 0.304443359375, 0.108154296875, 0.049468994140625, 0.2010498046875, 0.02294921875, 0.2283935546875, 0.07623291015625, 0.339111328125, 0.1793212890625, 0.290771484375, 0.24658203125, 0.391357421875, 0.1962890625], dtype='float16').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6a57959b9ec11ab11c1ba021a68872cd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.043670654296875, 0.190185546875, 0.4599609375, 0.48828125, 0.255859375, 0.389404296875, 0.494140625, 0.44580078125, 0.33935546875, 0.362548828125, 0.11163330078125, 0.36328125, 0.1131591796875, 0.4150390625, 0.35498046875, 0.2734375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_651d657fbf1975005a386a6a3636abf3(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4984331727027893, 0.12290620058774948, 0.1177855134010315, 0.30374476313591003, 0.4601786732673645, 0.42964133620262146, 0.1553705781698227, 0.3908553421497345, 0.03383813798427582, 0.020396512001752853], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1200, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1200], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_20cf577b1e96f3ddcb3dcaa7353fbc22(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_d4fb2d11db194008167d3284ecc1db2e
    def get_inputs(self):
        return [
            paddle.uniform([1200], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1200, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_05fcb97a08878530bc04bf777fb6095c(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4981860816478729, 0.36979538202285767, 0.16839401423931122, 0.49088752269744873, 0.16327016055583954, 0.38753002882003784, 0.488735556602478, 0.4788663983345032, 0.22687485814094543, 0.12008079141378403, 0.09482309967279434, 0.260708212852478, 0.0451606847345829, 0.04953755810856819, 0.08325565606355667, 0.05844924971461296, 0.27533069252967834, 0.05739938095211983, 0.196486234664917, 0.09111441671848297, 0.11734043806791306, 0.2441006302833557, 0.047029197216033936, 0.23344607651233673], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_64da93602daa6cf543369e73e795beae(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 70, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[70], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_54f75997e93c27e26447d0ba1f5eaeda(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_64da93602daa6cf543369e73e795beae
    def get_inputs(self):
        return [
            paddle.uniform([70], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 70, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4708df4b3c55d058f0203228b39c064a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.17529296875, 0.33056640625, 0.125244140625, 0.039154052734375, 0.027435302734375, 0.4169921875, 0.1390380859375, 0.03558349609375, 0.463134765625, 0.037078857421875, 0.49072265625, 0.1641845703125, 0.31884765625, 0.279052734375, 0.288818359375, 0.46630859375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_78dac7fb8f831aa1e173e525ba854580(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.40807968378067017, 0.003697648411616683, 0.4960094690322876, 0.2118896245956421, 0.46068882942199707, 0.4769827425479889], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_396aabe45bd0843436abef9b507ac5b9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_39db26cd7f03a76138753964e5b993b8(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_396aabe45bd0843436abef9b507ac5b9
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_826be19cdf255ce79a5afaa0839f3c16(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.41160255670547485, 0.18868540227413177, 0.20919594168663025, 0.034152839332818985, 0.2743588387966156, 0.08735733479261398, 0.39252138137817383, 0.10983427613973618, 0.4378513693809509, 0.12596482038497925, 0.1059042289853096, 0.15913397073745728, 0.33988693356513977, 0.07317008823156357, 0.38338741660118103, 0.10368868708610535, 0.12237421423196793, 0.4194718897342682, 0.4529085159301758, 0.06519794464111328, 0.48107197880744934, 0.24272283911705017, 0.0759514570236206, 0.16870783269405365], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_56091350f1e450fb57a101de934b5e37(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2888963520526886, 0.23640626668930054, 0.16708078980445862, 0.49072739481925964, 0.3472626507282257, 0.3785771131515503, 0.16580206155776978, 0.2764646112918854, 0.08603810518980026, 0.4584783911705017, 0.4929220974445343, 0.18982692062854767, 0.2344115823507309, 0.4491366446018219, 0.329652339220047, 0.05514753609895706, 0.3117515444755554, 0.040043383836746216, 0.060389891266822815, 0.1742098331451416], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fda6e078d37975d577d41a0b7441d930(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7753ca859c4dd14a2a233f50b62b8855
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3822598457336426, 0.23850490152835846, 0.011778200045228004, 0.05785755440592766, 0.27013665437698364, 0.47606128454208374, 0.4194249212741852, 0.0510203093290329, 0.13522134721279144, 0.21947823464870453, 0.2721214294433594, 0.28527188301086426, 0.4690231382846832, 0.41241809725761414, 0.31676626205444336, 0.3327076733112335, 0.3679405748844147, 0.2653482258319855, 0.2176898717880249, 0.24358081817626953], dtype='float32').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_daf6c28a06badd2166429e2f551d1511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0203bc591b7633508dc4f66644c355e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_daf6c28a06badd2166429e2f551d1511
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4302721233b9f985d5ecafcf364b6144(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_8d5cf4af68db796e013543629413259b
    def get_inputs(self):
        return [
            paddle.to_tensor([0.366173654794693, 0.41095584630966187, 0.4262462556362152, 0.1438690423965454, 0.3642902672290802, 0.25847965478897095, 0.38296636939048767, 0.333723247051239, 0.3899328112602234, 0.20680005848407745, 0.38138577342033386, 0.38330787420272827, 0.43708059191703796, 0.06434024125337601], dtype='float32').reshape([14]),
            paddle.to_tensor([1, 14, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_44587888091f1c5cd9aa2b4cb52a51ab(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_50c4fdd3198936f1f616b4d13e455f71
    def get_inputs(self):
        return [
            paddle.uniform([1, 2, 3, 180, 320], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 3, 180, 320], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f899cfeb52d326629dbd44f6eaf1e51f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1712646484375, 0.308837890625, 0.451171875, 0.021026611328125, 0.048187255859375, 0.29150390625, 0.20703125, 0.11297607421875, 0.3037109375, 0.158203125, 0.07049560546875, 0.361083984375, 0.498046875, 0.345703125, 0.476806640625, 0.467529296875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_05dae9c9bd573d07a401954a53bd41e5(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_35fae243d8722e86177d2f50c36b9364
    def get_inputs(self):
        return [
            paddle.to_tensor([0.325439453125, 0.38037109375, 0.333984375, 0.3642578125, 0.458251953125, 0.28662109375], dtype='float16').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_aad6485fb1408f083b39bfd11ad7ae58(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3321860134601593, 0.07230065762996674, 0.23288212716579437, 0.036210797727108, 0.05145813152194023, 0.0014886804856359959, 0.3112884759902954, 0.3985934257507324, 0.32807815074920654, 0.3294103443622589, 0.30834394693374634, 0.20128875970840454, 0.06796851009130478, 0.2496422827243805, 0.2820616066455841, 0.13967576622962952, 0.3168518543243408, 0.07640381157398224, 0.26477813720703125, 0.29087963700294495, 0.236050546169281, 0.48731017112731934, 0.40924644470214844, 0.0849803015589714], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f2eec48864fa9a5873cb1901c6e2e92a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2991655170917511, 0.32745376229286194, 0.39339327812194824, 0.4262450933456421, 0.47525468468666077, 0.12239953130483627], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_49560437e1352a0b0b9f28e40aa1260d(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4860215187072754, 0.19621947407722473, 0.003407440148293972, 0.49306735396385193, 0.0629291981458664, 0.1446533501148224, 0.16274502873420715, 0.3632383942604065, 0.04764346778392792, 0.043523725122213364], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_efee14b2e3a83603f48bb1c0ad63ac27(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.03533935546875, 0.255859375, 0.04541015625, 0.4833984375, 0.07696533203125, 0.074951171875, 0.32421875, 0.44091796875, 0.47607421875, 0.4892578125, 0.259765625, 0.2374267578125, 0.414794921875, 0.447021484375, 0.1962890625, 0.057220458984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_238c2d7aca4390bf732d3d8810407c45(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1952660083770752], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a288ba002c64c67dea6f72b14a7919e0(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2108154296875, 0.487060546875, 0.1533203125, 0.317626953125, 0.4619140625, 0.059173583984375, 0.172607421875, 0.2413330078125, 0.187255859375, 0.345947265625, 0.374755859375, 0.39794921875, 0.1412353515625, 0.1287841796875, 0.406494140625, 0.386474609375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b7501a2daf8824b44a715d4068e9dcad(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.19586974382400513, 0.29113003611564636, 0.1722937822341919, 0.3909839987754822, 0.2985207736492157, 0.0813755914568901, 0.34531399607658386, 0.31980985403060913], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d60a2b652cfd069d7c7ba845d10288b4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.479736328125, 0.1881103515625, 0.03704833984375, 0.405029296875, 0.1910400390625, 0.148681640625, 0.491455078125, 0.12335205078125, 0.273193359375, 0.42236328125, 0.186279296875, 0.294189453125, 0.387451171875, 0.074462890625, 0.1771240234375, 0.426513671875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_9b4a707652a6aeda7e77d1459a1616e4(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_99760077e4fe4703a5e3ed68a45bce19
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26394370198249817], dtype='float32').reshape([1]),
            paddle.to_tensor([1, 1, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 44, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[44], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_cbeaa8fd06d8d5cd37523d9e3d528f89(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_b0a77657a18411db0d66a19f64af0f9e
    def get_inputs(self):
        return [
            paddle.uniform([44], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 44, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_acf86929588db8e839c21c18185b0772(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.1342964917421341, 0.37979021668434143, 0.23251521587371826, 0.3390282094478607, 0.1049843281507492, 0.31654658913612366, 0.36645883321762085, 0.27894142270088196, 0.08610132336616516, 0.05556832626461983, 0.42468568682670593, 0.4790683090686798, 0.18750016391277313, 0.4497629404067993, 0.10598848015069962, 0.43285492062568665, 0.3077908456325531, 0.08989544957876205, 0.3248269259929657, 0.4868243336677551, 0.30610498785972595, 0.46719494462013245, 0.2225741446018219, 0.42060574889183044, 0.18984825909137726, 0.12369072437286377, 0.26226744055747986, 0.0965171754360199, 0.06604090332984924, 0.14494533836841583], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f51327a4445ea138b9fca78346123c60(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.02596975676715374, 0.06567396223545074, 0.4338372051715851, 0.3542535901069641, 0.0942763090133667, 0.34899577498435974, 0.28291985392570496, 0.40341681241989136, 0.30715468525886536, 0.1679488718509674, 0.47327300906181335, 0.08948874473571777, 0.4326556324958801, 0.16781632602214813, 0.1849031299352646, 0.3754350543022156, 0.09064552187919617, 0.07872678339481354, 0.4762146472930908, 0.093681700527668, 0.15968799591064453, 0.31442558765411377, 0.36627644300460815, 0.45430123805999756, 0.4247727394104004, 0.19935105741024017, 0.43765875697135925, 0.35280901193618774, 0.4475608766078949, 0.47326213121414185], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_87451d4417be6571e9462c24b340c576(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8a9aa27f469cb36767b891c4d8726ef2(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_87451d4417be6571e9462c24b340c576
    def get_inputs(self):
        return [
            paddle.uniform([75], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 75, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_8468fa623da5e4585258eefbe5536391(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.28369140625, 0.10504150390625, 0.341796875, 0.06689453125, 0.2003173828125, 0.2193603515625, 0.480224609375, 0.290283203125, 0.317138671875, 0.189208984375, 0.188232421875, 0.06689453125, 0.222412109375, 0.2325439453125, 0.431884765625, 0.037994384765625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_b1ae3ca7d2d11e7727b3207e49ea5b63(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4e5cb28274a2b002e8d99847231742cc
    def get_inputs(self):
        return [
            paddle.to_tensor([0.376953125, 0.1893310546875, 0.2276611328125, 0.232177734375, 0.454833984375, 0.472412109375, 0.053863525390625, 0.4794921875, 0.37353515625, 0.488525390625, 0.1617431640625, 0.485595703125, 0.416259765625, 0.10223388671875, 0.0214385986328125, 0.41650390625, 0.4765625, 0.09893798828125, 0.467529296875, 0.473388671875], dtype='float16').reshape([20]),
            paddle.to_tensor([1, 20, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6dac7f00c569c0c6e01d62bdc071eeac(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_e7e78f7bcf44cfe69b8cadbde1c75c64
    def get_inputs(self):
        return [
            paddle.uniform([1044], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([1, 1044, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5303d850c645939c3c9827a4653f0cdb(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_291ac5550146552163cd1b127f4bd7da
    def get_inputs(self):
        return [
            paddle.to_tensor([0.37404125928878784, 0.14029169082641602, 0.18770663440227509, 0.08821602910757065, 0.3216068148612976, 0.07255217432975769, 0.06401525437831879, 0.45921972393989563, 0.1192849725484848, 0.36813586950302124, 0.3798208236694336, 0.33749493956565857, 0.11738570779561996, 0.49788081645965576, 0.4712342321872711, 0.23054206371307373, 0.06255124509334564, 0.3064593970775604, 0.14108602702617645, 0.08832202106714249, 0.32570862770080566, 0.1033015251159668, 0.019524144008755684, 0.4596898555755615, 0.33400440216064453, 0.23303531110286713, 0.11582830548286438, 0.37168896198272705], dtype='float32').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_fea9ef161ac822f019bb21fd8aa44a92(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_7e0e6d4f4d2ac3ecc733e040682622b9
    def get_inputs(self):
        return [
            paddle.to_tensor([0.46421700716018677, 0.1186988353729248, 0.47928839921951294], dtype='float32').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None], dtype='float16'),
            paddle.static.InputSpec(shape=[2], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e276ec6b67226e55f70976b34a1d3294(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_6ff5c3680aac5d8603f9228f79da88dd
    def get_inputs(self):
        return [
            paddle.uniform([1], dtype='float16', min=0, max=0.5),
            paddle.to_tensor([-1, 1], dtype='int64').reshape([2]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_0c65767a0fd29be936516bdb70fa59e1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.093994140625, 0.401123046875, 0.295166015625, 0.10498046875, 0.208740234375, 0.28076171875, 0.1923828125, 0.42919921875, 0.450439453125, 0.287353515625, 0.010345458984375, 0.3564453125, 0.16455078125, 0.1446533203125, 0.0465087890625, 0.140625], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_67267fc7cc0669d395e89db2b311a32e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.258056640625, 0.1195068359375, 0.368896484375, 0.206787109375, 0.32373046875, 0.12384033203125, 0.315673828125, 0.408935546875, 0.282470703125, 0.1795654296875, 0.1285400390625, 0.1864013671875, 0.47265625, 0.09912109375, 0.377685546875, 0.345458984375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_0c75bd441700c68ce2d731248d27487a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 702, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[702], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_09cf30699a5929633ad13c0db0e3425f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0c75bd441700c68ce2d731248d27487a
    def get_inputs(self):
        return [
            paddle.uniform([702], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 702, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_41992b45f29c9fe2f0d32380e149b6de(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.169921875, 0.3125, 0.169921875, 0.2015380859375, 0.295166015625, 0.395263671875, 0.05609130859375, 0.343505859375, 0.150390625, 0.48388671875, 0.2392578125, 0.14306640625, 0.33447265625, 0.439208984375, 0.2474365234375, 0.463623046875], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f731769adedd3f16b69553c28352ec3a(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.43051016330718994, 0.09250113368034363, 0.3062034547328949, 0.053071364760398865, 0.4302600622177124, 0.33610016107559204, 0.35577887296676636, 0.2398597151041031, 0.24321366846561432, 0.10999759286642075, 0.35338735580444336, 0.21873939037322998, 0.39852073788642883, 0.32677820324897766, 0.4242386519908905, 0.18966999650001526], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d85a5424ae5c1f2908acd0d914dc5850(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_96e42c9f31853ad1ddb919f9fa69fc83
    def get_inputs(self):
        return [
            paddle.to_tensor([0.08445482701063156, 0.15130241215229034, 0.38093581795692444, 0.4712432324886322, 0.2949954867362976, 0.33694228529930115, 0.3983725309371948, 0.18592794239521027, 0.20455224812030792, 0.3121640682220459], dtype='float32').reshape([10]),
            paddle.to_tensor([1, 10, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_273c70746792fcbdfabb0648be658ac1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_471ff5e0ac98170a04e895bd85e85c99
    def get_inputs(self):
        return [
            paddle.to_tensor([0.05950927734375, 0.0002620220184326172, 0.468994140625, 0.33349609375, 0.1514892578125, 0.49462890625, 0.43896484375, 0.09906005859375, 0.360595703125, 0.006832122802734375, 0.27197265625, 0.461669921875, 0.365234375, 0.4951171875, 0.034942626953125, 0.23095703125, 0.2435302734375, 0.44287109375, 0.088623046875, 0.2254638671875, 0.13134765625, 0.154541015625, 0.28369140625, 0.304931640625, 0.165283203125, 0.285888671875, 0.2490234375, 0.42919921875], dtype='float16').reshape([28]),
            paddle.to_tensor([1, 28, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_5d4c5e275a28c32b418d641d861aa722(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_80a9b80e801fcb4c3238dc6741b96bd6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2644968628883362, 0.2582935094833374, 0.3061598241329193, 0.09280376881361008, 0.35174086689949036, 0.28388625383377075, 0.4104284942150116, 0.14128108322620392, 0.2682090699672699, 0.3807123303413391, 0.2511208951473236, 0.1622089445590973, 0.11085188388824463, 0.04097210615873337, 0.4579932391643524, 0.4716559946537018, 0.171672061085701, 0.2816564738750458, 0.11512601375579834], dtype='float32').reshape([19]),
            paddle.to_tensor([1, 19, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e2f99e56b558a9dbdf39ad60d30993db(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.26001524925231934, 0.31900110840797424, 0.41747021675109863, 0.33629682660102844, 0.13773582875728607, 0.49214085936546326, 0.17069809138774872, 0.2989502549171448, 0.08835500478744507, 0.18949899077415466, 0.4075441062450409, 0.2045947015285492, 0.24880751967430115, 0.17246198654174805, 0.3049999475479126, 0.43194958567619324], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 972, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[972], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d205c4b0f33567a650c63e6874f0d498(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2b53e18c5a4108ca7eecf96e3b6b667c
    def get_inputs(self):
        return [
            paddle.uniform([972], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 972, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a6363997dad5587ae417d4ae7e49aafa(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2907898426055908, 0.28687360882759094, 0.2678211033344269, 0.22865141928195953, 0.31246593594551086, 0.04308965057134628, 0.37370920181274414, 0.4148435592651367, 0.03677377104759216, 0.17029310762882233, 0.08473778516054153, 0.2871255576610565, 0.29274705052375793, 0.4573240578174591, 0.024653062224388123, 0.2878033220767975, 0.16993215680122375, 0.48934245109558105, 0.1626395583152771, 0.30466893315315247, 0.4784393012523651, 0.2704809904098511, 0.29503360390663147, 0.09147217869758606], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_a61b9cf24923bfe86901146a2e2fc7c6(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.2581578493118286, 0.4069618284702301, 0.3577655553817749, 0.027774767950177193, 0.2608072757720947, 0.11846662312746048], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_351da602a5ea3f397d42815cb8da85bd(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_21e7d4235e9eed5b634708244ee0f2fb
    def get_inputs(self):
        return [
            paddle.to_tensor([0.09094324707984924, 0.37069544196128845, 0.285530149936676, 0.3729270100593567, 0.15090212225914001, 0.24695034325122833, 0.29620611667633057, 0.4346746802330017, 0.13139352202415466, 0.2140757292509079, 0.12470591068267822, 0.06371964514255524, 0.44273698329925537, 0.09546156227588654, 0.039502788335084915, 0.49189603328704834, 0.3931814730167389, 0.27451953291893005, 0.021158793941140175, 0.005048288963735104, 0.16757114231586456, 0.3291144073009491, 0.022245589643716812, 0.3974687457084656], dtype='float32').reshape([24]),
            paddle.to_tensor([1, 24, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_59233f0b453f269ed765a9ed50178ce3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1568, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1568], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_f20da9eba8a4343cd0943fc9d4bc473b(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_59233f0b453f269ed765a9ed50178ce3
    def get_inputs(self):
        return [
            paddle.uniform([1568], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 1568, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_d14de77d20384380c2fe1ff2950dda41(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.3014868497848511, 0.10195162892341614, 0.32108157873153687, 0.3639165759086609, 0.2305137664079666, 0.25021761655807495], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_e9f7388e1fea86ad20eea4a4c7e8f5ef(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_ab0cb8a80d1a66cd012199224946361d
    def get_inputs(self):
        return [
            paddle.to_tensor([0.34814453125, 0.3583984375, 0.484375], dtype='float16').reshape([3]),
            paddle.to_tensor([1, 3, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_de030ffba61a093af4dd7c2e5704cf60(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_0ed40d79f17e5e51c1c3c759c8d88bcf
    def get_inputs(self):
        return [
            paddle.to_tensor([0.14099828898906708, 0.14884373545646667, 0.3730734884738922, 0.2855542302131653, 0.2772567570209503, 0.06792563945055008], dtype='float32').reshape([6]),
            paddle.to_tensor([1, 6, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_4fdad0aec62d4ea6aaf5daafaf04fe32(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_432d1ebffffa755e49510ed60359a1b6
    def get_inputs(self):
        return [
            paddle.to_tensor([0.10968017578125, 0.1932373046875, 0.418701171875, 0.489013671875, 0.385009765625, 0.167724609375, 0.0816650390625, 0.192626953125, 0.39892578125, 0.017425537109375, 0.449462890625, 0.483642578125, 0.30908203125, 0.437744140625, 0.458740234375, 0.4990234375], dtype='float16').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_536e240cab5d453a371bd948242247ee(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_dcd33e1f260bc649e64022dc6d8f0195
    def get_inputs(self):
        return [
            paddle.uniform([906], dtype='float32', min=0, max=0.5),
            paddle.to_tensor([1, 906, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_6de93b17ed7d52cea9e35ccfb2643e0e(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_4a8730cf0f9c549d493c36523ee77c0a
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4672566056251526, 0.1955115646123886, 0.2048926204442978, 0.04685205966234207, 0.13911093771457672, 0.013031226582825184, 0.41277360916137695, 0.4458710551261902], dtype='float32').reshape([8]),
            paddle.to_tensor([1, 8, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_86747f00d83d5b39632a8ae6560b6ab1(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_af98b97cff06a8bfa07b3534b5f41702
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4230532944202423, 0.11403891444206238, 0.41427719593048096, 0.3514882028102875, 0.45127424597740173, 0.48764657974243164, 0.32225286960601807, 0.47277259826660156, 0.03163620084524155, 0.08795836567878723, 0.3512660264968872, 0.35713550448417664, 0.2724481225013733, 0.027525220066308975, 0.22310619056224823, 0.08739892393350601, 0.4819950759410858, 0.1875266134738922, 0.3860885500907898, 0.138950377702713, 0.4902603328227997, 0.14579929411411285, 0.3197440803050995, 0.029966387897729874, 0.0027583218179643154, 0.262982040643692, 0.23516781628131866, 0.3693026304244995, 0.38513627648353577, 0.3305981457233429], dtype='float32').reshape([30]),
            paddle.to_tensor([1, 30, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

@unittest.skipIf(need_skip, skip_message)
class TestPrimitiveOp_354d65e96c9ebf36baa27671a08fbc5f(CinnTestBase, unittest.TestCase):
    
    def get_test_class(self):
        return PrimitiveOp_2a1b96fb7a36325c6b95b808ce01fcea
    def get_inputs(self):
        return [
            paddle.to_tensor([0.4042978286743164, 0.27739831805229187, 0.1779942363500595, 0.39333757758140564, 0.19231083989143372, 0.45884039998054504, 0.12751422822475433, 0.3371831178665161, 0.1375877410173416, 0.4729136824607849, 0.47165513038635254, 0.3940558433532715, 0.3070954978466034, 0.13317643105983734, 0.44817614555358887, 0.025057073682546616], dtype='float32').reshape([16]),
            paddle.to_tensor([1, 16, 1, 1], dtype='int64').reshape([4]),
        ]


    def test_entry(self):
        if AthenaTryRunEnabled():
            if try_run_exit_code == 0:
                # All unittest cases passed.
                return
            if try_run_exit_code < 0:
                # program panicked.
                raise RuntimeError(f"panicked. panic stderr have been reported by the unittest `TestTryRun.test_panic`.")
        return self._test_entry()

class PrimitiveOp_8047b76626f966488e8b8dcb6e6f5bfa(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 840, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[840], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_fb096a8cfe2c4e417c05d0c2183173e3(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 512, 1, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[512], dtype='float32'),
            paddle.static.InputSpec(shape=[5], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a20912bb4145a7f4e6b0f1d37013fe10(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_098a3ee94b6d533e7330524d22c827d6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bbdc4a4b8fe31fd13f83fad963c77b86(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 700, 25], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 350, 25], dtype='float16'),
            paddle.static.InputSpec(shape=[3], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_f0d1dc08fa3469d2624dcd8130b586ac(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 232, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[232], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_34238d17a0ce790d55cc788aa535a511(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_d1464b59103b0857baa69ef938270cf6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_05d07a396d2d518c1f9f355cb5ae2309(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 11, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[11], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_cce3548625175c370c2fad79f491191f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 27, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[27], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_989c252fd4794966f21dbb118705a92a(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 72, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[72], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_86b6f9266468fc57624ac1a7a8325dda(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 7, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[7], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_76507a1b521dcfd5642848299dc9dd1b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 81, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[81], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bc64d890c7f2b9184b1110ca90dd51c4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_1bf07801a793b77edadba595542a9761(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 504, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[504], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_8c0171da79c971803bc2291f5e0fd104(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_5151870a8a25b2b6b00e2d50620190a6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 17, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[17], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_5b147dcffeec68b386c8fb42b413bccf(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_457c1034fbf71b1c3753cc85023ec7f6(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_6c6fe7fe3ba85b52f329bbcb48cdfb16(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 216, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[216], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_42829ccaaeb262da62067e363b816f25(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 2560, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[2560], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_03f501535c8e6a2fdd956cd0332efb52(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 36, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[36], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_20d78d7a552b39362498c0e5aba7f2e4(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 1044, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1044], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_c28bfd594f2d8738a5f28678a3c10c7e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 168, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[168], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_23058785eccb6a6caa30b5b3fddf4c4b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 58, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[58], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_25d5833cc87e7cd60e62371003a5acb8(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_c2dc287c7cb2429cd12c98c81ebfc06b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 960, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[960], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_4e7d488259349ce2de4748cbb5aca91b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 304, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[304], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_e714de2cbc1c1508bdaba604bd02617e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 300, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[300], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_1de039c1dcaf14b4b27c085ecc75a49b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 180, 320], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[1, 2, 3, 180, 320], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_ce9aa1604db09d6e9ffe692bab7a9c17(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 906, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[906], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a5f2577d6dda6d2637f3bd0a90df706e(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 228, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[228], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_2d9f7c88a5ef348234abc127be35cd2c(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 87, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[87], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_7a2c37763cd54738516fce73184f2a2b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 636, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[636], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_d0a4c7ff355bcc25bacb885fd898a425(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([-1, 3, 224, 224], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[None, 8, 3, 224, 224], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_35af1cac4b0f73665144f4f598fee6f0(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_a0ca5377ce1eae493dce3069e6a9146b(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 75, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[75], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_bfca4bd32cbc4ec1edcec3c482924c22(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 53, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[53], dtype='float32'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_f6988adcd86bb52bda84375788fac524(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 432, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[432], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_701427004926d049986cfd5fffdbec2f(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 570, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[570], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None



class PrimitiveOp_ece0433b9d0463882aef95d09fc590c9(InstanceTrait, paddle.nn.Layer):
    
    def __init__(self):
        super().__init__()

    def forward(self, arg_0, arg_1):
        arg_1 = paddle._C_ops.full_int_array([1, 366, 1, 1], paddle.int64, paddle.core.CPUPlace())
        input_0 = arg_0
        input_1 = arg_1
        return (lambda x, f: f(x))(paddle._C_ops.reshape(input_0, input_1), lambda out: out if isinstance(out, (list, tuple)) else (out, None))

    def get_input_spec(self):
        return [
            paddle.static.InputSpec(shape=[366], dtype='float16'),
            paddle.static.InputSpec(shape=[4], dtype='int64'),
        ]
        
    instance_ = None
    static_instance_with_cinn_ = None
    static_instance_without_cinn_ = None




if __name__ == '__main__':
    unittest.main()