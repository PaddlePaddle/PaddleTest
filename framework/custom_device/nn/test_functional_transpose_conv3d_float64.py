#!/bin/env python
# -*- coding: utf-8 -*-
# encoding=utf-8 vi:ts=4:sw=4:expandtab:ft=python
"""
test_functional_transpose_conv3d
"""
from apibase import APIBase
from apibase import randtool
import paddle
import pytest
import numpy as np


class TestFunctionalTransposeConv3d(APIBase):
    """
    test
    """

    def hook(self):
        """
        implement
        """
        self.types = [np.float64]
        paddle.set_default_dtype("float64")
        self.delta = 1e-4
        # self.debug = True
        # self.static = True
        # enable check grad
        # self.enable_backward = True


obj = TestFunctionalTransposeConv3d(paddle.nn.functional.conv3d_transpose)


@pytest.mark.api_nn_transpose_conv3d_vartype
def test_transpose_conv3d_base():
    """
    base
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32")
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[1]).astype("float32")
    stride = 1
    padding = 1
    dilation = 1
    # padding_mode = "zeros"
    # groups=1
    res = np.array(
        [
            [[[[11.4621, 11.4621], [11.4621, 11.4621]], [[11.4621, 11.4621], [11.4621, 11.4621]]]],
            [[[[11.2195, 11.2195], [11.2195, 11.2195]], [[11.2195, 11.2195], [11.2195, 11.2195]]]],
        ]
    )
    obj.base(res=res, x=x, weight=weight, bias=bias, stride=stride, padding=padding, dilation=dilation)


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv():
    """
    default
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32")
    weight = np.ones(shape=[3, 2, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[1]).astype("float32")
    stride = 1
    padding = 0
    dilation = 1
    # padding_mode = "zeros"
    # groups=1
    res = np.array(
        [
            [
                [
                    [
                        [1.8096, 3.2402, 3.2402, 1.4306],
                        [3.5865, 6.1221, 6.1221, 2.5356],
                        [3.5865, 6.1221, 6.1221, 2.5356],
                        [1.7769, 2.8819, 2.8819, 1.1050],
                    ],
                    [
                        [3.4804, 5.6953, 5.6953, 2.2148],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [2.5830, 5.7669, 5.7669, 3.1839],
                    ],
                    [
                        [3.4804, 5.6953, 5.6953, 2.2148],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [2.5830, 5.7669, 5.7669, 3.1839],
                    ],
                    [
                        [1.6708, 2.4550, 2.4550, 0.7842],
                        [2.4769, 5.3400, 5.3400, 2.8631],
                        [2.4769, 5.3400, 5.3400, 2.8631],
                        [0.8061, 2.8849, 2.8849, 2.0789],
                    ],
                ],
                [
                    [
                        [1.8096, 3.2402, 3.2402, 1.4306],
                        [3.5865, 6.1221, 6.1221, 2.5356],
                        [3.5865, 6.1221, 6.1221, 2.5356],
                        [1.7769, 2.8819, 2.8819, 1.1050],
                    ],
                    [
                        [3.4804, 5.6953, 5.6953, 2.2148],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [2.5830, 5.7669, 5.7669, 3.1839],
                    ],
                    [
                        [3.4804, 5.6953, 5.6953, 2.2148],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [6.0634, 11.4621, 11.4621, 5.3987],
                        [2.5830, 5.7669, 5.7669, 3.1839],
                    ],
                    [
                        [1.6708, 2.4550, 2.4550, 0.7842],
                        [2.4769, 5.3400, 5.3400, 2.8631],
                        [2.4769, 5.3400, 5.3400, 2.8631],
                        [0.8061, 2.8849, 2.8849, 2.0789],
                    ],
                ],
            ],
            [
                [
                    [
                        [1.0913, 1.8448, 1.8448, 0.7535],
                        [3.1091, 4.0291, 4.0291, 0.9200],
                        [3.1091, 4.0291, 4.0291, 0.9200],
                        [2.0179, 2.1843, 2.1843, 0.1665],
                    ],
                    [
                        [2.7191, 5.0930, 5.0930, 2.3739],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [4.0566, 6.1265, 6.1265, 2.0699],
                    ],
                    [
                        [2.7191, 5.0930, 5.0930, 2.3739],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [4.0566, 6.1265, 6.1265, 2.0699],
                    ],
                    [
                        [1.6278, 3.2482, 3.2482, 1.6204],
                        [3.6666, 7.1904, 7.1904, 3.5238],
                        [3.6666, 7.1904, 7.1904, 3.5238],
                        [2.0387, 3.9422, 3.9422, 1.9034],
                    ],
                ],
                [
                    [
                        [1.0913, 1.8448, 1.8448, 0.7535],
                        [3.1091, 4.0291, 4.0291, 0.9200],
                        [3.1091, 4.0291, 4.0291, 0.9200],
                        [2.0179, 2.1843, 2.1843, 0.1665],
                    ],
                    [
                        [2.7191, 5.0930, 5.0930, 2.3739],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [4.0566, 6.1265, 6.1265, 2.0699],
                    ],
                    [
                        [2.7191, 5.0930, 5.0930, 2.3739],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [6.7757, 11.2195, 11.2195, 4.4438],
                        [4.0566, 6.1265, 6.1265, 2.0699],
                    ],
                    [
                        [1.6278, 3.2482, 3.2482, 1.6204],
                        [3.6666, 7.1904, 7.1904, 3.5238],
                        [3.6666, 7.1904, 7.1904, 3.5238],
                        [2.0387, 3.9422, 3.9422, 1.9034],
                    ],
                ],
            ],
        ]
    )
    obj.run(res=res, x=x, weight=weight, bias=bias, stride=stride, padding=padding, dilation=dilation)


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d1():
    """
    w = 3.3 bias = -1.7
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32")
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32") * 3.3
    bias = np.ones(shape=[1]).astype("float32") * -1.7
    stride = 1
    padding = 1
    dilation = 1
    # groups=1
    res = np.array(
        [
            [[[[36.1250, 36.1250], [36.1250, 36.1250]], [[36.1250, 36.1250], [36.1250, 36.1250]]]],
            [[[[35.3244, 35.3244], [35.3244, 35.3244]], [[35.3244, 35.3244], [35.3244, 35.3244]]]],
        ]
    )
    obj.run(res=res, x=x, weight=weight, bias=bias, stride=stride, padding=padding, dilation=dilation)


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d2():
    """
    padding = [1, 0]
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32")
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[1]).astype("float32")
    stride = 1
    padding = [1, 0, 1]
    dilation = 1
    # groups=1
    res = np.array(
        [
            [
                [
                    [[5.6953, 5.6953], [11.4621, 11.4621], [11.4621, 11.4621], [5.7669, 5.7669]],
                    [[5.6953, 5.6953], [11.4621, 11.4621], [11.4621, 11.4621], [5.7669, 5.7669]],
                ]
            ],
            [
                [
                    [[5.0930, 5.0930], [11.2195, 11.2195], [11.2195, 11.2195], [6.1265, 6.1265]],
                    [[5.0930, 5.0930], [11.2195, 11.2195], [11.2195, 11.2195], [6.1265, 6.1265]],
                ]
            ],
        ]
    )
    obj.run(res=res, x=x, weight=weight, bias=bias, stride=stride, padding=padding, dilation=dilation)


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d3():
    """
    dilation = 2
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32")
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[1]).astype("float32")
    stride = 1
    padding = [1, 0, 1]
    dilation = 2
    # groups=1
    res = np.array(
        [
            [
                [
                    [
                        [0.7842, 1.6708, 0.7842, 1.6708],
                        [2.0789, 0.8061, 2.0789, 0.8061],
                        [0.7842, 1.6708, 0.7842, 1.6708],
                        [2.0789, 0.8061, 2.0789, 0.8061],
                        [0.7842, 1.6708, 0.7842, 1.6708],
                        [2.0789, 0.8061, 2.0789, 0.8061],
                    ],
                    [
                        [1.4306, 1.8096, 1.4306, 1.8096],
                        [1.1050, 1.7769, 1.1050, 1.7769],
                        [1.4306, 1.8096, 1.4306, 1.8096],
                        [1.1050, 1.7769, 1.1050, 1.7769],
                        [1.4306, 1.8096, 1.4306, 1.8096],
                        [1.1050, 1.7769, 1.1050, 1.7769],
                    ],
                    [
                        [0.7842, 1.6708, 0.7842, 1.6708],
                        [2.0789, 0.8061, 2.0789, 0.8061],
                        [0.7842, 1.6708, 0.7842, 1.6708],
                        [2.0789, 0.8061, 2.0789, 0.8061],
                        [0.7842, 1.6708, 0.7842, 1.6708],
                        [2.0789, 0.8061, 2.0789, 0.8061],
                    ],
                    [
                        [1.4306, 1.8096, 1.4306, 1.8096],
                        [1.1050, 1.7769, 1.1050, 1.7769],
                        [1.4306, 1.8096, 1.4306, 1.8096],
                        [1.1050, 1.7769, 1.1050, 1.7769],
                        [1.4306, 1.8096, 1.4306, 1.8096],
                        [1.1050, 1.7769, 1.1050, 1.7769],
                    ],
                ]
            ],
            [
                [
                    [
                        [1.6204, 1.6278, 1.6204, 1.6278],
                        [1.9034, 2.0387, 1.9034, 2.0387],
                        [1.6204, 1.6278, 1.6204, 1.6278],
                        [1.9034, 2.0387, 1.9034, 2.0387],
                        [1.6204, 1.6278, 1.6204, 1.6278],
                        [1.9034, 2.0387, 1.9034, 2.0387],
                    ],
                    [
                        [0.7535, 1.0913, 0.7535, 1.0913],
                        [0.1665, 2.0179, 0.1665, 2.0179],
                        [0.7535, 1.0913, 0.7535, 1.0913],
                        [0.1665, 2.0179, 0.1665, 2.0179],
                        [0.7535, 1.0913, 0.7535, 1.0913],
                        [0.1665, 2.0179, 0.1665, 2.0179],
                    ],
                    [
                        [1.6204, 1.6278, 1.6204, 1.6278],
                        [1.9034, 2.0387, 1.9034, 2.0387],
                        [1.6204, 1.6278, 1.6204, 1.6278],
                        [1.9034, 2.0387, 1.9034, 2.0387],
                        [1.6204, 1.6278, 1.6204, 1.6278],
                        [1.9034, 2.0387, 1.9034, 2.0387],
                    ],
                    [
                        [0.7535, 1.0913, 0.7535, 1.0913],
                        [0.1665, 2.0179, 0.1665, 2.0179],
                        [0.7535, 1.0913, 0.7535, 1.0913],
                        [0.1665, 2.0179, 0.1665, 2.0179],
                        [0.7535, 1.0913, 0.7535, 1.0913],
                        [0.1665, 2.0179, 0.1665, 2.0179],
                    ],
                ]
            ],
        ]
    )
    obj.run(res=res, x=x, weight=weight, bias=bias, stride=stride, padding=padding, dilation=dilation)


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d4():
    """
    out_channels = 3 groups=3
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32")
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[3]).astype("float32")
    stride = 1
    padding = [1, 0, 1]
    dilation = 1
    groups = 3
    res = np.array(
        [
            [
                [
                    [[1.7539, 1.7539], [3.3981, 3.3981], [3.3981, 3.3981], [1.6442, 1.6442]],
                    [[1.7539, 1.7539], [3.3981, 3.3981], [3.3981, 3.3981], [1.6442, 1.6442]],
                ],
                [
                    [[1.5980, 1.5980], [4.1032, 4.1032], [4.1032, 4.1032], [2.5052, 2.5052]],
                    [[1.5980, 1.5980], [4.1032, 4.1032], [4.1032, 4.1032], [2.5052, 2.5052]],
                ],
                [
                    [[2.3433, 2.3433], [3.9608, 3.9608], [3.9608, 3.9608], [1.6175, 1.6175]],
                    [[2.3433, 2.3433], [3.9608, 3.9608], [3.9608, 3.9608], [1.6175, 1.6175]],
                ],
            ],
            [
                [
                    [[1.6049, 1.6049], [4.4060, 4.4060], [4.4060, 4.4060], [2.8011, 2.8011]],
                    [[1.6049, 1.6049], [4.4060, 4.4060], [4.4060, 4.4060], [2.8011, 2.8011]],
                ],
                [
                    [[1.5807, 1.5807], [3.1496, 3.1496], [3.1496, 3.1496], [1.5689, 1.5689]],
                    [[1.5807, 1.5807], [3.1496, 3.1496], [3.1496, 3.1496], [1.5689, 1.5689]],
                ],
                [
                    [[1.9073, 1.9073], [3.6639, 3.6639], [3.6639, 3.6639], [1.7566, 1.7566]],
                    [[1.9073, 1.9073], [3.6639, 3.6639], [3.6639, 3.6639], [1.7566, 1.7566]],
                ],
            ],
        ]
    )
    obj.run(res=res, x=x, weight=weight, bias=bias, stride=stride, padding=padding, groups=groups, dilation=dilation)


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d5():
    """
    out_channels = 3 groups=3 data_format="NDHWC"
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32").transpose(0, 2, 3, 4, 1)
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[3]).astype("float32")
    stride = 1
    padding = [1, 0, 1]
    dilation = 1
    groups = 3
    res = np.array(
        [
            [
                [
                    [[1.7539, 1.7539], [3.3981, 3.3981], [3.3981, 3.3981], [1.6442, 1.6442]],
                    [[1.7539, 1.7539], [3.3981, 3.3981], [3.3981, 3.3981], [1.6442, 1.6442]],
                ],
                [
                    [[1.5980, 1.5980], [4.1032, 4.1032], [4.1032, 4.1032], [2.5052, 2.5052]],
                    [[1.5980, 1.5980], [4.1032, 4.1032], [4.1032, 4.1032], [2.5052, 2.5052]],
                ],
                [
                    [[2.3433, 2.3433], [3.9608, 3.9608], [3.9608, 3.9608], [1.6175, 1.6175]],
                    [[2.3433, 2.3433], [3.9608, 3.9608], [3.9608, 3.9608], [1.6175, 1.6175]],
                ],
            ],
            [
                [
                    [[1.6049, 1.6049], [4.4060, 4.4060], [4.4060, 4.4060], [2.8011, 2.8011]],
                    [[1.6049, 1.6049], [4.4060, 4.4060], [4.4060, 4.4060], [2.8011, 2.8011]],
                ],
                [
                    [[1.5807, 1.5807], [3.1496, 3.1496], [3.1496, 3.1496], [1.5689, 1.5689]],
                    [[1.5807, 1.5807], [3.1496, 3.1496], [3.1496, 3.1496], [1.5689, 1.5689]],
                ],
                [
                    [[1.9073, 1.9073], [3.6639, 3.6639], [3.6639, 3.6639], [1.7566, 1.7566]],
                    [[1.9073, 1.9073], [3.6639, 3.6639], [3.6639, 3.6639], [1.7566, 1.7566]],
                ],
            ],
        ]
    ).transpose(0, 2, 3, 4, 1)
    obj.run(
        res=res,
        x=x,
        weight=weight,
        bias=bias,
        stride=stride,
        padding=padding,
        groups=groups,
        data_format="NDHWC",
        dilation=dilation,
    )


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d6():
    """
    out_channels = 3 groups=3 data_format="NDHWC" output_padding=1
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32").transpose(0, 2, 3, 4, 1)
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[3]).astype("float32")
    stride = 2
    padding = [1, 1, 1]
    dilation = 1
    groups = 3
    output_padding = 1
    res = np.array(
        [
            [
                [
                    [
                        [0.2485, 0.6985, 0.4500, 0.4500],
                        [0.6595, 1.3697, 0.7103, 0.7103],
                        [0.4109, 0.6712, 0.2603, 0.2603],
                        [0.4109, 0.6712, 0.2603, 0.2603],
                    ],
                    [
                        [1.1189, 1.7539, 0.6350, 0.6350],
                        [1.5495, 3.3981, 1.8486, 1.8486],
                        [0.4306, 1.6442, 1.2136, 1.2136],
                        [0.4306, 1.6442, 1.2136, 1.2136],
                    ],
                    [
                        [0.8704, 1.0554, 0.1850, 0.1850],
                        [0.8901, 2.0283, 1.1383, 1.1383],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                    ],
                    [
                        [0.8704, 1.0554, 0.1850, 0.1850],
                        [0.8901, 2.0283, 1.1383, 1.1383],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                    ],
                ],
                [
                    [
                        [0.6805, 1.1670, 0.4866, 0.4866],
                        [1.6455, 2.5255, 0.8800, 0.8800],
                        [0.9650, 1.3584, 0.3934, 0.3934],
                        [0.9650, 1.3584, 0.3934, 0.3934],
                    ],
                    [
                        [0.7600, 1.5980, 0.8380, 0.8380],
                        [1.8887, 4.1032, 2.2146, 2.2146],
                        [1.1287, 2.5052, 1.3766, 1.3766],
                        [1.1287, 2.5052, 1.3766, 1.3766],
                    ],
                    [
                        [0.0796, 0.4310, 0.3514, 0.3514],
                        [0.2432, 1.5778, 1.3346, 1.3346],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                    ],
                    [
                        [0.0796, 0.4310, 0.3514, 0.3514],
                        [0.2432, 1.5778, 1.3346, 1.3346],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                    ],
                ],
                [
                    [
                        [0.8806, 1.3747, 0.4941, 0.4941],
                        [1.2816, 2.2269, 0.9454, 0.9454],
                        [0.4010, 0.8523, 0.4513, 0.4513],
                        [0.4010, 0.8523, 0.4513, 0.4513],
                    ],
                    [
                        [1.6015, 2.3433, 0.7418, 0.7418],
                        [2.6252, 3.9608, 1.3356, 1.3356],
                        [1.0237, 1.6175, 0.5937, 0.5937],
                        [1.0237, 1.6175, 0.5937, 0.5937],
                    ],
                    [
                        [0.7209, 0.9686, 0.2478, 0.2478],
                        [1.3437, 1.7339, 0.3902, 0.3902],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                    ],
                    [
                        [0.7209, 0.9686, 0.2478, 0.2478],
                        [1.3437, 1.7339, 0.3902, 0.3902],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                    ],
                ],
            ],
            [
                [
                    [
                        [0.2012, 0.2824, 0.0812, 0.0812],
                        [1.1546, 1.2916, 0.1370, 0.1370],
                        [0.9535, 1.0092, 0.0557, 0.0557],
                        [0.9535, 1.0092, 0.0557, 0.0557],
                    ],
                    [
                        [0.8007, 1.6049, 0.8042, 0.8042],
                        [2.7245, 4.4060, 1.6815, 1.6815],
                        [1.9238, 2.8011, 0.8773, 0.8773],
                        [1.9238, 2.8011, 0.8773, 0.8773],
                    ],
                    [
                        [0.5995, 1.3225, 0.7230, 0.7230],
                        [1.5698, 3.1144, 1.5446, 1.5446],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                    ],
                    [
                        [0.5995, 1.3225, 0.7230, 0.7230],
                        [1.5698, 3.1144, 1.5446, 1.5446],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                    ],
                ],
                [
                    [
                        [0.5276, 0.8590, 0.3315, 0.3315],
                        [0.8815, 1.2920, 0.4105, 0.4105],
                        [0.3540, 0.4330, 0.0790, 0.0790],
                        [0.3540, 0.4330, 0.0790, 0.0790],
                    ],
                    [
                        [1.0835, 1.5807, 0.4973, 0.4973],
                        [1.7327, 3.1496, 1.4169, 1.4169],
                        [0.6492, 1.5689, 0.9196, 0.9196],
                        [0.6492, 1.5689, 0.9196, 0.9196],
                    ],
                    [
                        [0.5559, 0.7217, 0.1658, 0.1658],
                        [0.8512, 1.8576, 1.0064, 1.0064],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                    ],
                    [
                        [0.5559, 0.7217, 0.1658, 0.1658],
                        [0.8512, 1.8576, 1.0064, 1.0064],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                    ],
                ],
                [
                    [
                        [0.3626, 0.7034, 0.3408, 0.3408],
                        [1.0730, 1.4455, 0.3725, 0.3725],
                        [0.7104, 0.7421, 0.0317, 0.0317],
                        [0.7104, 0.7421, 0.0317, 0.0317],
                    ],
                    [
                        [0.8349, 1.9073, 1.0724, 1.0724],
                        [2.3186, 3.6639, 1.3453, 1.3453],
                        [1.4836, 1.7566, 0.2730, 0.2730],
                        [1.4836, 1.7566, 0.2730, 0.2730],
                    ],
                    [
                        [0.4724, 1.2040, 0.7316, 0.7316],
                        [1.2456, 2.2184, 0.9728, 0.9728],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                    ],
                    [
                        [0.4724, 1.2040, 0.7316, 0.7316],
                        [1.2456, 2.2184, 0.9728, 0.9728],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                    ],
                ],
            ],
        ]
    ).transpose(0, 2, 3, 4, 1)
    obj.run(
        res=res,
        x=x,
        weight=weight,
        bias=bias,
        output_padding=output_padding,
        stride=stride,
        padding=padding,
        groups=groups,
        data_format="NDHWC",
        dilation=dilation,
    )


@pytest.mark.api_nn_transpose_conv3d_parameters
def test_transpose_conv3d7():
    """
    out_channels = 3 groups=3 data_format="NHWC" output_size=1
    """
    np.random.seed(obj.seed)
    x = randtool("float", 0, 1, [2, 3, 2, 2, 2]).astype("float32").transpose(0, 2, 3, 4, 1)
    weight = np.ones(shape=[3, 1, 3, 3, 3]).astype("float32")
    bias = np.zeros(shape=[3]).astype("float32")
    stride = 2
    padding = [1, 1, 1]
    dilation = 1
    groups = 3
    output_size = [4, 4, 4]
    res = np.array(
        [
            [
                [
                    [
                        [0.2485, 0.6985, 0.4500, 0.4500],
                        [0.6595, 1.3697, 0.7103, 0.7103],
                        [0.4109, 0.6712, 0.2603, 0.2603],
                        [0.4109, 0.6712, 0.2603, 0.2603],
                    ],
                    [
                        [1.1189, 1.7539, 0.6350, 0.6350],
                        [1.5495, 3.3981, 1.8486, 1.8486],
                        [0.4306, 1.6442, 1.2136, 1.2136],
                        [0.4306, 1.6442, 1.2136, 1.2136],
                    ],
                    [
                        [0.8704, 1.0554, 0.1850, 0.1850],
                        [0.8901, 2.0283, 1.1383, 1.1383],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                    ],
                    [
                        [0.8704, 1.0554, 0.1850, 0.1850],
                        [0.8901, 2.0283, 1.1383, 1.1383],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                        [0.0197, 0.9729, 0.9533, 0.9533],
                    ],
                ],
                [
                    [
                        [0.6805, 1.1670, 0.4866, 0.4866],
                        [1.6455, 2.5255, 0.8800, 0.8800],
                        [0.9650, 1.3584, 0.3934, 0.3934],
                        [0.9650, 1.3584, 0.3934, 0.3934],
                    ],
                    [
                        [0.7600, 1.5980, 0.8380, 0.8380],
                        [1.8887, 4.1032, 2.2146, 2.2146],
                        [1.1287, 2.5052, 1.3766, 1.3766],
                        [1.1287, 2.5052, 1.3766, 1.3766],
                    ],
                    [
                        [0.0796, 0.4310, 0.3514, 0.3514],
                        [0.2432, 1.5778, 1.3346, 1.3346],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                    ],
                    [
                        [0.0796, 0.4310, 0.3514, 0.3514],
                        [0.2432, 1.5778, 1.3346, 1.3346],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                        [0.1636, 1.1468, 0.9832, 0.9832],
                    ],
                ],
                [
                    [
                        [0.8806, 1.3747, 0.4941, 0.4941],
                        [1.2816, 2.2269, 0.9454, 0.9454],
                        [0.4010, 0.8523, 0.4513, 0.4513],
                        [0.4010, 0.8523, 0.4513, 0.4513],
                    ],
                    [
                        [1.6015, 2.3433, 0.7418, 0.7418],
                        [2.6252, 3.9608, 1.3356, 1.3356],
                        [1.0237, 1.6175, 0.5937, 0.5937],
                        [1.0237, 1.6175, 0.5937, 0.5937],
                    ],
                    [
                        [0.7209, 0.9686, 0.2478, 0.2478],
                        [1.3437, 1.7339, 0.3902, 0.3902],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                    ],
                    [
                        [0.7209, 0.9686, 0.2478, 0.2478],
                        [1.3437, 1.7339, 0.3902, 0.3902],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                        [0.6228, 0.7652, 0.1424, 0.1424],
                    ],
                ],
            ],
            [
                [
                    [
                        [0.2012, 0.2824, 0.0812, 0.0812],
                        [1.1546, 1.2916, 0.1370, 0.1370],
                        [0.9535, 1.0092, 0.0557, 0.0557],
                        [0.9535, 1.0092, 0.0557, 0.0557],
                    ],
                    [
                        [0.8007, 1.6049, 0.8042, 0.8042],
                        [2.7245, 4.4060, 1.6815, 1.6815],
                        [1.9238, 2.8011, 0.8773, 0.8773],
                        [1.9238, 2.8011, 0.8773, 0.8773],
                    ],
                    [
                        [0.5995, 1.3225, 0.7230, 0.7230],
                        [1.5698, 3.1144, 1.5446, 1.5446],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                    ],
                    [
                        [0.5995, 1.3225, 0.7230, 0.7230],
                        [1.5698, 3.1144, 1.5446, 1.5446],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                        [0.9703, 1.7919, 0.8216, 0.8216],
                    ],
                ],
                [
                    [
                        [0.5276, 0.8590, 0.3315, 0.3315],
                        [0.8815, 1.2920, 0.4105, 0.4105],
                        [0.3540, 0.4330, 0.0790, 0.0790],
                        [0.3540, 0.4330, 0.0790, 0.0790],
                    ],
                    [
                        [1.0835, 1.5807, 0.4973, 0.4973],
                        [1.7327, 3.1496, 1.4169, 1.4169],
                        [0.6492, 1.5689, 0.9196, 0.9196],
                        [0.6492, 1.5689, 0.9196, 0.9196],
                    ],
                    [
                        [0.5559, 0.7217, 0.1658, 0.1658],
                        [0.8512, 1.8576, 1.0064, 1.0064],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                    ],
                    [
                        [0.5559, 0.7217, 0.1658, 0.1658],
                        [0.8512, 1.8576, 1.0064, 1.0064],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                        [0.2952, 1.1358, 0.8406, 0.8406],
                    ],
                ],
                [
                    [
                        [0.3626, 0.7034, 0.3408, 0.3408],
                        [1.0730, 1.4455, 0.3725, 0.3725],
                        [0.7104, 0.7421, 0.0317, 0.0317],
                        [0.7104, 0.7421, 0.0317, 0.0317],
                    ],
                    [
                        [0.8349, 1.9073, 1.0724, 1.0724],
                        [2.3186, 3.6639, 1.3453, 1.3453],
                        [1.4836, 1.7566, 0.2730, 0.2730],
                        [1.4836, 1.7566, 0.2730, 0.2730],
                    ],
                    [
                        [0.4724, 1.2040, 0.7316, 0.7316],
                        [1.2456, 2.2184, 0.9728, 0.9728],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                    ],
                    [
                        [0.4724, 1.2040, 0.7316, 0.7316],
                        [1.2456, 2.2184, 0.9728, 0.9728],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                        [0.7732, 1.0145, 0.2412, 0.2412],
                    ],
                ],
            ],
        ]
    ).transpose(0, 2, 3, 4, 1)
    print(res.shape)
    obj.run(
        res=res,
        x=x,
        weight=weight,
        bias=bias,
        output_size=output_size,
        stride=stride,
        padding=padding,
        groups=groups,
        data_format="NDHWC",
        dilation=dilation,
    )
