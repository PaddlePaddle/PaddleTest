#!/bin/env python
# -*- coding: utf-8 -*-
# encoding=utf-8 vi:ts=4:sw=4:expandtab:ft=python
"""
test_ifft2
"""

from apibase import APIBase
import paddle
import pytest
import numpy as np


class TestIfft2(APIBase):
    """
    test
    """

    def hook(self):
        """
        implement
        """
        self.types = [np.float64, np.float32]
        # self.debug = True
        # self.static = True
        # enable check grad
        self.enable_backward = False
        # self.delta = 1e-5


obj = TestIfft2(paddle.fft.ifft2)


@pytest.mark.api_fft_fft2_vartype
def test_fft2_base():
    """
    base
    dtype: float
    """
    np.random.seed(33)
    x = np.random.rand(4, 4)
    res = np.array(
        [
            [
                (0.4688316615264634 + 0j),
                (0.019978123806561172 - 0.0698191489605699j),
                (-0.03905936118893253 + 0j),
                (0.019978123806561172 + 0.0698191489605699j),
            ],
            [
                (-0.07223365299357429 + 0.02816138081893295j),
                (0.016162377956113104 + 0.06445613731063173j),
                (-0.051019683776766044 + 0.05269666666669255j),
                (-0.0008942105091001087 + 0.052395344468756586j),
            ],
            [
                (0.018067155053676648 + 0j),
                (-0.07585396014327689 + 0.10517728865966866j),
                (0.12839268336660847 + 0j),
                (-0.07585396014327689 - 0.10517728865966866j),
            ],
            [
                (-0.07223365299357429 - 0.02816138081893295j),
                (-0.0008942105091001087 - 0.052395344468756586j),
                (-0.051019683776766044 - 0.05269666666669255j),
                (0.016162377956113104 - 0.06445613731063173j),
            ],
        ]
    )
    obj.base(res=res, x=x)


@pytest.mark.api_fft_ifft2_parameters
def test_ifft2_0():
    """
    default
    """
    x_data = np.mgrid[:2, :4][1]
    res = np.array([[(1.5 + 0j), (-0.5 - 0.5j), (-0.5 + 0j), (-0.5 + 0.5j)], [0j, 0j, 0j, -0j]])
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_fft2_parameters
def test_fft2_1():
    """
    x: complex
    """
    obj.dtype = np.complex128
    x_data = np.exp(3j * np.pi * np.arange(12).reshape(3, 4) / 7)
    res = np.array(
        [
            [
                (0.05653732782884216 + 0.11740097094161484j),
                (0.07717007964338304 + 0.027002978755112927j),
                (0.09362415015489464 - 0.045087014422022065j),
                (0.23965806500701967 - 0.6849034001579901j),
            ],
            [
                (-0.10008384609488043 - 0.007500247398075879j),
                (-0.04773113869630824 + 0.04107596622255161j),
                (-0.005981247710000179 + 0.07981420391766882j),
                (0.3645592833467119 + 0.42362557272956336j),
            ],
            [
                (-0.03193791568517135 + 0.04684431866429907j),
                (0.0066134273660666265 + 0.03495280419670793j),
                (0.037357097555105634 + 0.025469637855294255j),
                (0.31021471728433647 - 0.05869579130472474j),
            ],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_fft2_parameters
def test_fft2_2():
    """
    input dim = 3
    x = np.mgrid[:2, :4]
    """
    obj.dtypes = np.complex64
    x_data = np.mgrid[:2, :4]
    res = np.array(
        [
            [[(0.5 + 0j), 0j, 0j, 0j], [(-0.5 + 0j), 0j, 0j, 0j]],
            [[(1.5 + 0j), (-0.5 - 0.5j), (-0.5 + 0j), (-0.5 + 0.5j)], [0j, 0j, 0j, 0j]],
        ]
    )

    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_fft2_parameters
def test_fft2_3():
    """
    input dim = 4
    """
    obj.dtypes = np.complex128
    x_data = np.mgrid[:2, :4, -4:-2:2j]
    res = np.array(
        [
            [[[0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j]], [[(1 + 0j), 0j], [0j, 0j], [0j, 0j], [0j, 0j]]],
            [
                [[(1.5 + 0j), 0j], [(-0.5 - 0.5j), 0j], [(-0.5 + 0j), 0j], [(-0.5 + 0.5j), 0j]],
                [[(1.5 + 0j), 0j], [(-0.5 - 0.5j), 0j], [(-0.5 + 0j), 0j], [(-0.5 + 0.5j), 0j]],
            ],
            [
                [[(-3 + 0j), (-1 + 0j)], [0j, 0j], [0j, 0j], [0j, 0j]],
                [[(-3 + 0j), (-1 + 0j)], [0j, 0j], [0j, 0j], [0j, 0j]],
            ],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_fft2_parameters
def test_fft2_4():
    """
    input dim = 4
    s = (1, 2)
    """
    obj.dtype = np.complex128
    x_data = np.mgrid[4:10:3j, 2:4:2j, -4:-2:2j]
    res = np.array(
        [
            [[[4.0 + 0.0j, 0.0 + 0.0j]], [[7.0 + 0.0j, 0.0 + 0.0j]], [[10.0 + 0.0j, 0.0 + 0.0j]]],
            [[[2.0 + 0.0j, 0.0 + 0.0j]], [[2.0 + 0.0j, 0.0 + 0.0j]], [[2.0 + 0.0j, 0.0 + 0.0j]]],
            [[[-3.0 + 0.0j, -1.0 + 0.0j]], [[-3.0 + 0.0j, -1.0 + 0.0j]], [[-3.0 + 0.0j, -1.0 + 0.0j]]],
        ]
    )
    obj.run(res=res, x=x_data, s=(1, 2))


@pytest.mark.api_fft_fft2_parameters
def test_fft2_5():
    """
    x: tensor-3D
    dim = (1, 2)
    """
    obj.dtype = np.complex64
    x_data = np.exp(3j * np.pi * np.arange(16).reshape((2, 4, 2)))
    res = np.array(
        [
            [
                [1.8369701987210292e-16j, (1 - 1.2858791391047208e-15j)],
                [(-4.440892098500626e-16 - 4.4408920985006257e-16j), (7.669517010585665e-17 + 8.114832495942685e-16j)],
                [8.881784197001252e-16j, -5.207843799559194e-16j],
                [(4.440892098500626e-16 - 4.4408920985006257e-16j), (-7.669517010585665e-17 + 8.114832495942685e-16j)],
            ],
            [
                [1.8369701987210312e-16j, (1 - 4.225031457058369e-15j)],
                [(1.7763568394002503e-15 + 9.860761315262648e-32j), (1.4089627996560444e-15 + 3.6739403974420594e-16j)],
                [1.776356839400251e-15j, -1.4089627996560446e-15j],
                [
                    (-1.7763568394002503e-15 + 9.860761315262648e-32j),
                    (-1.4089627996560444e-15 + 3.6739403974420594e-16j),
                ],
            ],
        ]
    )
    obj.run(res=res, x=x_data, axes=(1, 2))


@pytest.mark.api_fft_fft2_parameters
def test_fft2_6():
    """
    x: tensor-3D
    dim = (1, 2)
    norm = 'forward'
    """
    obj.types = [np.complex64]
    x_data = np.exp(3j * np.pi * np.arange(16).reshape((2, 4, 2)))
    res = np.array(
        [
            [
                [1.4695761589768234e-15j, (8 - 1.0287033112837767e-14j)],
                [(-3.552713678800501e-15 - 3.5527136788005005e-15j), (6.135613608468532e-16 + 6.491865996754148e-15j)],
                [7.105427357601002e-15j, -4.166275039647355e-15j],
                [(3.552713678800501e-15 - 3.5527136788005005e-15j), (-6.135613608468532e-16 + 6.491865996754148e-15j)],
            ],
            [
                [1.469576158976825e-15j, (8 - 3.380025165646695e-14j)],
                [(1.4210854715202002e-14 + 7.888609052210118e-31j), (1.1271702397248355e-14 + 2.9391523179536475e-15j)],
                [1.4210854715202007e-14j, -1.1271702397248357e-14j],
                [
                    (-1.4210854715202002e-14 + 7.888609052210118e-31j),
                    (-1.1271702397248355e-14 + 2.9391523179536475e-15j),
                ],
            ],
        ]
    )

    obj.run(res=res, x=x_data, axes=(1, 2), norm="forward")


@pytest.mark.api_fft_fft2_parameters
def test_fft2_7():
    """
    x: tensor-3D
    dim = (1, 2)
    norm = 'ortho'
    """
    obj.types = [np.complex128, np.complex64]
    x_data = np.exp(3j * np.pi * np.arange(16).reshape((2, 4, 2)))
    res = np.array(
        [
            [
                [5.195736337412959e-16j, (2.82842712474619 - 3.6370154361890715e-15j)],
                [(-1.25607396694702e-15 - 1.2560739669470197e-15j), (2.169266994644281e-16 + 2.2952212344296118e-15j)],
                [2.51214793389404e-15j, -1.473000666411448e-15j],
                [(1.25607396694702e-15 - 1.2560739669470197e-15j), (-2.169266994644281e-16 + 2.2952212344296118e-15j)],
            ],
            [
                [5.195736337412959e-16j, (2.82842712474619 - 1.1950193576049806e-14j)],
                [(5.024295867788079e-15 + 2.9582283945787943e-31j), (3.985148600305487e-15 + 1.0391472674825918e-15j)],
                [5.024295867788081e-15j, -3.985148600305488e-15j],
                [
                    (-5.024295867788079e-15 + 2.9582283945787943e-31j),
                    (-3.985148600305487e-15 + 1.0391472674825918e-15j),
                ],
            ],
        ]
    )
    obj.run(res=res, x=x_data, axes=(1, 2), norm="ortho")
