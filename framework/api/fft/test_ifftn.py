#!/bin/env python
# -*- coding: utf-8 -*-
# encoding=utf-8 vi:ts=4:sw=4:expandtab:ft=python
"""
test_ifftn
"""

from apibase import APIBase
import paddle
import pytest
import numpy as np


class TestIfftn(APIBase):
    """
    test
    """

    def hook(self):
        """
        implement
        """
        self.types = [np.float64, np.float32]
        # self.debug = True
        # self.static = True
        # enable check grad
        self.enable_backward = False
        # self.delta = 1e-5


obj = TestIfftn(paddle.fft.ifftn)


@pytest.mark.api_fft_ifftn_vartype
def test_ifftn_base():
    """
    base
    dtype: float
    """
    np.random.seed(33)
    x = np.random.rand(4, 4)
    res = np.array(
        [
            [
                (0.4688316615264634 + 0j),
                (0.019978123806561172 - 0.0698191489605699j),
                (-0.03905936118893253 + 0j),
                (0.019978123806561172 + 0.0698191489605699j),
            ],
            [
                (-0.07223365299357429 + 0.02816138081893295j),
                (0.016162377956113104 + 0.06445613731063173j),
                (-0.051019683776766044 + 0.05269666666669255j),
                (-0.0008942105091001087 + 0.052395344468756586j),
            ],
            [
                (0.018067155053676648 + 0j),
                (-0.07585396014327689 + 0.10517728865966866j),
                (0.12839268336660847 + 0j),
                (-0.07585396014327689 - 0.10517728865966866j),
            ],
            [
                (-0.07223365299357429 - 0.02816138081893295j),
                (-0.0008942105091001087 - 0.052395344468756586j),
                (-0.051019683776766044 - 0.05269666666669255j),
                (0.016162377956113104 - 0.06445613731063173j),
            ],
        ]
    )
    obj.base(res=res, x=x)


@pytest.mark.api_fft_ifftn_parameters
def test_ifftn_0():
    """
    default
    """
    x_data = np.mgrid[:2, :4, :2][1]
    res = np.array(
        [
            [[(1.5 + 0j), 0j], [(-0.5 - 0.5j), 0j], [(-0.5 + 0j), 0j], [(-0.5 + 0.5j), 0j]],
            [[0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j]],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_ifftn_parameters
def test_ifftn_1():
    """
    s = [1]
    """
    x_data = np.mgrid[:4, :4, :6][1]
    res = np.array(
        [
            [[0j], [(1 + 0j)], [(2 + 0j)], [(3 + 0j)]],
            [[0j], [(1 + 0j)], [(2 + 0j)], [(3 + 0j)]],
            [[0j], [(1 + 0j)], [(2 + 0j)], [(3 + 0j)]],
            [[0j], [(1 + 0j)], [(2 + 0j)], [(3 + 0j)]],
        ]
    )
    obj.run(res=res, x=x_data, s=[1])


@pytest.mark.api_fft_ifftn_parameters
def test_ifftn_2():
    """
    s = [2, 4]
    """
    x_data = np.mgrid[:4, :4, :6][1]
    res = np.array(
        [
            [[(0.5 + 0j), -0j, 0j, 0j], [(-0.5 + 0j), 0j, 0j, -0j]],
            [[(0.5 + 0j), -0j, 0j, 0j], [(-0.5 + 0j), 0j, 0j, -0j]],
            [[(0.5 + 0j), -0j, 0j, 0j], [(-0.5 + 0j), 0j, 0j, -0j]],
            [[(0.5 + 0j), -0j, 0j, 0j], [(-0.5 + 0j), 0j, 0j, -0j]],
        ]
    )
    obj.run(res=res, x=x_data, s=[2, 4])


@pytest.mark.api_fft_ifftn_parameters
def test_ifftn_3():
    """
    x: tensor-4d
    s = [2, 4]
    axes = [0, 1]
    """
    x_data = np.mgrid[:4, :4, :6, :2][1]
    res = np.array(
        [
            [
                [
                    [(1.5 + 0j), (1.5 + 0j)],
                    [(1.5 + 0j), (1.5 + 0j)],
                    [(1.5 + 0j), (1.5 + 0j)],
                    [(1.5 + 0j), (1.5 + 0j)],
                    [(1.5 + 0j), (1.5 + 0j)],
                    [(1.5 + 0j), (1.5 + 0j)],
                ],
                [
                    [(-0.5 - 0.5j), (-0.5 - 0.5j)],
                    [(-0.5 - 0.5j), (-0.5 - 0.5j)],
                    [(-0.5 - 0.5j), (-0.5 - 0.5j)],
                    [(-0.5 - 0.5j), (-0.5 - 0.5j)],
                    [(-0.5 - 0.5j), (-0.5 - 0.5j)],
                    [(-0.5 - 0.5j), (-0.5 - 0.5j)],
                ],
                [
                    [(-0.5 + 0j), (-0.5 + 0j)],
                    [(-0.5 + 0j), (-0.5 + 0j)],
                    [(-0.5 + 0j), (-0.5 + 0j)],
                    [(-0.5 + 0j), (-0.5 + 0j)],
                    [(-0.5 + 0j), (-0.5 + 0j)],
                    [(-0.5 + 0j), (-0.5 + 0j)],
                ],
                [
                    [(-0.5 + 0.5j), (-0.5 + 0.5j)],
                    [(-0.5 + 0.5j), (-0.5 + 0.5j)],
                    [(-0.5 + 0.5j), (-0.5 + 0.5j)],
                    [(-0.5 + 0.5j), (-0.5 + 0.5j)],
                    [(-0.5 + 0.5j), (-0.5 + 0.5j)],
                    [(-0.5 + 0.5j), (-0.5 + 0.5j)],
                ],
            ],
            [
                [[0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j]],
                [[0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j]],
                [[0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j], [0j, 0j]],
                [[-0j, -0j], [-0j, -0j], [-0j, -0j], [-0j, -0j], [-0j, -0j], [-0j, -0j]],
            ],
        ]
    )
    obj.run(res=res, x=x_data, s=[2, 4], axes=(0, 1))


@pytest.mark.api_fft_fftn_parameters
def test_fftn_4():
    """
    x: tensor-3d, complex
    norm = forward
    """
    obj.dtype = None
    obj.types = [np.complex128, np.complex64]
    x_data = np.exp(3j * np.pi * np.arange(12).reshape(3, 4) / 7)
    res = np.array(
        [
            [
                (0.678447933946106 + 1.408811651299378j),
                (0.9260409557205965 + 0.3240357450613556j),
                (1.1234898018587356 - 0.5410441730642647j),
                (2.8758967800842363 - 8.218840801895883j),
            ],
            [
                (-1.2010061531385652 - 0.09000296877691061j),
                (-0.5727736643556987 + 0.4929115946706193j),
                (-0.07177497252000231 + 0.9577704470120258j),
                (4.3747114001605425 + 5.083506872754761j),
            ],
            [
                (-0.38325498822205617 + 0.5621318239715889j),
                (0.07936112839279974 + 0.41943365036049524j),
                (0.4482851706612676 + 0.3056356542635312j),
                (3.722576607412038 - 0.7043494956566969j),
            ],
        ]
    )
    obj.run(res=res, x=x_data, norm="forward")


@pytest.mark.api_fft_fftn_parameters
def test_fftn_5():
    """
    x: tensor-3d, complex
    norm = ortho
    """
    obj.dtype = None
    obj.types = [np.complex128, np.complex64]
    x_data = np.exp(3j * np.pi * np.arange(12).reshape(3, 4) / 7)
    res = np.array(
        [
            [
                (0.1958510486474649 + 0.40668889305758865j),
                (0.2673249975329523 + 0.09354106231911707j),
                (0.3243235697674702 - 0.15618599948106587j),
                (0.8301998900716059 - 2.372574974700634j),
            ],
            [
                (-0.3467006129064738 - 0.02598161912560737j),
                (-0.16534551465024572 + 0.14229132093488484j),
                (-0.0207196498527506 + 0.2764845127021307j),
                (1.2628704022548072 + 1.467482030706137j),
            ],
            [
                (-0.11063618530913556 + 0.1622734799450261j),
                (0.022909584420387707 + 0.12108006547140968j),
                (0.12940878197750005 + 0.08822941363149855j),
                (1.074615303184172 - 0.20332818546048556j),
            ],
        ]
    )
    obj.run(res=res, x=x_data, norm="ortho")
