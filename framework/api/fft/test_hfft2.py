#!/bin/env python
# -*- coding: utf-8 -*-
# encoding=utf-8 vi:ts=4:sw=4:expandtab:ft=python
"""
test_hfft2
"""

from apibase import APIBase
import paddle
import pytest
import numpy as np


class TestFFthfft2(APIBase):
    """
    test
    """

    def hook(self):
        """
        implement
        """
        self.types = [np.complex128, np.complex64]
        # self.debug = True
        # self.static = True
        # enable check grad
        self.enable_backward = False
        # self.delta = 1e-5


obj = TestFFthfft2(paddle.fft.hfft2)


@pytest.mark.api_fft_hfft2_vartype
def test_hfft2_base():
    """
    base
    """
    np.random.seed(33)
    x = (np.random.rand(3, 4) * 4 - 2) * 1j + np.random.rand(3, 4)
    res = np.array(
        [
            [7.81919677, -3.33469087, -0.92114869, 0.29242586, 2.87586103, 3.35473152],
            [-6.81187775, 0.06032511, 7.90239533, -7.80684028, 6.59691885, -0.32016066],
            [5.27110968, -1.76394721, -4.52688192, 3.67695310, -8.64105377, -2.29127982],
        ]
    )
    obj.base(res=res, x=x)


@pytest.mark.api_fft_hfft2_parameters
def test_hfft2_0():
    """
    default
    x: tensor-3d
    """
    np.random.seed(33)
    x_data = (np.random.rand(3, 4, 5) * 4 - 2) * 1j + np.random.rand(3, 4, 5) * 10
    res = np.array(
        [
            [
                [
                    184.85510715,
                    7.71718097,
                    -4.81052198,
                    14.39355038,
                    -18.92599141,
                    19.77066874,
                    -5.61926772,
                    15.08425536,
                ],
                [
                    -39.96334382,
                    -2.77236990,
                    -2.01865697,
                    -24.40547329,
                    9.96599732,
                    34.35534533,
                    1.90007035,
                    -5.48979729,
                ],
                [7.75808976, -4.93477624, -2.34469062, 12.69213264, 3.85825772, 3.34106548, -8.94929031, 16.33230461],
                [
                    -31.90411586,
                    18.99186164,
                    17.71267985,
                    22.42711482,
                    -0.58198097,
                    -24.94809189,
                    9.06805124,
                    11.88637412,
                ],
            ],
            [
                [
                    178.39398786,
                    -18.87929297,
                    34.59038857,
                    22.92554709,
                    1.38619620,
                    13.47019353,
                    15.22999565,
                    -8.23428660,
                ],
                [
                    13.56435503,
                    -15.92747275,
                    13.08239043,
                    -1.21380022,
                    -11.05838254,
                    5.51165009,
                    -24.37783354,
                    3.72624529,
                ],
                [-16.90832440, -7.67727774, 8.97798864, 9.04004300, 15.34784913, 33.64076125, 9.28519127, -12.79810468],
                [5.01893646, -5.39401284, -31.37171737, -4.54571615, 2.85560904, 9.03700971, 18.40125090, -10.83420336],
            ],
            [
                [187.18877739, -2.80183744, 20.10590946, -2.97728754, 18.13573166, 5.57492295, 10.01864233, 7.60107404],
                [
                    17.20541548,
                    -0.26934304,
                    14.17065967,
                    -3.80820697,
                    -17.23695522,
                    -3.28121606,
                    -25.90463577,
                    -3.39987053,
                ],
                [-32.70647232, -3.36969965, 4.86279273, -28.90859380, 0.15968952, 0.77706403, 15.86050978, -8.34939616],
                [
                    12.74955604,
                    -13.60272236,
                    -17.80819517,
                    -4.31693310,
                    -20.67685170,
                    -1.21965572,
                    1.57385189,
                    -0.96469649,
                ],
            ],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_hfft2_parameters
def test_hfft2_1():
    """
    default
    x: tensor-4d
    """
    np.random.seed(33)
    x_data = (np.random.rand(3, 3, 3) * 4 - 2) * 1j + np.random.rand(3, 3, 3) * 10
    x = np.tensordot(x_data, x_data.T, axes=(-1, 0))
    res = np.array(
        [
            [
                [
                    [661.24024925, -41.90547460, 158.92769050, 47.77396737],
                    [-69.73203157, 30.18931931, 63.37447333, 1.54965785],
                    [81.10294397, 76.88118527, 35.70282164, 3.08000399],
                ],
                [
                    [1272.51494926, -11.60290203, 61.64428252, 30.47482239],
                    [-146.84786749, -113.68378668, 167.32747550, -63.26291038],
                    [72.92502164, -8.90673269, 12.11960462, -172.43064387],
                ],
                [
                    [403.55239544, -28.08803885, 23.37278843, 24.80017779],
                    [-49.97261936, -36.93096404, 61.60384817, -22.06533302],
                    [27.04794235, -6.85932067, 14.11085676, -80.91855453],
                ],
            ],
            [
                [
                    [581.75466761, 10.20391189, -31.03068103, -9.71218446],
                    [-77.77298403, -36.82630289, 68.53133027, -3.55377941],
                    [16.00576577, -35.39203234, 17.79040598, -85.39194118],
                ],
                [
                    [892.47924435, -83.23375446, -46.58437964, 108.88039448],
                    [-131.97339564, -92.66715068, 113.79291833, -99.56197533],
                    [59.76460604, -29.06088173, -5.88395165, -100.67490058],
                ],
                [
                    [726.96026340, 92.20507311, -69.61762253, -78.94210019],
                    [-92.81332271, -41.18486480, 84.74498862, 25.43412104],
                    [0.68084555, -56.60868282, 4.98663608, -88.79060813],
                ],
            ],
            [
                [
                    [971.31783528, 56.50205329, 65.75350420, -19.59994199],
                    [-96.04874650, -128.93244526, 156.15006830, -60.87141251],
                    [50.42153866, -0.49355320, -32.16377801, -148.98763434],
                ],
                [
                    [546.90833410, -82.64761524, 9.06060322, 79.92312452],
                    [-87.97549231, 27.02239322, 37.19639499, -12.44426982],
                    [52.38564627, 10.28707135, 41.48101196, -2.66048736],
                ],
                [
                    [734.76300811, 15.60465684, 163.61491829, 18.59932271],
                    [-65.20485052, -36.45579020, 109.73300936, -32.23008600],
                    [79.63262198, 74.72555969, -15.32261466, -36.14561751],
                ],
            ],
        ]
    )
    obj.run(res=res, x=x)


@pytest.mark.api_fft_hfft2_parameters
def test_hfft2_2():
    """
    default
    x: tensor-3d
    s = (1, 2)
    """
    np.random.seed(33)
    x_data = np.array(
        [
            [[(-0.824290495122562 + 0j), (-3.155577110380844 + 0j)]],
            [[(2.6577307631135203 + 0j), (-0.12922629074140923 + 0j)]],
            [[(-1.5174503214594055 + 0j), (1.956720622767524 + 0j)]],
        ]
    )

    res = np.array([[[-3.97986761, 2.33128662]], [[2.52850447, 2.78695705]], [[0.43927030, -3.47417094]]])
    obj.run(res=res, x=x_data, s=(1, 2))


@pytest.mark.api_fft_hfft2_parameters
def test_hfft2_3():
    """
    default
    x: tensor-3d
    s = (1, 2)
    axes=(0, 2)
    """
    np.random.seed(33)
    x_data = np.array(
        [
            [
                [(1.623316710942437 + 0j), (0.08726682854490475 + 0j)],
                [(0.6448908289441886 + 0j), (2.930587131944607 + 0j)],
                [(2.004734224617398 + 0j), (-0.0729912692482162 + 0j)],
                [(-1.2223591242742846 + 0j), (-0.2386391545840998 + 0j)],
            ]
        ]
    )
    res = np.array(
        [[[1.71058354, 1.53604988], [3.57547796, -2.28569630], [1.93174296, 2.07772549], [-1.46099828, -0.98371997]]]
    )
    obj.run(res=res, x=x_data, s=(1, 2), axes=(0, 2))


@pytest.mark.api_fft_hfft2_parameters
def test_hfft2_4():
    """
    default
    x: tensor-3d
    s = (1, 2)
    axes=(0, 2)
    norm = 'forward'
    """
    x_data = np.array(
        [
            [
                [(1.623316710942437 + 0j), (0.08726682854490475 + 0j)],
                [(0.6448908289441886 + 0j), (2.930587131944607 + 0j)],
                [(2.004734224617398 + 0j), (-0.0729912692482162 + 0j)],
                [(-1.2223591242742846 + 0j), (-0.2386391545840998 + 0j)],
            ]
        ]
    )
    res = np.array(
        [[[0.85529177, 0.76802494], [1.78773898, -1.14284815], [0.96587148, 1.03886275], [-0.73049914, -0.49185998]]]
    )
    obj.run(res=res, x=x_data, s=(1, 2), axes=(0, 2), norm="forward")


@pytest.mark.api_fft_hfft2_parameters
def test_hfft2_5():
    """
    default
    x: tensor-3d
    s = (1, 2)
    axes=(0, 2)
    norm = 'ortho'
    """
    np.random.seed(33)
    x_data = np.array(
        [
            [
                [(1.623316710942437 + 0j), (0.08726682854490475 + 0j)],
                [(0.6448908289441886 + 0j), (2.930587131944607 + 0j)],
                [(2.004734224617398 + 0j), (-0.0729912692482162 + 0j)],
                [(-1.2223591242742846 + 0j), (-0.2386391545840998 + 0j)],
            ]
        ]
    )
    res = np.array(
        [[[1.20956522, 1.08615129], [2.52824471, -1.61623136], [1.36594854, 1.46917379], [-1.03308179, -0.69559506]]]
    )
    obj.run(res=res, x=x_data, s=(1, 2), axes=(0, 2), norm="ortho")
