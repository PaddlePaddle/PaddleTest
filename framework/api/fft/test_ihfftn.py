#!/bin/env python
# -*- coding: utf-8 -*-
# encoding=utf-8 vi:ts=4:sw=4:expandtab:ft=python
"""
test_ihfftn
"""

from apibase import APIBase
import paddle
import pytest
import numpy as np


class TestFFtihfftn(APIBase):
    """
    test
    """

    def hook(self):
        """
        implement
        """
        self.types = [np.float64, np.float32]
        # self.debug = True
        # self.static = True
        # enable check grad
        self.enable_backward = False
        # self.delta = 1e-5


obj = TestFFtihfftn(paddle.fft.ihfftn)


@pytest.mark.api_fft_ihfftn_vartype
def test_ihfftn_base():
    """
    base
    """
    np.random.seed(33)
    x = np.random.rand(4) * 14 - 7
    res = np.array(
        [(-2.205958851698119 + 0j), (-0.5685073644558379 + 0.6638650555736347j), (-0.17788463526198606 + 0j)]
    )
    obj.base(res=res, x=x)


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_0():
    """
    default
    x: tensor-2d
    """
    np.random.seed(33)
    x_data = np.random.rand(4, 3) * 14 - 7
    res = np.array(
        [
            [(-0.08920379406898055 + 0j), (-1.679044204931407 + 1.5850773198027772j)],
            [(-0.6345942285430171 - 0.6174914423327545j), (0.6028761056806229 - 0.32344816656943987j)],
            [(-0.46428477524800954 + 0j), (-0.6056110753728896 - 0.9549425384644739j)],
            [(-0.6345942285430171 + 0.6174914423327545j), (0.8326885798892953 - 0.14893008407949623j)],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_1():
    """
    default
    x: tensor-3d
    """
    np.random.seed(33)
    x_data = np.random.rand(4, 3, 5) * 14 - 7
    res = np.array(
        [
            [
                [
                    (-0.7089998074846963 + 0j),
                    (0.4631039337547189 + 0.4308894773333269j),
                    (0.07508671603572421 - 0.01709731905648848j),
                ],
                [
                    (0.5798942864017388 + 0.06391880069861658j),
                    (0.592000723969035 - 0.1669175604936098j),
                    (0.39311046299315167 + 0.3687583750543524j),
                ],
                [
                    (0.5798942864017388 - 0.06391880069861658j),
                    (0.339704237754566 + 0.6312817982451739j),
                    (-0.4546996988930908 - 0.14325289971092683j),
                ],
            ],
            [
                [
                    (-0.07961058360728086 + 0.35753243954925984j),
                    (-0.08174209556824892 - 0.07835849956734908j),
                    (0.3190284799017993 - 0.2660731909966316j),
                ],
                [
                    (-0.049737045589867745 + 0.25004568724406917j),
                    (-0.2986984073512346 - 0.7171024062946634j),
                    (-0.22684296333339304 + 0.13133067952158842j),
                ],
                [
                    (-0.4059755778451836 + 0.10727958641982537j),
                    (0.08579567538585965 + 0.25615498507288037j),
                    (-0.5295759118853218 - 0.18809652097991456j),
                ],
            ],
            [
                [
                    (-0.04818191280385966 + 0j),
                    (-0.13110325390352573 - 0.45394122237779955j),
                    (-0.24962781382369154 - 0.5472764183149186j),
                ],
                [
                    (-0.02980979620864687 + 0.0939721202237076j),
                    (0.15767613423340632 - 0.3121547639680182j),
                    (-0.43453744281283535 - 0.7868170361604951j),
                ],
                [
                    (-0.02980979620864687 - 0.0939721202237076j),
                    (-0.36848469453362 + 0.2189560593142148j),
                    (0.2120765289862789 + 0.7028546042372195j),
                ],
            ],
            [
                [
                    (-0.07961058360728086 - 0.35753243954925984j),
                    (-0.3232729592408958 - 0.3991318882842718j),
                    (0.1500744770153859 + 0.3351354764783274j),
                ],
                [
                    (-0.4059755778451836 - 0.10727958641982537j),
                    (0.02120615492530674 - 0.419008233696884j),
                    (0.013501960222296883 - 0.30898791791347957j),
                ],
                [
                    (-0.049737045589867745 - 0.25004568724406917j),
                    (-0.13843508710016877 + 0.13769558473579427j),
                    (-0.9819446876738755 - 0.3735559558496455j),
                ],
            ],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_2():
    """
    default
    x: tensor-4d
    """
    np.random.seed(33)
    x_data = np.array(np.random.rand(4, 3, 5, 2) * 14 - 7)

    res = np.array(
        [
            [
                [
                    [(0.2613549115024385 + 0j), (0.6268520331746494 + 0j)],
                    [(0.02800907424969673 - 0.24264226879803188j), (0.3456787602703481 - 0.20579589358769715j)],
                    [(0.19630644913799014 - 0.036239799203393624j), (0.32487448079774806 + 0.3777030139233708j)],
                    [(0.19630644913799014 + 0.036239799203393624j), (0.32487448079774806 - 0.3777030139233708j)],
                    [(0.02800907424969673 + 0.24264226879803188j), (0.3456787602703481 + 0.20579589358769715j)],
                ],
                [
                    [(-0.12314516343355902 + 0.25095775692983924j), (-0.0219981486540788 - 0.5355360499375874j)],
                    [(-0.024286202492846964 - 0.25650062299574494j), (-0.10595048553579196 + 0.11469440361787843j)],
                    [(0.16235132862315707 + 0.12965498598229486j), (0.06414176514612999 - 0.28284368445647423j)],
                    [(-0.048237838865978155 + 0.2734595965660085j), (0.182441635526086 - 0.12617285719835253j)],
                    [(0.34343816101699853 + 0.09866155813666219j), (-0.1502119250582215 - 0.07158730871475956j)],
                ],
                [
                    [(-0.12314516343355902 - 0.25095775692983924j), (-0.0219981486540788 + 0.5355360499375874j)],
                    [(0.34343816101699853 - 0.09866155813666219j), (-0.1502119250582215 + 0.07158730871475956j)],
                    [(-0.048237838865978155 - 0.2734595965660085j), (0.182441635526086 + 0.12617285719835253j)],
                    [(0.16235132862315707 - 0.12965498598229486j), (0.06414176514612999 + 0.28284368445647423j)],
                    [(-0.024286202492846964 + 0.25650062299574494j), (-0.10595048553579196 - 0.11469440361787843j)],
                ],
            ],
            [
                [
                    [(-0.33722494564964806 - 0.6331297733374868j), (0.06476992306365267 + 0.3209765123232967j)],
                    [(-0.30539895726523825 + 0.14046656280125458j), (-0.11740397873743966 + 0.09698659427780451j)],
                    [(-0.18455219959009944 - 0.14893045105194763j), (-0.1566119518571205 - 0.0690667800407272j)],
                    [(0.4854547087468472 + 0.041985455279044556j), (0.18097592924355682 - 0.30532267950619557j)],
                    [(-0.031819893649099845 + 0.588775524164463j), (0.01648725708505064 - 0.3116917598251764j)],
                ],
                [
                    [(0.2005271263434725 + 0.1231926411962631j), (-0.3973498803968057 - 0.13759288495100785j)],
                    [(0.29169640771724326 + 0.26770247083190224j), (0.03166175835233795 + 0.19816972050616188j)],
                    [(-0.143430952134378 + 0.06931534573518842j), (0.10082957513158977 - 0.5091140215239713j)],
                    [(-0.4481650813442087 + 0.15075233924110076j), (-0.3715685079449428 + 0.5951052215985801j)],
                    [(-0.06924122010565084 - 0.17782477853647177j), (-0.035679750622402445 - 0.20351582099887422j)],
                ],
                [
                    [(0.15002701443097055 + 0.1361414257347509j), (-0.10207222804295965 - 0.08007759129132314j)],
                    [(-0.18003921959357205 + 0.3996014462128971j), (-0.3063952895350434 + 0.1685051170973637j)],
                    [(-0.0029959767904444295 - 0.12027419331757805j), (-0.020566397460725624 - 0.5530531435240925j)],
                    [(0.1126063143423013 + 0.08942852456769629j), (-0.12854513980621385 + 0.20594080667332368j)],
                    [(-0.28547054889788165 + 0.20680489437426247j), (0.29507502827971904 - 0.5592674465379496j)],
                ],
            ],
            [
                [
                    [(-0.01798297174585961 + 0j), (-0.028880084059313846 + 0j)],
                    [(0.2669649482095149 - 0.2026616124593085j), (0.07640788446486418 - 0.1525007388784092j)],
                    [(-0.2096095402487515 + 0.20982927610859356j), (-0.05034770249014201 - 0.35899317251494967j)],
                    [(-0.2096095402487515 - 0.20982927610859356j), (-0.05034770249014201 + 0.35899317251494967j)],
                    [(0.2669649482095149 + 0.2026616124593085j), (0.07640788446486418 + 0.1525007388784092j)],
                ],
                [
                    [(-0.31629016930222487 + 0.09141878445147472j), (0.0840269157244478 - 0.2278451576115601j)],
                    [(-0.3937154070135167 + 0.0012154329277485072j), (0.11166970028606955 + 0.16933724732295607j)],
                    [(-0.22921154357071544 + 0.21436798220694214j), (-0.5442687055092084 - 0.14449480545486082j)],
                    [(0.08279715353579359 + 0.27996597557565495j), (-0.36099188112815095 + 0.2817472025646302j)],
                    [(-0.16433037657462246 - 0.016997952016075873j), (-0.013193142795750443 + 0.2607774808134703j)],
                ],
                [
                    [(-0.31629016930222487 - 0.09141878445147472j), (0.0840269157244478 + 0.2278451576115601j)],
                    [(-0.16433037657462246 + 0.016997952016075873j), (-0.013193142795750443 - 0.2607774808134703j)],
                    [(0.08279715353579359 - 0.27996597557565495j), (-0.36099188112815095 - 0.2817472025646302j)],
                    [(-0.22921154357071544 - 0.21436798220694214j), (-0.5442687055092084 + 0.14449480545486082j)],
                    [(-0.3937154070135167 - 0.0012154329277485072j), (0.11166970028606955 - 0.16933724732295607j)],
                ],
            ],
            [
                [
                    [(-0.33722494564964806 + 0.6331297733374868j), (0.06476992306365267 - 0.3209765123232967j)],
                    [(-0.031819893649099845 - 0.588775524164463j), (0.01648725708505064 + 0.3116917598251764j)],
                    [(0.4854547087468472 - 0.041985455279044556j), (0.18097592924355682 + 0.30532267950619557j)],
                    [(-0.18455219959009944 + 0.14893045105194763j), (-0.1566119518571205 + 0.0690667800407272j)],
                    [(-0.30539895726523825 - 0.14046656280125458j), (-0.11740397873743966 - 0.09698659427780451j)],
                ],
                [
                    [(0.15002701443097055 - 0.1361414257347509j), (-0.10207222804295965 + 0.08007759129132314j)],
                    [(-0.28547054889788165 - 0.20680489437426247j), (0.29507502827971904 + 0.5592674465379496j)],
                    [(0.1126063143423013 - 0.08942852456769629j), (-0.12854513980621385 - 0.20594080667332368j)],
                    [(-0.0029959767904444295 + 0.12027419331757805j), (-0.020566397460725624 + 0.5530531435240925j)],
                    [(-0.18003921959357205 - 0.3996014462128971j), (-0.3063952895350434 - 0.1685051170973637j)],
                ],
                [
                    [(0.2005271263434725 - 0.1231926411962631j), (-0.3973498803968057 + 0.13759288495100785j)],
                    [(-0.06924122010565084 + 0.17782477853647177j), (-0.035679750622402445 + 0.20351582099887422j)],
                    [(-0.4481650813442087 - 0.15075233924110076j), (-0.3715685079449428 - 0.5951052215985801j)],
                    [(-0.143430952134378 - 0.06931534573518842j), (0.10082957513158977 + 0.5091140215239713j)],
                    [(0.29169640771724326 - 0.26770247083190224j), (0.03166175835233795 - 0.19816972050616188j)],
                ],
            ],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_3():
    """
    default
    x: tensor-3d
    s = (1, 2)
    """
    np.random.seed(33)
    x_data = np.random.rand(4, 3, 2) * 14 - 7
    res = np.array(
        [
            [[(-2.1106011605803223 + 0j), (-1.4102570552914588 + 0j)]],
            [[(-0.1896058014637081 + 0j), (-6.535134242515676 + 0j)]],
            [[(-3.9832450300951665 + 0j), (-1.9029489718883141 + 0j)]],
            [[(-1.034245071109308 + 0j), (-0.3523255532319931 + 0j)]],
        ]
    )
    obj.run(res=res, x=x_data, s=(1, 2))


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_4():
    """
    default
    x: tensor-3d
    s = (1, 2)
    axes=(0, 2)
    """
    np.random.seed(33)
    x_data = np.random.rand(4, 3, 2) * 14 - 7
    res = np.array(
        [
            [
                [(-2.1106011605803223 + 0j), (-1.4102570552914588 + 0j)],
                [(-2.3013165428159157 + 0j), (1.0544877847674865 + 0j)],
                [(0.38804930856198094 + 0j), (4.797490328295312 + 0j)],
            ]
        ]
    )
    obj.run(res=res, x=x_data, s=(1, 2), axes=(0, 2))


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_5():
    """
    default
    x: tensor-3d
    s = (1, 2)
    axes=(0, 2)
    norm = 'forward'
    """
    np.random.seed(33)
    x_data = np.random.rand(4, 3, 2) * 14 - 7
    res = np.array(
        [
            [
                [(-4.221202321160645 + 0j), (-2.8205141105829177 + 0j)],
                [(-4.602633085631831 + 0j), (2.108975569534973 + 0j)],
                [(0.7760986171239619 + 0j), (9.594980656590623 + 0j)],
            ]
        ]
    )
    obj.run(res=res, x=x_data, s=(1, 2), axes=(0, 2), norm="forward")


@pytest.mark.api_fft_ihfftn_parameters
def test_ihfftn_6():
    """
    default
    x: tensor-3d
    s = (1, 2)
    axes=(0, 2)
    norm = 'ortho'
    """
    np.random.seed(33)
    x_data = np.random.rand(4, 3, 2) * 14 - 7
    res = np.array(
        [
            [
                [(-2.9848407860530863 + 0j), (-1.9944046540255247 + 0j)],
                [(-3.2545530661638313 + 0j), (1.4912709265749404 + 0j)],
                [(0.5487845950378554 + 0j), (6.784675887628981 + 0j)],
            ]
        ]
    )
    obj.run(res=res, x=x_data, s=(1, 2), axes=(0, 2), norm="ortho")
