#!/bin/env python
# -*- coding: utf-8 -*-
# encoding=utf-8 vi:ts=4:sw=4:expandtab:ft=python
"""
test_fftn
"""

from apibase import APIBase
import paddle
import pytest
import numpy as np


class TestFFtn(APIBase):
    """
    test
    """

    def hook(self):
        """
        implement
        """
        self.types = [np.float64, np.float32]
        # self.debug = True
        # self.static = True
        # enable check grad
        self.enable_backward = False
        # self.delta = 1e-5


obj = TestFFtn(paddle.fft.fftn)


@pytest.mark.api_fft_fftn_vartype
def test_fftn_base():
    """
    base
    dtype: float
    """
    np.random.seed(33)
    x = np.random.rand(4, 4)
    res = np.array(
        [
            [
                (7.501306584423414 + 0j),
                (0.31964998090497876 + 1.1171063833691184j),
                (-0.6249497790229205 + 0j),
                (0.31964998090497876 - 1.1171063833691184j),
            ],
            [
                (-1.1557384478971886 - 0.4505820931029272j),
                (0.25859804729780966 - 1.0312981969701076j),
                (-0.8163149404282567 - 0.8431466666670808j),
                (-0.01430736814560174 - 0.8383255115001054j),
            ],
            [
                (0.28907448085882637 + 0j),
                (-1.2136633622924302 - 1.6828366185546986j),
                (2.0542829338657356 + 0j),
                (-1.2136633622924302 + 1.6828366185546986j),
            ],
            [
                (-1.1557384478971886 + 0.4505820931029272j),
                (-0.01430736814560174 + 0.8383255115001054j),
                (-0.8163149404282567 + 0.8431466666670808j),
                (0.25859804729780966 + 1.0312981969701076j),
            ],
        ]
    )
    obj.base(res=res, x=x)


@pytest.mark.api_fft_fftn_parameters
def test_fftn_0():
    """
    default
    """
    x_data = np.mgrid[:2, :4, :2][1]
    res = np.array(
        [
            [
                [24.0 + 0.0j, 0.0 + 0.0j],
                [-8.0 + 8.0j, 0.0 + 0.0j],
                [-8.0 + 0.0j, 0.0 + 0.0j],
                [-8.0 - 8.0j, 0.0 + 0.0j],
            ],
            [[0.0 + 0.0j, 0.0 + 0.0j], [0.0 + 0.0j, 0.0 + 0.0j], [0.0 + 0.0j, 0.0 + 0.0j], [0.0 + 0.0j, 0.0 + 0.0j]],
        ]
    )
    obj.run(res=res, x=x_data)


@pytest.mark.api_fft_fftn_parameters
def test_fftn_1():
    """
    s = [1]
    """
    x_data = np.mgrid[:4, :4, :6][1]
    res = np.array(
        [
            [[0.0 + 0.0j], [1.0 + 0.0j], [2.0 + 0.0j], [3.0 + 0.0j]],
            [[0.0 + 0.0j], [1.0 + 0.0j], [2.0 + 0.0j], [3.0 + 0.0j]],
            [[0.0 + 0.0j], [1.0 + 0.0j], [2.0 + 0.0j], [3.0 + 0.0j]],
            [[0.0 + 0.0j], [1.0 + 0.0j], [2.0 + 0.0j], [3.0 + 0.0j]],
        ]
    )
    obj.run(res=res, x=x_data, s=[1])


@pytest.mark.api_fft_fftn_parameters
def test_fftn_2():
    """
    s = [2, 4]
    """
    x_data = np.mgrid[:4, :4, :6][1]
    res = np.array(
        [
            [[4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j], [-4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j]],
            [[4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j], [-4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j]],
            [[4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j], [-4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j]],
            [[4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j], [-4.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j]],
        ]
    )
    obj.run(res=res, x=x_data, s=[2, 4])


@pytest.mark.api_fft_fftn_parameters
def test_fftn_3():
    """
    x: tensor-4d
    s = [2, 4]
    axes = [0, 1]
    """
    x_data = np.mgrid[:4, :4, :6, :2][1]
    res = np.array(
        [
            [
                [
                    [12.0 + 0.0j, 12.0 + 0.0j],
                    [12.0 + 0.0j, 12.0 + 0.0j],
                    [12.0 + 0.0j, 12.0 + 0.0j],
                    [12.0 + 0.0j, 12.0 + 0.0j],
                    [12.0 + 0.0j, 12.0 + 0.0j],
                    [12.0 + 0.0j, 12.0 + 0.0j],
                ],
                [
                    [-4.0 + 4.0j, -4.0 + 4.0j],
                    [-4.0 + 4.0j, -4.0 + 4.0j],
                    [-4.0 + 4.0j, -4.0 + 4.0j],
                    [-4.0 + 4.0j, -4.0 + 4.0j],
                    [-4.0 + 4.0j, -4.0 + 4.0j],
                    [-4.0 + 4.0j, -4.0 + 4.0j],
                ],
                [
                    [-4.0 + 0.0j, -4.0 + 0.0j],
                    [-4.0 + 0.0j, -4.0 + 0.0j],
                    [-4.0 + 0.0j, -4.0 + 0.0j],
                    [-4.0 + 0.0j, -4.0 + 0.0j],
                    [-4.0 + 0.0j, -4.0 + 0.0j],
                    [-4.0 + 0.0j, -4.0 + 0.0j],
                ],
                [
                    [-4.0 - 4.0j, -4.0 - 4.0j],
                    [-4.0 - 4.0j, -4.0 - 4.0j],
                    [-4.0 - 4.0j, -4.0 - 4.0j],
                    [-4.0 - 4.0j, -4.0 - 4.0j],
                    [-4.0 - 4.0j, -4.0 - 4.0j],
                    [-4.0 - 4.0j, -4.0 - 4.0j],
                ],
            ],
            [
                [
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                ],
                [
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                ],
                [
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                ],
                [
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                    [0.0 + 0.0j, 0.0 + 0.0j],
                ],
            ],
        ]
    )
    obj.run(res=res, x=x_data, s=[2, 4], axes=(0, 1))


@pytest.mark.api_fft_fftn_parameters
def test_fftn_4():
    """
    x: tensor-3d, complex
    norm = forward
    """
    obj.dtype = None
    obj.types = [np.complex128, np.complex64]
    x_data = np.exp(3j * np.pi * np.arange(12).reshape(3, 4) / 7)
    res = np.array(
        [
            [
                (0.05653732782884216 + 0.11740097094161484j),
                (0.23965806500701967 - 0.6849034001579901j),
                (0.09362415015489464 - 0.045087014422022065j),
                (0.07717007964338304 + 0.027002978755112927j),
            ],
            [
                (-0.03193791568517135 + 0.04684431866429907j),
                (0.31021471728433647 - 0.05869579130472474j),
                (0.037357097555105634 + 0.025469637855294255j),
                (0.0066134273660666265 + 0.03495280419670793j),
            ],
            [
                (-0.10008384609488043 - 0.007500247398075879j),
                (0.3645592833467119 + 0.42362557272956336j),
                (-0.005981247710000179 + 0.07981420391766882j),
                (-0.04773113869630824 + 0.04107596622255161j),
            ],
        ]
    )
    obj.run(res=res, x=x_data, norm="forward")


@pytest.mark.api_fft_fftn_parameters
def test_fftn_5():
    """
    x: tensor-3d, complex
    norm = ortho
    """
    obj.dtype = None
    obj.types = [np.complex128, np.complex64]
    x_data = np.exp(3j * np.pi * np.arange(12).reshape(3, 4) / 7)
    res = np.array(
        [
            [
                (0.1958510486474649 + 0.40668889305758865j),
                (0.8301998900716059 - 2.372574974700634j),
                (0.3243235697674702 - 0.15618599948106587j),
                (0.2673249975329523 + 0.09354106231911707j),
            ],
            [
                (-0.11063618530913556 + 0.1622734799450261j),
                (1.074615303184172 - 0.20332818546048556j),
                (0.12940878197750005 + 0.08822941363149855j),
                (0.022909584420387707 + 0.12108006547140968j),
            ],
            [
                (-0.3467006129064738 - 0.02598161912560737j),
                (1.2628704022548072 + 1.467482030706137j),
                (-0.0207196498527506 + 0.2764845127021307j),
                (-0.16534551465024572 + 0.14229132093488484j),
            ],
        ]
    )
    obj.run(res=res, x=x_data, norm="ortho")
